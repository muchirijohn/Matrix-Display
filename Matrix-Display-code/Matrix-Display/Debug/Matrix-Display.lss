
Matrix-Display.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000120  00800100  0000365e  000036f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000365e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000106  00800220  00800220  00003812  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003812  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003844  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00003884  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000099dc  00000000  00000000  0000393c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000936  00000000  00000000  0000d318  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000056c1  00000000  00000000  0000dc4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000418  00000000  00000000  00013310  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000641  00000000  00000000  00013728  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0002205f  00000000  00000000  00013d69  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00005de0  00000000  00000000  00035dc8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 22 01 	jmp	0x244	; 0x244 <__ctors_end>
       4:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
       8:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
       c:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      10:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      14:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      18:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      1c:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      20:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      24:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      28:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      2c:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      30:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      34:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      38:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      3c:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      40:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      44:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      48:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      4c:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      50:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      54:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      58:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      5c:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      60:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      64:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 00       	nop
      6c:	00 00       	nop
      6e:	00 5f       	subi	r16, 0xF0	; 240
      70:	00 00       	nop
      72:	00 07       	cpc	r16, r16
      74:	00 07       	cpc	r16, r16
      76:	00 14       	cp	r0, r0
      78:	7f 14       	cp	r7, r15
      7a:	7f 14       	cp	r7, r15
      7c:	24 2a       	or	r2, r20
      7e:	7f 2a       	or	r7, r31
      80:	12 23       	and	r17, r18
      82:	13 08       	sbc	r1, r3
      84:	64 62       	ori	r22, 0x24	; 36
      86:	36 49       	sbci	r19, 0x96	; 150
      88:	56 20       	and	r5, r6
      8a:	50 00       	.word	0x0050	; ????
      8c:	08 07       	cpc	r16, r24
      8e:	03 00       	.word	0x0003	; ????
      90:	00 1c       	adc	r0, r0
      92:	22 41       	sbci	r18, 0x12	; 18
      94:	00 00       	nop
      96:	41 22       	and	r4, r17
      98:	1c 00       	.word	0x001c	; ????
      9a:	2a 1c       	adc	r2, r10
      9c:	7f 1c       	adc	r7, r15
      9e:	2a 08       	sbc	r2, r10
      a0:	08 3e       	cpi	r16, 0xE8	; 232
      a2:	08 08       	sbc	r0, r8
      a4:	00 80       	ld	r0, Z
      a6:	70 30       	cpi	r23, 0x00	; 0
      a8:	00 08       	sbc	r0, r0
      aa:	08 08       	sbc	r0, r8
      ac:	08 08       	sbc	r0, r8
      ae:	00 00       	nop
      b0:	60 60       	ori	r22, 0x00	; 0
      b2:	00 20       	and	r0, r0
      b4:	10 08       	sbc	r1, r0
      b6:	04 02       	muls	r16, r20
      b8:	3e 51       	subi	r19, 0x1E	; 30
      ba:	49 45       	sbci	r20, 0x59	; 89
      bc:	3e 00       	.word	0x003e	; ????
      be:	42 7f       	andi	r20, 0xF2	; 242
      c0:	40 00       	.word	0x0040	; ????
      c2:	72 49       	sbci	r23, 0x92	; 146
      c4:	49 49       	sbci	r20, 0x99	; 153
      c6:	46 21       	and	r20, r6
      c8:	41 49       	sbci	r20, 0x91	; 145
      ca:	4d 33       	cpi	r20, 0x3D	; 61
      cc:	18 14       	cp	r1, r8
      ce:	12 7f       	andi	r17, 0xF2	; 242
      d0:	10 27       	eor	r17, r16
      d2:	45 45       	sbci	r20, 0x55	; 85
      d4:	45 39       	cpi	r20, 0x95	; 149
      d6:	3c 4a       	sbci	r19, 0xAC	; 172
      d8:	49 49       	sbci	r20, 0x99	; 153
      da:	31 41       	sbci	r19, 0x11	; 17
      dc:	21 11       	cpse	r18, r1
      de:	09 07       	cpc	r16, r25
      e0:	36 49       	sbci	r19, 0x96	; 150
      e2:	49 49       	sbci	r20, 0x99	; 153
      e4:	36 46       	sbci	r19, 0x66	; 102
      e6:	49 49       	sbci	r20, 0x99	; 153
      e8:	29 1e       	adc	r2, r25
      ea:	00 00       	nop
      ec:	14 00       	.word	0x0014	; ????
      ee:	00 00       	nop
      f0:	40 34       	cpi	r20, 0x40	; 64
      f2:	00 00       	nop
      f4:	00 08       	sbc	r0, r0
      f6:	14 22       	and	r1, r20
      f8:	41 14       	cp	r4, r1
      fa:	14 14       	cp	r1, r4
      fc:	14 14       	cp	r1, r4
      fe:	00 41       	sbci	r16, 0x10	; 16
     100:	22 14       	cp	r2, r2
     102:	08 02       	muls	r16, r24
     104:	01 59       	subi	r16, 0x91	; 145
     106:	09 06       	cpc	r0, r25
     108:	3e 41       	sbci	r19, 0x1E	; 30
     10a:	5d 59       	subi	r21, 0x9D	; 157
     10c:	4e 7c       	andi	r20, 0xCE	; 206
     10e:	12 11       	cpse	r17, r2
     110:	12 7c       	andi	r17, 0xC2	; 194
     112:	7f 49       	sbci	r23, 0x9F	; 159
     114:	49 49       	sbci	r20, 0x99	; 153
     116:	36 3e       	cpi	r19, 0xE6	; 230
     118:	41 41       	sbci	r20, 0x11	; 17
     11a:	41 22       	and	r4, r17
     11c:	7f 41       	sbci	r23, 0x1F	; 31
     11e:	41 41       	sbci	r20, 0x11	; 17
     120:	3e 7f       	andi	r19, 0xFE	; 254
     122:	49 49       	sbci	r20, 0x99	; 153
     124:	49 41       	sbci	r20, 0x19	; 25
     126:	7f 09       	sbc	r23, r15
     128:	09 09       	sbc	r16, r9
     12a:	01 3e       	cpi	r16, 0xE1	; 225
     12c:	41 41       	sbci	r20, 0x11	; 17
     12e:	51 73       	andi	r21, 0x31	; 49
     130:	7f 08       	sbc	r7, r15
     132:	08 08       	sbc	r0, r8
     134:	7f 00       	.word	0x007f	; ????
     136:	41 7f       	andi	r20, 0xF1	; 241
     138:	41 00       	.word	0x0041	; ????
     13a:	20 40       	sbci	r18, 0x00	; 0
     13c:	41 3f       	cpi	r20, 0xF1	; 241
     13e:	01 7f       	andi	r16, 0xF1	; 241
     140:	08 14       	cp	r0, r8
     142:	22 41       	sbci	r18, 0x12	; 18
     144:	7f 40       	sbci	r23, 0x0F	; 15
     146:	40 40       	sbci	r20, 0x00	; 0
     148:	40 7f       	andi	r20, 0xF0	; 240
     14a:	02 1c       	adc	r0, r2
     14c:	02 7f       	andi	r16, 0xF2	; 242
     14e:	7f 04       	cpc	r7, r15
     150:	08 10       	cpse	r0, r8
     152:	7f 3e       	cpi	r23, 0xEF	; 239
     154:	41 41       	sbci	r20, 0x11	; 17
     156:	41 3e       	cpi	r20, 0xE1	; 225
     158:	7f 09       	sbc	r23, r15
     15a:	09 09       	sbc	r16, r9
     15c:	06 3e       	cpi	r16, 0xE6	; 230
     15e:	41 51       	subi	r20, 0x11	; 17
     160:	21 5e       	subi	r18, 0xE1	; 225
     162:	7f 09       	sbc	r23, r15
     164:	19 29       	or	r17, r9
     166:	46 26       	eor	r4, r22
     168:	49 49       	sbci	r20, 0x99	; 153
     16a:	49 32       	cpi	r20, 0x29	; 41
     16c:	03 01       	movw	r0, r6
     16e:	7f 01       	movw	r14, r30
     170:	03 3f       	cpi	r16, 0xF3	; 243
     172:	40 40       	sbci	r20, 0x00	; 0
     174:	40 3f       	cpi	r20, 0xF0	; 240
     176:	1f 20       	and	r1, r15
     178:	40 20       	and	r4, r0
     17a:	1f 3f       	cpi	r17, 0xFF	; 255
     17c:	40 38       	cpi	r20, 0x80	; 128
     17e:	40 3f       	cpi	r20, 0xF0	; 240
     180:	63 14       	cp	r6, r3
     182:	08 14       	cp	r0, r8
     184:	63 03       	mulsu	r22, r19
     186:	04 78       	andi	r16, 0x84	; 132
     188:	04 03       	mulsu	r16, r20
     18a:	61 59       	subi	r22, 0x91	; 145
     18c:	49 4d       	sbci	r20, 0xD9	; 217
     18e:	43 00       	.word	0x0043	; ????
     190:	7f 41       	sbci	r23, 0x1F	; 31
     192:	41 41       	sbci	r20, 0x11	; 17
     194:	02 04       	cpc	r0, r2
     196:	08 10       	cpse	r0, r8
     198:	20 00       	.word	0x0020	; ????
     19a:	41 41       	sbci	r20, 0x11	; 17
     19c:	41 7f       	andi	r20, 0xF1	; 241
     19e:	04 02       	muls	r16, r20
     1a0:	01 02       	muls	r16, r17
     1a2:	04 40       	sbci	r16, 0x04	; 4
     1a4:	40 40       	sbci	r20, 0x00	; 0
     1a6:	40 40       	sbci	r20, 0x00	; 0
     1a8:	00 03       	mulsu	r16, r16
     1aa:	07 08       	sbc	r0, r7
     1ac:	00 20       	and	r0, r0
     1ae:	54 54       	subi	r21, 0x44	; 68
     1b0:	78 40       	sbci	r23, 0x08	; 8
     1b2:	7f 28       	or	r7, r15
     1b4:	44 44       	sbci	r20, 0x44	; 68
     1b6:	38 38       	cpi	r19, 0x88	; 136
     1b8:	44 44       	sbci	r20, 0x44	; 68
     1ba:	44 28       	or	r4, r4
     1bc:	38 44       	sbci	r19, 0x48	; 72
     1be:	44 28       	or	r4, r4
     1c0:	7f 38       	cpi	r23, 0x8F	; 143
     1c2:	54 54       	subi	r21, 0x44	; 68
     1c4:	54 18       	sub	r5, r4
     1c6:	00 08       	sbc	r0, r0
     1c8:	7e 09       	sbc	r23, r14
     1ca:	02 18       	sub	r0, r2
     1cc:	a4 a4       	ldd	r10, Z+44	; 0x2c
     1ce:	9c 78       	andi	r25, 0x8C	; 140
     1d0:	7f 08       	sbc	r7, r15
     1d2:	04 04       	cpc	r0, r4
     1d4:	78 00       	.word	0x0078	; ????
     1d6:	44 7d       	andi	r20, 0xD4	; 212
     1d8:	40 00       	.word	0x0040	; ????
     1da:	20 40       	sbci	r18, 0x00	; 0
     1dc:	40 3d       	cpi	r20, 0xD0	; 208
     1de:	00 7f       	andi	r16, 0xF0	; 240
     1e0:	10 28       	or	r1, r0
     1e2:	44 00       	.word	0x0044	; ????
     1e4:	00 41       	sbci	r16, 0x10	; 16
     1e6:	7f 40       	sbci	r23, 0x0F	; 15
     1e8:	00 7c       	andi	r16, 0xC0	; 192
     1ea:	04 78       	andi	r16, 0x84	; 132
     1ec:	04 78       	andi	r16, 0x84	; 132
     1ee:	7c 08       	sbc	r7, r12
     1f0:	04 04       	cpc	r0, r4
     1f2:	78 38       	cpi	r23, 0x88	; 136
     1f4:	44 44       	sbci	r20, 0x44	; 68
     1f6:	44 38       	cpi	r20, 0x84	; 132
     1f8:	fc 18       	sub	r15, r12
     1fa:	24 24       	eor	r2, r4
     1fc:	18 18       	sub	r1, r8
     1fe:	24 24       	eor	r2, r4
     200:	18 fc       	.word	0xfc18	; ????
     202:	7c 08       	sbc	r7, r12
     204:	04 04       	cpc	r0, r4
     206:	08 48       	sbci	r16, 0x88	; 136
     208:	54 54       	subi	r21, 0x44	; 68
     20a:	54 24       	eor	r5, r4
     20c:	04 04       	cpc	r0, r4
     20e:	3f 44       	sbci	r19, 0x4F	; 79
     210:	24 3c       	cpi	r18, 0xC4	; 196
     212:	40 40       	sbci	r20, 0x00	; 0
     214:	20 7c       	andi	r18, 0xC0	; 192
     216:	1c 20       	and	r1, r12
     218:	40 20       	and	r4, r0
     21a:	1c 3c       	cpi	r17, 0xCC	; 204
     21c:	40 30       	cpi	r20, 0x00	; 0
     21e:	40 3c       	cpi	r20, 0xC0	; 192
     220:	44 28       	or	r4, r4
     222:	10 28       	or	r1, r0
     224:	44 4c       	sbci	r20, 0xC4	; 196
     226:	90 90 90 7c 	lds	r9, 0x7C90	; 0x807c90 <__bss_end+0x796a>
     22a:	44 64       	ori	r20, 0x44	; 68
     22c:	54 4c       	sbci	r21, 0xC4	; 196
     22e:	44 00       	.word	0x0044	; ????
     230:	08 36       	cpi	r16, 0x68	; 104
     232:	41 00       	.word	0x0041	; ????
     234:	00 00       	nop
     236:	77 00       	.word	0x0077	; ????
     238:	00 00       	nop
     23a:	41 36       	cpi	r20, 0x61	; 97
     23c:	08 00       	.word	0x0008	; ????
     23e:	02 01       	movw	r0, r4
     240:	02 04       	cpc	r0, r2
     242:	02 00       	.word	0x0002	; ????

00000244 <__ctors_end>:
     244:	11 24       	eor	r1, r1
     246:	1f be       	out	0x3f, r1	; 63
     248:	cf ef       	ldi	r28, 0xFF	; 255
     24a:	d8 e0       	ldi	r29, 0x08	; 8
     24c:	de bf       	out	0x3e, r29	; 62
     24e:	cd bf       	out	0x3d, r28	; 61

00000250 <__do_copy_data>:
     250:	12 e0       	ldi	r17, 0x02	; 2
     252:	a0 e0       	ldi	r26, 0x00	; 0
     254:	b1 e0       	ldi	r27, 0x01	; 1
     256:	ee e5       	ldi	r30, 0x5E	; 94
     258:	f6 e3       	ldi	r31, 0x36	; 54
     25a:	02 c0       	rjmp	.+4      	; 0x260 <__do_copy_data+0x10>
     25c:	05 90       	lpm	r0, Z+
     25e:	0d 92       	st	X+, r0
     260:	a0 32       	cpi	r26, 0x20	; 32
     262:	b1 07       	cpc	r27, r17
     264:	d9 f7       	brne	.-10     	; 0x25c <__do_copy_data+0xc>

00000266 <__do_clear_bss>:
     266:	23 e0       	ldi	r18, 0x03	; 3
     268:	a0 e2       	ldi	r26, 0x20	; 32
     26a:	b2 e0       	ldi	r27, 0x02	; 2
     26c:	01 c0       	rjmp	.+2      	; 0x270 <.do_clear_bss_start>

0000026e <.do_clear_bss_loop>:
     26e:	1d 92       	st	X+, r1

00000270 <.do_clear_bss_start>:
     270:	a6 32       	cpi	r26, 0x26	; 38
     272:	b2 07       	cpc	r27, r18
     274:	e1 f7       	brne	.-8      	; 0x26e <.do_clear_bss_loop>
     276:	0e 94 8d 02 	call	0x51a	; 0x51a <main>
     27a:	0c 94 2d 1b 	jmp	0x365a	; 0x365a <_exit>

0000027e <__bad_interrupt>:
     27e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000282 <DisplayBuffer>:
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     282:	cf 92       	push	r12
     284:	df 92       	push	r13
     286:	ef 92       	push	r14
     288:	ff 92       	push	r15
     28a:	1f 93       	push	r17
     28c:	cf 93       	push	r28
     28e:	df 93       	push	r29
     290:	ac 01       	movw	r20, r24
     292:	84 e0       	ldi	r24, 0x04	; 4
     294:	e8 2e       	mov	r14, r24
     296:	81 e0       	ldi	r24, 0x01	; 1
     298:	f8 2e       	mov	r15, r24
     29a:	c1 2c       	mov	r12, r1
     29c:	d1 2c       	mov	r13, r1
     29e:	61 e0       	ldi	r22, 0x01	; 1
     2a0:	70 e0       	ldi	r23, 0x00	; 0
     2a2:	26 2f       	mov	r18, r22
     2a4:	0c 2c       	mov	r0, r12
     2a6:	01 c0       	rjmp	.+2      	; 0x2aa <DisplayBuffer+0x28>
     2a8:	22 0f       	add	r18, r18
     2aa:	0a 94       	dec	r0
     2ac:	ea f7       	brpl	.-6      	; 0x2a8 <DisplayBuffer+0x26>
     2ae:	9f e3       	ldi	r25, 0x3F	; 63
     2b0:	5a c0       	rjmp	.+180    	; 0x366 <DisplayBuffer+0xe4>
     2b2:	59 98       	cbi	0x0b, 1	; 11
     2b4:	5b 9a       	sbi	0x0b, 3	; 11
     2b6:	5b 98       	cbi	0x0b, 3	; 11
     2b8:	8f ef       	ldi	r24, 0xFF	; 255
     2ba:	89 0f       	add	r24, r25
     2bc:	fa 01       	movw	r30, r20
     2be:	e8 0f       	add	r30, r24
     2c0:	f1 1d       	adc	r31, r1
     2c2:	80 81       	ld	r24, Z
     2c4:	82 23       	and	r24, r18
     2c6:	09 f0       	breq	.+2      	; 0x2ca <DisplayBuffer+0x48>
     2c8:	ed c0       	rjmp	.+474    	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
     2ca:	59 98       	cbi	0x0b, 1	; 11
     2cc:	5b 9a       	sbi	0x0b, 3	; 11
     2ce:	5b 98       	cbi	0x0b, 3	; 11
     2d0:	8e ef       	ldi	r24, 0xFE	; 254
     2d2:	89 0f       	add	r24, r25
     2d4:	fa 01       	movw	r30, r20
     2d6:	e8 0f       	add	r30, r24
     2d8:	f1 1d       	adc	r31, r1
     2da:	80 81       	ld	r24, Z
     2dc:	82 23       	and	r24, r18
     2de:	09 f0       	breq	.+2      	; 0x2e2 <DisplayBuffer+0x60>
     2e0:	df c0       	rjmp	.+446    	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
     2e2:	59 98       	cbi	0x0b, 1	; 11
     2e4:	5b 9a       	sbi	0x0b, 3	; 11
     2e6:	5b 98       	cbi	0x0b, 3	; 11
     2e8:	8d ef       	ldi	r24, 0xFD	; 253
     2ea:	89 0f       	add	r24, r25
     2ec:	fa 01       	movw	r30, r20
     2ee:	e8 0f       	add	r30, r24
     2f0:	f1 1d       	adc	r31, r1
     2f2:	80 81       	ld	r24, Z
     2f4:	82 23       	and	r24, r18
     2f6:	09 f0       	breq	.+2      	; 0x2fa <DisplayBuffer+0x78>
     2f8:	d1 c0       	rjmp	.+418    	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
     2fa:	59 98       	cbi	0x0b, 1	; 11
     2fc:	5b 9a       	sbi	0x0b, 3	; 11
     2fe:	5b 98       	cbi	0x0b, 3	; 11
     300:	8c ef       	ldi	r24, 0xFC	; 252
     302:	89 0f       	add	r24, r25
     304:	fa 01       	movw	r30, r20
     306:	e8 0f       	add	r30, r24
     308:	f1 1d       	adc	r31, r1
     30a:	80 81       	ld	r24, Z
     30c:	82 23       	and	r24, r18
     30e:	09 f0       	breq	.+2      	; 0x312 <DisplayBuffer+0x90>
     310:	c3 c0       	rjmp	.+390    	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
     312:	59 98       	cbi	0x0b, 1	; 11
     314:	5b 9a       	sbi	0x0b, 3	; 11
     316:	5b 98       	cbi	0x0b, 3	; 11
     318:	8b ef       	ldi	r24, 0xFB	; 251
     31a:	89 0f       	add	r24, r25
     31c:	fa 01       	movw	r30, r20
     31e:	e8 0f       	add	r30, r24
     320:	f1 1d       	adc	r31, r1
     322:	80 81       	ld	r24, Z
     324:	82 23       	and	r24, r18
     326:	09 f0       	breq	.+2      	; 0x32a <DisplayBuffer+0xa8>
     328:	b5 c0       	rjmp	.+362    	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>
     32a:	59 98       	cbi	0x0b, 1	; 11
     32c:	5b 9a       	sbi	0x0b, 3	; 11
     32e:	5b 98       	cbi	0x0b, 3	; 11
     330:	8a ef       	ldi	r24, 0xFA	; 250
     332:	89 0f       	add	r24, r25
     334:	fa 01       	movw	r30, r20
     336:	e8 0f       	add	r30, r24
     338:	f1 1d       	adc	r31, r1
     33a:	80 81       	ld	r24, Z
     33c:	82 23       	and	r24, r18
     33e:	09 f0       	breq	.+2      	; 0x342 <DisplayBuffer+0xc0>
     340:	a7 c0       	rjmp	.+334    	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
     342:	59 98       	cbi	0x0b, 1	; 11
     344:	5b 9a       	sbi	0x0b, 3	; 11
     346:	5b 98       	cbi	0x0b, 3	; 11
     348:	89 ef       	ldi	r24, 0xF9	; 249
     34a:	89 0f       	add	r24, r25
     34c:	fa 01       	movw	r30, r20
     34e:	e8 0f       	add	r30, r24
     350:	f1 1d       	adc	r31, r1
     352:	80 81       	ld	r24, Z
     354:	82 23       	and	r24, r18
     356:	89 f4       	brne	.+34     	; 0x37a <DisplayBuffer+0xf8>
     358:	59 98       	cbi	0x0b, 1	; 11
     35a:	5b 9a       	sbi	0x0b, 3	; 11
     35c:	5b 98       	cbi	0x0b, 3	; 11
     35e:	98 50       	subi	r25, 0x08	; 8
     360:	5a 9a       	sbi	0x0b, 2	; 11
     362:	9f 3f       	cpi	r25, 0xFF	; 255
     364:	89 f0       	breq	.+34     	; 0x388 <DisplayBuffer+0x106>
     366:	5a 98       	cbi	0x0b, 2	; 11
     368:	fa 01       	movw	r30, r20
     36a:	e9 0f       	add	r30, r25
     36c:	f1 1d       	adc	r31, r1
     36e:	80 81       	ld	r24, Z
     370:	82 23       	and	r24, r18
     372:	09 f4       	brne	.+2      	; 0x376 <DisplayBuffer+0xf4>
     374:	9e cf       	rjmp	.-196    	; 0x2b2 <DisplayBuffer+0x30>
     376:	59 9a       	sbi	0x0b, 1	; 11
     378:	9d cf       	rjmp	.-198    	; 0x2b4 <DisplayBuffer+0x32>
     37a:	59 9a       	sbi	0x0b, 1	; 11
     37c:	5b 9a       	sbi	0x0b, 3	; 11
     37e:	5b 98       	cbi	0x0b, 3	; 11
     380:	98 50       	subi	r25, 0x08	; 8
     382:	5a 9a       	sbi	0x0b, 2	; 11
     384:	9f 3f       	cpi	r25, 0xFF	; 255
     386:	79 f7       	brne	.-34     	; 0x366 <DisplayBuffer+0xe4>
     388:	c4 e0       	ldi	r28, 0x04	; 4
     38a:	d1 e0       	ldi	r29, 0x01	; 1
     38c:	e9 91       	ld	r30, Y+
     38e:	ee 23       	and	r30, r30
     390:	c9 f0       	breq	.+50     	; 0x3c4 <DisplayBuffer+0x142>
     392:	ec 3c       	cpi	r30, 0xCC	; 204
     394:	d8 f7       	brcc	.-10     	; 0x38c <DisplayBuffer+0x10a>
     396:	27 e0       	ldi	r18, 0x07	; 7
     398:	e2 9f       	mul	r30, r18
     39a:	f0 01       	movw	r30, r0
     39c:	11 24       	eor	r1, r1
     39e:	ec 5a       	subi	r30, 0xAC	; 172
     3a0:	fe 4f       	sbci	r31, 0xFE	; 254
     3a2:	a2 81       	ldd	r26, Z+2	; 0x02
     3a4:	b3 81       	ldd	r27, Z+3	; 0x03
     3a6:	3c 91       	ld	r19, X
     3a8:	cb 01       	movw	r24, r22
     3aa:	06 80       	ldd	r0, Z+6	; 0x06
     3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <DisplayBuffer+0x130>
     3ae:	88 0f       	add	r24, r24
     3b0:	99 1f       	adc	r25, r25
     3b2:	0a 94       	dec	r0
     3b4:	e2 f7       	brpl	.-8      	; 0x3ae <DisplayBuffer+0x12c>
     3b6:	28 2f       	mov	r18, r24
     3b8:	20 95       	com	r18
     3ba:	23 23       	and	r18, r19
     3bc:	2c 93       	st	X, r18
     3be:	e9 91       	ld	r30, Y+
     3c0:	e1 11       	cpse	r30, r1
     3c2:	e7 cf       	rjmp	.-50     	; 0x392 <DisplayBuffer+0x110>
     3c4:	d7 01       	movw	r26, r14
     3c6:	ed 91       	ld	r30, X+
     3c8:	7d 01       	movw	r14, r26
     3ca:	ec 3c       	cpi	r30, 0xCC	; 204
     3cc:	08 f4       	brcc	.+2      	; 0x3d0 <DisplayBuffer+0x14e>
     3ce:	6c c0       	rjmp	.+216    	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
     3d0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     3d4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     3d8:	97 fd       	sbrc	r25, 7
     3da:	08 c0       	rjmp	.+16     	; 0x3ec <DisplayBuffer+0x16a>
     3dc:	ef e9       	ldi	r30, 0x9F	; 159
     3de:	ff e0       	ldi	r31, 0x0F	; 15
     3e0:	31 97       	sbiw	r30, 0x01	; 1
     3e2:	f1 f7       	brne	.-4      	; 0x3e0 <DisplayBuffer+0x15e>
     3e4:	00 c0       	rjmp	.+0      	; 0x3e6 <DisplayBuffer+0x164>
     3e6:	00 00       	nop
     3e8:	01 97       	sbiw	r24, 0x01	; 1
     3ea:	c0 f7       	brcc	.-16     	; 0x3dc <DisplayBuffer+0x15a>
     3ec:	c4 e0       	ldi	r28, 0x04	; 4
     3ee:	d1 e0       	ldi	r29, 0x01	; 1
     3f0:	e9 91       	ld	r30, Y+
     3f2:	ee 23       	and	r30, r30
     3f4:	c9 f0       	breq	.+50     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
     3f6:	ec 3c       	cpi	r30, 0xCC	; 204
     3f8:	d8 f7       	brcc	.-10     	; 0x3f0 <DisplayBuffer+0x16e>
     3fa:	27 e0       	ldi	r18, 0x07	; 7
     3fc:	e2 9f       	mul	r30, r18
     3fe:	f0 01       	movw	r30, r0
     400:	11 24       	eor	r1, r1
     402:	ec 5a       	subi	r30, 0xAC	; 172
     404:	fe 4f       	sbci	r31, 0xFE	; 254
     406:	a2 81       	ldd	r26, Z+2	; 0x02
     408:	b3 81       	ldd	r27, Z+3	; 0x03
     40a:	3c 91       	ld	r19, X
     40c:	cb 01       	movw	r24, r22
     40e:	06 80       	ldd	r0, Z+6	; 0x06
     410:	02 c0       	rjmp	.+4      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
     412:	88 0f       	add	r24, r24
     414:	99 1f       	adc	r25, r25
     416:	0a 94       	dec	r0
     418:	e2 f7       	brpl	.-8      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
     41a:	28 2f       	mov	r18, r24
     41c:	20 95       	com	r18
     41e:	23 23       	and	r18, r19
     420:	2c 93       	st	X, r18
     422:	e9 91       	ld	r30, Y+
     424:	e1 11       	cpse	r30, r1
     426:	e7 cf       	rjmp	.-50     	; 0x3f6 <DisplayBuffer+0x174>
     428:	89 e0       	ldi	r24, 0x09	; 9
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	5a 98       	cbi	0x0b, 2	; 11
     42e:	59 98       	cbi	0x0b, 1	; 11
     430:	5b 9a       	sbi	0x0b, 3	; 11
     432:	5b 98       	cbi	0x0b, 3	; 11
     434:	59 98       	cbi	0x0b, 1	; 11
     436:	5b 9a       	sbi	0x0b, 3	; 11
     438:	5b 98       	cbi	0x0b, 3	; 11
     43a:	59 98       	cbi	0x0b, 1	; 11
     43c:	5b 9a       	sbi	0x0b, 3	; 11
     43e:	5b 98       	cbi	0x0b, 3	; 11
     440:	59 98       	cbi	0x0b, 1	; 11
     442:	5b 9a       	sbi	0x0b, 3	; 11
     444:	5b 98       	cbi	0x0b, 3	; 11
     446:	59 98       	cbi	0x0b, 1	; 11
     448:	5b 9a       	sbi	0x0b, 3	; 11
     44a:	5b 98       	cbi	0x0b, 3	; 11
     44c:	59 98       	cbi	0x0b, 1	; 11
     44e:	5b 9a       	sbi	0x0b, 3	; 11
     450:	5b 98       	cbi	0x0b, 3	; 11
     452:	59 98       	cbi	0x0b, 1	; 11
     454:	5b 9a       	sbi	0x0b, 3	; 11
     456:	5b 98       	cbi	0x0b, 3	; 11
     458:	59 98       	cbi	0x0b, 1	; 11
     45a:	5b 9a       	sbi	0x0b, 3	; 11
     45c:	5b 98       	cbi	0x0b, 3	; 11
     45e:	5a 9a       	sbi	0x0b, 2	; 11
     460:	01 97       	sbiw	r24, 0x01	; 1
     462:	21 f7       	brne	.-56     	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
     464:	9f ef       	ldi	r25, 0xFF	; 255
     466:	c9 1a       	sub	r12, r25
     468:	d9 0a       	sbc	r13, r25
     46a:	a7 e0       	ldi	r26, 0x07	; 7
     46c:	ca 16       	cp	r12, r26
     46e:	d1 04       	cpc	r13, r1
     470:	09 f0       	breq	.+2      	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
     472:	17 cf       	rjmp	.-466    	; 0x2a2 <DisplayBuffer+0x20>
     474:	81 e0       	ldi	r24, 0x01	; 1
     476:	90 e0       	ldi	r25, 0x00	; 0
     478:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     47c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     480:	df 91       	pop	r29
     482:	cf 91       	pop	r28
     484:	1f 91       	pop	r17
     486:	ff 90       	pop	r15
     488:	ef 90       	pop	r14
     48a:	df 90       	pop	r13
     48c:	cf 90       	pop	r12
     48e:	08 95       	ret
     490:	59 9a       	sbi	0x0b, 1	; 11
     492:	58 cf       	rjmp	.-336    	; 0x344 <DisplayBuffer+0xc2>
     494:	59 9a       	sbi	0x0b, 1	; 11
     496:	4a cf       	rjmp	.-364    	; 0x32c <DisplayBuffer+0xaa>
     498:	59 9a       	sbi	0x0b, 1	; 11
     49a:	3c cf       	rjmp	.-392    	; 0x314 <DisplayBuffer+0x92>
     49c:	59 9a       	sbi	0x0b, 1	; 11
     49e:	2e cf       	rjmp	.-420    	; 0x2fc <DisplayBuffer+0x7a>
     4a0:	59 9a       	sbi	0x0b, 1	; 11
     4a2:	20 cf       	rjmp	.-448    	; 0x2e4 <DisplayBuffer+0x62>
     4a4:	59 9a       	sbi	0x0b, 1	; 11
     4a6:	12 cf       	rjmp	.-476    	; 0x2cc <DisplayBuffer+0x4a>
     4a8:	b7 e0       	ldi	r27, 0x07	; 7
     4aa:	eb 9f       	mul	r30, r27
     4ac:	f0 01       	movw	r30, r0
     4ae:	11 24       	eor	r1, r1
     4b0:	ec 5a       	subi	r30, 0xAC	; 172
     4b2:	fe 4f       	sbci	r31, 0xFE	; 254
     4b4:	c2 81       	ldd	r28, Z+2	; 0x02
     4b6:	d3 81       	ldd	r29, Z+3	; 0x03
     4b8:	18 81       	ld	r17, Y
     4ba:	cb 01       	movw	r24, r22
     4bc:	06 80       	ldd	r0, Z+6	; 0x06
     4be:	02 c0       	rjmp	.+4      	; 0x4c4 <__EEPROM_REGION_LENGTH__+0xc4>
     4c0:	88 0f       	add	r24, r24
     4c2:	99 1f       	adc	r25, r25
     4c4:	0a 94       	dec	r0
     4c6:	e2 f7       	brpl	.-8      	; 0x4c0 <__EEPROM_REGION_LENGTH__+0xc0>
     4c8:	81 2b       	or	r24, r17
     4ca:	88 83       	st	Y, r24
     4cc:	81 cf       	rjmp	.-254    	; 0x3d0 <DisplayBuffer+0x14e>

000004ce <init>:
     4ce:	cf 93       	push	r28
     4d0:	df 93       	push	r29
     4d2:	51 9a       	sbi	0x0a, 1	; 10
     4d4:	52 9a       	sbi	0x0a, 2	; 10
     4d6:	53 9a       	sbi	0x0a, 3	; 10
     4d8:	a4 e0       	ldi	r26, 0x04	; 4
     4da:	b1 e0       	ldi	r27, 0x01	; 1
     4dc:	41 e0       	ldi	r20, 0x01	; 1
     4de:	50 e0       	ldi	r21, 0x00	; 0
     4e0:	ed 91       	ld	r30, X+
     4e2:	ee 23       	and	r30, r30
     4e4:	b9 f0       	breq	.+46     	; 0x514 <init+0x46>
     4e6:	ec 3c       	cpi	r30, 0xCC	; 204
     4e8:	d8 f7       	brcc	.-10     	; 0x4e0 <init+0x12>
     4ea:	87 e0       	ldi	r24, 0x07	; 7
     4ec:	e8 9f       	mul	r30, r24
     4ee:	f0 01       	movw	r30, r0
     4f0:	11 24       	eor	r1, r1
     4f2:	ec 5a       	subi	r30, 0xAC	; 172
     4f4:	fe 4f       	sbci	r31, 0xFE	; 254
     4f6:	c0 81       	ld	r28, Z
     4f8:	d1 81       	ldd	r29, Z+1	; 0x01
     4fa:	28 81       	ld	r18, Y
     4fc:	ca 01       	movw	r24, r20
     4fe:	06 80       	ldd	r0, Z+6	; 0x06
     500:	02 c0       	rjmp	.+4      	; 0x506 <init+0x38>
     502:	88 0f       	add	r24, r24
     504:	99 1f       	adc	r25, r25
     506:	0a 94       	dec	r0
     508:	e2 f7       	brpl	.-8      	; 0x502 <init+0x34>
     50a:	82 2b       	or	r24, r18
     50c:	88 83       	st	Y, r24
     50e:	ed 91       	ld	r30, X+
     510:	e1 11       	cpse	r30, r1
     512:	e9 cf       	rjmp	.-46     	; 0x4e6 <init+0x18>
     514:	df 91       	pop	r29
     516:	cf 91       	pop	r28
     518:	08 95       	ret

0000051a <main>:
}
/************************************************************************/
/* main function                                                        */
/************************************************************************/
int main(void)
{
     51a:	cf 93       	push	r28
     51c:	df 93       	push	r29
     51e:	00 d0       	rcall	.+0      	; 0x520 <main+0x6>
     520:	00 d0       	rcall	.+0      	; 0x522 <main+0x8>
     522:	00 d0       	rcall	.+0      	; 0x524 <main+0xa>
     524:	cd b7       	in	r28, 0x3d	; 61
     526:	de b7       	in	r29, 0x3e	; 62
	init();
     528:	0e 94 67 02 	call	0x4ce	; 0x4ce <init>
     52c:	20 e6       	ldi	r18, 0x60	; 96
     52e:	62 2e       	mov	r6, r18
     530:	22 e0       	ldi	r18, 0x02	; 2
     532:	72 2e       	mov	r7, r18
     534:	30 e4       	ldi	r19, 0x40	; 64
     536:	b3 2e       	mov	r11, r19
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     538:	ee 24       	eor	r14, r14
     53a:	e3 94       	inc	r14
     53c:	f1 2c       	mov	r15, r1
/************************************************************************/
void ScrollRight(const uint8_t *p, uint8_t time)
{
	uint8_t index, begin, end = 0;
	//*bf = buffer;
	for(index = 0; index < MT_SIZE; index++)
     53e:	83 01       	movw	r16, r6
}
/************************************************************************/
/* main function                                                        */
/************************************************************************/
int main(void)
{
     540:	a4 e0       	ldi	r26, 0x04	; 4
     542:	b1 e0       	ldi	r27, 0x01	; 1
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
     544:	ed 91       	ld	r30, X+
     546:	ee 23       	and	r30, r30
     548:	f1 f0       	breq	.+60     	; 0x586 <main+0x6c>
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
     54a:	ec 3c       	cpi	r30, 0xCC	; 204
     54c:	d8 f7       	brcc	.-10     	; 0x544 <main+0x2a>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     54e:	27 e0       	ldi	r18, 0x07	; 7
     550:	e2 9f       	mul	r30, r18
     552:	f0 01       	movw	r30, r0
     554:	11 24       	eor	r1, r1
     556:	af 01       	movw	r20, r30
     558:	4c 5a       	subi	r20, 0xAC	; 172
     55a:	5e 4f       	sbci	r21, 0xFE	; 254
     55c:	fa 01       	movw	r30, r20
     55e:	22 81       	ldd	r18, Z+2	; 0x02
     560:	33 81       	ldd	r19, Z+3	; 0x03
     562:	f9 01       	movw	r30, r18
     564:	80 81       	ld	r24, Z
     566:	22 24       	eor	r2, r2
     568:	23 94       	inc	r2
     56a:	31 2c       	mov	r3, r1
     56c:	fa 01       	movw	r30, r20
     56e:	06 80       	ldd	r0, Z+6	; 0x06
     570:	02 c0       	rjmp	.+4      	; 0x576 <main+0x5c>
     572:	22 0c       	add	r2, r2
     574:	33 1c       	adc	r3, r3
     576:	0a 94       	dec	r0
     578:	e2 f7       	brpl	.-8      	; 0x572 <main+0x58>
     57a:	a1 01       	movw	r20, r2
     57c:	40 95       	com	r20
     57e:	84 23       	and	r24, r20
     580:	f9 01       	movw	r30, r18
     582:	80 83       	st	Z, r24
     584:	df cf       	rjmp	.-66     	; 0x544 <main+0x2a>
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
     586:	89 e0       	ldi	r24, 0x09	; 9
     588:	90 e0       	ldi	r25, 0x00	; 0
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     58a:	5a 98       	cbi	0x0b, 2	; 11
     58c:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     58e:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     590:	5b 98       	cbi	0x0b, 3	; 11
     592:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     594:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     596:	5b 98       	cbi	0x0b, 3	; 11
     598:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     59a:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     59c:	5b 98       	cbi	0x0b, 3	; 11
     59e:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     5a0:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     5a2:	5b 98       	cbi	0x0b, 3	; 11
     5a4:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     5a6:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     5a8:	5b 98       	cbi	0x0b, 3	; 11
     5aa:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     5ac:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     5ae:	5b 98       	cbi	0x0b, 3	; 11
     5b0:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     5b2:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     5b4:	5b 98       	cbi	0x0b, 3	; 11
     5b6:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     5b8:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     5ba:	5b 98       	cbi	0x0b, 3	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     5bc:	5a 9a       	sbi	0x0b, 2	; 11
     5be:	01 97       	sbiw	r24, 0x01	; 1
/* Clear Display                                                        */
/************************************************************************/
static inline void Clear(){
	int x, y = 0;
	pinsMultiWrite(plex_pins, LOW);
	for(x = 0; x < (SH_REG + 1); x++) {
     5c0:	21 f7       	brne	.-56     	; 0x58a <main+0x70>
     5c2:	d3 01       	movw	r26, r6
     5c4:	eb 2d       	mov	r30, r11
     5c6:	1d 92       	st	X+, r1
     5c8:	ea 95       	dec	r30
     5ca:	e9 f7       	brne	.-6      	; 0x5c6 <main+0xac>
     5cc:	a0 e3       	ldi	r26, 0x30	; 48
     5ce:	b1 e0       	ldi	r27, 0x01	; 1
     5d0:	20 e0       	ldi	r18, 0x00	; 0
     5d2:	8d e4       	ldi	r24, 0x4D	; 77
/* returns the index of the first byte of the requested character       */
/************************************************************************/
uint8_t CharStart(const char *p)
{
	/*if(*p == ' ') return 0;
	else*/ return (uint8_t) (( *p - ' '));
     5d4:	80 52       	subi	r24, 0x20	; 32
		s_pos = (MT_SIZE - (c_len * FONT_WIDTH) - c_len - 2);
	}
	pos_index = s_pos;
	ClearStringBuffer();
	while(*ch){
		index = CharStart(ch++) * FONT_WIDTH;
     5d6:	f5 e0       	ldi	r31, 0x05	; 5
     5d8:	8f 9f       	mul	r24, r31
     5da:	c0 01       	movw	r24, r0
     5dc:	11 24       	eor	r1, r1
		for(len = 0; len < FONT_WIDTH; len++){
			stringbuffer[pos_index] = (uint8_t)(pgm_read_byte((font_5x7 + index)));
     5de:	fc 01       	movw	r30, r24
     5e0:	e8 59       	subi	r30, 0x98	; 152
     5e2:	ff 4f       	sbci	r31, 0xFF	; 255
     5e4:	34 91       	lpm	r19, Z
     5e6:	e2 2f       	mov	r30, r18
     5e8:	f0 e0       	ldi	r31, 0x00	; 0
     5ea:	e0 5a       	subi	r30, 0xA0	; 160
     5ec:	fd 4f       	sbci	r31, 0xFD	; 253
     5ee:	30 83       	st	Z, r19
     5f0:	fc 01       	movw	r30, r24
     5f2:	e7 59       	subi	r30, 0x97	; 151
     5f4:	ff 4f       	sbci	r31, 0xFF	; 255
     5f6:	34 91       	lpm	r19, Z
     5f8:	e1 e0       	ldi	r30, 0x01	; 1
     5fa:	e2 0f       	add	r30, r18
     5fc:	f0 e0       	ldi	r31, 0x00	; 0
     5fe:	e0 5a       	subi	r30, 0xA0	; 160
     600:	fd 4f       	sbci	r31, 0xFD	; 253
     602:	30 83       	st	Z, r19
     604:	fc 01       	movw	r30, r24
     606:	e6 59       	subi	r30, 0x96	; 150
     608:	ff 4f       	sbci	r31, 0xFF	; 255
     60a:	34 91       	lpm	r19, Z
     60c:	e2 e0       	ldi	r30, 0x02	; 2
     60e:	e2 0f       	add	r30, r18
     610:	f0 e0       	ldi	r31, 0x00	; 0
     612:	e0 5a       	subi	r30, 0xA0	; 160
     614:	fd 4f       	sbci	r31, 0xFD	; 253
     616:	30 83       	st	Z, r19
     618:	fc 01       	movw	r30, r24
     61a:	e5 59       	subi	r30, 0x95	; 149
     61c:	ff 4f       	sbci	r31, 0xFF	; 255
     61e:	34 91       	lpm	r19, Z
     620:	e3 e0       	ldi	r30, 0x03	; 3
     622:	e2 0f       	add	r30, r18
     624:	f0 e0       	ldi	r31, 0x00	; 0
     626:	e0 5a       	subi	r30, 0xA0	; 160
     628:	fd 4f       	sbci	r31, 0xFD	; 253
     62a:	30 83       	st	Z, r19
     62c:	fc 01       	movw	r30, r24
     62e:	e4 59       	subi	r30, 0x94	; 148
     630:	ff 4f       	sbci	r31, 0xFF	; 255
     632:	34 91       	lpm	r19, Z
     634:	84 e0       	ldi	r24, 0x04	; 4
     636:	82 0f       	add	r24, r18
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	80 5a       	subi	r24, 0xA0	; 160
     63c:	9d 4f       	sbci	r25, 0xFD	; 253
     63e:	fc 01       	movw	r30, r24
     640:	30 83       	st	Z, r19
			index++; pos_index++;
		}
		pos_index += 1; //space the characters
     642:	2a 5f       	subi	r18, 0xFA	; 250
	}else if(align == RIGHT){
		s_pos = (MT_SIZE - (c_len * FONT_WIDTH) - c_len - 2);
	}
	pos_index = s_pos;
	ClearStringBuffer();
	while(*ch){
     644:	8d 91       	ld	r24, X+
     646:	81 11       	cpse	r24, r1
     648:	c5 cf       	rjmp	.-118    	; 0x5d4 <main+0xba>
     64a:	ba ef       	ldi	r27, 0xFA	; 250
     64c:	db 2e       	mov	r13, r27
}*/
static inline void HoldDisplayBuffer(const uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
		DisplayBuffer(data);
     64e:	80 e6       	ldi	r24, 0x60	; 96
     650:	92 e0       	ldi	r25, 0x02	; 2
     652:	0e 94 41 01 	call	0x282	; 0x282 <DisplayBuffer>
     656:	da 94       	dec	r13
}
}*/
static inline void HoldDisplayBuffer(const uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
     658:	d1 10       	cpse	r13, r1
     65a:	f9 cf       	rjmp	.-14     	; 0x64e <main+0x134>
     65c:	d3 01       	movw	r26, r6
     65e:	eb 2d       	mov	r30, r11
     660:	1d 92       	st	X+, r1
     662:	ea 95       	dec	r30
     664:	e9 f7       	brne	.-6      	; 0x660 <main+0x146>
     666:	a6 e2       	ldi	r26, 0x26	; 38
     668:	b1 e0       	ldi	r27, 0x01	; 1
     66a:	20 e0       	ldi	r18, 0x00	; 0
     66c:	8d e4       	ldi	r24, 0x4D	; 77
/* returns the index of the first byte of the requested character       */
/************************************************************************/
uint8_t CharStart(const char *p)
{
	/*if(*p == ' ') return 0;
	else*/ return (uint8_t) (( *p - ' '));
     66e:	80 52       	subi	r24, 0x20	; 32
		s_pos = (MT_SIZE - (c_len * FONT_WIDTH) - c_len - 2);
	}
	pos_index = s_pos;
	ClearStringBuffer();
	while(*ch){
		index = CharStart(ch++) * FONT_WIDTH;
     670:	f5 e0       	ldi	r31, 0x05	; 5
     672:	8f 9f       	mul	r24, r31
     674:	c0 01       	movw	r24, r0
     676:	11 24       	eor	r1, r1
		for(len = 0; len < FONT_WIDTH; len++){
			stringbuffer[pos_index] = (uint8_t)(pgm_read_byte((font_5x7 + index)));
     678:	fc 01       	movw	r30, r24
     67a:	e8 59       	subi	r30, 0x98	; 152
     67c:	ff 4f       	sbci	r31, 0xFF	; 255
     67e:	34 91       	lpm	r19, Z
     680:	e2 2f       	mov	r30, r18
     682:	f0 e0       	ldi	r31, 0x00	; 0
     684:	e0 5a       	subi	r30, 0xA0	; 160
     686:	fd 4f       	sbci	r31, 0xFD	; 253
     688:	30 83       	st	Z, r19
     68a:	fc 01       	movw	r30, r24
     68c:	e7 59       	subi	r30, 0x97	; 151
     68e:	ff 4f       	sbci	r31, 0xFF	; 255
     690:	34 91       	lpm	r19, Z
     692:	e1 e0       	ldi	r30, 0x01	; 1
     694:	e2 0f       	add	r30, r18
     696:	f0 e0       	ldi	r31, 0x00	; 0
     698:	e0 5a       	subi	r30, 0xA0	; 160
     69a:	fd 4f       	sbci	r31, 0xFD	; 253
     69c:	30 83       	st	Z, r19
     69e:	fc 01       	movw	r30, r24
     6a0:	e6 59       	subi	r30, 0x96	; 150
     6a2:	ff 4f       	sbci	r31, 0xFF	; 255
     6a4:	34 91       	lpm	r19, Z
     6a6:	e2 e0       	ldi	r30, 0x02	; 2
     6a8:	e2 0f       	add	r30, r18
     6aa:	f0 e0       	ldi	r31, 0x00	; 0
     6ac:	e0 5a       	subi	r30, 0xA0	; 160
     6ae:	fd 4f       	sbci	r31, 0xFD	; 253
     6b0:	30 83       	st	Z, r19
     6b2:	fc 01       	movw	r30, r24
     6b4:	e5 59       	subi	r30, 0x95	; 149
     6b6:	ff 4f       	sbci	r31, 0xFF	; 255
     6b8:	34 91       	lpm	r19, Z
     6ba:	e3 e0       	ldi	r30, 0x03	; 3
     6bc:	e2 0f       	add	r30, r18
     6be:	f0 e0       	ldi	r31, 0x00	; 0
     6c0:	e0 5a       	subi	r30, 0xA0	; 160
     6c2:	fd 4f       	sbci	r31, 0xFD	; 253
     6c4:	30 83       	st	Z, r19
     6c6:	fc 01       	movw	r30, r24
     6c8:	e4 59       	subi	r30, 0x94	; 148
     6ca:	ff 4f       	sbci	r31, 0xFF	; 255
     6cc:	34 91       	lpm	r19, Z
     6ce:	84 e0       	ldi	r24, 0x04	; 4
     6d0:	82 0f       	add	r24, r18
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	80 5a       	subi	r24, 0xA0	; 160
     6d6:	9d 4f       	sbci	r25, 0xFD	; 253
     6d8:	fc 01       	movw	r30, r24
     6da:	30 83       	st	Z, r19
			index++; pos_index++;
		}
		pos_index += 1; //space the characters
     6dc:	2a 5f       	subi	r18, 0xFA	; 250
	}else if(align == RIGHT){
		s_pos = (MT_SIZE - (c_len * FONT_WIDTH) - c_len - 2);
	}
	pos_index = s_pos;
	ClearStringBuffer();
	while(*ch){
     6de:	8d 91       	ld	r24, X+
     6e0:	81 11       	cpse	r24, r1
     6e2:	c5 cf       	rjmp	.-118    	; 0x66e <main+0x154>
     6e4:	4f e3       	ldi	r20, 0x3F	; 63
     6e6:	50 e0       	ldi	r21, 0x00	; 0
     6e8:	84 2f       	mov	r24, r20
     6ea:	90 e0       	ldi	r25, 0x00	; 0
{
	uint8_t index, begin, end = 0;
	//uint8_t *bf = buffer;
	for(index = MT_SIZE-1 ; index > 0; index--)
	{
		for(begin = 0; begin <= index; begin++) (*(bf + begin)) = (*((p+(begin+MT_SIZE-index))));
     6ec:	29 2f       	mov	r18, r25
     6ee:	30 e0       	ldi	r19, 0x00	; 0
     6f0:	f9 01       	movw	r30, r18
     6f2:	e4 1b       	sub	r30, r20
     6f4:	f5 0b       	sbc	r31, r21
     6f6:	e0 56       	subi	r30, 0x60	; 96
     6f8:	fd 4f       	sbci	r31, 0xFD	; 253
     6fa:	e0 81       	ld	r30, Z
     6fc:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <bf>
     700:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <bf+0x1>
     704:	db 01       	movw	r26, r22
     706:	a2 0f       	add	r26, r18
     708:	b3 1f       	adc	r27, r19
     70a:	ec 93       	st	X, r30
     70c:	9f 5f       	subi	r25, 0xFF	; 255
     70e:	89 17       	cp	r24, r25
     710:	68 f7       	brcc	.-38     	; 0x6ec <main+0x1d2>
		for(end = (index); end < MT_SIZE ; end++) (*(bf + end)) = 0x00;
     712:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <bf>
     716:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <bf+0x1>
     71a:	e8 0f       	add	r30, r24
     71c:	f1 1d       	adc	r31, r1
     71e:	10 82       	st	Z, r1
     720:	8f 5f       	subi	r24, 0xFF	; 255
     722:	80 34       	cpi	r24, 0x40	; 64
     724:	b1 f7       	brne	.-20     	; 0x712 <main+0x1f8>
     726:	aa e0       	ldi	r26, 0x0A	; 10
     728:	da 2e       	mov	r13, r26
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
     72a:	24 e0       	ldi	r18, 0x04	; 4
     72c:	31 e0       	ldi	r19, 0x01	; 1
     72e:	80 e0       	ldi	r24, 0x00	; 0
     730:	90 e0       	ldi	r25, 0x00	; 0
     732:	71 e0       	ldi	r23, 0x01	; 1
     734:	08 2e       	mov	r0, r24
     736:	01 c0       	rjmp	.+2      	; 0x73a <main+0x220>
     738:	77 0f       	add	r23, r23
     73a:	0a 94       	dec	r0
     73c:	ea f7       	brpl	.-6      	; 0x738 <main+0x21e>
}
}*/
static inline void HoldDisplayBuffer(const uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
     73e:	6f e3       	ldi	r22, 0x3F	; 63
     740:	5a c0       	rjmp	.+180    	; 0x7f6 <main+0x2dc>
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     742:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     744:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     746:	5b 98       	cbi	0x0b, 3	; 11
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
			pinWrite(latch_pin, LOW);
			for(bit = 0; bit <= FONT_HEIGHT ; bit++){
				pinWrite(data_pin,((*(p+pos)) & (1 << byte)));
     748:	ef ef       	ldi	r30, 0xFF	; 255
     74a:	e6 0f       	add	r30, r22
     74c:	f0 e0       	ldi	r31, 0x00	; 0
     74e:	e0 56       	subi	r30, 0x60	; 96
     750:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
     752:	e0 81       	ld	r30, Z
     754:	e7 23       	and	r30, r23
     756:	09 f0       	breq	.+2      	; 0x75a <main+0x240>
     758:	ba c1       	rjmp	.+884    	; 0xace <__stack+0x1cf>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     75a:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     75c:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     75e:	5b 98       	cbi	0x0b, 3	; 11
     760:	ee ef       	ldi	r30, 0xFE	; 254
     762:	e6 0f       	add	r30, r22
     764:	f0 e0       	ldi	r31, 0x00	; 0
     766:	e0 56       	subi	r30, 0x60	; 96
     768:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
     76a:	e0 81       	ld	r30, Z
     76c:	e7 23       	and	r30, r23
     76e:	09 f0       	breq	.+2      	; 0x772 <main+0x258>
     770:	ac c1       	rjmp	.+856    	; 0xaca <__stack+0x1cb>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     772:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     774:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     776:	5b 98       	cbi	0x0b, 3	; 11
     778:	ed ef       	ldi	r30, 0xFD	; 253
     77a:	e6 0f       	add	r30, r22
     77c:	f0 e0       	ldi	r31, 0x00	; 0
     77e:	e0 56       	subi	r30, 0x60	; 96
     780:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
     782:	e0 81       	ld	r30, Z
     784:	e7 23       	and	r30, r23
     786:	09 f0       	breq	.+2      	; 0x78a <main+0x270>
     788:	9e c1       	rjmp	.+828    	; 0xac6 <__stack+0x1c7>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     78a:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     78c:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     78e:	5b 98       	cbi	0x0b, 3	; 11
     790:	ec ef       	ldi	r30, 0xFC	; 252
     792:	e6 0f       	add	r30, r22
     794:	f0 e0       	ldi	r31, 0x00	; 0
     796:	e0 56       	subi	r30, 0x60	; 96
     798:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
     79a:	e0 81       	ld	r30, Z
     79c:	e7 23       	and	r30, r23
     79e:	09 f0       	breq	.+2      	; 0x7a2 <main+0x288>
     7a0:	90 c1       	rjmp	.+800    	; 0xac2 <__stack+0x1c3>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     7a2:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     7a4:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     7a6:	5b 98       	cbi	0x0b, 3	; 11
     7a8:	eb ef       	ldi	r30, 0xFB	; 251
     7aa:	e6 0f       	add	r30, r22
     7ac:	f0 e0       	ldi	r31, 0x00	; 0
     7ae:	e0 56       	subi	r30, 0x60	; 96
     7b0:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
     7b2:	e0 81       	ld	r30, Z
     7b4:	e7 23       	and	r30, r23
     7b6:	09 f0       	breq	.+2      	; 0x7ba <main+0x2a0>
     7b8:	82 c1       	rjmp	.+772    	; 0xabe <__stack+0x1bf>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     7ba:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     7bc:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     7be:	5b 98       	cbi	0x0b, 3	; 11
     7c0:	ea ef       	ldi	r30, 0xFA	; 250
     7c2:	e6 0f       	add	r30, r22
     7c4:	f0 e0       	ldi	r31, 0x00	; 0
     7c6:	e0 56       	subi	r30, 0x60	; 96
     7c8:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
     7ca:	e0 81       	ld	r30, Z
     7cc:	e7 23       	and	r30, r23
     7ce:	09 f0       	breq	.+2      	; 0x7d2 <main+0x2b8>
     7d0:	74 c1       	rjmp	.+744    	; 0xaba <__stack+0x1bb>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     7d2:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     7d4:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     7d6:	5b 98       	cbi	0x0b, 3	; 11
     7d8:	e9 ef       	ldi	r30, 0xF9	; 249
     7da:	e6 0f       	add	r30, r22
     7dc:	f0 e0       	ldi	r31, 0x00	; 0
     7de:	e0 56       	subi	r30, 0x60	; 96
     7e0:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
     7e2:	e0 81       	ld	r30, Z
     7e4:	e7 23       	and	r30, r23
     7e6:	91 f4       	brne	.+36     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     7e8:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     7ea:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     7ec:	5b 98       	cbi	0x0b, 3	; 11
				//toggle the clock pin
				pinWrite(clock_pin, HIGH);
				pinWrite(clock_pin, LOW);
				pos--;
     7ee:	68 50       	subi	r22, 0x08	; 8
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     7f0:	5a 9a       	sbi	0x0b, 2	; 11
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
     7f2:	6f 3f       	cpi	r22, 0xFF	; 255
     7f4:	91 f0       	breq	.+36     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     7f6:	5a 98       	cbi	0x0b, 2	; 11
			pinWrite(latch_pin, LOW);
			for(bit = 0; bit <= FONT_HEIGHT ; bit++){
				pinWrite(data_pin,((*(p+pos)) & (1 << byte)));
     7f8:	e6 2f       	mov	r30, r22
     7fa:	f0 e0       	ldi	r31, 0x00	; 0
     7fc:	e0 56       	subi	r30, 0x60	; 96
     7fe:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
     800:	e0 81       	ld	r30, Z
     802:	e7 23       	and	r30, r23
     804:	09 f4       	brne	.+2      	; 0x808 <__DATA_REGION_LENGTH__+0x8>
     806:	9d cf       	rjmp	.-198    	; 0x742 <main+0x228>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     808:	59 9a       	sbi	0x0b, 1	; 11
     80a:	9c cf       	rjmp	.-200    	; 0x744 <main+0x22a>
     80c:	59 9a       	sbi	0x0b, 1	; 11
     80e:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     810:	5b 98       	cbi	0x0b, 3	; 11
				//toggle the clock pin
				pinWrite(clock_pin, HIGH);
				pinWrite(clock_pin, LOW);
				pos--;
     812:	68 50       	subi	r22, 0x08	; 8
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     814:	5a 9a       	sbi	0x0b, 2	; 11
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
     816:	6f 3f       	cpi	r22, 0xFF	; 255
     818:	71 f7       	brne	.-36     	; 0x7f6 <main+0x2dc>
     81a:	a4 e0       	ldi	r26, 0x04	; 4
     81c:	b1 e0       	ldi	r27, 0x01	; 1
     81e:	ad 2c       	mov	r10, r13
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
     820:	ed 91       	ld	r30, X+
     822:	ee 23       	and	r30, r30
     824:	09 f1       	breq	.+66     	; 0x868 <__DATA_REGION_LENGTH__+0x68>
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
     826:	ec 3c       	cpi	r30, 0xCC	; 204
     828:	d8 f7       	brcc	.-10     	; 0x820 <__DATA_REGION_LENGTH__+0x20>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     82a:	67 e0       	ldi	r22, 0x07	; 7
     82c:	e6 9f       	mul	r30, r22
     82e:	f0 01       	movw	r30, r0
     830:	11 24       	eor	r1, r1
     832:	bf 01       	movw	r22, r30
     834:	6c 5a       	subi	r22, 0xAC	; 172
     836:	7e 4f       	sbci	r23, 0xFE	; 254
     838:	1b 01       	movw	r2, r22
     83a:	fb 01       	movw	r30, r22
     83c:	c2 80       	ldd	r12, Z+2	; 0x02
     83e:	d3 80       	ldd	r13, Z+3	; 0x03
     840:	f6 01       	movw	r30, r12
     842:	70 81       	ld	r23, Z
     844:	88 24       	eor	r8, r8
     846:	83 94       	inc	r8
     848:	91 2c       	mov	r9, r1
     84a:	f1 01       	movw	r30, r2
     84c:	06 80       	ldd	r0, Z+6	; 0x06
     84e:	02 c0       	rjmp	.+4      	; 0x854 <__DATA_REGION_LENGTH__+0x54>
     850:	88 0c       	add	r8, r8
     852:	99 1c       	adc	r9, r9
     854:	0a 94       	dec	r0
     856:	e2 f7       	brpl	.-8      	; 0x850 <__DATA_REGION_LENGTH__+0x50>
     858:	68 2d       	mov	r22, r8
     85a:	60 95       	com	r22
     85c:	67 23       	and	r22, r23
     85e:	f6 01       	movw	r30, r12
     860:	60 83       	st	Z, r22
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
     862:	ed 91       	ld	r30, X+
     864:	e1 11       	cpse	r30, r1
     866:	df cf       	rjmp	.-66     	; 0x826 <__DATA_REGION_LENGTH__+0x26>
     868:	da 2c       	mov	r13, r10
/* Multiplexing method                                                  */
/************************************************************************/
static inline void MultiPlex(uint8_t *pin)
{
	pinsMultiWrite(plex_pins, LOW);
	pinWrite(plex_pins[*pin], HIGH);
     86a:	d9 01       	movw	r26, r18
     86c:	ed 91       	ld	r30, X+
     86e:	9d 01       	movw	r18, r26
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
     870:	ec 3c       	cpi	r30, 0xCC	; 204
     872:	08 f4       	brcc	.+2      	; 0x876 <__DATA_REGION_LENGTH__+0x76>
     874:	2e c1       	rjmp	.+604    	; 0xad2 <__stack+0x1d3>
	delay(delayms);
     876:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     87a:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
/*  delay                                                               */
/************************************************************************/
int delayms = 1;
static inline void delay(int dl)
{
	while(dl >= 0)
     87e:	77 fd       	sbrc	r23, 7
     880:	09 c0       	rjmp	.+18     	; 0x894 <__DATA_REGION_LENGTH__+0x94>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     882:	ef e9       	ldi	r30, 0x9F	; 159
     884:	ff e0       	ldi	r31, 0x0F	; 15
     886:	31 97       	sbiw	r30, 0x01	; 1
     888:	f1 f7       	brne	.-4      	; 0x886 <__DATA_REGION_LENGTH__+0x86>
     88a:	00 c0       	rjmp	.+0      	; 0x88c <__DATA_REGION_LENGTH__+0x8c>
     88c:	00 00       	nop
	{
		_delay_ms(1);
		dl--;
     88e:	61 50       	subi	r22, 0x01	; 1
     890:	71 09       	sbc	r23, r1
     892:	b8 f7       	brcc	.-18     	; 0x882 <__DATA_REGION_LENGTH__+0x82>
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
     894:	a4 e0       	ldi	r26, 0x04	; 4
     896:	b1 e0       	ldi	r27, 0x01	; 1
     898:	ad 2c       	mov	r10, r13
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
     89a:	ed 91       	ld	r30, X+
     89c:	ee 23       	and	r30, r30
     89e:	09 f1       	breq	.+66     	; 0x8e2 <__DATA_REGION_LENGTH__+0xe2>
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
     8a0:	ec 3c       	cpi	r30, 0xCC	; 204
     8a2:	d8 f7       	brcc	.-10     	; 0x89a <__DATA_REGION_LENGTH__+0x9a>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     8a4:	67 e0       	ldi	r22, 0x07	; 7
     8a6:	e6 9f       	mul	r30, r22
     8a8:	f0 01       	movw	r30, r0
     8aa:	11 24       	eor	r1, r1
     8ac:	bf 01       	movw	r22, r30
     8ae:	6c 5a       	subi	r22, 0xAC	; 172
     8b0:	7e 4f       	sbci	r23, 0xFE	; 254
     8b2:	1b 01       	movw	r2, r22
     8b4:	fb 01       	movw	r30, r22
     8b6:	c2 80       	ldd	r12, Z+2	; 0x02
     8b8:	d3 80       	ldd	r13, Z+3	; 0x03
     8ba:	f6 01       	movw	r30, r12
     8bc:	70 81       	ld	r23, Z
     8be:	88 24       	eor	r8, r8
     8c0:	83 94       	inc	r8
     8c2:	91 2c       	mov	r9, r1
     8c4:	f1 01       	movw	r30, r2
     8c6:	06 80       	ldd	r0, Z+6	; 0x06
     8c8:	02 c0       	rjmp	.+4      	; 0x8ce <__DATA_REGION_LENGTH__+0xce>
     8ca:	88 0c       	add	r8, r8
     8cc:	99 1c       	adc	r9, r9
     8ce:	0a 94       	dec	r0
     8d0:	e2 f7       	brpl	.-8      	; 0x8ca <__DATA_REGION_LENGTH__+0xca>
     8d2:	68 2d       	mov	r22, r8
     8d4:	60 95       	com	r22
     8d6:	67 23       	and	r22, r23
     8d8:	f6 01       	movw	r30, r12
     8da:	60 83       	st	Z, r22
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
     8dc:	ed 91       	ld	r30, X+
     8de:	e1 11       	cpse	r30, r1
     8e0:	df cf       	rjmp	.-66     	; 0x8a0 <__DATA_REGION_LENGTH__+0xa0>
     8e2:	da 2c       	mov	r13, r10
     8e4:	69 e0       	ldi	r22, 0x09	; 9
     8e6:	70 e0       	ldi	r23, 0x00	; 0
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     8e8:	5a 98       	cbi	0x0b, 2	; 11
     8ea:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     8ec:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     8ee:	5b 98       	cbi	0x0b, 3	; 11
     8f0:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     8f2:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     8f4:	5b 98       	cbi	0x0b, 3	; 11
     8f6:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     8f8:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     8fa:	5b 98       	cbi	0x0b, 3	; 11
     8fc:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     8fe:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     900:	5b 98       	cbi	0x0b, 3	; 11
     902:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     904:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     906:	5b 98       	cbi	0x0b, 3	; 11
     908:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     90a:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     90c:	5b 98       	cbi	0x0b, 3	; 11
     90e:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     910:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     912:	5b 98       	cbi	0x0b, 3	; 11
     914:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     916:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     918:	5b 98       	cbi	0x0b, 3	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     91a:	5a 9a       	sbi	0x0b, 2	; 11
     91c:	61 50       	subi	r22, 0x01	; 1
     91e:	71 09       	sbc	r23, r1
/* Clear Display                                                        */
/************************************************************************/
static inline void Clear(){
	int x, y = 0;
	pinsMultiWrite(plex_pins, LOW);
	for(x = 0; x < (SH_REG + 1); x++) {
     920:	19 f7       	brne	.-58     	; 0x8e8 <__DATA_REGION_LENGTH__+0xe8>
     922:	01 96       	adiw	r24, 0x01	; 1
{
	uint8_t byte, index, bit = 0;
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
     924:	87 30       	cpi	r24, 0x07	; 7
     926:	91 05       	cpc	r25, r1
     928:	09 f0       	breq	.+2      	; 0x92c <__stack+0x2d>
     92a:	03 cf       	rjmp	.-506    	; 0x732 <main+0x218>
			pinWrite(latch_pin, HIGH);
		}
		MultiPlex(&byte);
		Clear();
	}
	delayms = 1;
     92c:	f0 92 01 01 	sts	0x0101, r15	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     930:	e0 92 00 01 	sts	0x0100, r14	; 0x800100 <__DATA_REGION_ORIGIN__>
     934:	da 94       	dec	r13
}
}*/
static inline void HoldDisplayBuffer(const uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
     936:	d1 10       	cpse	r13, r1
     938:	f8 ce       	rjmp	.-528    	; 0x72a <main+0x210>
     93a:	41 50       	subi	r20, 0x01	; 1
     93c:	51 09       	sbc	r21, r1
/************************************************************************/
void ScrollLeft(const uint8_t *p, uint8_t time)
{
	uint8_t index, begin, end = 0;
	//uint8_t *bf = buffer;
	for(index = MT_SIZE-1 ; index > 0; index--)
     93e:	09 f0       	breq	.+2      	; 0x942 <__stack+0x43>
     940:	d3 ce       	rjmp	.-602    	; 0x6e8 <main+0x1ce>
     942:	d3 01       	movw	r26, r6
     944:	eb 2d       	mov	r30, r11
     946:	1d 92       	st	X+, r1
     948:	ea 95       	dec	r30
     94a:	e9 f7       	brne	.-6      	; 0x946 <__stack+0x47>
     94c:	61 e2       	ldi	r22, 0x21	; 33
     94e:	c6 2e       	mov	r12, r22
     950:	61 e0       	ldi	r22, 0x01	; 1
     952:	d6 2e       	mov	r13, r22
     954:	d6 01       	movw	r26, r12
     956:	20 e0       	ldi	r18, 0x00	; 0
     958:	8d e4       	ldi	r24, 0x4D	; 77
/* returns the index of the first byte of the requested character       */
/************************************************************************/
uint8_t CharStart(const char *p)
{
	/*if(*p == ' ') return 0;
	else*/ return (uint8_t) (( *p - ' '));
     95a:	80 52       	subi	r24, 0x20	; 32
		s_pos = (MT_SIZE - (c_len * FONT_WIDTH) - c_len - 2);
	}
	pos_index = s_pos;
	ClearStringBuffer();
	while(*ch){
		index = CharStart(ch++) * FONT_WIDTH;
     95c:	f5 e0       	ldi	r31, 0x05	; 5
     95e:	8f 9f       	mul	r24, r31
     960:	c0 01       	movw	r24, r0
     962:	11 24       	eor	r1, r1
		for(len = 0; len < FONT_WIDTH; len++){
			stringbuffer[pos_index] = (uint8_t)(pgm_read_byte((font_5x7 + index)));
     964:	fc 01       	movw	r30, r24
     966:	e8 59       	subi	r30, 0x98	; 152
     968:	ff 4f       	sbci	r31, 0xFF	; 255
     96a:	34 91       	lpm	r19, Z
     96c:	42 2f       	mov	r20, r18
     96e:	50 e0       	ldi	r21, 0x00	; 0
     970:	40 5a       	subi	r20, 0xA0	; 160
     972:	5d 4f       	sbci	r21, 0xFD	; 253
     974:	fa 01       	movw	r30, r20
     976:	30 83       	st	Z, r19
     978:	fc 01       	movw	r30, r24
     97a:	e7 59       	subi	r30, 0x97	; 151
     97c:	ff 4f       	sbci	r31, 0xFF	; 255
     97e:	34 91       	lpm	r19, Z
     980:	e1 e0       	ldi	r30, 0x01	; 1
     982:	e2 0f       	add	r30, r18
     984:	f0 e0       	ldi	r31, 0x00	; 0
     986:	e0 5a       	subi	r30, 0xA0	; 160
     988:	fd 4f       	sbci	r31, 0xFD	; 253
     98a:	30 83       	st	Z, r19
     98c:	fc 01       	movw	r30, r24
     98e:	e6 59       	subi	r30, 0x96	; 150
     990:	ff 4f       	sbci	r31, 0xFF	; 255
     992:	34 91       	lpm	r19, Z
     994:	e2 e0       	ldi	r30, 0x02	; 2
     996:	e2 0f       	add	r30, r18
     998:	f0 e0       	ldi	r31, 0x00	; 0
     99a:	e0 5a       	subi	r30, 0xA0	; 160
     99c:	fd 4f       	sbci	r31, 0xFD	; 253
     99e:	30 83       	st	Z, r19
     9a0:	fc 01       	movw	r30, r24
     9a2:	e5 59       	subi	r30, 0x95	; 149
     9a4:	ff 4f       	sbci	r31, 0xFF	; 255
     9a6:	34 91       	lpm	r19, Z
     9a8:	e3 e0       	ldi	r30, 0x03	; 3
     9aa:	e2 0f       	add	r30, r18
     9ac:	f0 e0       	ldi	r31, 0x00	; 0
     9ae:	e0 5a       	subi	r30, 0xA0	; 160
     9b0:	fd 4f       	sbci	r31, 0xFD	; 253
     9b2:	30 83       	st	Z, r19
     9b4:	fc 01       	movw	r30, r24
     9b6:	e4 59       	subi	r30, 0x94	; 148
     9b8:	ff 4f       	sbci	r31, 0xFF	; 255
     9ba:	84 91       	lpm	r24, Z
     9bc:	e4 e0       	ldi	r30, 0x04	; 4
     9be:	e2 0f       	add	r30, r18
     9c0:	f0 e0       	ldi	r31, 0x00	; 0
     9c2:	e0 5a       	subi	r30, 0xA0	; 160
     9c4:	fd 4f       	sbci	r31, 0xFD	; 253
     9c6:	80 83       	st	Z, r24
			index++; pos_index++;
		}
		pos_index += 1; //space the characters
     9c8:	2a 5f       	subi	r18, 0xFA	; 250
	}else if(align == RIGHT){
		s_pos = (MT_SIZE - (c_len * FONT_WIDTH) - c_len - 2);
	}
	pos_index = s_pos;
	ClearStringBuffer();
	while(*ch){
     9ca:	8d 91       	ld	r24, X+
     9cc:	81 11       	cpse	r24, r1
     9ce:	c5 cf       	rjmp	.-118    	; 0x95a <__stack+0x5b>
     9d0:	54 e0       	ldi	r21, 0x04	; 4
     9d2:	95 2e       	mov	r9, r21
     9d4:	ea e0       	ldi	r30, 0x0A	; 10
     9d6:	ae 2e       	mov	r10, r30
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
     9d8:	24 e0       	ldi	r18, 0x04	; 4
     9da:	31 e0       	ldi	r19, 0x01	; 1
     9dc:	80 e0       	ldi	r24, 0x00	; 0
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	51 e0       	ldi	r21, 0x01	; 1
     9e2:	08 2e       	mov	r0, r24
     9e4:	01 c0       	rjmp	.+2      	; 0x9e8 <__stack+0xe9>
     9e6:	55 0f       	add	r21, r21
     9e8:	0a 94       	dec	r0
     9ea:	ea f7       	brpl	.-6      	; 0x9e6 <__stack+0xe7>
     9ec:	4f e3       	ldi	r20, 0x3F	; 63
     9ee:	5a c0       	rjmp	.+180    	; 0xaa4 <__stack+0x1a5>
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     9f0:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     9f2:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     9f4:	5b 98       	cbi	0x0b, 3	; 11
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
			pinWrite(latch_pin, LOW);
			for(bit = 0; bit <= FONT_HEIGHT ; bit++){
				pinWrite(data_pin,((*(p+pos)) & (1 << byte)));
     9f6:	ef ef       	ldi	r30, 0xFF	; 255
     9f8:	e4 0f       	add	r30, r20
     9fa:	f0 e0       	ldi	r31, 0x00	; 0
     9fc:	e0 5a       	subi	r30, 0xA0	; 160
     9fe:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
     a00:	60 81       	ld	r22, Z
     a02:	65 23       	and	r22, r21
     a04:	09 f0       	breq	.+2      	; 0xa08 <__stack+0x109>
     a06:	3f c2       	rjmp	.+1150   	; 0xe86 <__stack+0x587>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     a08:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     a0a:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     a0c:	5b 98       	cbi	0x0b, 3	; 11
     a0e:	ee ef       	ldi	r30, 0xFE	; 254
     a10:	e4 0f       	add	r30, r20
     a12:	f0 e0       	ldi	r31, 0x00	; 0
     a14:	e0 5a       	subi	r30, 0xA0	; 160
     a16:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
     a18:	60 81       	ld	r22, Z
     a1a:	65 23       	and	r22, r21
     a1c:	09 f0       	breq	.+2      	; 0xa20 <__stack+0x121>
     a1e:	31 c2       	rjmp	.+1122   	; 0xe82 <__stack+0x583>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     a20:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     a22:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     a24:	5b 98       	cbi	0x0b, 3	; 11
     a26:	ed ef       	ldi	r30, 0xFD	; 253
     a28:	e4 0f       	add	r30, r20
     a2a:	f0 e0       	ldi	r31, 0x00	; 0
     a2c:	e0 5a       	subi	r30, 0xA0	; 160
     a2e:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
     a30:	60 81       	ld	r22, Z
     a32:	65 23       	and	r22, r21
     a34:	09 f0       	breq	.+2      	; 0xa38 <__stack+0x139>
     a36:	23 c2       	rjmp	.+1094   	; 0xe7e <__stack+0x57f>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     a38:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     a3a:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     a3c:	5b 98       	cbi	0x0b, 3	; 11
     a3e:	ec ef       	ldi	r30, 0xFC	; 252
     a40:	e4 0f       	add	r30, r20
     a42:	f0 e0       	ldi	r31, 0x00	; 0
     a44:	e0 5a       	subi	r30, 0xA0	; 160
     a46:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
     a48:	60 81       	ld	r22, Z
     a4a:	65 23       	and	r22, r21
     a4c:	09 f0       	breq	.+2      	; 0xa50 <__stack+0x151>
     a4e:	15 c2       	rjmp	.+1066   	; 0xe7a <__stack+0x57b>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     a50:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     a52:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     a54:	5b 98       	cbi	0x0b, 3	; 11
     a56:	eb ef       	ldi	r30, 0xFB	; 251
     a58:	e4 0f       	add	r30, r20
     a5a:	f0 e0       	ldi	r31, 0x00	; 0
     a5c:	e0 5a       	subi	r30, 0xA0	; 160
     a5e:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
     a60:	60 81       	ld	r22, Z
     a62:	65 23       	and	r22, r21
     a64:	09 f0       	breq	.+2      	; 0xa68 <__stack+0x169>
     a66:	07 c2       	rjmp	.+1038   	; 0xe76 <__stack+0x577>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     a68:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     a6a:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     a6c:	5b 98       	cbi	0x0b, 3	; 11
     a6e:	ea ef       	ldi	r30, 0xFA	; 250
     a70:	e4 0f       	add	r30, r20
     a72:	f0 e0       	ldi	r31, 0x00	; 0
     a74:	e0 5a       	subi	r30, 0xA0	; 160
     a76:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
     a78:	60 81       	ld	r22, Z
     a7a:	65 23       	and	r22, r21
     a7c:	09 f0       	breq	.+2      	; 0xa80 <__stack+0x181>
     a7e:	f9 c1       	rjmp	.+1010   	; 0xe72 <__stack+0x573>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     a80:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     a82:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     a84:	5b 98       	cbi	0x0b, 3	; 11
     a86:	e9 ef       	ldi	r30, 0xF9	; 249
     a88:	e4 0f       	add	r30, r20
     a8a:	f0 e0       	ldi	r31, 0x00	; 0
     a8c:	e0 5a       	subi	r30, 0xA0	; 160
     a8e:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
     a90:	60 81       	ld	r22, Z
     a92:	65 23       	and	r22, r21
     a94:	91 f5       	brne	.+100    	; 0xafa <__stack+0x1fb>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     a96:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     a98:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     a9a:	5b 98       	cbi	0x0b, 3	; 11
				//toggle the clock pin
				pinWrite(clock_pin, HIGH);
				pinWrite(clock_pin, LOW);
				pos--;
     a9c:	48 50       	subi	r20, 0x08	; 8
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     a9e:	5a 9a       	sbi	0x0b, 2	; 11
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
     aa0:	4f 3f       	cpi	r20, 0xFF	; 255
     aa2:	91 f1       	breq	.+100    	; 0xb08 <__stack+0x209>
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     aa4:	5a 98       	cbi	0x0b, 2	; 11
			pinWrite(latch_pin, LOW);
			for(bit = 0; bit <= FONT_HEIGHT ; bit++){
				pinWrite(data_pin,((*(p+pos)) & (1 << byte)));
     aa6:	e4 2f       	mov	r30, r20
     aa8:	f0 e0       	ldi	r31, 0x00	; 0
     aaa:	e0 5a       	subi	r30, 0xA0	; 160
     aac:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
     aae:	60 81       	ld	r22, Z
     ab0:	65 23       	and	r22, r21
     ab2:	09 f4       	brne	.+2      	; 0xab6 <__stack+0x1b7>
     ab4:	9d cf       	rjmp	.-198    	; 0x9f0 <__stack+0xf1>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     ab6:	59 9a       	sbi	0x0b, 1	; 11
     ab8:	9c cf       	rjmp	.-200    	; 0x9f2 <__stack+0xf3>
     aba:	59 9a       	sbi	0x0b, 1	; 11
     abc:	8b ce       	rjmp	.-746    	; 0x7d4 <main+0x2ba>
     abe:	59 9a       	sbi	0x0b, 1	; 11
     ac0:	7d ce       	rjmp	.-774    	; 0x7bc <main+0x2a2>
     ac2:	59 9a       	sbi	0x0b, 1	; 11
     ac4:	6f ce       	rjmp	.-802    	; 0x7a4 <main+0x28a>
     ac6:	59 9a       	sbi	0x0b, 1	; 11
     ac8:	61 ce       	rjmp	.-830    	; 0x78c <main+0x272>
     aca:	59 9a       	sbi	0x0b, 1	; 11
     acc:	53 ce       	rjmp	.-858    	; 0x774 <main+0x25a>
     ace:	59 9a       	sbi	0x0b, 1	; 11
     ad0:	45 ce       	rjmp	.-886    	; 0x75c <main+0x242>
     ad2:	b7 e0       	ldi	r27, 0x07	; 7
     ad4:	eb 9f       	mul	r30, r27
     ad6:	f0 01       	movw	r30, r0
     ad8:	11 24       	eor	r1, r1
     ada:	ec 5a       	subi	r30, 0xAC	; 172
     adc:	fe 4f       	sbci	r31, 0xFE	; 254
     ade:	a2 81       	ldd	r26, Z+2	; 0x02
     ae0:	b3 81       	ldd	r27, Z+3	; 0x03
     ae2:	cc 90       	ld	r12, X
     ae4:	61 e0       	ldi	r22, 0x01	; 1
     ae6:	70 e0       	ldi	r23, 0x00	; 0
     ae8:	06 80       	ldd	r0, Z+6	; 0x06
     aea:	02 c0       	rjmp	.+4      	; 0xaf0 <__stack+0x1f1>
     aec:	66 0f       	add	r22, r22
     aee:	77 1f       	adc	r23, r23
     af0:	0a 94       	dec	r0
     af2:	e2 f7       	brpl	.-8      	; 0xaec <__stack+0x1ed>
     af4:	6c 29       	or	r22, r12
     af6:	6c 93       	st	X, r22
     af8:	be ce       	rjmp	.-644    	; 0x876 <__DATA_REGION_LENGTH__+0x76>
     afa:	59 9a       	sbi	0x0b, 1	; 11
     afc:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     afe:	5b 98       	cbi	0x0b, 3	; 11
				//toggle the clock pin
				pinWrite(clock_pin, HIGH);
				pinWrite(clock_pin, LOW);
				pos--;
     b00:	48 50       	subi	r20, 0x08	; 8
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     b02:	5a 9a       	sbi	0x0b, 2	; 11
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
     b04:	4f 3f       	cpi	r20, 0xFF	; 255
     b06:	71 f6       	brne	.-100    	; 0xaa4 <__stack+0x1a5>
     b08:	a4 e0       	ldi	r26, 0x04	; 4
     b0a:	b1 e0       	ldi	r27, 0x01	; 1
     b0c:	59 2c       	mov	r5, r9
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
     b0e:	ed 91       	ld	r30, X+
     b10:	ee 23       	and	r30, r30
     b12:	09 f1       	breq	.+66     	; 0xb56 <__stack+0x257>
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
     b14:	ec 3c       	cpi	r30, 0xCC	; 204
     b16:	d8 f7       	brcc	.-10     	; 0xb0e <__stack+0x20f>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     b18:	47 e0       	ldi	r20, 0x07	; 7
     b1a:	e4 9f       	mul	r30, r20
     b1c:	f0 01       	movw	r30, r0
     b1e:	11 24       	eor	r1, r1
     b20:	bf 01       	movw	r22, r30
     b22:	6c 5a       	subi	r22, 0xAC	; 172
     b24:	7e 4f       	sbci	r23, 0xFE	; 254
     b26:	1b 01       	movw	r2, r22
     b28:	fb 01       	movw	r30, r22
     b2a:	62 81       	ldd	r22, Z+2	; 0x02
     b2c:	73 81       	ldd	r23, Z+3	; 0x03
     b2e:	fb 01       	movw	r30, r22
     b30:	50 81       	ld	r21, Z
     b32:	88 24       	eor	r8, r8
     b34:	83 94       	inc	r8
     b36:	91 2c       	mov	r9, r1
     b38:	f1 01       	movw	r30, r2
     b3a:	06 80       	ldd	r0, Z+6	; 0x06
     b3c:	02 c0       	rjmp	.+4      	; 0xb42 <__stack+0x243>
     b3e:	88 0c       	add	r8, r8
     b40:	99 1c       	adc	r9, r9
     b42:	0a 94       	dec	r0
     b44:	e2 f7       	brpl	.-8      	; 0xb3e <__stack+0x23f>
     b46:	48 2d       	mov	r20, r8
     b48:	40 95       	com	r20
     b4a:	45 23       	and	r20, r21
     b4c:	fb 01       	movw	r30, r22
     b4e:	40 83       	st	Z, r20
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
     b50:	ed 91       	ld	r30, X+
     b52:	e1 11       	cpse	r30, r1
     b54:	df cf       	rjmp	.-66     	; 0xb14 <__stack+0x215>
     b56:	95 2c       	mov	r9, r5
/* Multiplexing method                                                  */
/************************************************************************/
static inline void MultiPlex(uint8_t *pin)
{
	pinsMultiWrite(plex_pins, LOW);
	pinWrite(plex_pins[*pin], HIGH);
     b58:	d9 01       	movw	r26, r18
     b5a:	ed 91       	ld	r30, X+
     b5c:	9d 01       	movw	r18, r26
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
     b5e:	ec 3c       	cpi	r30, 0xCC	; 204
     b60:	08 f4       	brcc	.+2      	; 0xb64 <__stack+0x265>
     b62:	93 c1       	rjmp	.+806    	; 0xe8a <__stack+0x58b>
	delay(delayms);
     b64:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     b68:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
/*  delay                                                               */
/************************************************************************/
int delayms = 1;
static inline void delay(int dl)
{
	while(dl >= 0)
     b6c:	57 fd       	sbrc	r21, 7
     b6e:	09 c0       	rjmp	.+18     	; 0xb82 <__stack+0x283>
     b70:	ef e9       	ldi	r30, 0x9F	; 159
     b72:	ff e0       	ldi	r31, 0x0F	; 15
     b74:	31 97       	sbiw	r30, 0x01	; 1
     b76:	f1 f7       	brne	.-4      	; 0xb74 <__stack+0x275>
     b78:	00 c0       	rjmp	.+0      	; 0xb7a <__stack+0x27b>
     b7a:	00 00       	nop
	{
		_delay_ms(1);
		dl--;
     b7c:	41 50       	subi	r20, 0x01	; 1
     b7e:	51 09       	sbc	r21, r1
     b80:	b8 f7       	brcc	.-18     	; 0xb70 <__stack+0x271>
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
     b82:	a4 e0       	ldi	r26, 0x04	; 4
     b84:	b1 e0       	ldi	r27, 0x01	; 1
     b86:	59 2c       	mov	r5, r9
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
     b88:	ed 91       	ld	r30, X+
     b8a:	ee 23       	and	r30, r30
     b8c:	09 f1       	breq	.+66     	; 0xbd0 <__stack+0x2d1>
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
     b8e:	ec 3c       	cpi	r30, 0xCC	; 204
     b90:	d8 f7       	brcc	.-10     	; 0xb88 <__stack+0x289>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     b92:	47 e0       	ldi	r20, 0x07	; 7
     b94:	e4 9f       	mul	r30, r20
     b96:	f0 01       	movw	r30, r0
     b98:	11 24       	eor	r1, r1
     b9a:	bf 01       	movw	r22, r30
     b9c:	6c 5a       	subi	r22, 0xAC	; 172
     b9e:	7e 4f       	sbci	r23, 0xFE	; 254
     ba0:	1b 01       	movw	r2, r22
     ba2:	fb 01       	movw	r30, r22
     ba4:	62 81       	ldd	r22, Z+2	; 0x02
     ba6:	73 81       	ldd	r23, Z+3	; 0x03
     ba8:	fb 01       	movw	r30, r22
     baa:	50 81       	ld	r21, Z
     bac:	88 24       	eor	r8, r8
     bae:	83 94       	inc	r8
     bb0:	91 2c       	mov	r9, r1
     bb2:	f1 01       	movw	r30, r2
     bb4:	06 80       	ldd	r0, Z+6	; 0x06
     bb6:	02 c0       	rjmp	.+4      	; 0xbbc <__stack+0x2bd>
     bb8:	88 0c       	add	r8, r8
     bba:	99 1c       	adc	r9, r9
     bbc:	0a 94       	dec	r0
     bbe:	e2 f7       	brpl	.-8      	; 0xbb8 <__stack+0x2b9>
     bc0:	48 2d       	mov	r20, r8
     bc2:	40 95       	com	r20
     bc4:	45 23       	and	r20, r21
     bc6:	fb 01       	movw	r30, r22
     bc8:	40 83       	st	Z, r20
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
     bca:	ed 91       	ld	r30, X+
     bcc:	e1 11       	cpse	r30, r1
     bce:	df cf       	rjmp	.-66     	; 0xb8e <__stack+0x28f>
     bd0:	95 2c       	mov	r9, r5
     bd2:	49 e0       	ldi	r20, 0x09	; 9
     bd4:	50 e0       	ldi	r21, 0x00	; 0
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     bd6:	5a 98       	cbi	0x0b, 2	; 11
     bd8:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     bda:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     bdc:	5b 98       	cbi	0x0b, 3	; 11
     bde:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     be0:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     be2:	5b 98       	cbi	0x0b, 3	; 11
     be4:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     be6:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     be8:	5b 98       	cbi	0x0b, 3	; 11
     bea:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     bec:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     bee:	5b 98       	cbi	0x0b, 3	; 11
     bf0:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     bf2:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     bf4:	5b 98       	cbi	0x0b, 3	; 11
     bf6:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     bf8:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     bfa:	5b 98       	cbi	0x0b, 3	; 11
     bfc:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     bfe:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     c00:	5b 98       	cbi	0x0b, 3	; 11
     c02:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     c04:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     c06:	5b 98       	cbi	0x0b, 3	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     c08:	5a 9a       	sbi	0x0b, 2	; 11
     c0a:	41 50       	subi	r20, 0x01	; 1
     c0c:	51 09       	sbc	r21, r1
/* Clear Display                                                        */
/************************************************************************/
static inline void Clear(){
	int x, y = 0;
	pinsMultiWrite(plex_pins, LOW);
	for(x = 0; x < (SH_REG + 1); x++) {
     c0e:	19 f7       	brne	.-58     	; 0xbd6 <__stack+0x2d7>
     c10:	01 96       	adiw	r24, 0x01	; 1
{
	uint8_t byte, index, bit = 0;
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
     c12:	87 30       	cpi	r24, 0x07	; 7
     c14:	91 05       	cpc	r25, r1
     c16:	09 f0       	breq	.+2      	; 0xc1a <__stack+0x31b>
     c18:	e3 ce       	rjmp	.-570    	; 0x9e0 <__stack+0xe1>
			pinWrite(latch_pin, HIGH);
		}
		MultiPlex(&byte);
		Clear();
	}
	delayms = 1;
     c1a:	f0 92 01 01 	sts	0x0101, r15	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     c1e:	e0 92 00 01 	sts	0x0100, r14	; 0x800100 <__DATA_REGION_ORIGIN__>
     c22:	aa 94       	dec	r10
}
}*/
static inline void HoldDisplayBuffer(const uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
     c24:	a1 10       	cpse	r10, r1
     c26:	d8 ce       	rjmp	.-592    	; 0x9d8 <__stack+0xd9>
     c28:	64 e0       	ldi	r22, 0x04	; 4
     c2a:	71 e0       	ldi	r23, 0x01	; 1
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
     c2c:	db 01       	movw	r26, r22
     c2e:	ed 91       	ld	r30, X+
     c30:	bd 01       	movw	r22, r26
     c32:	ee 23       	and	r30, r30
     c34:	e1 f0       	breq	.+56     	; 0xc6e <__stack+0x36f>
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
     c36:	ec 3c       	cpi	r30, 0xCC	; 204
     c38:	c8 f7       	brcc	.-14     	; 0xc2c <__stack+0x32d>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     c3a:	27 e0       	ldi	r18, 0x07	; 7
     c3c:	e2 9f       	mul	r30, r18
     c3e:	f0 01       	movw	r30, r0
     c40:	11 24       	eor	r1, r1
     c42:	ec 5a       	subi	r30, 0xAC	; 172
     c44:	fe 4f       	sbci	r31, 0xFE	; 254
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	dc 01       	movw	r26, r24
     c4c:	4c 91       	ld	r20, X
     c4e:	21 e0       	ldi	r18, 0x01	; 1
     c50:	30 e0       	ldi	r19, 0x00	; 0
     c52:	06 80       	ldd	r0, Z+6	; 0x06
     c54:	02 c0       	rjmp	.+4      	; 0xc5a <__stack+0x35b>
     c56:	22 0f       	add	r18, r18
     c58:	33 1f       	adc	r19, r19
     c5a:	0a 94       	dec	r0
     c5c:	e2 f7       	brpl	.-8      	; 0xc56 <__stack+0x357>
     c5e:	20 95       	com	r18
     c60:	24 23       	and	r18, r20
     c62:	2c 93       	st	X, r18
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
     c64:	db 01       	movw	r26, r22
     c66:	ed 91       	ld	r30, X+
     c68:	bd 01       	movw	r22, r26
     c6a:	e1 11       	cpse	r30, r1
     c6c:	e4 cf       	rjmp	.-56     	; 0xc36 <__stack+0x337>
     c6e:	89 e0       	ldi	r24, 0x09	; 9
     c70:	90 e0       	ldi	r25, 0x00	; 0
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     c72:	5a 98       	cbi	0x0b, 2	; 11
     c74:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     c76:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     c78:	5b 98       	cbi	0x0b, 3	; 11
     c7a:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     c7c:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     c7e:	5b 98       	cbi	0x0b, 3	; 11
     c80:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     c82:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     c84:	5b 98       	cbi	0x0b, 3	; 11
     c86:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     c88:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     c8a:	5b 98       	cbi	0x0b, 3	; 11
     c8c:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     c8e:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     c90:	5b 98       	cbi	0x0b, 3	; 11
     c92:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     c94:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     c96:	5b 98       	cbi	0x0b, 3	; 11
     c98:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     c9a:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     c9c:	5b 98       	cbi	0x0b, 3	; 11
     c9e:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     ca0:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     ca2:	5b 98       	cbi	0x0b, 3	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     ca4:	5a 9a       	sbi	0x0b, 2	; 11
     ca6:	01 97       	sbiw	r24, 0x01	; 1
/* Clear Display                                                        */
/************************************************************************/
static inline void Clear(){
	int x, y = 0;
	pinsMultiWrite(plex_pins, LOW);
	for(x = 0; x < (SH_REG + 1); x++) {
     ca8:	21 f7       	brne	.-56     	; 0xc72 <__stack+0x373>
     caa:	bf ef       	ldi	r27, 0xFF	; 255
     cac:	e9 e6       	ldi	r30, 0x69	; 105
     cae:	f8 e1       	ldi	r31, 0x18	; 24
     cb0:	b1 50       	subi	r27, 0x01	; 1
     cb2:	e0 40       	sbci	r30, 0x00	; 0
     cb4:	f0 40       	sbci	r31, 0x00	; 0
     cb6:	e1 f7       	brne	.-8      	; 0xcb0 <__stack+0x3b1>
     cb8:	00 c0       	rjmp	.+0      	; 0xcba <__stack+0x3bb>
     cba:	00 00       	nop
     cbc:	9a 94       	dec	r9
/************************************************************************/
/* blinker                                                         */
/************************************************************************/
void Blinker(const uint8_t *p, uint8_t time, uint8_t times)
{
	while(times-- > 0)
     cbe:	91 10       	cpse	r9, r1
     cc0:	89 ce       	rjmp	.-750    	; 0x9d4 <__stack+0xd5>
     cc2:	d3 01       	movw	r26, r6
     cc4:	eb 2d       	mov	r30, r11
     cc6:	1d 92       	st	X+, r1
     cc8:	ea 95       	dec	r30
     cca:	e9 f7       	brne	.-6      	; 0xcc6 <__stack+0x3c7>
     ccc:	20 e0       	ldi	r18, 0x00	; 0
     cce:	8d e4       	ldi	r24, 0x4D	; 77
/* returns the index of the first byte of the requested character       */
/************************************************************************/
uint8_t CharStart(const char *p)
{
	/*if(*p == ' ') return 0;
	else*/ return (uint8_t) (( *p - ' '));
     cd0:	80 52       	subi	r24, 0x20	; 32
		s_pos = (MT_SIZE - (c_len * FONT_WIDTH) - c_len - 2);
	}
	pos_index = s_pos;
	ClearStringBuffer();
	while(*ch){
		index = CharStart(ch++) * FONT_WIDTH;
     cd2:	f5 e0       	ldi	r31, 0x05	; 5
     cd4:	8f 9f       	mul	r24, r31
     cd6:	c0 01       	movw	r24, r0
     cd8:	11 24       	eor	r1, r1
		for(len = 0; len < FONT_WIDTH; len++){
			stringbuffer[pos_index] = (uint8_t)(pgm_read_byte((font_5x7 + index)));
     cda:	fc 01       	movw	r30, r24
     cdc:	e8 59       	subi	r30, 0x98	; 152
     cde:	ff 4f       	sbci	r31, 0xFF	; 255
     ce0:	34 91       	lpm	r19, Z
     ce2:	e2 2f       	mov	r30, r18
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	e0 5a       	subi	r30, 0xA0	; 160
     ce8:	fd 4f       	sbci	r31, 0xFD	; 253
     cea:	30 83       	st	Z, r19
     cec:	fc 01       	movw	r30, r24
     cee:	e7 59       	subi	r30, 0x97	; 151
     cf0:	ff 4f       	sbci	r31, 0xFF	; 255
     cf2:	34 91       	lpm	r19, Z
     cf4:	e1 e0       	ldi	r30, 0x01	; 1
     cf6:	e2 0f       	add	r30, r18
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	e0 5a       	subi	r30, 0xA0	; 160
     cfc:	fd 4f       	sbci	r31, 0xFD	; 253
     cfe:	30 83       	st	Z, r19
     d00:	fc 01       	movw	r30, r24
     d02:	e6 59       	subi	r30, 0x96	; 150
     d04:	ff 4f       	sbci	r31, 0xFF	; 255
     d06:	34 91       	lpm	r19, Z
     d08:	e2 e0       	ldi	r30, 0x02	; 2
     d0a:	e2 0f       	add	r30, r18
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	e0 5a       	subi	r30, 0xA0	; 160
     d10:	fd 4f       	sbci	r31, 0xFD	; 253
     d12:	30 83       	st	Z, r19
     d14:	fc 01       	movw	r30, r24
     d16:	e5 59       	subi	r30, 0x95	; 149
     d18:	ff 4f       	sbci	r31, 0xFF	; 255
     d1a:	34 91       	lpm	r19, Z
     d1c:	e3 e0       	ldi	r30, 0x03	; 3
     d1e:	e2 0f       	add	r30, r18
     d20:	f0 e0       	ldi	r31, 0x00	; 0
     d22:	e0 5a       	subi	r30, 0xA0	; 160
     d24:	fd 4f       	sbci	r31, 0xFD	; 253
     d26:	30 83       	st	Z, r19
     d28:	fc 01       	movw	r30, r24
     d2a:	e4 59       	subi	r30, 0x94	; 148
     d2c:	ff 4f       	sbci	r31, 0xFF	; 255
     d2e:	84 91       	lpm	r24, Z
     d30:	e4 e0       	ldi	r30, 0x04	; 4
     d32:	e2 0f       	add	r30, r18
     d34:	f0 e0       	ldi	r31, 0x00	; 0
     d36:	e0 5a       	subi	r30, 0xA0	; 160
     d38:	fd 4f       	sbci	r31, 0xFD	; 253
     d3a:	80 83       	st	Z, r24
			index++; pos_index++;
		}
		pos_index += 1; //space the characters
     d3c:	2a 5f       	subi	r18, 0xFA	; 250
	}else if(align == RIGHT){
		s_pos = (MT_SIZE - (c_len * FONT_WIDTH) - c_len - 2);
	}
	pos_index = s_pos;
	ClearStringBuffer();
	while(*ch){
     d3e:	d6 01       	movw	r26, r12
     d40:	8d 91       	ld	r24, X+
     d42:	6d 01       	movw	r12, r26
     d44:	81 11       	cpse	r24, r1
     d46:	c4 cf       	rjmp	.-120    	; 0xcd0 <__stack+0x3d1>
     d48:	c1 2c       	mov	r12, r1
     d4a:	d1 2c       	mov	r13, r1
     d4c:	8c 2d       	mov	r24, r12
     d4e:	20 e0       	ldi	r18, 0x00	; 0
     d50:	30 e0       	ldi	r19, 0x00	; 0
{
	uint8_t index, begin, end = 0;
	//*bf = buffer;
	for(index = 0; index < MT_SIZE; index++)
	{
		for(begin = 0; begin <= index; begin++) (*(bf + begin) = 0x00);
     d52:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <bf>
     d56:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <bf+0x1>
     d5a:	e2 0f       	add	r30, r18
     d5c:	f3 1f       	adc	r31, r19
     d5e:	10 82       	st	Z, r1
     d60:	2f 5f       	subi	r18, 0xFF	; 255
     d62:	3f 4f       	sbci	r19, 0xFF	; 255
     d64:	82 17       	cp	r24, r18
     d66:	a8 f7       	brcc	.-22     	; 0xd52 <__stack+0x453>
		for(end = index; end < MT_SIZE; end++) (*(bf + end) = (*((p+(end-index)))));
     d68:	28 2f       	mov	r18, r24
     d6a:	30 e0       	ldi	r19, 0x00	; 0
     d6c:	f9 01       	movw	r30, r18
     d6e:	ec 19       	sub	r30, r12
     d70:	fd 09       	sbc	r31, r13
     d72:	e0 5a       	subi	r30, 0xA0	; 160
     d74:	fd 4f       	sbci	r31, 0xFD	; 253
     d76:	90 81       	ld	r25, Z
     d78:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <bf>
     d7c:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <bf+0x1>
     d80:	fa 01       	movw	r30, r20
     d82:	e2 0f       	add	r30, r18
     d84:	f3 1f       	adc	r31, r19
     d86:	90 83       	st	Z, r25
     d88:	8f 5f       	subi	r24, 0xFF	; 255
     d8a:	80 34       	cpi	r24, 0x40	; 64
     d8c:	69 f7       	brne	.-38     	; 0xd68 <__stack+0x469>
     d8e:	6a e0       	ldi	r22, 0x0A	; 10
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
     d90:	84 e0       	ldi	r24, 0x04	; 4
     d92:	91 e0       	ldi	r25, 0x01	; 1
     d94:	81 2c       	mov	r8, r1
     d96:	91 2c       	mov	r9, r1
     d98:	31 e0       	ldi	r19, 0x01	; 1
     d9a:	08 2c       	mov	r0, r8
     d9c:	01 c0       	rjmp	.+2      	; 0xda0 <__stack+0x4a1>
     d9e:	33 0f       	add	r19, r19
     da0:	0a 94       	dec	r0
     da2:	ea f7       	brpl	.-6      	; 0xd9e <__stack+0x49f>
/************************************************************************/
/* blinker                                                         */
/************************************************************************/
void Blinker(const uint8_t *p, uint8_t time, uint8_t times)
{
	while(times-- > 0)
     da4:	2f e3       	ldi	r18, 0x3F	; 63
     da6:	5a c0       	rjmp	.+180    	; 0xe5c <__stack+0x55d>
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     da8:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     daa:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     dac:	5b 98       	cbi	0x0b, 3	; 11
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
			pinWrite(latch_pin, LOW);
			for(bit = 0; bit <= FONT_HEIGHT ; bit++){
				pinWrite(data_pin,((*(p+pos)) & (1 << byte)));
     dae:	ef ef       	ldi	r30, 0xFF	; 255
     db0:	e2 0f       	add	r30, r18
     db2:	f0 e0       	ldi	r31, 0x00	; 0
     db4:	e0 56       	subi	r30, 0x60	; 96
     db6:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
     db8:	40 81       	ld	r20, Z
     dba:	43 23       	and	r20, r19
     dbc:	09 f0       	breq	.+2      	; 0xdc0 <__stack+0x4c1>
     dbe:	07 c2       	rjmp	.+1038   	; 0x11ce <__stack+0x8cf>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     dc0:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     dc2:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     dc4:	5b 98       	cbi	0x0b, 3	; 11
     dc6:	ee ef       	ldi	r30, 0xFE	; 254
     dc8:	e2 0f       	add	r30, r18
     dca:	f0 e0       	ldi	r31, 0x00	; 0
     dcc:	e0 56       	subi	r30, 0x60	; 96
     dce:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
     dd0:	40 81       	ld	r20, Z
     dd2:	43 23       	and	r20, r19
     dd4:	09 f0       	breq	.+2      	; 0xdd8 <__stack+0x4d9>
     dd6:	f9 c1       	rjmp	.+1010   	; 0x11ca <__stack+0x8cb>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     dd8:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     dda:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     ddc:	5b 98       	cbi	0x0b, 3	; 11
     dde:	ed ef       	ldi	r30, 0xFD	; 253
     de0:	e2 0f       	add	r30, r18
     de2:	f0 e0       	ldi	r31, 0x00	; 0
     de4:	e0 56       	subi	r30, 0x60	; 96
     de6:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
     de8:	40 81       	ld	r20, Z
     dea:	43 23       	and	r20, r19
     dec:	09 f0       	breq	.+2      	; 0xdf0 <__stack+0x4f1>
     dee:	eb c1       	rjmp	.+982    	; 0x11c6 <__stack+0x8c7>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     df0:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     df2:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     df4:	5b 98       	cbi	0x0b, 3	; 11
     df6:	ec ef       	ldi	r30, 0xFC	; 252
     df8:	e2 0f       	add	r30, r18
     dfa:	f0 e0       	ldi	r31, 0x00	; 0
     dfc:	e0 56       	subi	r30, 0x60	; 96
     dfe:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
     e00:	40 81       	ld	r20, Z
     e02:	43 23       	and	r20, r19
     e04:	09 f0       	breq	.+2      	; 0xe08 <__stack+0x509>
     e06:	dd c1       	rjmp	.+954    	; 0x11c2 <__stack+0x8c3>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     e08:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     e0a:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     e0c:	5b 98       	cbi	0x0b, 3	; 11
     e0e:	eb ef       	ldi	r30, 0xFB	; 251
     e10:	e2 0f       	add	r30, r18
     e12:	f0 e0       	ldi	r31, 0x00	; 0
     e14:	e0 56       	subi	r30, 0x60	; 96
     e16:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
     e18:	40 81       	ld	r20, Z
     e1a:	43 23       	and	r20, r19
     e1c:	09 f0       	breq	.+2      	; 0xe20 <__stack+0x521>
     e1e:	cf c1       	rjmp	.+926    	; 0x11be <__stack+0x8bf>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     e20:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     e22:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     e24:	5b 98       	cbi	0x0b, 3	; 11
     e26:	ea ef       	ldi	r30, 0xFA	; 250
     e28:	e2 0f       	add	r30, r18
     e2a:	f0 e0       	ldi	r31, 0x00	; 0
     e2c:	e0 56       	subi	r30, 0x60	; 96
     e2e:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
     e30:	40 81       	ld	r20, Z
     e32:	43 23       	and	r20, r19
     e34:	09 f0       	breq	.+2      	; 0xe38 <__stack+0x539>
     e36:	c1 c1       	rjmp	.+898    	; 0x11ba <__stack+0x8bb>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     e38:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     e3a:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     e3c:	5b 98       	cbi	0x0b, 3	; 11
     e3e:	e9 ef       	ldi	r30, 0xF9	; 249
     e40:	e2 0f       	add	r30, r18
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	e0 56       	subi	r30, 0x60	; 96
     e46:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
     e48:	40 81       	ld	r20, Z
     e4a:	43 23       	and	r20, r19
     e4c:	91 f5       	brne	.+100    	; 0xeb2 <__stack+0x5b3>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     e4e:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     e50:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     e52:	5b 98       	cbi	0x0b, 3	; 11
				//toggle the clock pin
				pinWrite(clock_pin, HIGH);
				pinWrite(clock_pin, LOW);
				pos--;
     e54:	28 50       	subi	r18, 0x08	; 8
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     e56:	5a 9a       	sbi	0x0b, 2	; 11
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
     e58:	2f 3f       	cpi	r18, 0xFF	; 255
     e5a:	91 f1       	breq	.+100    	; 0xec0 <__stack+0x5c1>
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     e5c:	5a 98       	cbi	0x0b, 2	; 11
			pinWrite(latch_pin, LOW);
			for(bit = 0; bit <= FONT_HEIGHT ; bit++){
				pinWrite(data_pin,((*(p+pos)) & (1 << byte)));
     e5e:	e2 2f       	mov	r30, r18
     e60:	f0 e0       	ldi	r31, 0x00	; 0
     e62:	e0 56       	subi	r30, 0x60	; 96
     e64:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
     e66:	40 81       	ld	r20, Z
     e68:	43 23       	and	r20, r19
     e6a:	09 f4       	brne	.+2      	; 0xe6e <__stack+0x56f>
     e6c:	9d cf       	rjmp	.-198    	; 0xda8 <__stack+0x4a9>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     e6e:	59 9a       	sbi	0x0b, 1	; 11
     e70:	9c cf       	rjmp	.-200    	; 0xdaa <__stack+0x4ab>
     e72:	59 9a       	sbi	0x0b, 1	; 11
     e74:	06 ce       	rjmp	.-1012   	; 0xa82 <__stack+0x183>
     e76:	59 9a       	sbi	0x0b, 1	; 11
     e78:	f8 cd       	rjmp	.-1040   	; 0xa6a <__stack+0x16b>
     e7a:	59 9a       	sbi	0x0b, 1	; 11
     e7c:	ea cd       	rjmp	.-1068   	; 0xa52 <__stack+0x153>
     e7e:	59 9a       	sbi	0x0b, 1	; 11
     e80:	dc cd       	rjmp	.-1096   	; 0xa3a <__stack+0x13b>
     e82:	59 9a       	sbi	0x0b, 1	; 11
     e84:	ce cd       	rjmp	.-1124   	; 0xa22 <__stack+0x123>
     e86:	59 9a       	sbi	0x0b, 1	; 11
     e88:	c0 cd       	rjmp	.-1152   	; 0xa0a <__stack+0x10b>
     e8a:	b7 e0       	ldi	r27, 0x07	; 7
     e8c:	eb 9f       	mul	r30, r27
     e8e:	f0 01       	movw	r30, r0
     e90:	11 24       	eor	r1, r1
     e92:	ec 5a       	subi	r30, 0xAC	; 172
     e94:	fe 4f       	sbci	r31, 0xFE	; 254
     e96:	a2 81       	ldd	r26, Z+2	; 0x02
     e98:	b3 81       	ldd	r27, Z+3	; 0x03
     e9a:	6c 91       	ld	r22, X
     e9c:	41 e0       	ldi	r20, 0x01	; 1
     e9e:	50 e0       	ldi	r21, 0x00	; 0
     ea0:	06 80       	ldd	r0, Z+6	; 0x06
     ea2:	02 c0       	rjmp	.+4      	; 0xea8 <__stack+0x5a9>
     ea4:	44 0f       	add	r20, r20
     ea6:	55 1f       	adc	r21, r21
     ea8:	0a 94       	dec	r0
     eaa:	e2 f7       	brpl	.-8      	; 0xea4 <__stack+0x5a5>
     eac:	46 2b       	or	r20, r22
     eae:	4c 93       	st	X, r20
     eb0:	59 ce       	rjmp	.-846    	; 0xb64 <__stack+0x265>
     eb2:	59 9a       	sbi	0x0b, 1	; 11
     eb4:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     eb6:	5b 98       	cbi	0x0b, 3	; 11
				//toggle the clock pin
				pinWrite(clock_pin, HIGH);
				pinWrite(clock_pin, LOW);
				pos--;
     eb8:	28 50       	subi	r18, 0x08	; 8
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     eba:	5a 9a       	sbi	0x0b, 2	; 11
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
     ebc:	2f 3f       	cpi	r18, 0xFF	; 255
     ebe:	71 f6       	brne	.-100    	; 0xe5c <__stack+0x55d>
     ec0:	a4 e0       	ldi	r26, 0x04	; 4
     ec2:	b1 e0       	ldi	r27, 0x01	; 1
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
     ec4:	ed 91       	ld	r30, X+
     ec6:	ee 23       	and	r30, r30
     ec8:	09 f1       	breq	.+66     	; 0xf0c <__stack+0x60d>
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
     eca:	ec 3c       	cpi	r30, 0xCC	; 204
     ecc:	d8 f7       	brcc	.-10     	; 0xec4 <__stack+0x5c5>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     ece:	27 e0       	ldi	r18, 0x07	; 7
     ed0:	e2 9f       	mul	r30, r18
     ed2:	f0 01       	movw	r30, r0
     ed4:	11 24       	eor	r1, r1
     ed6:	af 01       	movw	r20, r30
     ed8:	4c 5a       	subi	r20, 0xAC	; 172
     eda:	5e 4f       	sbci	r21, 0xFE	; 254
     edc:	2a 01       	movw	r4, r20
     ede:	fa 01       	movw	r30, r20
     ee0:	42 81       	ldd	r20, Z+2	; 0x02
     ee2:	53 81       	ldd	r21, Z+3	; 0x03
     ee4:	fa 01       	movw	r30, r20
     ee6:	30 81       	ld	r19, Z
     ee8:	22 24       	eor	r2, r2
     eea:	23 94       	inc	r2
     eec:	31 2c       	mov	r3, r1
     eee:	f2 01       	movw	r30, r4
     ef0:	06 80       	ldd	r0, Z+6	; 0x06
     ef2:	02 c0       	rjmp	.+4      	; 0xef8 <__stack+0x5f9>
     ef4:	22 0c       	add	r2, r2
     ef6:	33 1c       	adc	r3, r3
     ef8:	0a 94       	dec	r0
     efa:	e2 f7       	brpl	.-8      	; 0xef4 <__stack+0x5f5>
     efc:	22 2d       	mov	r18, r2
     efe:	20 95       	com	r18
     f00:	23 23       	and	r18, r19
     f02:	fa 01       	movw	r30, r20
     f04:	20 83       	st	Z, r18
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
     f06:	ed 91       	ld	r30, X+
     f08:	e1 11       	cpse	r30, r1
     f0a:	df cf       	rjmp	.-66     	; 0xeca <__stack+0x5cb>
/* Multiplexing method                                                  */
/************************************************************************/
static inline void MultiPlex(uint8_t *pin)
{
	pinsMultiWrite(plex_pins, LOW);
	pinWrite(plex_pins[*pin], HIGH);
     f0c:	dc 01       	movw	r26, r24
     f0e:	ed 91       	ld	r30, X+
     f10:	cd 01       	movw	r24, r26
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
     f12:	ec 3c       	cpi	r30, 0xCC	; 204
     f14:	08 f4       	brcc	.+2      	; 0xf18 <__stack+0x619>
     f16:	5d c1       	rjmp	.+698    	; 0x11d2 <__stack+0x8d3>
	delay(delayms);
     f18:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     f1c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
/*  delay                                                               */
/************************************************************************/
int delayms = 1;
static inline void delay(int dl)
{
	while(dl >= 0)
     f20:	37 fd       	sbrc	r19, 7
     f22:	09 c0       	rjmp	.+18     	; 0xf36 <__stack+0x637>
     f24:	ef e9       	ldi	r30, 0x9F	; 159
     f26:	ff e0       	ldi	r31, 0x0F	; 15
     f28:	31 97       	sbiw	r30, 0x01	; 1
     f2a:	f1 f7       	brne	.-4      	; 0xf28 <__stack+0x629>
     f2c:	00 c0       	rjmp	.+0      	; 0xf2e <__stack+0x62f>
     f2e:	00 00       	nop
	{
		_delay_ms(1);
		dl--;
     f30:	21 50       	subi	r18, 0x01	; 1
     f32:	31 09       	sbc	r19, r1
     f34:	b8 f7       	brcc	.-18     	; 0xf24 <__stack+0x625>
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
     f36:	a4 e0       	ldi	r26, 0x04	; 4
     f38:	b1 e0       	ldi	r27, 0x01	; 1
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
     f3a:	ed 91       	ld	r30, X+
     f3c:	ee 23       	and	r30, r30
     f3e:	09 f1       	breq	.+66     	; 0xf82 <__stack+0x683>
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
     f40:	ec 3c       	cpi	r30, 0xCC	; 204
     f42:	d8 f7       	brcc	.-10     	; 0xf3a <__stack+0x63b>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     f44:	27 e0       	ldi	r18, 0x07	; 7
     f46:	e2 9f       	mul	r30, r18
     f48:	f0 01       	movw	r30, r0
     f4a:	11 24       	eor	r1, r1
     f4c:	af 01       	movw	r20, r30
     f4e:	4c 5a       	subi	r20, 0xAC	; 172
     f50:	5e 4f       	sbci	r21, 0xFE	; 254
     f52:	2a 01       	movw	r4, r20
     f54:	fa 01       	movw	r30, r20
     f56:	42 81       	ldd	r20, Z+2	; 0x02
     f58:	53 81       	ldd	r21, Z+3	; 0x03
     f5a:	fa 01       	movw	r30, r20
     f5c:	30 81       	ld	r19, Z
     f5e:	22 24       	eor	r2, r2
     f60:	23 94       	inc	r2
     f62:	31 2c       	mov	r3, r1
     f64:	f2 01       	movw	r30, r4
     f66:	06 80       	ldd	r0, Z+6	; 0x06
     f68:	02 c0       	rjmp	.+4      	; 0xf6e <__stack+0x66f>
     f6a:	22 0c       	add	r2, r2
     f6c:	33 1c       	adc	r3, r3
     f6e:	0a 94       	dec	r0
     f70:	e2 f7       	brpl	.-8      	; 0xf6a <__stack+0x66b>
     f72:	22 2d       	mov	r18, r2
     f74:	20 95       	com	r18
     f76:	23 23       	and	r18, r19
     f78:	fa 01       	movw	r30, r20
     f7a:	20 83       	st	Z, r18
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
     f7c:	ed 91       	ld	r30, X+
     f7e:	e1 11       	cpse	r30, r1
     f80:	df cf       	rjmp	.-66     	; 0xf40 <__stack+0x641>
     f82:	29 e0       	ldi	r18, 0x09	; 9
     f84:	30 e0       	ldi	r19, 0x00	; 0
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     f86:	5a 98       	cbi	0x0b, 2	; 11
     f88:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     f8a:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     f8c:	5b 98       	cbi	0x0b, 3	; 11
     f8e:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     f90:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     f92:	5b 98       	cbi	0x0b, 3	; 11
     f94:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     f96:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     f98:	5b 98       	cbi	0x0b, 3	; 11
     f9a:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     f9c:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     f9e:	5b 98       	cbi	0x0b, 3	; 11
     fa0:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     fa2:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     fa4:	5b 98       	cbi	0x0b, 3	; 11
     fa6:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     fa8:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     faa:	5b 98       	cbi	0x0b, 3	; 11
     fac:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     fae:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     fb0:	5b 98       	cbi	0x0b, 3	; 11
     fb2:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     fb4:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     fb6:	5b 98       	cbi	0x0b, 3	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     fb8:	5a 9a       	sbi	0x0b, 2	; 11
     fba:	21 50       	subi	r18, 0x01	; 1
     fbc:	31 09       	sbc	r19, r1
/* Clear Display                                                        */
/************************************************************************/
static inline void Clear(){
	int x, y = 0;
	pinsMultiWrite(plex_pins, LOW);
	for(x = 0; x < (SH_REG + 1); x++) {
     fbe:	19 f7       	brne	.-58     	; 0xf86 <__stack+0x687>
     fc0:	ff ef       	ldi	r31, 0xFF	; 255
     fc2:	8f 1a       	sub	r8, r31
     fc4:	9f 0a       	sbc	r9, r31
{
	uint8_t byte, index, bit = 0;
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
     fc6:	27 e0       	ldi	r18, 0x07	; 7
     fc8:	82 16       	cp	r8, r18
     fca:	91 04       	cpc	r9, r1
     fcc:	09 f0       	breq	.+2      	; 0xfd0 <__stack+0x6d1>
     fce:	e4 ce       	rjmp	.-568    	; 0xd98 <__stack+0x499>
			pinWrite(latch_pin, HIGH);
		}
		MultiPlex(&byte);
		Clear();
	}
	delayms = 1;
     fd0:	f0 92 01 01 	sts	0x0101, r15	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     fd4:	e0 92 00 01 	sts	0x0100, r14	; 0x800100 <__DATA_REGION_ORIGIN__>
     fd8:	61 50       	subi	r22, 0x01	; 1
}
}*/
static inline void HoldDisplayBuffer(const uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
     fda:	09 f0       	breq	.+2      	; 0xfde <__stack+0x6df>
     fdc:	d9 ce       	rjmp	.-590    	; 0xd90 <__stack+0x491>
     fde:	3f ef       	ldi	r19, 0xFF	; 255
     fe0:	c3 1a       	sub	r12, r19
     fe2:	d3 0a       	sbc	r13, r19
/************************************************************************/
void ScrollRight(const uint8_t *p, uint8_t time)
{
	uint8_t index, begin, end = 0;
	//*bf = buffer;
	for(index = 0; index < MT_SIZE; index++)
     fe4:	40 e4       	ldi	r20, 0x40	; 64
     fe6:	c4 16       	cp	r12, r20
     fe8:	d1 04       	cpc	r13, r1
     fea:	09 f0       	breq	.+2      	; 0xfee <__stack+0x6ef>
     fec:	af ce       	rjmp	.-674    	; 0xd4c <__stack+0x44d>
     fee:	d3 01       	movw	r26, r6
     ff0:	eb 2d       	mov	r30, r11
     ff2:	1d 92       	st	X+, r1
     ff4:	ea 95       	dec	r30
     ff6:	e9 f7       	brne	.-6      	; 0xff2 <__stack+0x6f3>
     ff8:	9c e1       	ldi	r25, 0x1C	; 28
     ffa:	49 2e       	mov	r4, r25
     ffc:	91 e0       	ldi	r25, 0x01	; 1
     ffe:	59 2e       	mov	r5, r25
    1000:	d2 01       	movw	r26, r4
    1002:	23 e1       	ldi	r18, 0x13	; 19
    1004:	88 e4       	ldi	r24, 0x48	; 72
/* returns the index of the first byte of the requested character       */
/************************************************************************/
uint8_t CharStart(const char *p)
{
	/*if(*p == ' ') return 0;
	else*/ return (uint8_t) (( *p - ' '));
    1006:	80 52       	subi	r24, 0x20	; 32
		s_pos = (MT_SIZE - (c_len * FONT_WIDTH) - c_len - 2);
	}
	pos_index = s_pos;
	ClearStringBuffer();
	while(*ch){
		index = CharStart(ch++) * FONT_WIDTH;
    1008:	f5 e0       	ldi	r31, 0x05	; 5
    100a:	8f 9f       	mul	r24, r31
    100c:	c0 01       	movw	r24, r0
    100e:	11 24       	eor	r1, r1
		for(len = 0; len < FONT_WIDTH; len++){
			stringbuffer[pos_index] = (uint8_t)(pgm_read_byte((font_5x7 + index)));
    1010:	fc 01       	movw	r30, r24
    1012:	e8 59       	subi	r30, 0x98	; 152
    1014:	ff 4f       	sbci	r31, 0xFF	; 255
    1016:	34 91       	lpm	r19, Z
    1018:	e2 2f       	mov	r30, r18
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	e0 5a       	subi	r30, 0xA0	; 160
    101e:	fd 4f       	sbci	r31, 0xFD	; 253
    1020:	30 83       	st	Z, r19
    1022:	fc 01       	movw	r30, r24
    1024:	e7 59       	subi	r30, 0x97	; 151
    1026:	ff 4f       	sbci	r31, 0xFF	; 255
    1028:	34 91       	lpm	r19, Z
    102a:	e1 e0       	ldi	r30, 0x01	; 1
    102c:	e2 0f       	add	r30, r18
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	e0 5a       	subi	r30, 0xA0	; 160
    1032:	fd 4f       	sbci	r31, 0xFD	; 253
    1034:	30 83       	st	Z, r19
    1036:	fc 01       	movw	r30, r24
    1038:	e6 59       	subi	r30, 0x96	; 150
    103a:	ff 4f       	sbci	r31, 0xFF	; 255
    103c:	34 91       	lpm	r19, Z
    103e:	e2 e0       	ldi	r30, 0x02	; 2
    1040:	e2 0f       	add	r30, r18
    1042:	f0 e0       	ldi	r31, 0x00	; 0
    1044:	e0 5a       	subi	r30, 0xA0	; 160
    1046:	fd 4f       	sbci	r31, 0xFD	; 253
    1048:	30 83       	st	Z, r19
    104a:	fc 01       	movw	r30, r24
    104c:	e5 59       	subi	r30, 0x95	; 149
    104e:	ff 4f       	sbci	r31, 0xFF	; 255
    1050:	34 91       	lpm	r19, Z
    1052:	e3 e0       	ldi	r30, 0x03	; 3
    1054:	e2 0f       	add	r30, r18
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	e0 5a       	subi	r30, 0xA0	; 160
    105a:	fd 4f       	sbci	r31, 0xFD	; 253
    105c:	30 83       	st	Z, r19
    105e:	fc 01       	movw	r30, r24
    1060:	e4 59       	subi	r30, 0x94	; 148
    1062:	ff 4f       	sbci	r31, 0xFF	; 255
    1064:	84 91       	lpm	r24, Z
    1066:	e4 e0       	ldi	r30, 0x04	; 4
    1068:	e2 0f       	add	r30, r18
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	e0 5a       	subi	r30, 0xA0	; 160
    106e:	fd 4f       	sbci	r31, 0xFD	; 253
    1070:	80 83       	st	Z, r24
			index++; pos_index++;
		}
		pos_index += 1; //space the characters
    1072:	2a 5f       	subi	r18, 0xFA	; 250
	}else if(align == RIGHT){
		s_pos = (MT_SIZE - (c_len * FONT_WIDTH) - c_len - 2);
	}
	pos_index = s_pos;
	ClearStringBuffer();
	while(*ch){
    1074:	8d 91       	ld	r24, X+
    1076:	81 11       	cpse	r24, r1
    1078:	c6 cf       	rjmp	.-116    	; 0x1006 <__stack+0x707>
    107a:	28 2d       	mov	r18, r8
    107c:	f0 e6       	ldi	r31, 0x60	; 96
    107e:	6f 2e       	mov	r6, r31
    1080:	f2 e0       	ldi	r31, 0x02	; 2
    1082:	7f 2e       	mov	r7, r31
    1084:	f3 01       	movw	r30, r6
		for(index = 0; index < MT_SIZE; index++)
		{
			if(dir)
			*(bf + index) = (*((p+index)) >> (FONT_HEIGHT-step));
			else
			*(bf + index) = (*((p+index)) << (FONT_HEIGHT-step));
    1086:	cf 01       	movw	r24, r30
    1088:	80 56       	subi	r24, 0x60	; 96
    108a:	92 40       	sbci	r25, 0x02	; 2
    108c:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <bf>
    1090:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <bf+0x1>
    1094:	a8 0f       	add	r26, r24
    1096:	b9 1f       	adc	r27, r25
    1098:	81 91       	ld	r24, Z+
    109a:	02 2e       	mov	r0, r18
    109c:	01 c0       	rjmp	.+2      	; 0x10a0 <__stack+0x7a1>
    109e:	88 0f       	add	r24, r24
    10a0:	0a 94       	dec	r0
    10a2:	ea f7       	brpl	.-6      	; 0x109e <__stack+0x79f>
    10a4:	8c 93       	st	X, r24
{
	//uint8_t *bf = buffer;
	uint8_t index, step = 0;
	for(step = 0; step < FONT_HEIGHT; step++)
	{
		for(index = 0; index < MT_SIZE; index++)
    10a6:	80 ea       	ldi	r24, 0xA0	; 160
    10a8:	28 2e       	mov	r2, r24
    10aa:	82 e0       	ldi	r24, 0x02	; 2
    10ac:	38 2e       	mov	r3, r24
    10ae:	2e 16       	cp	r2, r30
    10b0:	3f 06       	cpc	r3, r31
    10b2:	49 f7       	brne	.-46     	; 0x1086 <__stack+0x787>
			if(dir)
			*(bf + index) = (*((p+index)) >> (FONT_HEIGHT-step));
			else
			*(bf + index) = (*((p+index)) << (FONT_HEIGHT-step));
		}
		HoldDisplayBuffer(bf, time);
    10b4:	20 90 02 01 	lds	r2, 0x0102	; 0x800102 <bf>
    10b8:	30 90 03 01 	lds	r3, 0x0103	; 0x800103 <bf+0x1>
    10bc:	ba e0       	ldi	r27, 0x0A	; 10
    10be:	ab 2e       	mov	r10, r27
}*/
static inline void HoldDisplayBuffer(const uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
		DisplayBuffer(data);
    10c0:	c1 01       	movw	r24, r2
    10c2:	0e 94 41 01 	call	0x282	; 0x282 <DisplayBuffer>
    10c6:	aa 94       	dec	r10
}
}*/
static inline void HoldDisplayBuffer(const uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
    10c8:	a1 10       	cpse	r10, r1
    10ca:	fa cf       	rjmp	.-12     	; 0x10c0 <__stack+0x7c1>
    10cc:	21 e0       	ldi	r18, 0x01	; 1
    10ce:	82 1a       	sub	r8, r18
    10d0:	91 08       	sbc	r9, r1
enum direction{ up, down};
void Drop(const uint8_t *p, uint8_t time, uint8_t dir )
{
	//uint8_t *bf = buffer;
	uint8_t index, step = 0;
	for(step = 0; step < FONT_HEIGHT; step++)
    10d2:	99 f6       	brne	.-90     	; 0x107a <__stack+0x77b>
    10d4:	aa e0       	ldi	r26, 0x0A	; 10
    10d6:	9a 2e       	mov	r9, r26
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    10d8:	64 e0       	ldi	r22, 0x04	; 4
    10da:	71 e0       	ldi	r23, 0x01	; 1
    10dc:	80 e0       	ldi	r24, 0x00	; 0
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	31 e0       	ldi	r19, 0x01	; 1
    10e2:	08 2e       	mov	r0, r24
    10e4:	01 c0       	rjmp	.+2      	; 0x10e8 <__stack+0x7e9>
    10e6:	33 0f       	add	r19, r19
    10e8:	0a 94       	dec	r0
    10ea:	ea f7       	brpl	.-6      	; 0x10e6 <__stack+0x7e7>
			if(dir)
			*(bf + index) = (*((p+index)) >> (FONT_HEIGHT-step));
			else
			*(bf + index) = (*((p+index)) << (FONT_HEIGHT-step));
		}
		HoldDisplayBuffer(bf, time);
    10ec:	2f e3       	ldi	r18, 0x3F	; 63
    10ee:	5a c0       	rjmp	.+180    	; 0x11a4 <__stack+0x8a5>
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    10f0:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    10f2:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    10f4:	5b 98       	cbi	0x0b, 3	; 11
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
			pinWrite(latch_pin, LOW);
			for(bit = 0; bit <= FONT_HEIGHT ; bit++){
				pinWrite(data_pin,((*(p+pos)) & (1 << byte)));
    10f6:	ef ef       	ldi	r30, 0xFF	; 255
    10f8:	e2 0f       	add	r30, r18
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
    10fc:	e0 5a       	subi	r30, 0xA0	; 160
    10fe:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    1100:	40 81       	ld	r20, Z
    1102:	43 23       	and	r20, r19
    1104:	09 f0       	breq	.+2      	; 0x1108 <__stack+0x809>
    1106:	58 c2       	rjmp	.+1200   	; 0x15b8 <__stack+0xcb9>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1108:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    110a:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    110c:	5b 98       	cbi	0x0b, 3	; 11
    110e:	ee ef       	ldi	r30, 0xFE	; 254
    1110:	e2 0f       	add	r30, r18
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	e0 5a       	subi	r30, 0xA0	; 160
    1116:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    1118:	40 81       	ld	r20, Z
    111a:	43 23       	and	r20, r19
    111c:	09 f0       	breq	.+2      	; 0x1120 <__stack+0x821>
    111e:	4a c2       	rjmp	.+1172   	; 0x15b4 <__stack+0xcb5>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1120:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1122:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1124:	5b 98       	cbi	0x0b, 3	; 11
    1126:	ed ef       	ldi	r30, 0xFD	; 253
    1128:	e2 0f       	add	r30, r18
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	e0 5a       	subi	r30, 0xA0	; 160
    112e:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    1130:	40 81       	ld	r20, Z
    1132:	43 23       	and	r20, r19
    1134:	09 f0       	breq	.+2      	; 0x1138 <__stack+0x839>
    1136:	3c c2       	rjmp	.+1144   	; 0x15b0 <__stack+0xcb1>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1138:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    113a:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    113c:	5b 98       	cbi	0x0b, 3	; 11
    113e:	ec ef       	ldi	r30, 0xFC	; 252
    1140:	e2 0f       	add	r30, r18
    1142:	f0 e0       	ldi	r31, 0x00	; 0
    1144:	e0 5a       	subi	r30, 0xA0	; 160
    1146:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    1148:	40 81       	ld	r20, Z
    114a:	43 23       	and	r20, r19
    114c:	09 f0       	breq	.+2      	; 0x1150 <__stack+0x851>
    114e:	2e c2       	rjmp	.+1116   	; 0x15ac <__stack+0xcad>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1150:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1152:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1154:	5b 98       	cbi	0x0b, 3	; 11
    1156:	eb ef       	ldi	r30, 0xFB	; 251
    1158:	e2 0f       	add	r30, r18
    115a:	f0 e0       	ldi	r31, 0x00	; 0
    115c:	e0 5a       	subi	r30, 0xA0	; 160
    115e:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    1160:	40 81       	ld	r20, Z
    1162:	43 23       	and	r20, r19
    1164:	09 f0       	breq	.+2      	; 0x1168 <__stack+0x869>
    1166:	20 c2       	rjmp	.+1088   	; 0x15a8 <__stack+0xca9>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1168:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    116a:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    116c:	5b 98       	cbi	0x0b, 3	; 11
    116e:	ea ef       	ldi	r30, 0xFA	; 250
    1170:	e2 0f       	add	r30, r18
    1172:	f0 e0       	ldi	r31, 0x00	; 0
    1174:	e0 5a       	subi	r30, 0xA0	; 160
    1176:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    1178:	40 81       	ld	r20, Z
    117a:	43 23       	and	r20, r19
    117c:	09 f0       	breq	.+2      	; 0x1180 <__stack+0x881>
    117e:	12 c2       	rjmp	.+1060   	; 0x15a4 <__stack+0xca5>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1180:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1182:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1184:	5b 98       	cbi	0x0b, 3	; 11
    1186:	e9 ef       	ldi	r30, 0xF9	; 249
    1188:	e2 0f       	add	r30, r18
    118a:	f0 e0       	ldi	r31, 0x00	; 0
    118c:	e0 5a       	subi	r30, 0xA0	; 160
    118e:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    1190:	40 81       	ld	r20, Z
    1192:	43 23       	and	r20, r19
    1194:	91 f5       	brne	.+100    	; 0x11fa <__stack+0x8fb>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1196:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1198:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    119a:	5b 98       	cbi	0x0b, 3	; 11
				//toggle the clock pin
				pinWrite(clock_pin, HIGH);
				pinWrite(clock_pin, LOW);
				pos--;
    119c:	28 50       	subi	r18, 0x08	; 8
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    119e:	5a 9a       	sbi	0x0b, 2	; 11
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
    11a0:	2f 3f       	cpi	r18, 0xFF	; 255
    11a2:	91 f1       	breq	.+100    	; 0x1208 <__stack+0x909>
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    11a4:	5a 98       	cbi	0x0b, 2	; 11
			pinWrite(latch_pin, LOW);
			for(bit = 0; bit <= FONT_HEIGHT ; bit++){
				pinWrite(data_pin,((*(p+pos)) & (1 << byte)));
    11a6:	e2 2f       	mov	r30, r18
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	e0 5a       	subi	r30, 0xA0	; 160
    11ac:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    11ae:	40 81       	ld	r20, Z
    11b0:	43 23       	and	r20, r19
    11b2:	09 f4       	brne	.+2      	; 0x11b6 <__stack+0x8b7>
    11b4:	9d cf       	rjmp	.-198    	; 0x10f0 <__stack+0x7f1>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    11b6:	59 9a       	sbi	0x0b, 1	; 11
    11b8:	9c cf       	rjmp	.-200    	; 0x10f2 <__stack+0x7f3>
    11ba:	59 9a       	sbi	0x0b, 1	; 11
    11bc:	3e ce       	rjmp	.-900    	; 0xe3a <__stack+0x53b>
    11be:	59 9a       	sbi	0x0b, 1	; 11
    11c0:	30 ce       	rjmp	.-928    	; 0xe22 <__stack+0x523>
    11c2:	59 9a       	sbi	0x0b, 1	; 11
    11c4:	22 ce       	rjmp	.-956    	; 0xe0a <__stack+0x50b>
    11c6:	59 9a       	sbi	0x0b, 1	; 11
    11c8:	14 ce       	rjmp	.-984    	; 0xdf2 <__stack+0x4f3>
    11ca:	59 9a       	sbi	0x0b, 1	; 11
    11cc:	06 ce       	rjmp	.-1012   	; 0xdda <__stack+0x4db>
    11ce:	59 9a       	sbi	0x0b, 1	; 11
    11d0:	f8 cd       	rjmp	.-1040   	; 0xdc2 <__stack+0x4c3>
    11d2:	b7 e0       	ldi	r27, 0x07	; 7
    11d4:	eb 9f       	mul	r30, r27
    11d6:	f0 01       	movw	r30, r0
    11d8:	11 24       	eor	r1, r1
    11da:	ec 5a       	subi	r30, 0xAC	; 172
    11dc:	fe 4f       	sbci	r31, 0xFE	; 254
    11de:	a2 81       	ldd	r26, Z+2	; 0x02
    11e0:	b3 81       	ldd	r27, Z+3	; 0x03
    11e2:	4c 91       	ld	r20, X
    11e4:	21 e0       	ldi	r18, 0x01	; 1
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	06 80       	ldd	r0, Z+6	; 0x06
    11ea:	02 c0       	rjmp	.+4      	; 0x11f0 <__stack+0x8f1>
    11ec:	22 0f       	add	r18, r18
    11ee:	33 1f       	adc	r19, r19
    11f0:	0a 94       	dec	r0
    11f2:	e2 f7       	brpl	.-8      	; 0x11ec <__stack+0x8ed>
    11f4:	24 2b       	or	r18, r20
    11f6:	2c 93       	st	X, r18
    11f8:	8f ce       	rjmp	.-738    	; 0xf18 <__stack+0x619>
    11fa:	59 9a       	sbi	0x0b, 1	; 11
    11fc:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    11fe:	5b 98       	cbi	0x0b, 3	; 11
				//toggle the clock pin
				pinWrite(clock_pin, HIGH);
				pinWrite(clock_pin, LOW);
				pos--;
    1200:	28 50       	subi	r18, 0x08	; 8
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1202:	5a 9a       	sbi	0x0b, 2	; 11
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
    1204:	2f 3f       	cpi	r18, 0xFF	; 255
    1206:	71 f6       	brne	.-100    	; 0x11a4 <__stack+0x8a5>
    1208:	a4 e0       	ldi	r26, 0x04	; 4
    120a:	b1 e0       	ldi	r27, 0x01	; 1
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    120c:	ed 91       	ld	r30, X+
    120e:	ee 23       	and	r30, r30
    1210:	29 f1       	breq	.+74     	; 0x125c <__stack+0x95d>
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    1212:	ec 3c       	cpi	r30, 0xCC	; 204
    1214:	d8 f7       	brcc	.-10     	; 0x120c <__stack+0x90d>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1216:	37 e0       	ldi	r19, 0x07	; 7
    1218:	e3 9f       	mul	r30, r19
    121a:	f0 01       	movw	r30, r0
    121c:	11 24       	eor	r1, r1
    121e:	af 01       	movw	r20, r30
    1220:	4c 5a       	subi	r20, 0xAC	; 172
    1222:	5e 4f       	sbci	r21, 0xFE	; 254
    1224:	5c 83       	std	Y+4, r21	; 0x04
    1226:	4b 83       	std	Y+3, r20	; 0x03
    1228:	fa 01       	movw	r30, r20
    122a:	42 81       	ldd	r20, Z+2	; 0x02
    122c:	53 81       	ldd	r21, Z+3	; 0x03
    122e:	fa 01       	movw	r30, r20
    1230:	20 81       	ld	r18, Z
    1232:	22 24       	eor	r2, r2
    1234:	23 94       	inc	r2
    1236:	31 2c       	mov	r3, r1
    1238:	eb 81       	ldd	r30, Y+3	; 0x03
    123a:	fc 81       	ldd	r31, Y+4	; 0x04
    123c:	06 80       	ldd	r0, Z+6	; 0x06
    123e:	02 c0       	rjmp	.+4      	; 0x1244 <__stack+0x945>
    1240:	22 0c       	add	r2, r2
    1242:	33 1c       	adc	r3, r3
    1244:	0a 94       	dec	r0
    1246:	e2 f7       	brpl	.-8      	; 0x1240 <__stack+0x941>
    1248:	3c 82       	std	Y+4, r3	; 0x04
    124a:	2b 82       	std	Y+3, r2	; 0x03
    124c:	e2 2d       	mov	r30, r2
    124e:	e0 95       	com	r30
    1250:	2e 23       	and	r18, r30
    1252:	fa 01       	movw	r30, r20
    1254:	20 83       	st	Z, r18
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    1256:	ed 91       	ld	r30, X+
    1258:	e1 11       	cpse	r30, r1
    125a:	db cf       	rjmp	.-74     	; 0x1212 <__stack+0x913>
/* Multiplexing method                                                  */
/************************************************************************/
static inline void MultiPlex(uint8_t *pin)
{
	pinsMultiWrite(plex_pins, LOW);
	pinWrite(plex_pins[*pin], HIGH);
    125c:	db 01       	movw	r26, r22
    125e:	ed 91       	ld	r30, X+
    1260:	bd 01       	movw	r22, r26
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    1262:	ec 3c       	cpi	r30, 0xCC	; 204
    1264:	98 f4       	brcc	.+38     	; 0x128c <__stack+0x98d>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1266:	b7 e0       	ldi	r27, 0x07	; 7
    1268:	eb 9f       	mul	r30, r27
    126a:	f0 01       	movw	r30, r0
    126c:	11 24       	eor	r1, r1
    126e:	ec 5a       	subi	r30, 0xAC	; 172
    1270:	fe 4f       	sbci	r31, 0xFE	; 254
    1272:	a2 81       	ldd	r26, Z+2	; 0x02
    1274:	b3 81       	ldd	r27, Z+3	; 0x03
    1276:	4c 91       	ld	r20, X
    1278:	21 e0       	ldi	r18, 0x01	; 1
    127a:	30 e0       	ldi	r19, 0x00	; 0
    127c:	06 80       	ldd	r0, Z+6	; 0x06
    127e:	02 c0       	rjmp	.+4      	; 0x1284 <__stack+0x985>
    1280:	22 0f       	add	r18, r18
    1282:	33 1f       	adc	r19, r19
    1284:	0a 94       	dec	r0
    1286:	e2 f7       	brpl	.-8      	; 0x1280 <__stack+0x981>
    1288:	24 2b       	or	r18, r20
    128a:	2c 93       	st	X, r18
	delay(delayms);
    128c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1290:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
/*  delay                                                               */
/************************************************************************/
int delayms = 1;
static inline void delay(int dl)
{
	while(dl >= 0)
    1294:	37 fd       	sbrc	r19, 7
    1296:	09 c0       	rjmp	.+18     	; 0x12aa <__stack+0x9ab>
    1298:	ef e9       	ldi	r30, 0x9F	; 159
    129a:	ff e0       	ldi	r31, 0x0F	; 15
    129c:	31 97       	sbiw	r30, 0x01	; 1
    129e:	f1 f7       	brne	.-4      	; 0x129c <__stack+0x99d>
    12a0:	00 c0       	rjmp	.+0      	; 0x12a2 <__stack+0x9a3>
    12a2:	00 00       	nop
	{
		_delay_ms(1);
		dl--;
    12a4:	21 50       	subi	r18, 0x01	; 1
    12a6:	31 09       	sbc	r19, r1
    12a8:	b8 f7       	brcc	.-18     	; 0x1298 <__stack+0x999>
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
    12aa:	a4 e0       	ldi	r26, 0x04	; 4
    12ac:	b1 e0       	ldi	r27, 0x01	; 1
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    12ae:	ed 91       	ld	r30, X+
    12b0:	ee 23       	and	r30, r30
    12b2:	29 f1       	breq	.+74     	; 0x12fe <__stack+0x9ff>
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    12b4:	ec 3c       	cpi	r30, 0xCC	; 204
    12b6:	d8 f7       	brcc	.-10     	; 0x12ae <__stack+0x9af>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    12b8:	27 e0       	ldi	r18, 0x07	; 7
    12ba:	e2 9f       	mul	r30, r18
    12bc:	f0 01       	movw	r30, r0
    12be:	11 24       	eor	r1, r1
    12c0:	af 01       	movw	r20, r30
    12c2:	4c 5a       	subi	r20, 0xAC	; 172
    12c4:	5e 4f       	sbci	r21, 0xFE	; 254
    12c6:	5c 83       	std	Y+4, r21	; 0x04
    12c8:	4b 83       	std	Y+3, r20	; 0x03
    12ca:	fa 01       	movw	r30, r20
    12cc:	42 81       	ldd	r20, Z+2	; 0x02
    12ce:	53 81       	ldd	r21, Z+3	; 0x03
    12d0:	fa 01       	movw	r30, r20
    12d2:	20 81       	ld	r18, Z
    12d4:	22 24       	eor	r2, r2
    12d6:	23 94       	inc	r2
    12d8:	31 2c       	mov	r3, r1
    12da:	eb 81       	ldd	r30, Y+3	; 0x03
    12dc:	fc 81       	ldd	r31, Y+4	; 0x04
    12de:	06 80       	ldd	r0, Z+6	; 0x06
    12e0:	02 c0       	rjmp	.+4      	; 0x12e6 <__stack+0x9e7>
    12e2:	22 0c       	add	r2, r2
    12e4:	33 1c       	adc	r3, r3
    12e6:	0a 94       	dec	r0
    12e8:	e2 f7       	brpl	.-8      	; 0x12e2 <__stack+0x9e3>
    12ea:	3c 82       	std	Y+4, r3	; 0x04
    12ec:	2b 82       	std	Y+3, r2	; 0x03
    12ee:	e2 2d       	mov	r30, r2
    12f0:	e0 95       	com	r30
    12f2:	2e 23       	and	r18, r30
    12f4:	fa 01       	movw	r30, r20
    12f6:	20 83       	st	Z, r18
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    12f8:	ed 91       	ld	r30, X+
    12fa:	e1 11       	cpse	r30, r1
    12fc:	db cf       	rjmp	.-74     	; 0x12b4 <__stack+0x9b5>
    12fe:	29 e0       	ldi	r18, 0x09	; 9
    1300:	30 e0       	ldi	r19, 0x00	; 0
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1302:	5a 98       	cbi	0x0b, 2	; 11
    1304:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1306:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1308:	5b 98       	cbi	0x0b, 3	; 11
    130a:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    130c:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    130e:	5b 98       	cbi	0x0b, 3	; 11
    1310:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1312:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1314:	5b 98       	cbi	0x0b, 3	; 11
    1316:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1318:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    131a:	5b 98       	cbi	0x0b, 3	; 11
    131c:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    131e:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1320:	5b 98       	cbi	0x0b, 3	; 11
    1322:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1324:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1326:	5b 98       	cbi	0x0b, 3	; 11
    1328:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    132a:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    132c:	5b 98       	cbi	0x0b, 3	; 11
    132e:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1330:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1332:	5b 98       	cbi	0x0b, 3	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1334:	5a 9a       	sbi	0x0b, 2	; 11
    1336:	21 50       	subi	r18, 0x01	; 1
    1338:	31 09       	sbc	r19, r1
/* Clear Display                                                        */
/************************************************************************/
static inline void Clear(){
	int x, y = 0;
	pinsMultiWrite(plex_pins, LOW);
	for(x = 0; x < (SH_REG + 1); x++) {
    133a:	19 f7       	brne	.-58     	; 0x1302 <__stack+0xa03>
    133c:	01 96       	adiw	r24, 0x01	; 1
{
	uint8_t byte, index, bit = 0;
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
    133e:	87 30       	cpi	r24, 0x07	; 7
    1340:	91 05       	cpc	r25, r1
    1342:	09 f0       	breq	.+2      	; 0x1346 <__stack+0xa47>
    1344:	cd ce       	rjmp	.-614    	; 0x10e0 <__stack+0x7e1>
			pinWrite(latch_pin, HIGH);
		}
		MultiPlex(&byte);
		Clear();
	}
	delayms = 1;
    1346:	22 24       	eor	r2, r2
    1348:	23 94       	inc	r2
    134a:	31 2c       	mov	r3, r1
    134c:	30 92 01 01 	sts	0x0101, r3	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1350:	20 92 00 01 	sts	0x0100, r2	; 0x800100 <__DATA_REGION_ORIGIN__>
    1354:	9a 94       	dec	r9
}
}*/
static inline void HoldDisplayBuffer(const uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
    1356:	91 10       	cpse	r9, r1
    1358:	bf ce       	rjmp	.-642    	; 0x10d8 <__stack+0x7d9>
    135a:	d8 01       	movw	r26, r16
    135c:	eb 2d       	mov	r30, r11
    135e:	1d 92       	st	X+, r1
    1360:	ea 95       	dec	r30
    1362:	e9 f7       	brne	.-6      	; 0x135e <__stack+0xa5f>
    1364:	ac e1       	ldi	r26, 0x1C	; 28
    1366:	b1 e0       	ldi	r27, 0x01	; 1
    1368:	23 e1       	ldi	r18, 0x13	; 19
    136a:	88 e4       	ldi	r24, 0x48	; 72
/* returns the index of the first byte of the requested character       */
/************************************************************************/
uint8_t CharStart(const char *p)
{
	/*if(*p == ' ') return 0;
	else*/ return (uint8_t) (( *p - ' '));
    136c:	80 52       	subi	r24, 0x20	; 32
		s_pos = (MT_SIZE - (c_len * FONT_WIDTH) - c_len - 2);
	}
	pos_index = s_pos;
	ClearStringBuffer();
	while(*ch){
		index = CharStart(ch++) * FONT_WIDTH;
    136e:	f5 e0       	ldi	r31, 0x05	; 5
    1370:	8f 9f       	mul	r24, r31
    1372:	c0 01       	movw	r24, r0
    1374:	11 24       	eor	r1, r1
		for(len = 0; len < FONT_WIDTH; len++){
			stringbuffer[pos_index] = (uint8_t)(pgm_read_byte((font_5x7 + index)));
    1376:	fc 01       	movw	r30, r24
    1378:	e8 59       	subi	r30, 0x98	; 152
    137a:	ff 4f       	sbci	r31, 0xFF	; 255
    137c:	34 91       	lpm	r19, Z
    137e:	e2 2f       	mov	r30, r18
    1380:	f0 e0       	ldi	r31, 0x00	; 0
    1382:	e0 5a       	subi	r30, 0xA0	; 160
    1384:	fd 4f       	sbci	r31, 0xFD	; 253
    1386:	30 83       	st	Z, r19
    1388:	fc 01       	movw	r30, r24
    138a:	e7 59       	subi	r30, 0x97	; 151
    138c:	ff 4f       	sbci	r31, 0xFF	; 255
    138e:	34 91       	lpm	r19, Z
    1390:	e1 e0       	ldi	r30, 0x01	; 1
    1392:	e2 0f       	add	r30, r18
    1394:	f0 e0       	ldi	r31, 0x00	; 0
    1396:	e0 5a       	subi	r30, 0xA0	; 160
    1398:	fd 4f       	sbci	r31, 0xFD	; 253
    139a:	30 83       	st	Z, r19
    139c:	fc 01       	movw	r30, r24
    139e:	e6 59       	subi	r30, 0x96	; 150
    13a0:	ff 4f       	sbci	r31, 0xFF	; 255
    13a2:	34 91       	lpm	r19, Z
    13a4:	e2 e0       	ldi	r30, 0x02	; 2
    13a6:	e2 0f       	add	r30, r18
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    13aa:	e0 5a       	subi	r30, 0xA0	; 160
    13ac:	fd 4f       	sbci	r31, 0xFD	; 253
    13ae:	30 83       	st	Z, r19
    13b0:	fc 01       	movw	r30, r24
    13b2:	e5 59       	subi	r30, 0x95	; 149
    13b4:	ff 4f       	sbci	r31, 0xFF	; 255
    13b6:	34 91       	lpm	r19, Z
    13b8:	e3 e0       	ldi	r30, 0x03	; 3
    13ba:	e2 0f       	add	r30, r18
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	e0 5a       	subi	r30, 0xA0	; 160
    13c0:	fd 4f       	sbci	r31, 0xFD	; 253
    13c2:	30 83       	st	Z, r19
    13c4:	fc 01       	movw	r30, r24
    13c6:	e4 59       	subi	r30, 0x94	; 148
    13c8:	ff 4f       	sbci	r31, 0xFF	; 255
    13ca:	84 91       	lpm	r24, Z
    13cc:	e4 e0       	ldi	r30, 0x04	; 4
    13ce:	e2 0f       	add	r30, r18
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	e0 5a       	subi	r30, 0xA0	; 160
    13d4:	fd 4f       	sbci	r31, 0xFD	; 253
    13d6:	80 83       	st	Z, r24
			index++; pos_index++;
		}
		pos_index += 1; //space the characters
    13d8:	2a 5f       	subi	r18, 0xFA	; 250
	}else if(align == RIGHT){
		s_pos = (MT_SIZE - (c_len * FONT_WIDTH) - c_len - 2);
	}
	pos_index = s_pos;
	ClearStringBuffer();
	while(*ch){
    13da:	8d 91       	ld	r24, X+
    13dc:	81 11       	cpse	r24, r1
    13de:	c6 cf       	rjmp	.-116    	; 0x136c <__stack+0xa6d>
    13e0:	92 e3       	ldi	r25, 0x32	; 50
    13e2:	a9 2e       	mov	r10, r25
		DisplayBuffer(data);
    13e4:	80 e6       	ldi	r24, 0x60	; 96
    13e6:	92 e0       	ldi	r25, 0x02	; 2
    13e8:	0e 94 41 01 	call	0x282	; 0x282 <DisplayBuffer>
    13ec:	aa 94       	dec	r10
}
}*/
static inline void HoldDisplayBuffer(const uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
    13ee:	a1 10       	cpse	r10, r1
    13f0:	f9 cf       	rjmp	.-14     	; 0x13e4 <__stack+0xae5>
    13f2:	d8 01       	movw	r26, r16
    13f4:	eb 2d       	mov	r30, r11
    13f6:	1d 92       	st	X+, r1
    13f8:	ea 95       	dec	r30
    13fa:	e9 f7       	brne	.-6      	; 0x13f6 <__stack+0xaf7>
    13fc:	23 e1       	ldi	r18, 0x13	; 19
    13fe:	88 e4       	ldi	r24, 0x48	; 72
/* returns the index of the first byte of the requested character       */
/************************************************************************/
uint8_t CharStart(const char *p)
{
	/*if(*p == ' ') return 0;
	else*/ return (uint8_t) (( *p - ' '));
    1400:	80 52       	subi	r24, 0x20	; 32
		s_pos = (MT_SIZE - (c_len * FONT_WIDTH) - c_len - 2);
	}
	pos_index = s_pos;
	ClearStringBuffer();
	while(*ch){
		index = CharStart(ch++) * FONT_WIDTH;
    1402:	f5 e0       	ldi	r31, 0x05	; 5
    1404:	8f 9f       	mul	r24, r31
    1406:	c0 01       	movw	r24, r0
    1408:	11 24       	eor	r1, r1
		for(len = 0; len < FONT_WIDTH; len++){
			stringbuffer[pos_index] = (uint8_t)(pgm_read_byte((font_5x7 + index)));
    140a:	fc 01       	movw	r30, r24
    140c:	e8 59       	subi	r30, 0x98	; 152
    140e:	ff 4f       	sbci	r31, 0xFF	; 255
    1410:	34 91       	lpm	r19, Z
    1412:	e2 2f       	mov	r30, r18
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	e0 5a       	subi	r30, 0xA0	; 160
    1418:	fd 4f       	sbci	r31, 0xFD	; 253
    141a:	30 83       	st	Z, r19
    141c:	fc 01       	movw	r30, r24
    141e:	e7 59       	subi	r30, 0x97	; 151
    1420:	ff 4f       	sbci	r31, 0xFF	; 255
    1422:	34 91       	lpm	r19, Z
    1424:	e1 e0       	ldi	r30, 0x01	; 1
    1426:	e2 0f       	add	r30, r18
    1428:	f0 e0       	ldi	r31, 0x00	; 0
    142a:	e0 5a       	subi	r30, 0xA0	; 160
    142c:	fd 4f       	sbci	r31, 0xFD	; 253
    142e:	30 83       	st	Z, r19
    1430:	fc 01       	movw	r30, r24
    1432:	e6 59       	subi	r30, 0x96	; 150
    1434:	ff 4f       	sbci	r31, 0xFF	; 255
    1436:	34 91       	lpm	r19, Z
    1438:	e2 e0       	ldi	r30, 0x02	; 2
    143a:	e2 0f       	add	r30, r18
    143c:	f0 e0       	ldi	r31, 0x00	; 0
    143e:	e0 5a       	subi	r30, 0xA0	; 160
    1440:	fd 4f       	sbci	r31, 0xFD	; 253
    1442:	30 83       	st	Z, r19
    1444:	fc 01       	movw	r30, r24
    1446:	e5 59       	subi	r30, 0x95	; 149
    1448:	ff 4f       	sbci	r31, 0xFF	; 255
    144a:	34 91       	lpm	r19, Z
    144c:	e3 e0       	ldi	r30, 0x03	; 3
    144e:	e2 0f       	add	r30, r18
    1450:	f0 e0       	ldi	r31, 0x00	; 0
    1452:	e0 5a       	subi	r30, 0xA0	; 160
    1454:	fd 4f       	sbci	r31, 0xFD	; 253
    1456:	30 83       	st	Z, r19
    1458:	fc 01       	movw	r30, r24
    145a:	e4 59       	subi	r30, 0x94	; 148
    145c:	ff 4f       	sbci	r31, 0xFF	; 255
    145e:	84 91       	lpm	r24, Z
    1460:	e4 e0       	ldi	r30, 0x04	; 4
    1462:	e2 0f       	add	r30, r18
    1464:	f0 e0       	ldi	r31, 0x00	; 0
    1466:	e0 5a       	subi	r30, 0xA0	; 160
    1468:	fd 4f       	sbci	r31, 0xFD	; 253
    146a:	80 83       	st	Z, r24
			index++; pos_index++;
		}
		pos_index += 1; //space the characters
    146c:	2a 5f       	subi	r18, 0xFA	; 250
	}else if(align == RIGHT){
		s_pos = (MT_SIZE - (c_len * FONT_WIDTH) - c_len - 2);
	}
	pos_index = s_pos;
	ClearStringBuffer();
	while(*ch){
    146e:	d2 01       	movw	r26, r4
    1470:	8d 91       	ld	r24, X+
    1472:	2d 01       	movw	r4, r26
    1474:	81 11       	cpse	r24, r1
    1476:	c4 cf       	rjmp	.-120    	; 0x1400 <__stack+0xb01>
    1478:	60 e0       	ldi	r22, 0x00	; 0
    147a:	70 e0       	ldi	r23, 0x00	; 0
    147c:	26 2f       	mov	r18, r22
    147e:	e0 e6       	ldi	r30, 0x60	; 96
    1480:	f2 e0       	ldi	r31, 0x02	; 2
	for(step = 0; step <= FONT_HEIGHT; step++)
	{
		for(index = 0; index < MT_SIZE; index++)
		{
			if(!dir)
			*(bf + index) = (*((p+index)) >> (step));
    1482:	cf 01       	movw	r24, r30
    1484:	80 56       	subi	r24, 0x60	; 96
    1486:	92 40       	sbci	r25, 0x02	; 2
    1488:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <bf>
    148c:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <bf+0x1>
    1490:	a8 0f       	add	r26, r24
    1492:	b9 1f       	adc	r27, r25
    1494:	81 91       	ld	r24, Z+
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	02 2e       	mov	r0, r18
    149a:	02 c0       	rjmp	.+4      	; 0x14a0 <__stack+0xba1>
    149c:	95 95       	asr	r25
    149e:	87 95       	ror	r24
    14a0:	0a 94       	dec	r0
    14a2:	e2 f7       	brpl	.-8      	; 0x149c <__stack+0xb9d>
    14a4:	8c 93       	st	X, r24
{
	//uint8_t *bf = buffer;
	uint8_t index, step = 0;
	for(step = 0; step <= FONT_HEIGHT; step++)
	{
		for(index = 0; index < MT_SIZE; index++)
    14a6:	80 ea       	ldi	r24, 0xA0	; 160
    14a8:	28 2e       	mov	r2, r24
    14aa:	82 e0       	ldi	r24, 0x02	; 2
    14ac:	38 2e       	mov	r3, r24
    14ae:	2e 16       	cp	r2, r30
    14b0:	3f 06       	cpc	r3, r31
    14b2:	39 f7       	brne	.-50     	; 0x1482 <__stack+0xb83>
			if(!dir)
			*(bf + index) = (*((p+index)) >> (step));
			else
			*(bf + index) = (*((p+index)) << (step));
		}
		HoldDisplayBuffer(bf, time);
    14b4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <bf>
    14b8:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <bf+0x1>
    14bc:	ba e0       	ldi	r27, 0x0A	; 10
    14be:	ab 2e       	mov	r10, r27
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    14c0:	a4 e0       	ldi	r26, 0x04	; 4
    14c2:	2a 2e       	mov	r2, r26
    14c4:	a1 e0       	ldi	r26, 0x01	; 1
    14c6:	3a 2e       	mov	r3, r26
    14c8:	81 2c       	mov	r8, r1
    14ca:	91 2c       	mov	r9, r1
    14cc:	31 e0       	ldi	r19, 0x01	; 1
    14ce:	08 2c       	mov	r0, r8
    14d0:	01 c0       	rjmp	.+2      	; 0x14d4 <__stack+0xbd5>
    14d2:	33 0f       	add	r19, r19
    14d4:	0a 94       	dec	r0
    14d6:	ea f7       	brpl	.-6      	; 0x14d2 <__stack+0xbd3>
}
}*/
static inline void HoldDisplayBuffer(const uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
    14d8:	2f e3       	ldi	r18, 0x3F	; 63
    14da:	5a c0       	rjmp	.+180    	; 0x1590 <__stack+0xc91>
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    14dc:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    14de:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    14e0:	5b 98       	cbi	0x0b, 3	; 11
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
			pinWrite(latch_pin, LOW);
			for(bit = 0; bit <= FONT_HEIGHT ; bit++){
				pinWrite(data_pin,((*(p+pos)) & (1 << byte)));
    14e2:	4f ef       	ldi	r20, 0xFF	; 255
    14e4:	42 0f       	add	r20, r18
    14e6:	fc 01       	movw	r30, r24
    14e8:	e4 0f       	add	r30, r20
    14ea:	f1 1d       	adc	r31, r1
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    14ec:	40 81       	ld	r20, Z
    14ee:	43 23       	and	r20, r19
    14f0:	09 f0       	breq	.+2      	; 0x14f4 <__stack+0xbf5>
    14f2:	bb c2       	rjmp	.+1398   	; 0x1a6a <__stack+0x116b>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    14f4:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    14f6:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    14f8:	5b 98       	cbi	0x0b, 3	; 11
    14fa:	4e ef       	ldi	r20, 0xFE	; 254
    14fc:	42 0f       	add	r20, r18
    14fe:	fc 01       	movw	r30, r24
    1500:	e4 0f       	add	r30, r20
    1502:	f1 1d       	adc	r31, r1
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    1504:	40 81       	ld	r20, Z
    1506:	43 23       	and	r20, r19
    1508:	09 f0       	breq	.+2      	; 0x150c <__stack+0xc0d>
    150a:	ad c2       	rjmp	.+1370   	; 0x1a66 <__stack+0x1167>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    150c:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    150e:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1510:	5b 98       	cbi	0x0b, 3	; 11
    1512:	4d ef       	ldi	r20, 0xFD	; 253
    1514:	42 0f       	add	r20, r18
    1516:	fc 01       	movw	r30, r24
    1518:	e4 0f       	add	r30, r20
    151a:	f1 1d       	adc	r31, r1
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    151c:	40 81       	ld	r20, Z
    151e:	43 23       	and	r20, r19
    1520:	09 f0       	breq	.+2      	; 0x1524 <__stack+0xc25>
    1522:	9f c2       	rjmp	.+1342   	; 0x1a62 <__stack+0x1163>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1524:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1526:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1528:	5b 98       	cbi	0x0b, 3	; 11
    152a:	4c ef       	ldi	r20, 0xFC	; 252
    152c:	42 0f       	add	r20, r18
    152e:	fc 01       	movw	r30, r24
    1530:	e4 0f       	add	r30, r20
    1532:	f1 1d       	adc	r31, r1
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    1534:	40 81       	ld	r20, Z
    1536:	43 23       	and	r20, r19
    1538:	09 f0       	breq	.+2      	; 0x153c <__stack+0xc3d>
    153a:	91 c2       	rjmp	.+1314   	; 0x1a5e <__stack+0x115f>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    153c:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    153e:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1540:	5b 98       	cbi	0x0b, 3	; 11
    1542:	4b ef       	ldi	r20, 0xFB	; 251
    1544:	42 0f       	add	r20, r18
    1546:	fc 01       	movw	r30, r24
    1548:	e4 0f       	add	r30, r20
    154a:	f1 1d       	adc	r31, r1
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    154c:	40 81       	ld	r20, Z
    154e:	43 23       	and	r20, r19
    1550:	09 f0       	breq	.+2      	; 0x1554 <__stack+0xc55>
    1552:	83 c2       	rjmp	.+1286   	; 0x1a5a <__stack+0x115b>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1554:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1556:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1558:	5b 98       	cbi	0x0b, 3	; 11
    155a:	4a ef       	ldi	r20, 0xFA	; 250
    155c:	42 0f       	add	r20, r18
    155e:	fc 01       	movw	r30, r24
    1560:	e4 0f       	add	r30, r20
    1562:	f1 1d       	adc	r31, r1
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    1564:	40 81       	ld	r20, Z
    1566:	43 23       	and	r20, r19
    1568:	09 f0       	breq	.+2      	; 0x156c <__stack+0xc6d>
    156a:	75 c2       	rjmp	.+1258   	; 0x1a56 <__stack+0x1157>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    156c:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    156e:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1570:	5b 98       	cbi	0x0b, 3	; 11
    1572:	49 ef       	ldi	r20, 0xF9	; 249
    1574:	42 0f       	add	r20, r18
    1576:	fc 01       	movw	r30, r24
    1578:	e4 0f       	add	r30, r20
    157a:	f1 1d       	adc	r31, r1
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    157c:	40 81       	ld	r20, Z
    157e:	43 23       	and	r20, r19
    1580:	e9 f4       	brne	.+58     	; 0x15bc <__stack+0xcbd>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1582:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1584:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1586:	5b 98       	cbi	0x0b, 3	; 11
				//toggle the clock pin
				pinWrite(clock_pin, HIGH);
				pinWrite(clock_pin, LOW);
				pos--;
    1588:	28 50       	subi	r18, 0x08	; 8
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    158a:	5a 9a       	sbi	0x0b, 2	; 11
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
    158c:	2f 3f       	cpi	r18, 0xFF	; 255
    158e:	e9 f0       	breq	.+58     	; 0x15ca <__stack+0xccb>
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1590:	5a 98       	cbi	0x0b, 2	; 11
			pinWrite(latch_pin, LOW);
			for(bit = 0; bit <= FONT_HEIGHT ; bit++){
				pinWrite(data_pin,((*(p+pos)) & (1 << byte)));
    1592:	fc 01       	movw	r30, r24
    1594:	e2 0f       	add	r30, r18
    1596:	f1 1d       	adc	r31, r1
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    1598:	40 81       	ld	r20, Z
    159a:	43 23       	and	r20, r19
    159c:	09 f4       	brne	.+2      	; 0x15a0 <__stack+0xca1>
    159e:	9e cf       	rjmp	.-196    	; 0x14dc <__stack+0xbdd>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    15a0:	59 9a       	sbi	0x0b, 1	; 11
    15a2:	9d cf       	rjmp	.-198    	; 0x14de <__stack+0xbdf>
    15a4:	59 9a       	sbi	0x0b, 1	; 11
    15a6:	ed cd       	rjmp	.-1062   	; 0x1182 <__stack+0x883>
    15a8:	59 9a       	sbi	0x0b, 1	; 11
    15aa:	df cd       	rjmp	.-1090   	; 0x116a <__stack+0x86b>
    15ac:	59 9a       	sbi	0x0b, 1	; 11
    15ae:	d1 cd       	rjmp	.-1118   	; 0x1152 <__stack+0x853>
    15b0:	59 9a       	sbi	0x0b, 1	; 11
    15b2:	c3 cd       	rjmp	.-1146   	; 0x113a <__stack+0x83b>
    15b4:	59 9a       	sbi	0x0b, 1	; 11
    15b6:	b5 cd       	rjmp	.-1174   	; 0x1122 <__stack+0x823>
    15b8:	59 9a       	sbi	0x0b, 1	; 11
    15ba:	a7 cd       	rjmp	.-1202   	; 0x110a <__stack+0x80b>
    15bc:	59 9a       	sbi	0x0b, 1	; 11
    15be:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    15c0:	5b 98       	cbi	0x0b, 3	; 11
				//toggle the clock pin
				pinWrite(clock_pin, HIGH);
				pinWrite(clock_pin, LOW);
				pos--;
    15c2:	28 50       	subi	r18, 0x08	; 8
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    15c4:	5a 9a       	sbi	0x0b, 2	; 11
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
    15c6:	2f 3f       	cpi	r18, 0xFF	; 255
    15c8:	19 f7       	brne	.-58     	; 0x1590 <__stack+0xc91>
    15ca:	a4 e0       	ldi	r26, 0x04	; 4
    15cc:	b1 e0       	ldi	r27, 0x01	; 1
    15ce:	9e 83       	std	Y+6, r25	; 0x06
    15d0:	8d 83       	std	Y+5, r24	; 0x05
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    15d2:	ed 91       	ld	r30, X+
    15d4:	ee 23       	and	r30, r30
    15d6:	01 f1       	breq	.+64     	; 0x1618 <__stack+0xd19>
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    15d8:	ec 3c       	cpi	r30, 0xCC	; 204
    15da:	d8 f7       	brcc	.-10     	; 0x15d2 <__stack+0xcd3>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    15dc:	27 e0       	ldi	r18, 0x07	; 7
    15de:	e2 9f       	mul	r30, r18
    15e0:	f0 01       	movw	r30, r0
    15e2:	11 24       	eor	r1, r1
    15e4:	af 01       	movw	r20, r30
    15e6:	4c 5a       	subi	r20, 0xAC	; 172
    15e8:	5e 4f       	sbci	r21, 0xFE	; 254
    15ea:	2a 01       	movw	r4, r20
    15ec:	fa 01       	movw	r30, r20
    15ee:	42 81       	ldd	r20, Z+2	; 0x02
    15f0:	53 81       	ldd	r21, Z+3	; 0x03
    15f2:	fa 01       	movw	r30, r20
    15f4:	30 81       	ld	r19, Z
    15f6:	81 e0       	ldi	r24, 0x01	; 1
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	f2 01       	movw	r30, r4
    15fc:	06 80       	ldd	r0, Z+6	; 0x06
    15fe:	02 c0       	rjmp	.+4      	; 0x1604 <__stack+0xd05>
    1600:	88 0f       	add	r24, r24
    1602:	99 1f       	adc	r25, r25
    1604:	0a 94       	dec	r0
    1606:	e2 f7       	brpl	.-8      	; 0x1600 <__stack+0xd01>
    1608:	28 2f       	mov	r18, r24
    160a:	20 95       	com	r18
    160c:	23 23       	and	r18, r19
    160e:	fa 01       	movw	r30, r20
    1610:	20 83       	st	Z, r18
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    1612:	ed 91       	ld	r30, X+
    1614:	e1 11       	cpse	r30, r1
    1616:	e0 cf       	rjmp	.-64     	; 0x15d8 <__stack+0xcd9>
    1618:	8d 81       	ldd	r24, Y+5	; 0x05
    161a:	9e 81       	ldd	r25, Y+6	; 0x06
/* Multiplexing method                                                  */
/************************************************************************/
static inline void MultiPlex(uint8_t *pin)
{
	pinsMultiWrite(plex_pins, LOW);
	pinWrite(plex_pins[*pin], HIGH);
    161c:	d1 01       	movw	r26, r2
    161e:	ed 91       	ld	r30, X+
    1620:	1d 01       	movw	r2, r26
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    1622:	ec 3c       	cpi	r30, 0xCC	; 204
    1624:	08 f4       	brcc	.+2      	; 0x1628 <__stack+0xd29>
    1626:	23 c2       	rjmp	.+1094   	; 0x1a6e <__stack+0x116f>
	delay(delayms);
    1628:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    162c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
/*  delay                                                               */
/************************************************************************/
int delayms = 1;
static inline void delay(int dl)
{
	while(dl >= 0)
    1630:	37 fd       	sbrc	r19, 7
    1632:	09 c0       	rjmp	.+18     	; 0x1646 <__stack+0xd47>
    1634:	ef e9       	ldi	r30, 0x9F	; 159
    1636:	ff e0       	ldi	r31, 0x0F	; 15
    1638:	31 97       	sbiw	r30, 0x01	; 1
    163a:	f1 f7       	brne	.-4      	; 0x1638 <__stack+0xd39>
    163c:	00 c0       	rjmp	.+0      	; 0x163e <__stack+0xd3f>
    163e:	00 00       	nop
	{
		_delay_ms(1);
		dl--;
    1640:	21 50       	subi	r18, 0x01	; 1
    1642:	31 09       	sbc	r19, r1
    1644:	b8 f7       	brcc	.-18     	; 0x1634 <__stack+0xd35>
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
    1646:	a4 e0       	ldi	r26, 0x04	; 4
    1648:	b1 e0       	ldi	r27, 0x01	; 1
    164a:	9e 83       	std	Y+6, r25	; 0x06
    164c:	8d 83       	std	Y+5, r24	; 0x05
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    164e:	ed 91       	ld	r30, X+
    1650:	ee 23       	and	r30, r30
    1652:	01 f1       	breq	.+64     	; 0x1694 <__stack+0xd95>
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    1654:	ec 3c       	cpi	r30, 0xCC	; 204
    1656:	d8 f7       	brcc	.-10     	; 0x164e <__stack+0xd4f>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1658:	27 e0       	ldi	r18, 0x07	; 7
    165a:	e2 9f       	mul	r30, r18
    165c:	f0 01       	movw	r30, r0
    165e:	11 24       	eor	r1, r1
    1660:	af 01       	movw	r20, r30
    1662:	4c 5a       	subi	r20, 0xAC	; 172
    1664:	5e 4f       	sbci	r21, 0xFE	; 254
    1666:	2a 01       	movw	r4, r20
    1668:	fa 01       	movw	r30, r20
    166a:	42 81       	ldd	r20, Z+2	; 0x02
    166c:	53 81       	ldd	r21, Z+3	; 0x03
    166e:	fa 01       	movw	r30, r20
    1670:	30 81       	ld	r19, Z
    1672:	81 e0       	ldi	r24, 0x01	; 1
    1674:	90 e0       	ldi	r25, 0x00	; 0
    1676:	f2 01       	movw	r30, r4
    1678:	06 80       	ldd	r0, Z+6	; 0x06
    167a:	02 c0       	rjmp	.+4      	; 0x1680 <__stack+0xd81>
    167c:	88 0f       	add	r24, r24
    167e:	99 1f       	adc	r25, r25
    1680:	0a 94       	dec	r0
    1682:	e2 f7       	brpl	.-8      	; 0x167c <__stack+0xd7d>
    1684:	28 2f       	mov	r18, r24
    1686:	20 95       	com	r18
    1688:	23 23       	and	r18, r19
    168a:	fa 01       	movw	r30, r20
    168c:	20 83       	st	Z, r18
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    168e:	ed 91       	ld	r30, X+
    1690:	e1 11       	cpse	r30, r1
    1692:	e0 cf       	rjmp	.-64     	; 0x1654 <__stack+0xd55>
    1694:	8d 81       	ldd	r24, Y+5	; 0x05
    1696:	9e 81       	ldd	r25, Y+6	; 0x06
    1698:	29 e0       	ldi	r18, 0x09	; 9
    169a:	30 e0       	ldi	r19, 0x00	; 0
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    169c:	5a 98       	cbi	0x0b, 2	; 11
    169e:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    16a0:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    16a2:	5b 98       	cbi	0x0b, 3	; 11
    16a4:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    16a6:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    16a8:	5b 98       	cbi	0x0b, 3	; 11
    16aa:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    16ac:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    16ae:	5b 98       	cbi	0x0b, 3	; 11
    16b0:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    16b2:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    16b4:	5b 98       	cbi	0x0b, 3	; 11
    16b6:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    16b8:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    16ba:	5b 98       	cbi	0x0b, 3	; 11
    16bc:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    16be:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    16c0:	5b 98       	cbi	0x0b, 3	; 11
    16c2:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    16c4:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    16c6:	5b 98       	cbi	0x0b, 3	; 11
    16c8:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    16ca:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    16cc:	5b 98       	cbi	0x0b, 3	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    16ce:	5a 9a       	sbi	0x0b, 2	; 11
    16d0:	21 50       	subi	r18, 0x01	; 1
    16d2:	31 09       	sbc	r19, r1
/* Clear Display                                                        */
/************************************************************************/
static inline void Clear(){
	int x, y = 0;
	pinsMultiWrite(plex_pins, LOW);
	for(x = 0; x < (SH_REG + 1); x++) {
    16d4:	19 f7       	brne	.-58     	; 0x169c <__stack+0xd9d>
    16d6:	ff ef       	ldi	r31, 0xFF	; 255
    16d8:	8f 1a       	sub	r8, r31
    16da:	9f 0a       	sbc	r9, r31
{
	uint8_t byte, index, bit = 0;
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
    16dc:	27 e0       	ldi	r18, 0x07	; 7
    16de:	82 16       	cp	r8, r18
    16e0:	91 04       	cpc	r9, r1
    16e2:	09 f0       	breq	.+2      	; 0x16e6 <__stack+0xde7>
    16e4:	f3 ce       	rjmp	.-538    	; 0x14cc <__stack+0xbcd>
			pinWrite(latch_pin, HIGH);
		}
		MultiPlex(&byte);
		Clear();
	}
	delayms = 1;
    16e6:	f0 92 01 01 	sts	0x0101, r15	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    16ea:	e0 92 00 01 	sts	0x0100, r14	; 0x800100 <__DATA_REGION_ORIGIN__>
    16ee:	aa 94       	dec	r10
}
}*/
static inline void HoldDisplayBuffer(const uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
    16f0:	a1 10       	cpse	r10, r1
    16f2:	e6 ce       	rjmp	.-564    	; 0x14c0 <__stack+0xbc1>
    16f4:	6f 5f       	subi	r22, 0xFF	; 255
    16f6:	7f 4f       	sbci	r23, 0xFF	; 255
/************************************************************************/
void Fall(const uint8_t *p, uint8_t time, uint8_t dir )
{
	//uint8_t *bf = buffer;
	uint8_t index, step = 0;
	for(step = 0; step <= FONT_HEIGHT; step++)
    16f8:	68 30       	cpi	r22, 0x08	; 8
    16fa:	71 05       	cpc	r23, r1
    16fc:	09 f0       	breq	.+2      	; 0x1700 <__stack+0xe01>
    16fe:	be ce       	rjmp	.-644    	; 0x147c <__stack+0xb7d>
			else
			*(bf + index) = (*((p+index)) << (step));
		}
		HoldDisplayBuffer(bf, time);
	}
	HoldDisplayBuffer(bf,50);
    1700:	20 90 02 01 	lds	r2, 0x0102	; 0x800102 <bf>
    1704:	30 90 03 01 	lds	r3, 0x0103	; 0x800103 <bf+0x1>
    1708:	f2 e3       	ldi	r31, 0x32	; 50
    170a:	af 2e       	mov	r10, r31
}*/
static inline void HoldDisplayBuffer(const uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
		DisplayBuffer(data);
    170c:	c1 01       	movw	r24, r2
    170e:	0e 94 41 01 	call	0x282	; 0x282 <DisplayBuffer>
    1712:	aa 94       	dec	r10
}
}*/
static inline void HoldDisplayBuffer(const uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
    1714:	a1 10       	cpse	r10, r1
    1716:	fa cf       	rjmp	.-12     	; 0x170c <__stack+0xe0d>
    1718:	d8 01       	movw	r26, r16
    171a:	eb 2d       	mov	r30, r11
    171c:	1d 92       	st	X+, r1
    171e:	ea 95       	dec	r30
    1720:	e9 f7       	brne	.-6      	; 0x171c <__stack+0xe1d>
    1722:	e7 e1       	ldi	r30, 0x17	; 23
    1724:	2e 2e       	mov	r2, r30
    1726:	e1 e0       	ldi	r30, 0x01	; 1
    1728:	3e 2e       	mov	r3, r30
    172a:	d1 01       	movw	r26, r2
    172c:	26 e2       	ldi	r18, 0x26	; 38
    172e:	83 e4       	ldi	r24, 0x43	; 67
/* returns the index of the first byte of the requested character       */
/************************************************************************/
uint8_t CharStart(const char *p)
{
	/*if(*p == ' ') return 0;
	else*/ return (uint8_t) (( *p - ' '));
    1730:	80 52       	subi	r24, 0x20	; 32
		s_pos = (MT_SIZE - (c_len * FONT_WIDTH) - c_len - 2);
	}
	pos_index = s_pos;
	ClearStringBuffer();
	while(*ch){
		index = CharStart(ch++) * FONT_WIDTH;
    1732:	f5 e0       	ldi	r31, 0x05	; 5
    1734:	8f 9f       	mul	r24, r31
    1736:	c0 01       	movw	r24, r0
    1738:	11 24       	eor	r1, r1
		for(len = 0; len < FONT_WIDTH; len++){
			stringbuffer[pos_index] = (uint8_t)(pgm_read_byte((font_5x7 + index)));
    173a:	fc 01       	movw	r30, r24
    173c:	e8 59       	subi	r30, 0x98	; 152
    173e:	ff 4f       	sbci	r31, 0xFF	; 255
    1740:	34 91       	lpm	r19, Z
    1742:	e2 2f       	mov	r30, r18
    1744:	f0 e0       	ldi	r31, 0x00	; 0
    1746:	e0 5a       	subi	r30, 0xA0	; 160
    1748:	fd 4f       	sbci	r31, 0xFD	; 253
    174a:	30 83       	st	Z, r19
    174c:	fc 01       	movw	r30, r24
    174e:	e7 59       	subi	r30, 0x97	; 151
    1750:	ff 4f       	sbci	r31, 0xFF	; 255
    1752:	34 91       	lpm	r19, Z
    1754:	e1 e0       	ldi	r30, 0x01	; 1
    1756:	e2 0f       	add	r30, r18
    1758:	f0 e0       	ldi	r31, 0x00	; 0
    175a:	e0 5a       	subi	r30, 0xA0	; 160
    175c:	fd 4f       	sbci	r31, 0xFD	; 253
    175e:	30 83       	st	Z, r19
    1760:	fc 01       	movw	r30, r24
    1762:	e6 59       	subi	r30, 0x96	; 150
    1764:	ff 4f       	sbci	r31, 0xFF	; 255
    1766:	34 91       	lpm	r19, Z
    1768:	e2 e0       	ldi	r30, 0x02	; 2
    176a:	e2 0f       	add	r30, r18
    176c:	f0 e0       	ldi	r31, 0x00	; 0
    176e:	e0 5a       	subi	r30, 0xA0	; 160
    1770:	fd 4f       	sbci	r31, 0xFD	; 253
    1772:	30 83       	st	Z, r19
    1774:	fc 01       	movw	r30, r24
    1776:	e5 59       	subi	r30, 0x95	; 149
    1778:	ff 4f       	sbci	r31, 0xFF	; 255
    177a:	34 91       	lpm	r19, Z
    177c:	e3 e0       	ldi	r30, 0x03	; 3
    177e:	e2 0f       	add	r30, r18
    1780:	f0 e0       	ldi	r31, 0x00	; 0
    1782:	e0 5a       	subi	r30, 0xA0	; 160
    1784:	fd 4f       	sbci	r31, 0xFD	; 253
    1786:	30 83       	st	Z, r19
    1788:	fc 01       	movw	r30, r24
    178a:	e4 59       	subi	r30, 0x94	; 148
    178c:	ff 4f       	sbci	r31, 0xFF	; 255
    178e:	84 91       	lpm	r24, Z
    1790:	e4 e0       	ldi	r30, 0x04	; 4
    1792:	e2 0f       	add	r30, r18
    1794:	f0 e0       	ldi	r31, 0x00	; 0
    1796:	e0 5a       	subi	r30, 0xA0	; 160
    1798:	fd 4f       	sbci	r31, 0xFD	; 253
    179a:	80 83       	st	Z, r24
			index++; pos_index++;
		}
		pos_index += 1; //space the characters
    179c:	2a 5f       	subi	r18, 0xFA	; 250
	}else if(align == RIGHT){
		s_pos = (MT_SIZE - (c_len * FONT_WIDTH) - c_len - 2);
	}
	pos_index = s_pos;
	ClearStringBuffer();
	while(*ch){
    179e:	8d 91       	ld	r24, X+
    17a0:	81 11       	cpse	r24, r1
    17a2:	c6 cf       	rjmp	.-116    	; 0x1730 <__stack+0xe31>
    17a4:	28 2d       	mov	r18, r8
    17a6:	e0 e6       	ldi	r30, 0x60	; 96
    17a8:	f2 e0       	ldi	r31, 0x02	; 2
	for(step = 0; step < FONT_HEIGHT; step++)
	{
		for(index = 0; index < MT_SIZE; index++)
		{
			if(dir)
			*(bf + index) = (*((p+index)) >> (FONT_HEIGHT-step));
    17aa:	cf 01       	movw	r24, r30
    17ac:	80 56       	subi	r24, 0x60	; 96
    17ae:	92 40       	sbci	r25, 0x02	; 2
    17b0:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <bf>
    17b4:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <bf+0x1>
    17b8:	a8 0f       	add	r26, r24
    17ba:	b9 1f       	adc	r27, r25
    17bc:	81 91       	ld	r24, Z+
    17be:	90 e0       	ldi	r25, 0x00	; 0
    17c0:	02 2e       	mov	r0, r18
    17c2:	02 c0       	rjmp	.+4      	; 0x17c8 <__stack+0xec9>
    17c4:	95 95       	asr	r25
    17c6:	87 95       	ror	r24
    17c8:	0a 94       	dec	r0
    17ca:	e2 f7       	brpl	.-8      	; 0x17c4 <__stack+0xec5>
    17cc:	8c 93       	st	X, r24
{
	//uint8_t *bf = buffer;
	uint8_t index, step = 0;
	for(step = 0; step < FONT_HEIGHT; step++)
	{
		for(index = 0; index < MT_SIZE; index++)
    17ce:	70 ea       	ldi	r23, 0xA0	; 160
    17d0:	47 2e       	mov	r4, r23
    17d2:	72 e0       	ldi	r23, 0x02	; 2
    17d4:	57 2e       	mov	r5, r23
    17d6:	4e 16       	cp	r4, r30
    17d8:	5f 06       	cpc	r5, r31
    17da:	39 f7       	brne	.-50     	; 0x17aa <__stack+0xeab>
			if(dir)
			*(bf + index) = (*((p+index)) >> (FONT_HEIGHT-step));
			else
			*(bf + index) = (*((p+index)) << (FONT_HEIGHT-step));
		}
		HoldDisplayBuffer(bf, time);
    17dc:	40 90 02 01 	lds	r4, 0x0102	; 0x800102 <bf>
    17e0:	50 90 03 01 	lds	r5, 0x0103	; 0x800103 <bf+0x1>
    17e4:	6a e0       	ldi	r22, 0x0A	; 10
    17e6:	a6 2e       	mov	r10, r22
}*/
static inline void HoldDisplayBuffer(const uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
		DisplayBuffer(data);
    17e8:	c2 01       	movw	r24, r4
    17ea:	0e 94 41 01 	call	0x282	; 0x282 <DisplayBuffer>
    17ee:	aa 94       	dec	r10
}
}*/
static inline void HoldDisplayBuffer(const uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
    17f0:	a1 10       	cpse	r10, r1
    17f2:	fa cf       	rjmp	.-12     	; 0x17e8 <__stack+0xee9>
    17f4:	21 e0       	ldi	r18, 0x01	; 1
    17f6:	82 1a       	sub	r8, r18
    17f8:	91 08       	sbc	r9, r1
enum direction{ up, down};
void Drop(const uint8_t *p, uint8_t time, uint8_t dir )
{
	//uint8_t *bf = buffer;
	uint8_t index, step = 0;
	for(step = 0; step < FONT_HEIGHT; step++)
    17fa:	a1 f6       	brne	.-88     	; 0x17a4 <__stack+0xea5>
    17fc:	5a e0       	ldi	r21, 0x0A	; 10
    17fe:	a5 2e       	mov	r10, r21
}*/
static inline void HoldDisplayBuffer(const uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
		DisplayBuffer(data);
    1800:	80 e6       	ldi	r24, 0x60	; 96
    1802:	92 e0       	ldi	r25, 0x02	; 2
    1804:	0e 94 41 01 	call	0x282	; 0x282 <DisplayBuffer>
    1808:	aa 94       	dec	r10
}
}*/
static inline void HoldDisplayBuffer(const uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
    180a:	a1 10       	cpse	r10, r1
    180c:	f9 cf       	rjmp	.-14     	; 0x1800 <__stack+0xf01>
    180e:	d8 01       	movw	r26, r16
    1810:	eb 2d       	mov	r30, r11
    1812:	1d 92       	st	X+, r1
    1814:	ea 95       	dec	r30
    1816:	e9 f7       	brne	.-6      	; 0x1812 <__stack+0xf13>
    1818:	a7 e1       	ldi	r26, 0x17	; 23
    181a:	b1 e0       	ldi	r27, 0x01	; 1
    181c:	26 e2       	ldi	r18, 0x26	; 38
    181e:	83 e4       	ldi	r24, 0x43	; 67
/* returns the index of the first byte of the requested character       */
/************************************************************************/
uint8_t CharStart(const char *p)
{
	/*if(*p == ' ') return 0;
	else*/ return (uint8_t) (( *p - ' '));
    1820:	80 52       	subi	r24, 0x20	; 32
		s_pos = (MT_SIZE - (c_len * FONT_WIDTH) - c_len - 2);
	}
	pos_index = s_pos;
	ClearStringBuffer();
	while(*ch){
		index = CharStart(ch++) * FONT_WIDTH;
    1822:	f5 e0       	ldi	r31, 0x05	; 5
    1824:	8f 9f       	mul	r24, r31
    1826:	c0 01       	movw	r24, r0
    1828:	11 24       	eor	r1, r1
		for(len = 0; len < FONT_WIDTH; len++){
			stringbuffer[pos_index] = (uint8_t)(pgm_read_byte((font_5x7 + index)));
    182a:	fc 01       	movw	r30, r24
    182c:	e8 59       	subi	r30, 0x98	; 152
    182e:	ff 4f       	sbci	r31, 0xFF	; 255
    1830:	34 91       	lpm	r19, Z
    1832:	e2 2f       	mov	r30, r18
    1834:	f0 e0       	ldi	r31, 0x00	; 0
    1836:	e0 5a       	subi	r30, 0xA0	; 160
    1838:	fd 4f       	sbci	r31, 0xFD	; 253
    183a:	30 83       	st	Z, r19
    183c:	fc 01       	movw	r30, r24
    183e:	e7 59       	subi	r30, 0x97	; 151
    1840:	ff 4f       	sbci	r31, 0xFF	; 255
    1842:	34 91       	lpm	r19, Z
    1844:	e1 e0       	ldi	r30, 0x01	; 1
    1846:	e2 0f       	add	r30, r18
    1848:	f0 e0       	ldi	r31, 0x00	; 0
    184a:	e0 5a       	subi	r30, 0xA0	; 160
    184c:	fd 4f       	sbci	r31, 0xFD	; 253
    184e:	30 83       	st	Z, r19
    1850:	fc 01       	movw	r30, r24
    1852:	e6 59       	subi	r30, 0x96	; 150
    1854:	ff 4f       	sbci	r31, 0xFF	; 255
    1856:	34 91       	lpm	r19, Z
    1858:	e2 e0       	ldi	r30, 0x02	; 2
    185a:	e2 0f       	add	r30, r18
    185c:	f0 e0       	ldi	r31, 0x00	; 0
    185e:	e0 5a       	subi	r30, 0xA0	; 160
    1860:	fd 4f       	sbci	r31, 0xFD	; 253
    1862:	30 83       	st	Z, r19
    1864:	fc 01       	movw	r30, r24
    1866:	e5 59       	subi	r30, 0x95	; 149
    1868:	ff 4f       	sbci	r31, 0xFF	; 255
    186a:	34 91       	lpm	r19, Z
    186c:	e3 e0       	ldi	r30, 0x03	; 3
    186e:	e2 0f       	add	r30, r18
    1870:	f0 e0       	ldi	r31, 0x00	; 0
    1872:	e0 5a       	subi	r30, 0xA0	; 160
    1874:	fd 4f       	sbci	r31, 0xFD	; 253
    1876:	30 83       	st	Z, r19
    1878:	fc 01       	movw	r30, r24
    187a:	e4 59       	subi	r30, 0x94	; 148
    187c:	ff 4f       	sbci	r31, 0xFF	; 255
    187e:	84 91       	lpm	r24, Z
    1880:	e4 e0       	ldi	r30, 0x04	; 4
    1882:	e2 0f       	add	r30, r18
    1884:	f0 e0       	ldi	r31, 0x00	; 0
    1886:	e0 5a       	subi	r30, 0xA0	; 160
    1888:	fd 4f       	sbci	r31, 0xFD	; 253
    188a:	80 83       	st	Z, r24
			index++; pos_index++;
		}
		pos_index += 1; //space the characters
    188c:	2a 5f       	subi	r18, 0xFA	; 250
	}else if(align == RIGHT){
		s_pos = (MT_SIZE - (c_len * FONT_WIDTH) - c_len - 2);
	}
	pos_index = s_pos;
	ClearStringBuffer();
	while(*ch){
    188e:	8d 91       	ld	r24, X+
    1890:	81 11       	cpse	r24, r1
    1892:	c6 cf       	rjmp	.-116    	; 0x1820 <__stack+0xf21>
    1894:	42 e3       	ldi	r20, 0x32	; 50
    1896:	a4 2e       	mov	r10, r20
		DisplayBuffer(data);
    1898:	80 e6       	ldi	r24, 0x60	; 96
    189a:	92 e0       	ldi	r25, 0x02	; 2
    189c:	0e 94 41 01 	call	0x282	; 0x282 <DisplayBuffer>
    18a0:	aa 94       	dec	r10
}
}*/
static inline void HoldDisplayBuffer(const uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
    18a2:	a1 10       	cpse	r10, r1
    18a4:	f9 cf       	rjmp	.-14     	; 0x1898 <__stack+0xf99>
    18a6:	d8 01       	movw	r26, r16
    18a8:	eb 2d       	mov	r30, r11
    18aa:	1d 92       	st	X+, r1
    18ac:	ea 95       	dec	r30
    18ae:	e9 f7       	brne	.-6      	; 0x18aa <__stack+0xfab>
    18b0:	26 e2       	ldi	r18, 0x26	; 38
    18b2:	83 e4       	ldi	r24, 0x43	; 67
/* returns the index of the first byte of the requested character       */
/************************************************************************/
uint8_t CharStart(const char *p)
{
	/*if(*p == ' ') return 0;
	else*/ return (uint8_t) (( *p - ' '));
    18b4:	80 52       	subi	r24, 0x20	; 32
		s_pos = (MT_SIZE - (c_len * FONT_WIDTH) - c_len - 2);
	}
	pos_index = s_pos;
	ClearStringBuffer();
	while(*ch){
		index = CharStart(ch++) * FONT_WIDTH;
    18b6:	f5 e0       	ldi	r31, 0x05	; 5
    18b8:	8f 9f       	mul	r24, r31
    18ba:	c0 01       	movw	r24, r0
    18bc:	11 24       	eor	r1, r1
		for(len = 0; len < FONT_WIDTH; len++){
			stringbuffer[pos_index] = (uint8_t)(pgm_read_byte((font_5x7 + index)));
    18be:	fc 01       	movw	r30, r24
    18c0:	e8 59       	subi	r30, 0x98	; 152
    18c2:	ff 4f       	sbci	r31, 0xFF	; 255
    18c4:	34 91       	lpm	r19, Z
    18c6:	e2 2f       	mov	r30, r18
    18c8:	f0 e0       	ldi	r31, 0x00	; 0
    18ca:	e0 5a       	subi	r30, 0xA0	; 160
    18cc:	fd 4f       	sbci	r31, 0xFD	; 253
    18ce:	30 83       	st	Z, r19
    18d0:	fc 01       	movw	r30, r24
    18d2:	e7 59       	subi	r30, 0x97	; 151
    18d4:	ff 4f       	sbci	r31, 0xFF	; 255
    18d6:	34 91       	lpm	r19, Z
    18d8:	e1 e0       	ldi	r30, 0x01	; 1
    18da:	e2 0f       	add	r30, r18
    18dc:	f0 e0       	ldi	r31, 0x00	; 0
    18de:	e0 5a       	subi	r30, 0xA0	; 160
    18e0:	fd 4f       	sbci	r31, 0xFD	; 253
    18e2:	30 83       	st	Z, r19
    18e4:	fc 01       	movw	r30, r24
    18e6:	e6 59       	subi	r30, 0x96	; 150
    18e8:	ff 4f       	sbci	r31, 0xFF	; 255
    18ea:	34 91       	lpm	r19, Z
    18ec:	e2 e0       	ldi	r30, 0x02	; 2
    18ee:	e2 0f       	add	r30, r18
    18f0:	f0 e0       	ldi	r31, 0x00	; 0
    18f2:	e0 5a       	subi	r30, 0xA0	; 160
    18f4:	fd 4f       	sbci	r31, 0xFD	; 253
    18f6:	30 83       	st	Z, r19
    18f8:	fc 01       	movw	r30, r24
    18fa:	e5 59       	subi	r30, 0x95	; 149
    18fc:	ff 4f       	sbci	r31, 0xFF	; 255
    18fe:	34 91       	lpm	r19, Z
    1900:	e3 e0       	ldi	r30, 0x03	; 3
    1902:	e2 0f       	add	r30, r18
    1904:	f0 e0       	ldi	r31, 0x00	; 0
    1906:	e0 5a       	subi	r30, 0xA0	; 160
    1908:	fd 4f       	sbci	r31, 0xFD	; 253
    190a:	30 83       	st	Z, r19
    190c:	fc 01       	movw	r30, r24
    190e:	e4 59       	subi	r30, 0x94	; 148
    1910:	ff 4f       	sbci	r31, 0xFF	; 255
    1912:	84 91       	lpm	r24, Z
    1914:	e4 e0       	ldi	r30, 0x04	; 4
    1916:	e2 0f       	add	r30, r18
    1918:	f0 e0       	ldi	r31, 0x00	; 0
    191a:	e0 5a       	subi	r30, 0xA0	; 160
    191c:	fd 4f       	sbci	r31, 0xFD	; 253
    191e:	80 83       	st	Z, r24
			index++; pos_index++;
		}
		pos_index += 1; //space the characters
    1920:	2a 5f       	subi	r18, 0xFA	; 250
	}else if(align == RIGHT){
		s_pos = (MT_SIZE - (c_len * FONT_WIDTH) - c_len - 2);
	}
	pos_index = s_pos;
	ClearStringBuffer();
	while(*ch){
    1922:	d1 01       	movw	r26, r2
    1924:	8d 91       	ld	r24, X+
    1926:	1d 01       	movw	r2, r26
    1928:	81 11       	cpse	r24, r1
    192a:	c4 cf       	rjmp	.-120    	; 0x18b4 <__stack+0xfb5>
    192c:	81 2c       	mov	r8, r1
    192e:	91 2c       	mov	r9, r1
    1930:	48 2d       	mov	r20, r8
    1932:	e0 e6       	ldi	r30, 0x60	; 96
    1934:	f2 e0       	ldi	r31, 0x02	; 2
		for(index = 0; index < MT_SIZE; index++)
		{
			if(!dir)
			*(bf + index) = (*((p+index)) >> (step));
			else
			*(bf + index) = (*((p+index)) << (step));
    1936:	cf 01       	movw	r24, r30
    1938:	80 56       	subi	r24, 0x60	; 96
    193a:	92 40       	sbci	r25, 0x02	; 2
    193c:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <bf>
    1940:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <bf+0x1>
    1944:	d9 01       	movw	r26, r18
    1946:	a8 0f       	add	r26, r24
    1948:	b9 1f       	adc	r27, r25
    194a:	91 91       	ld	r25, Z+
    194c:	04 2e       	mov	r0, r20
    194e:	01 c0       	rjmp	.+2      	; 0x1952 <__stack+0x1053>
    1950:	99 0f       	add	r25, r25
    1952:	0a 94       	dec	r0
    1954:	ea f7       	brpl	.-6      	; 0x1950 <__stack+0x1051>
    1956:	9c 93       	st	X, r25
{
	//uint8_t *bf = buffer;
	uint8_t index, step = 0;
	for(step = 0; step <= FONT_HEIGHT; step++)
	{
		for(index = 0; index < MT_SIZE; index++)
    1958:	30 ea       	ldi	r19, 0xA0	; 160
    195a:	23 2e       	mov	r2, r19
    195c:	32 e0       	ldi	r19, 0x02	; 2
    195e:	33 2e       	mov	r3, r19
    1960:	2e 16       	cp	r2, r30
    1962:	3f 06       	cpc	r3, r31
    1964:	41 f7       	brne	.-48     	; 0x1936 <__stack+0x1037>
			if(!dir)
			*(bf + index) = (*((p+index)) >> (step));
			else
			*(bf + index) = (*((p+index)) << (step));
		}
		HoldDisplayBuffer(bf, time);
    1966:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <bf>
    196a:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <bf+0x1>
    196e:	2a e0       	ldi	r18, 0x0A	; 10
    1970:	a2 2e       	mov	r10, r18
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    1972:	b4 e0       	ldi	r27, 0x04	; 4
    1974:	2b 2e       	mov	r2, r27
    1976:	b1 e0       	ldi	r27, 0x01	; 1
    1978:	3b 2e       	mov	r3, r27
    197a:	60 e0       	ldi	r22, 0x00	; 0
    197c:	70 e0       	ldi	r23, 0x00	; 0
    197e:	31 e0       	ldi	r19, 0x01	; 1
    1980:	06 2e       	mov	r0, r22
    1982:	01 c0       	rjmp	.+2      	; 0x1986 <__stack+0x1087>
    1984:	33 0f       	add	r19, r19
    1986:	0a 94       	dec	r0
    1988:	ea f7       	brpl	.-6      	; 0x1984 <__stack+0x1085>
}
}*/
static inline void HoldDisplayBuffer(const uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
    198a:	2f e3       	ldi	r18, 0x3F	; 63
    198c:	5a c0       	rjmp	.+180    	; 0x1a42 <__stack+0x1143>
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    198e:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1990:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1992:	5b 98       	cbi	0x0b, 3	; 11
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
			pinWrite(latch_pin, LOW);
			for(bit = 0; bit <= FONT_HEIGHT ; bit++){
				pinWrite(data_pin,((*(p+pos)) & (1 << byte)));
    1994:	4f ef       	ldi	r20, 0xFF	; 255
    1996:	42 0f       	add	r20, r18
    1998:	fc 01       	movw	r30, r24
    199a:	e4 0f       	add	r30, r20
    199c:	f1 1d       	adc	r31, r1
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    199e:	40 81       	ld	r20, Z
    19a0:	43 23       	and	r20, r19
    19a2:	09 f0       	breq	.+2      	; 0x19a6 <__stack+0x10a7>
    19a4:	9c c1       	rjmp	.+824    	; 0x1cde <__stack+0x13df>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    19a6:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    19a8:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    19aa:	5b 98       	cbi	0x0b, 3	; 11
    19ac:	4e ef       	ldi	r20, 0xFE	; 254
    19ae:	42 0f       	add	r20, r18
    19b0:	fc 01       	movw	r30, r24
    19b2:	e4 0f       	add	r30, r20
    19b4:	f1 1d       	adc	r31, r1
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    19b6:	40 81       	ld	r20, Z
    19b8:	43 23       	and	r20, r19
    19ba:	09 f0       	breq	.+2      	; 0x19be <__stack+0x10bf>
    19bc:	8e c1       	rjmp	.+796    	; 0x1cda <__stack+0x13db>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    19be:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    19c0:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    19c2:	5b 98       	cbi	0x0b, 3	; 11
    19c4:	4d ef       	ldi	r20, 0xFD	; 253
    19c6:	42 0f       	add	r20, r18
    19c8:	fc 01       	movw	r30, r24
    19ca:	e4 0f       	add	r30, r20
    19cc:	f1 1d       	adc	r31, r1
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    19ce:	40 81       	ld	r20, Z
    19d0:	43 23       	and	r20, r19
    19d2:	09 f0       	breq	.+2      	; 0x19d6 <__stack+0x10d7>
    19d4:	80 c1       	rjmp	.+768    	; 0x1cd6 <__stack+0x13d7>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    19d6:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    19d8:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    19da:	5b 98       	cbi	0x0b, 3	; 11
    19dc:	4c ef       	ldi	r20, 0xFC	; 252
    19de:	42 0f       	add	r20, r18
    19e0:	fc 01       	movw	r30, r24
    19e2:	e4 0f       	add	r30, r20
    19e4:	f1 1d       	adc	r31, r1
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    19e6:	40 81       	ld	r20, Z
    19e8:	43 23       	and	r20, r19
    19ea:	09 f0       	breq	.+2      	; 0x19ee <__stack+0x10ef>
    19ec:	72 c1       	rjmp	.+740    	; 0x1cd2 <__stack+0x13d3>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    19ee:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    19f0:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    19f2:	5b 98       	cbi	0x0b, 3	; 11
    19f4:	4b ef       	ldi	r20, 0xFB	; 251
    19f6:	42 0f       	add	r20, r18
    19f8:	fc 01       	movw	r30, r24
    19fa:	e4 0f       	add	r30, r20
    19fc:	f1 1d       	adc	r31, r1
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    19fe:	40 81       	ld	r20, Z
    1a00:	43 23       	and	r20, r19
    1a02:	09 f0       	breq	.+2      	; 0x1a06 <__stack+0x1107>
    1a04:	64 c1       	rjmp	.+712    	; 0x1cce <__stack+0x13cf>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1a06:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1a08:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1a0a:	5b 98       	cbi	0x0b, 3	; 11
    1a0c:	4a ef       	ldi	r20, 0xFA	; 250
    1a0e:	42 0f       	add	r20, r18
    1a10:	fc 01       	movw	r30, r24
    1a12:	e4 0f       	add	r30, r20
    1a14:	f1 1d       	adc	r31, r1
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    1a16:	40 81       	ld	r20, Z
    1a18:	43 23       	and	r20, r19
    1a1a:	09 f0       	breq	.+2      	; 0x1a1e <__stack+0x111f>
    1a1c:	56 c1       	rjmp	.+684    	; 0x1cca <__stack+0x13cb>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1a1e:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1a20:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1a22:	5b 98       	cbi	0x0b, 3	; 11
    1a24:	49 ef       	ldi	r20, 0xF9	; 249
    1a26:	42 0f       	add	r20, r18
    1a28:	fc 01       	movw	r30, r24
    1a2a:	e4 0f       	add	r30, r20
    1a2c:	f1 1d       	adc	r31, r1
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    1a2e:	40 81       	ld	r20, Z
    1a30:	43 23       	and	r20, r19
    1a32:	89 f5       	brne	.+98     	; 0x1a96 <__stack+0x1197>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1a34:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1a36:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1a38:	5b 98       	cbi	0x0b, 3	; 11
				//toggle the clock pin
				pinWrite(clock_pin, HIGH);
				pinWrite(clock_pin, LOW);
				pos--;
    1a3a:	28 50       	subi	r18, 0x08	; 8
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1a3c:	5a 9a       	sbi	0x0b, 2	; 11
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
    1a3e:	2f 3f       	cpi	r18, 0xFF	; 255
    1a40:	89 f1       	breq	.+98     	; 0x1aa4 <__stack+0x11a5>
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1a42:	5a 98       	cbi	0x0b, 2	; 11
			pinWrite(latch_pin, LOW);
			for(bit = 0; bit <= FONT_HEIGHT ; bit++){
				pinWrite(data_pin,((*(p+pos)) & (1 << byte)));
    1a44:	fc 01       	movw	r30, r24
    1a46:	e2 0f       	add	r30, r18
    1a48:	f1 1d       	adc	r31, r1
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    1a4a:	40 81       	ld	r20, Z
    1a4c:	43 23       	and	r20, r19
    1a4e:	09 f4       	brne	.+2      	; 0x1a52 <__stack+0x1153>
    1a50:	9e cf       	rjmp	.-196    	; 0x198e <__stack+0x108f>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1a52:	59 9a       	sbi	0x0b, 1	; 11
    1a54:	9d cf       	rjmp	.-198    	; 0x1990 <__stack+0x1091>
    1a56:	59 9a       	sbi	0x0b, 1	; 11
    1a58:	8a cd       	rjmp	.-1260   	; 0x156e <__stack+0xc6f>
    1a5a:	59 9a       	sbi	0x0b, 1	; 11
    1a5c:	7c cd       	rjmp	.-1288   	; 0x1556 <__stack+0xc57>
    1a5e:	59 9a       	sbi	0x0b, 1	; 11
    1a60:	6e cd       	rjmp	.-1316   	; 0x153e <__stack+0xc3f>
    1a62:	59 9a       	sbi	0x0b, 1	; 11
    1a64:	60 cd       	rjmp	.-1344   	; 0x1526 <__stack+0xc27>
    1a66:	59 9a       	sbi	0x0b, 1	; 11
    1a68:	52 cd       	rjmp	.-1372   	; 0x150e <__stack+0xc0f>
    1a6a:	59 9a       	sbi	0x0b, 1	; 11
    1a6c:	44 cd       	rjmp	.-1400   	; 0x14f6 <__stack+0xbf7>
    1a6e:	b7 e0       	ldi	r27, 0x07	; 7
    1a70:	eb 9f       	mul	r30, r27
    1a72:	f0 01       	movw	r30, r0
    1a74:	11 24       	eor	r1, r1
    1a76:	ec 5a       	subi	r30, 0xAC	; 172
    1a78:	fe 4f       	sbci	r31, 0xFE	; 254
    1a7a:	a2 81       	ldd	r26, Z+2	; 0x02
    1a7c:	b3 81       	ldd	r27, Z+3	; 0x03
    1a7e:	4c 91       	ld	r20, X
    1a80:	21 e0       	ldi	r18, 0x01	; 1
    1a82:	30 e0       	ldi	r19, 0x00	; 0
    1a84:	06 80       	ldd	r0, Z+6	; 0x06
    1a86:	02 c0       	rjmp	.+4      	; 0x1a8c <__stack+0x118d>
    1a88:	22 0f       	add	r18, r18
    1a8a:	33 1f       	adc	r19, r19
    1a8c:	0a 94       	dec	r0
    1a8e:	e2 f7       	brpl	.-8      	; 0x1a88 <__stack+0x1189>
    1a90:	24 2b       	or	r18, r20
    1a92:	2c 93       	st	X, r18
    1a94:	c9 cd       	rjmp	.-1134   	; 0x1628 <__stack+0xd29>
    1a96:	59 9a       	sbi	0x0b, 1	; 11
    1a98:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1a9a:	5b 98       	cbi	0x0b, 3	; 11
				//toggle the clock pin
				pinWrite(clock_pin, HIGH);
				pinWrite(clock_pin, LOW);
				pos--;
    1a9c:	28 50       	subi	r18, 0x08	; 8
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1a9e:	5a 9a       	sbi	0x0b, 2	; 11
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
    1aa0:	2f 3f       	cpi	r18, 0xFF	; 255
    1aa2:	79 f6       	brne	.-98     	; 0x1a42 <__stack+0x1143>
    1aa4:	a4 e0       	ldi	r26, 0x04	; 4
    1aa6:	b1 e0       	ldi	r27, 0x01	; 1
    1aa8:	9e 83       	std	Y+6, r25	; 0x06
    1aaa:	8d 83       	std	Y+5, r24	; 0x05
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    1aac:	ed 91       	ld	r30, X+
    1aae:	ee 23       	and	r30, r30
    1ab0:	01 f1       	breq	.+64     	; 0x1af2 <__stack+0x11f3>
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    1ab2:	ec 3c       	cpi	r30, 0xCC	; 204
    1ab4:	d8 f7       	brcc	.-10     	; 0x1aac <__stack+0x11ad>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1ab6:	27 e0       	ldi	r18, 0x07	; 7
    1ab8:	e2 9f       	mul	r30, r18
    1aba:	f0 01       	movw	r30, r0
    1abc:	11 24       	eor	r1, r1
    1abe:	af 01       	movw	r20, r30
    1ac0:	4c 5a       	subi	r20, 0xAC	; 172
    1ac2:	5e 4f       	sbci	r21, 0xFE	; 254
    1ac4:	2a 01       	movw	r4, r20
    1ac6:	fa 01       	movw	r30, r20
    1ac8:	42 81       	ldd	r20, Z+2	; 0x02
    1aca:	53 81       	ldd	r21, Z+3	; 0x03
    1acc:	fa 01       	movw	r30, r20
    1ace:	30 81       	ld	r19, Z
    1ad0:	81 e0       	ldi	r24, 0x01	; 1
    1ad2:	90 e0       	ldi	r25, 0x00	; 0
    1ad4:	f2 01       	movw	r30, r4
    1ad6:	06 80       	ldd	r0, Z+6	; 0x06
    1ad8:	02 c0       	rjmp	.+4      	; 0x1ade <__stack+0x11df>
    1ada:	88 0f       	add	r24, r24
    1adc:	99 1f       	adc	r25, r25
    1ade:	0a 94       	dec	r0
    1ae0:	e2 f7       	brpl	.-8      	; 0x1ada <__stack+0x11db>
    1ae2:	28 2f       	mov	r18, r24
    1ae4:	20 95       	com	r18
    1ae6:	23 23       	and	r18, r19
    1ae8:	fa 01       	movw	r30, r20
    1aea:	20 83       	st	Z, r18
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    1aec:	ed 91       	ld	r30, X+
    1aee:	e1 11       	cpse	r30, r1
    1af0:	e0 cf       	rjmp	.-64     	; 0x1ab2 <__stack+0x11b3>
    1af2:	8d 81       	ldd	r24, Y+5	; 0x05
    1af4:	9e 81       	ldd	r25, Y+6	; 0x06
/* Multiplexing method                                                  */
/************************************************************************/
static inline void MultiPlex(uint8_t *pin)
{
	pinsMultiWrite(plex_pins, LOW);
	pinWrite(plex_pins[*pin], HIGH);
    1af6:	d1 01       	movw	r26, r2
    1af8:	ed 91       	ld	r30, X+
    1afa:	1d 01       	movw	r2, r26
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    1afc:	ec 3c       	cpi	r30, 0xCC	; 204
    1afe:	08 f4       	brcc	.+2      	; 0x1b02 <__stack+0x1203>
    1b00:	f0 c0       	rjmp	.+480    	; 0x1ce2 <__stack+0x13e3>
	delay(delayms);
    1b02:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1b06:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
/*  delay                                                               */
/************************************************************************/
int delayms = 1;
static inline void delay(int dl)
{
	while(dl >= 0)
    1b0a:	37 fd       	sbrc	r19, 7
    1b0c:	09 c0       	rjmp	.+18     	; 0x1b20 <__stack+0x1221>
    1b0e:	ef e9       	ldi	r30, 0x9F	; 159
    1b10:	ff e0       	ldi	r31, 0x0F	; 15
    1b12:	31 97       	sbiw	r30, 0x01	; 1
    1b14:	f1 f7       	brne	.-4      	; 0x1b12 <__stack+0x1213>
    1b16:	00 c0       	rjmp	.+0      	; 0x1b18 <__stack+0x1219>
    1b18:	00 00       	nop
	{
		_delay_ms(1);
		dl--;
    1b1a:	21 50       	subi	r18, 0x01	; 1
    1b1c:	31 09       	sbc	r19, r1
    1b1e:	b8 f7       	brcc	.-18     	; 0x1b0e <__stack+0x120f>
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
    1b20:	a4 e0       	ldi	r26, 0x04	; 4
    1b22:	b1 e0       	ldi	r27, 0x01	; 1
    1b24:	9e 83       	std	Y+6, r25	; 0x06
    1b26:	8d 83       	std	Y+5, r24	; 0x05
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    1b28:	ed 91       	ld	r30, X+
    1b2a:	ee 23       	and	r30, r30
    1b2c:	01 f1       	breq	.+64     	; 0x1b6e <__stack+0x126f>
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    1b2e:	ec 3c       	cpi	r30, 0xCC	; 204
    1b30:	d8 f7       	brcc	.-10     	; 0x1b28 <__stack+0x1229>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1b32:	27 e0       	ldi	r18, 0x07	; 7
    1b34:	e2 9f       	mul	r30, r18
    1b36:	f0 01       	movw	r30, r0
    1b38:	11 24       	eor	r1, r1
    1b3a:	af 01       	movw	r20, r30
    1b3c:	4c 5a       	subi	r20, 0xAC	; 172
    1b3e:	5e 4f       	sbci	r21, 0xFE	; 254
    1b40:	2a 01       	movw	r4, r20
    1b42:	fa 01       	movw	r30, r20
    1b44:	42 81       	ldd	r20, Z+2	; 0x02
    1b46:	53 81       	ldd	r21, Z+3	; 0x03
    1b48:	fa 01       	movw	r30, r20
    1b4a:	30 81       	ld	r19, Z
    1b4c:	81 e0       	ldi	r24, 0x01	; 1
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	f2 01       	movw	r30, r4
    1b52:	06 80       	ldd	r0, Z+6	; 0x06
    1b54:	02 c0       	rjmp	.+4      	; 0x1b5a <__stack+0x125b>
    1b56:	88 0f       	add	r24, r24
    1b58:	99 1f       	adc	r25, r25
    1b5a:	0a 94       	dec	r0
    1b5c:	e2 f7       	brpl	.-8      	; 0x1b56 <__stack+0x1257>
    1b5e:	28 2f       	mov	r18, r24
    1b60:	20 95       	com	r18
    1b62:	23 23       	and	r18, r19
    1b64:	fa 01       	movw	r30, r20
    1b66:	20 83       	st	Z, r18
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    1b68:	ed 91       	ld	r30, X+
    1b6a:	e1 11       	cpse	r30, r1
    1b6c:	e0 cf       	rjmp	.-64     	; 0x1b2e <__stack+0x122f>
    1b6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b70:	9e 81       	ldd	r25, Y+6	; 0x06
    1b72:	29 e0       	ldi	r18, 0x09	; 9
    1b74:	30 e0       	ldi	r19, 0x00	; 0
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1b76:	5a 98       	cbi	0x0b, 2	; 11
    1b78:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1b7a:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1b7c:	5b 98       	cbi	0x0b, 3	; 11
    1b7e:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1b80:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1b82:	5b 98       	cbi	0x0b, 3	; 11
    1b84:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1b86:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1b88:	5b 98       	cbi	0x0b, 3	; 11
    1b8a:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1b8c:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1b8e:	5b 98       	cbi	0x0b, 3	; 11
    1b90:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1b92:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1b94:	5b 98       	cbi	0x0b, 3	; 11
    1b96:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1b98:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1b9a:	5b 98       	cbi	0x0b, 3	; 11
    1b9c:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1b9e:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1ba0:	5b 98       	cbi	0x0b, 3	; 11
    1ba2:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1ba4:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1ba6:	5b 98       	cbi	0x0b, 3	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1ba8:	5a 9a       	sbi	0x0b, 2	; 11
    1baa:	21 50       	subi	r18, 0x01	; 1
    1bac:	31 09       	sbc	r19, r1
/* Clear Display                                                        */
/************************************************************************/
static inline void Clear(){
	int x, y = 0;
	pinsMultiWrite(plex_pins, LOW);
	for(x = 0; x < (SH_REG + 1); x++) {
    1bae:	19 f7       	brne	.-58     	; 0x1b76 <__stack+0x1277>
    1bb0:	6f 5f       	subi	r22, 0xFF	; 255
    1bb2:	7f 4f       	sbci	r23, 0xFF	; 255
{
	uint8_t byte, index, bit = 0;
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
    1bb4:	67 30       	cpi	r22, 0x07	; 7
    1bb6:	71 05       	cpc	r23, r1
    1bb8:	09 f0       	breq	.+2      	; 0x1bbc <__stack+0x12bd>
    1bba:	e1 ce       	rjmp	.-574    	; 0x197e <__stack+0x107f>
			pinWrite(latch_pin, HIGH);
		}
		MultiPlex(&byte);
		Clear();
	}
	delayms = 1;
    1bbc:	f0 92 01 01 	sts	0x0101, r15	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1bc0:	e0 92 00 01 	sts	0x0100, r14	; 0x800100 <__DATA_REGION_ORIGIN__>
    1bc4:	aa 94       	dec	r10
}
}*/
static inline void HoldDisplayBuffer(const uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
    1bc6:	a1 10       	cpse	r10, r1
    1bc8:	d4 ce       	rjmp	.-600    	; 0x1972 <__stack+0x1073>
    1bca:	ff ef       	ldi	r31, 0xFF	; 255
    1bcc:	8f 1a       	sub	r8, r31
    1bce:	9f 0a       	sbc	r9, r31
/************************************************************************/
void Fall(const uint8_t *p, uint8_t time, uint8_t dir )
{
	//uint8_t *bf = buffer;
	uint8_t index, step = 0;
	for(step = 0; step <= FONT_HEIGHT; step++)
    1bd0:	28 e0       	ldi	r18, 0x08	; 8
    1bd2:	82 16       	cp	r8, r18
    1bd4:	91 04       	cpc	r9, r1
    1bd6:	09 f0       	breq	.+2      	; 0x1bda <__stack+0x12db>
    1bd8:	ab ce       	rjmp	.-682    	; 0x1930 <__stack+0x1031>
			else
			*(bf + index) = (*((p+index)) << (step));
		}
		HoldDisplayBuffer(bf, time);
	}
	HoldDisplayBuffer(bf,50);
    1bda:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <bf>
    1bde:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <bf+0x1>
    1be2:	a2 e3       	ldi	r26, 0x32	; 50
    1be4:	aa 2e       	mov	r10, r26
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    1be6:	b4 e0       	ldi	r27, 0x04	; 4
    1be8:	8b 2e       	mov	r8, r27
    1bea:	b1 e0       	ldi	r27, 0x01	; 1
    1bec:	9b 2e       	mov	r9, r27
    1bee:	60 e0       	ldi	r22, 0x00	; 0
    1bf0:	70 e0       	ldi	r23, 0x00	; 0
    1bf2:	31 e0       	ldi	r19, 0x01	; 1
    1bf4:	06 2e       	mov	r0, r22
    1bf6:	01 c0       	rjmp	.+2      	; 0x1bfa <__stack+0x12fb>
    1bf8:	33 0f       	add	r19, r19
    1bfa:	0a 94       	dec	r0
    1bfc:	ea f7       	brpl	.-6      	; 0x1bf8 <__stack+0x12f9>
    1bfe:	2f e3       	ldi	r18, 0x3F	; 63
    1c00:	5a c0       	rjmp	.+180    	; 0x1cb6 <__stack+0x13b7>
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1c02:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1c04:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1c06:	5b 98       	cbi	0x0b, 3	; 11
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
			pinWrite(latch_pin, LOW);
			for(bit = 0; bit <= FONT_HEIGHT ; bit++){
				pinWrite(data_pin,((*(p+pos)) & (1 << byte)));
    1c08:	4f ef       	ldi	r20, 0xFF	; 255
    1c0a:	42 0f       	add	r20, r18
    1c0c:	fc 01       	movw	r30, r24
    1c0e:	e4 0f       	add	r30, r20
    1c10:	f1 1d       	adc	r31, r1
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    1c12:	40 81       	ld	r20, Z
    1c14:	43 23       	and	r20, r19
    1c16:	09 f0       	breq	.+2      	; 0x1c1a <__stack+0x131b>
    1c18:	ef c1       	rjmp	.+990    	; 0x1ff8 <__stack+0x16f9>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1c1a:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1c1c:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1c1e:	5b 98       	cbi	0x0b, 3	; 11
    1c20:	4e ef       	ldi	r20, 0xFE	; 254
    1c22:	42 0f       	add	r20, r18
    1c24:	fc 01       	movw	r30, r24
    1c26:	e4 0f       	add	r30, r20
    1c28:	f1 1d       	adc	r31, r1
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    1c2a:	40 81       	ld	r20, Z
    1c2c:	43 23       	and	r20, r19
    1c2e:	09 f0       	breq	.+2      	; 0x1c32 <__stack+0x1333>
    1c30:	e1 c1       	rjmp	.+962    	; 0x1ff4 <__stack+0x16f5>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1c32:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1c34:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1c36:	5b 98       	cbi	0x0b, 3	; 11
    1c38:	4d ef       	ldi	r20, 0xFD	; 253
    1c3a:	42 0f       	add	r20, r18
    1c3c:	fc 01       	movw	r30, r24
    1c3e:	e4 0f       	add	r30, r20
    1c40:	f1 1d       	adc	r31, r1
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    1c42:	40 81       	ld	r20, Z
    1c44:	43 23       	and	r20, r19
    1c46:	09 f0       	breq	.+2      	; 0x1c4a <__stack+0x134b>
    1c48:	d3 c1       	rjmp	.+934    	; 0x1ff0 <__stack+0x16f1>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1c4a:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1c4c:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1c4e:	5b 98       	cbi	0x0b, 3	; 11
    1c50:	4c ef       	ldi	r20, 0xFC	; 252
    1c52:	42 0f       	add	r20, r18
    1c54:	fc 01       	movw	r30, r24
    1c56:	e4 0f       	add	r30, r20
    1c58:	f1 1d       	adc	r31, r1
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    1c5a:	40 81       	ld	r20, Z
    1c5c:	43 23       	and	r20, r19
    1c5e:	09 f0       	breq	.+2      	; 0x1c62 <__stack+0x1363>
    1c60:	c5 c1       	rjmp	.+906    	; 0x1fec <__stack+0x16ed>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1c62:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1c64:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1c66:	5b 98       	cbi	0x0b, 3	; 11
    1c68:	4b ef       	ldi	r20, 0xFB	; 251
    1c6a:	42 0f       	add	r20, r18
    1c6c:	fc 01       	movw	r30, r24
    1c6e:	e4 0f       	add	r30, r20
    1c70:	f1 1d       	adc	r31, r1
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    1c72:	40 81       	ld	r20, Z
    1c74:	43 23       	and	r20, r19
    1c76:	09 f0       	breq	.+2      	; 0x1c7a <__stack+0x137b>
    1c78:	b7 c1       	rjmp	.+878    	; 0x1fe8 <__stack+0x16e9>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1c7a:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1c7c:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1c7e:	5b 98       	cbi	0x0b, 3	; 11
    1c80:	4a ef       	ldi	r20, 0xFA	; 250
    1c82:	42 0f       	add	r20, r18
    1c84:	fc 01       	movw	r30, r24
    1c86:	e4 0f       	add	r30, r20
    1c88:	f1 1d       	adc	r31, r1
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    1c8a:	40 81       	ld	r20, Z
    1c8c:	43 23       	and	r20, r19
    1c8e:	09 f0       	breq	.+2      	; 0x1c92 <__stack+0x1393>
    1c90:	a9 c1       	rjmp	.+850    	; 0x1fe4 <__stack+0x16e5>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1c92:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1c94:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1c96:	5b 98       	cbi	0x0b, 3	; 11
    1c98:	49 ef       	ldi	r20, 0xF9	; 249
    1c9a:	42 0f       	add	r20, r18
    1c9c:	fc 01       	movw	r30, r24
    1c9e:	e4 0f       	add	r30, r20
    1ca0:	f1 1d       	adc	r31, r1
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    1ca2:	40 81       	ld	r20, Z
    1ca4:	43 23       	and	r20, r19
    1ca6:	89 f5       	brne	.+98     	; 0x1d0a <__stack+0x140b>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1ca8:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1caa:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1cac:	5b 98       	cbi	0x0b, 3	; 11
				//toggle the clock pin
				pinWrite(clock_pin, HIGH);
				pinWrite(clock_pin, LOW);
				pos--;
    1cae:	28 50       	subi	r18, 0x08	; 8
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1cb0:	5a 9a       	sbi	0x0b, 2	; 11
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
    1cb2:	2f 3f       	cpi	r18, 0xFF	; 255
    1cb4:	89 f1       	breq	.+98     	; 0x1d18 <__stack+0x1419>
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1cb6:	5a 98       	cbi	0x0b, 2	; 11
			pinWrite(latch_pin, LOW);
			for(bit = 0; bit <= FONT_HEIGHT ; bit++){
				pinWrite(data_pin,((*(p+pos)) & (1 << byte)));
    1cb8:	fc 01       	movw	r30, r24
    1cba:	e2 0f       	add	r30, r18
    1cbc:	f1 1d       	adc	r31, r1
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    1cbe:	40 81       	ld	r20, Z
    1cc0:	43 23       	and	r20, r19
    1cc2:	09 f4       	brne	.+2      	; 0x1cc6 <__stack+0x13c7>
    1cc4:	9e cf       	rjmp	.-196    	; 0x1c02 <__stack+0x1303>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1cc6:	59 9a       	sbi	0x0b, 1	; 11
    1cc8:	9d cf       	rjmp	.-198    	; 0x1c04 <__stack+0x1305>
    1cca:	59 9a       	sbi	0x0b, 1	; 11
    1ccc:	a9 ce       	rjmp	.-686    	; 0x1a20 <__stack+0x1121>
    1cce:	59 9a       	sbi	0x0b, 1	; 11
    1cd0:	9b ce       	rjmp	.-714    	; 0x1a08 <__stack+0x1109>
    1cd2:	59 9a       	sbi	0x0b, 1	; 11
    1cd4:	8d ce       	rjmp	.-742    	; 0x19f0 <__stack+0x10f1>
    1cd6:	59 9a       	sbi	0x0b, 1	; 11
    1cd8:	7f ce       	rjmp	.-770    	; 0x19d8 <__stack+0x10d9>
    1cda:	59 9a       	sbi	0x0b, 1	; 11
    1cdc:	71 ce       	rjmp	.-798    	; 0x19c0 <__stack+0x10c1>
    1cde:	59 9a       	sbi	0x0b, 1	; 11
    1ce0:	63 ce       	rjmp	.-826    	; 0x19a8 <__stack+0x10a9>
    1ce2:	b7 e0       	ldi	r27, 0x07	; 7
    1ce4:	eb 9f       	mul	r30, r27
    1ce6:	f0 01       	movw	r30, r0
    1ce8:	11 24       	eor	r1, r1
    1cea:	ec 5a       	subi	r30, 0xAC	; 172
    1cec:	fe 4f       	sbci	r31, 0xFE	; 254
    1cee:	a2 81       	ldd	r26, Z+2	; 0x02
    1cf0:	b3 81       	ldd	r27, Z+3	; 0x03
    1cf2:	4c 91       	ld	r20, X
    1cf4:	21 e0       	ldi	r18, 0x01	; 1
    1cf6:	30 e0       	ldi	r19, 0x00	; 0
    1cf8:	06 80       	ldd	r0, Z+6	; 0x06
    1cfa:	02 c0       	rjmp	.+4      	; 0x1d00 <__stack+0x1401>
    1cfc:	22 0f       	add	r18, r18
    1cfe:	33 1f       	adc	r19, r19
    1d00:	0a 94       	dec	r0
    1d02:	e2 f7       	brpl	.-8      	; 0x1cfc <__stack+0x13fd>
    1d04:	24 2b       	or	r18, r20
    1d06:	2c 93       	st	X, r18
    1d08:	fc ce       	rjmp	.-520    	; 0x1b02 <__stack+0x1203>
    1d0a:	59 9a       	sbi	0x0b, 1	; 11
    1d0c:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1d0e:	5b 98       	cbi	0x0b, 3	; 11
				//toggle the clock pin
				pinWrite(clock_pin, HIGH);
				pinWrite(clock_pin, LOW);
				pos--;
    1d10:	28 50       	subi	r18, 0x08	; 8
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1d12:	5a 9a       	sbi	0x0b, 2	; 11
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
    1d14:	2f 3f       	cpi	r18, 0xFF	; 255
    1d16:	79 f6       	brne	.-98     	; 0x1cb6 <__stack+0x13b7>
    1d18:	a4 e0       	ldi	r26, 0x04	; 4
    1d1a:	b1 e0       	ldi	r27, 0x01	; 1
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    1d1c:	ed 91       	ld	r30, X+
    1d1e:	ee 23       	and	r30, r30
    1d20:	09 f1       	breq	.+66     	; 0x1d64 <__stack+0x1465>
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    1d22:	ec 3c       	cpi	r30, 0xCC	; 204
    1d24:	d8 f7       	brcc	.-10     	; 0x1d1c <__stack+0x141d>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1d26:	37 e0       	ldi	r19, 0x07	; 7
    1d28:	e3 9f       	mul	r30, r19
    1d2a:	f0 01       	movw	r30, r0
    1d2c:	11 24       	eor	r1, r1
    1d2e:	af 01       	movw	r20, r30
    1d30:	4c 5a       	subi	r20, 0xAC	; 172
    1d32:	5e 4f       	sbci	r21, 0xFE	; 254
    1d34:	2a 01       	movw	r4, r20
    1d36:	fa 01       	movw	r30, r20
    1d38:	42 81       	ldd	r20, Z+2	; 0x02
    1d3a:	53 81       	ldd	r21, Z+3	; 0x03
    1d3c:	fa 01       	movw	r30, r20
    1d3e:	30 81       	ld	r19, Z
    1d40:	22 24       	eor	r2, r2
    1d42:	23 94       	inc	r2
    1d44:	31 2c       	mov	r3, r1
    1d46:	f2 01       	movw	r30, r4
    1d48:	06 80       	ldd	r0, Z+6	; 0x06
    1d4a:	02 c0       	rjmp	.+4      	; 0x1d50 <__stack+0x1451>
    1d4c:	22 0c       	add	r2, r2
    1d4e:	33 1c       	adc	r3, r3
    1d50:	0a 94       	dec	r0
    1d52:	e2 f7       	brpl	.-8      	; 0x1d4c <__stack+0x144d>
    1d54:	22 2d       	mov	r18, r2
    1d56:	20 95       	com	r18
    1d58:	23 23       	and	r18, r19
    1d5a:	fa 01       	movw	r30, r20
    1d5c:	20 83       	st	Z, r18
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    1d5e:	ed 91       	ld	r30, X+
    1d60:	e1 11       	cpse	r30, r1
    1d62:	df cf       	rjmp	.-66     	; 0x1d22 <__stack+0x1423>
/* Multiplexing method                                                  */
/************************************************************************/
static inline void MultiPlex(uint8_t *pin)
{
	pinsMultiWrite(plex_pins, LOW);
	pinWrite(plex_pins[*pin], HIGH);
    1d64:	d4 01       	movw	r26, r8
    1d66:	ed 91       	ld	r30, X+
    1d68:	4d 01       	movw	r8, r26
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    1d6a:	ec 3c       	cpi	r30, 0xCC	; 204
    1d6c:	08 f4       	brcc	.+2      	; 0x1d70 <__stack+0x1471>
    1d6e:	46 c1       	rjmp	.+652    	; 0x1ffc <__stack+0x16fd>
	delay(delayms);
    1d70:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1d74:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
/*  delay                                                               */
/************************************************************************/
int delayms = 1;
static inline void delay(int dl)
{
	while(dl >= 0)
    1d78:	37 fd       	sbrc	r19, 7
    1d7a:	09 c0       	rjmp	.+18     	; 0x1d8e <__stack+0x148f>
    1d7c:	ef e9       	ldi	r30, 0x9F	; 159
    1d7e:	ff e0       	ldi	r31, 0x0F	; 15
    1d80:	31 97       	sbiw	r30, 0x01	; 1
    1d82:	f1 f7       	brne	.-4      	; 0x1d80 <__stack+0x1481>
    1d84:	00 c0       	rjmp	.+0      	; 0x1d86 <__stack+0x1487>
    1d86:	00 00       	nop
	{
		_delay_ms(1);
		dl--;
    1d88:	21 50       	subi	r18, 0x01	; 1
    1d8a:	31 09       	sbc	r19, r1
    1d8c:	b8 f7       	brcc	.-18     	; 0x1d7c <__stack+0x147d>
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
    1d8e:	a4 e0       	ldi	r26, 0x04	; 4
    1d90:	b1 e0       	ldi	r27, 0x01	; 1
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    1d92:	ed 91       	ld	r30, X+
    1d94:	ee 23       	and	r30, r30
    1d96:	09 f1       	breq	.+66     	; 0x1dda <__stack+0x14db>
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    1d98:	ec 3c       	cpi	r30, 0xCC	; 204
    1d9a:	d8 f7       	brcc	.-10     	; 0x1d92 <__stack+0x1493>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1d9c:	27 e0       	ldi	r18, 0x07	; 7
    1d9e:	e2 9f       	mul	r30, r18
    1da0:	f0 01       	movw	r30, r0
    1da2:	11 24       	eor	r1, r1
    1da4:	af 01       	movw	r20, r30
    1da6:	4c 5a       	subi	r20, 0xAC	; 172
    1da8:	5e 4f       	sbci	r21, 0xFE	; 254
    1daa:	2a 01       	movw	r4, r20
    1dac:	fa 01       	movw	r30, r20
    1dae:	42 81       	ldd	r20, Z+2	; 0x02
    1db0:	53 81       	ldd	r21, Z+3	; 0x03
    1db2:	fa 01       	movw	r30, r20
    1db4:	30 81       	ld	r19, Z
    1db6:	22 24       	eor	r2, r2
    1db8:	23 94       	inc	r2
    1dba:	31 2c       	mov	r3, r1
    1dbc:	f2 01       	movw	r30, r4
    1dbe:	06 80       	ldd	r0, Z+6	; 0x06
    1dc0:	02 c0       	rjmp	.+4      	; 0x1dc6 <__stack+0x14c7>
    1dc2:	22 0c       	add	r2, r2
    1dc4:	33 1c       	adc	r3, r3
    1dc6:	0a 94       	dec	r0
    1dc8:	e2 f7       	brpl	.-8      	; 0x1dc2 <__stack+0x14c3>
    1dca:	22 2d       	mov	r18, r2
    1dcc:	20 95       	com	r18
    1dce:	23 23       	and	r18, r19
    1dd0:	fa 01       	movw	r30, r20
    1dd2:	20 83       	st	Z, r18
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    1dd4:	ed 91       	ld	r30, X+
    1dd6:	e1 11       	cpse	r30, r1
    1dd8:	df cf       	rjmp	.-66     	; 0x1d98 <__stack+0x1499>
    1dda:	29 e0       	ldi	r18, 0x09	; 9
    1ddc:	30 e0       	ldi	r19, 0x00	; 0
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1dde:	5a 98       	cbi	0x0b, 2	; 11
    1de0:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1de2:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1de4:	5b 98       	cbi	0x0b, 3	; 11
    1de6:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1de8:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1dea:	5b 98       	cbi	0x0b, 3	; 11
    1dec:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1dee:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1df0:	5b 98       	cbi	0x0b, 3	; 11
    1df2:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1df4:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1df6:	5b 98       	cbi	0x0b, 3	; 11
    1df8:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1dfa:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1dfc:	5b 98       	cbi	0x0b, 3	; 11
    1dfe:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1e00:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1e02:	5b 98       	cbi	0x0b, 3	; 11
    1e04:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1e06:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1e08:	5b 98       	cbi	0x0b, 3	; 11
    1e0a:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1e0c:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1e0e:	5b 98       	cbi	0x0b, 3	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1e10:	5a 9a       	sbi	0x0b, 2	; 11
    1e12:	21 50       	subi	r18, 0x01	; 1
    1e14:	31 09       	sbc	r19, r1
/* Clear Display                                                        */
/************************************************************************/
static inline void Clear(){
	int x, y = 0;
	pinsMultiWrite(plex_pins, LOW);
	for(x = 0; x < (SH_REG + 1); x++) {
    1e16:	19 f7       	brne	.-58     	; 0x1dde <__stack+0x14df>
    1e18:	6f 5f       	subi	r22, 0xFF	; 255
    1e1a:	7f 4f       	sbci	r23, 0xFF	; 255
{
	uint8_t byte, index, bit = 0;
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
    1e1c:	67 30       	cpi	r22, 0x07	; 7
    1e1e:	71 05       	cpc	r23, r1
    1e20:	09 f0       	breq	.+2      	; 0x1e24 <__stack+0x1525>
    1e22:	e7 ce       	rjmp	.-562    	; 0x1bf2 <__stack+0x12f3>
			pinWrite(latch_pin, HIGH);
		}
		MultiPlex(&byte);
		Clear();
	}
	delayms = 1;
    1e24:	22 24       	eor	r2, r2
    1e26:	23 94       	inc	r2
    1e28:	31 2c       	mov	r3, r1
    1e2a:	30 92 01 01 	sts	0x0101, r3	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1e2e:	20 92 00 01 	sts	0x0100, r2	; 0x800100 <__DATA_REGION_ORIGIN__>
    1e32:	aa 94       	dec	r10
}
}*/
static inline void HoldDisplayBuffer(const uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
    1e34:	a1 10       	cpse	r10, r1
    1e36:	d7 ce       	rjmp	.-594    	; 0x1be6 <__stack+0x12e7>
    1e38:	d8 01       	movw	r26, r16
    1e3a:	eb 2d       	mov	r30, r11
    1e3c:	1d 92       	st	X+, r1
    1e3e:	ea 95       	dec	r30
    1e40:	e9 f7       	brne	.-6      	; 0x1e3c <__stack+0x153d>
    1e42:	22 e1       	ldi	r18, 0x12	; 18
    1e44:	31 e0       	ldi	r19, 0x01	; 1
    1e46:	3c 83       	std	Y+4, r19	; 0x04
    1e48:	2b 83       	std	Y+3, r18	; 0x03
    1e4a:	d9 01       	movw	r26, r18
    1e4c:	20 e0       	ldi	r18, 0x00	; 0
    1e4e:	8a e4       	ldi	r24, 0x4A	; 74
/* returns the index of the first byte of the requested character       */
/************************************************************************/
uint8_t CharStart(const char *p)
{
	/*if(*p == ' ') return 0;
	else*/ return (uint8_t) (( *p - ' '));
    1e50:	80 52       	subi	r24, 0x20	; 32
		s_pos = (MT_SIZE - (c_len * FONT_WIDTH) - c_len - 2);
	}
	pos_index = s_pos;
	ClearStringBuffer();
	while(*ch){
		index = CharStart(ch++) * FONT_WIDTH;
    1e52:	35 e0       	ldi	r19, 0x05	; 5
    1e54:	83 9f       	mul	r24, r19
    1e56:	c0 01       	movw	r24, r0
    1e58:	11 24       	eor	r1, r1
		for(len = 0; len < FONT_WIDTH; len++){
			stringbuffer[pos_index] = (uint8_t)(pgm_read_byte((font_5x7 + index)));
    1e5a:	fc 01       	movw	r30, r24
    1e5c:	e8 59       	subi	r30, 0x98	; 152
    1e5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e60:	34 91       	lpm	r19, Z
    1e62:	e2 2f       	mov	r30, r18
    1e64:	f0 e0       	ldi	r31, 0x00	; 0
    1e66:	e0 5a       	subi	r30, 0xA0	; 160
    1e68:	fd 4f       	sbci	r31, 0xFD	; 253
    1e6a:	30 83       	st	Z, r19
    1e6c:	fc 01       	movw	r30, r24
    1e6e:	e7 59       	subi	r30, 0x97	; 151
    1e70:	ff 4f       	sbci	r31, 0xFF	; 255
    1e72:	34 91       	lpm	r19, Z
    1e74:	e1 e0       	ldi	r30, 0x01	; 1
    1e76:	e2 0f       	add	r30, r18
    1e78:	f0 e0       	ldi	r31, 0x00	; 0
    1e7a:	e0 5a       	subi	r30, 0xA0	; 160
    1e7c:	fd 4f       	sbci	r31, 0xFD	; 253
    1e7e:	30 83       	st	Z, r19
    1e80:	fc 01       	movw	r30, r24
    1e82:	e6 59       	subi	r30, 0x96	; 150
    1e84:	ff 4f       	sbci	r31, 0xFF	; 255
    1e86:	34 91       	lpm	r19, Z
    1e88:	e2 e0       	ldi	r30, 0x02	; 2
    1e8a:	e2 0f       	add	r30, r18
    1e8c:	f0 e0       	ldi	r31, 0x00	; 0
    1e8e:	e0 5a       	subi	r30, 0xA0	; 160
    1e90:	fd 4f       	sbci	r31, 0xFD	; 253
    1e92:	30 83       	st	Z, r19
    1e94:	fc 01       	movw	r30, r24
    1e96:	e5 59       	subi	r30, 0x95	; 149
    1e98:	ff 4f       	sbci	r31, 0xFF	; 255
    1e9a:	34 91       	lpm	r19, Z
    1e9c:	e3 e0       	ldi	r30, 0x03	; 3
    1e9e:	e2 0f       	add	r30, r18
    1ea0:	f0 e0       	ldi	r31, 0x00	; 0
    1ea2:	e0 5a       	subi	r30, 0xA0	; 160
    1ea4:	fd 4f       	sbci	r31, 0xFD	; 253
    1ea6:	30 83       	st	Z, r19
    1ea8:	fc 01       	movw	r30, r24
    1eaa:	e4 59       	subi	r30, 0x94	; 148
    1eac:	ff 4f       	sbci	r31, 0xFF	; 255
    1eae:	84 91       	lpm	r24, Z
    1eb0:	e4 e0       	ldi	r30, 0x04	; 4
    1eb2:	e2 0f       	add	r30, r18
    1eb4:	f0 e0       	ldi	r31, 0x00	; 0
    1eb6:	e0 5a       	subi	r30, 0xA0	; 160
    1eb8:	fd 4f       	sbci	r31, 0xFD	; 253
    1eba:	80 83       	st	Z, r24
			index++; pos_index++;
		}
		pos_index += 1; //space the characters
    1ebc:	2a 5f       	subi	r18, 0xFA	; 250
	}else if(align == RIGHT){
		s_pos = (MT_SIZE - (c_len * FONT_WIDTH) - c_len - 2);
	}
	pos_index = s_pos;
	ClearStringBuffer();
	while(*ch){
    1ebe:	8d 91       	ld	r24, X+
    1ec0:	81 11       	cpse	r24, r1
    1ec2:	c6 cf       	rjmp	.-116    	; 0x1e50 <__stack+0x1551>
    1ec4:	91 2c       	mov	r9, r1
    1ec6:	a0 e6       	ldi	r26, 0x60	; 96
    1ec8:	b2 e0       	ldi	r27, 0x02	; 2
    1eca:	80 e0       	ldi	r24, 0x00	; 0
    1ecc:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t index, begin, end = 0;
	//uint8_t *bf = buffer;
	//HoldDisplay(p, 10);
	for(index = 0; index < MT_SIZE; index++)
	{
		for(begin = 0; begin <= index; begin++)(*(bf + begin) = (*((p+(begin)))));
    1ece:	2d 91       	ld	r18, X+
    1ed0:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <bf>
    1ed4:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <bf+0x1>
    1ed8:	e8 0f       	add	r30, r24
    1eda:	f9 1f       	adc	r31, r25
    1edc:	20 83       	st	Z, r18
    1ede:	01 96       	adiw	r24, 0x01	; 1
    1ee0:	98 16       	cp	r9, r24
    1ee2:	a8 f7       	brcc	.-22     	; 0x1ece <__stack+0x15cf>
    1ee4:	89 2d       	mov	r24, r9
		for(end = index; end < MT_SIZE; end++) (*(bf + end) = 0x00);
    1ee6:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <bf>
    1eea:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <bf+0x1>
    1eee:	e8 0f       	add	r30, r24
    1ef0:	f1 1d       	adc	r31, r1
    1ef2:	10 82       	st	Z, r1
    1ef4:	8f 5f       	subi	r24, 0xFF	; 255
    1ef6:	80 34       	cpi	r24, 0x40	; 64
    1ef8:	b1 f7       	brne	.-20     	; 0x1ee6 <__stack+0x15e7>
    1efa:	aa e0       	ldi	r26, 0x0A	; 10
    1efc:	8a 2e       	mov	r8, r26
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    1efe:	84 e0       	ldi	r24, 0x04	; 4
    1f00:	28 2e       	mov	r2, r24
    1f02:	81 e0       	ldi	r24, 0x01	; 1
    1f04:	38 2e       	mov	r3, r24
    1f06:	20 e0       	ldi	r18, 0x00	; 0
    1f08:	30 e0       	ldi	r19, 0x00	; 0
    1f0a:	91 e0       	ldi	r25, 0x01	; 1
    1f0c:	02 2e       	mov	r0, r18
    1f0e:	01 c0       	rjmp	.+2      	; 0x1f12 <__stack+0x1613>
    1f10:	99 0f       	add	r25, r25
    1f12:	0a 94       	dec	r0
    1f14:	ea f7       	brpl	.-6      	; 0x1f10 <__stack+0x1611>
	uint8_t index, begin, end = 0;
	//uint8_t *bf = buffer;
	//HoldDisplay(p, 10);
	for(index = 0; index < MT_SIZE; index++)
	{
		for(begin = 0; begin <= index; begin++)(*(bf + begin) = (*((p+(begin)))));
    1f16:	8f e3       	ldi	r24, 0x3F	; 63
    1f18:	5a c0       	rjmp	.+180    	; 0x1fce <__stack+0x16cf>
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1f1a:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1f1c:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1f1e:	5b 98       	cbi	0x0b, 3	; 11
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
			pinWrite(latch_pin, LOW);
			for(bit = 0; bit <= FONT_HEIGHT ; bit++){
				pinWrite(data_pin,((*(p+pos)) & (1 << byte)));
    1f20:	ef ef       	ldi	r30, 0xFF	; 255
    1f22:	e8 0f       	add	r30, r24
    1f24:	f0 e0       	ldi	r31, 0x00	; 0
    1f26:	e0 56       	subi	r30, 0x60	; 96
    1f28:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    1f2a:	40 81       	ld	r20, Z
    1f2c:	49 23       	and	r20, r25
    1f2e:	09 f0       	breq	.+2      	; 0x1f32 <__stack+0x1633>
    1f30:	3c c2       	rjmp	.+1144   	; 0x23aa <__stack+0x1aab>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1f32:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1f34:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1f36:	5b 98       	cbi	0x0b, 3	; 11
    1f38:	ee ef       	ldi	r30, 0xFE	; 254
    1f3a:	e8 0f       	add	r30, r24
    1f3c:	f0 e0       	ldi	r31, 0x00	; 0
    1f3e:	e0 56       	subi	r30, 0x60	; 96
    1f40:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    1f42:	40 81       	ld	r20, Z
    1f44:	49 23       	and	r20, r25
    1f46:	09 f0       	breq	.+2      	; 0x1f4a <__stack+0x164b>
    1f48:	2e c2       	rjmp	.+1116   	; 0x23a6 <__stack+0x1aa7>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1f4a:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1f4c:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1f4e:	5b 98       	cbi	0x0b, 3	; 11
    1f50:	ed ef       	ldi	r30, 0xFD	; 253
    1f52:	e8 0f       	add	r30, r24
    1f54:	f0 e0       	ldi	r31, 0x00	; 0
    1f56:	e0 56       	subi	r30, 0x60	; 96
    1f58:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    1f5a:	40 81       	ld	r20, Z
    1f5c:	49 23       	and	r20, r25
    1f5e:	09 f0       	breq	.+2      	; 0x1f62 <__stack+0x1663>
    1f60:	20 c2       	rjmp	.+1088   	; 0x23a2 <__stack+0x1aa3>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1f62:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1f64:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1f66:	5b 98       	cbi	0x0b, 3	; 11
    1f68:	ec ef       	ldi	r30, 0xFC	; 252
    1f6a:	e8 0f       	add	r30, r24
    1f6c:	f0 e0       	ldi	r31, 0x00	; 0
    1f6e:	e0 56       	subi	r30, 0x60	; 96
    1f70:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    1f72:	40 81       	ld	r20, Z
    1f74:	49 23       	and	r20, r25
    1f76:	09 f0       	breq	.+2      	; 0x1f7a <__stack+0x167b>
    1f78:	12 c2       	rjmp	.+1060   	; 0x239e <__stack+0x1a9f>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1f7a:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1f7c:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1f7e:	5b 98       	cbi	0x0b, 3	; 11
    1f80:	eb ef       	ldi	r30, 0xFB	; 251
    1f82:	e8 0f       	add	r30, r24
    1f84:	f0 e0       	ldi	r31, 0x00	; 0
    1f86:	e0 56       	subi	r30, 0x60	; 96
    1f88:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    1f8a:	40 81       	ld	r20, Z
    1f8c:	49 23       	and	r20, r25
    1f8e:	09 f0       	breq	.+2      	; 0x1f92 <__stack+0x1693>
    1f90:	04 c2       	rjmp	.+1032   	; 0x239a <__stack+0x1a9b>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1f92:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1f94:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1f96:	5b 98       	cbi	0x0b, 3	; 11
    1f98:	ea ef       	ldi	r30, 0xFA	; 250
    1f9a:	e8 0f       	add	r30, r24
    1f9c:	f0 e0       	ldi	r31, 0x00	; 0
    1f9e:	e0 56       	subi	r30, 0x60	; 96
    1fa0:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    1fa2:	40 81       	ld	r20, Z
    1fa4:	49 23       	and	r20, r25
    1fa6:	09 f0       	breq	.+2      	; 0x1faa <__stack+0x16ab>
    1fa8:	f6 c1       	rjmp	.+1004   	; 0x2396 <__stack+0x1a97>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1faa:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1fac:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1fae:	5b 98       	cbi	0x0b, 3	; 11
    1fb0:	e9 ef       	ldi	r30, 0xF9	; 249
    1fb2:	e8 0f       	add	r30, r24
    1fb4:	f0 e0       	ldi	r31, 0x00	; 0
    1fb6:	e0 56       	subi	r30, 0x60	; 96
    1fb8:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    1fba:	40 81       	ld	r20, Z
    1fbc:	49 23       	and	r20, r25
    1fbe:	91 f5       	brne	.+100    	; 0x2024 <__stack+0x1725>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1fc0:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1fc2:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1fc4:	5b 98       	cbi	0x0b, 3	; 11
				//toggle the clock pin
				pinWrite(clock_pin, HIGH);
				pinWrite(clock_pin, LOW);
				pos--;
    1fc6:	88 50       	subi	r24, 0x08	; 8
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1fc8:	5a 9a       	sbi	0x0b, 2	; 11
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
    1fca:	8f 3f       	cpi	r24, 0xFF	; 255
    1fcc:	91 f1       	breq	.+100    	; 0x2032 <__stack+0x1733>
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1fce:	5a 98       	cbi	0x0b, 2	; 11
			pinWrite(latch_pin, LOW);
			for(bit = 0; bit <= FONT_HEIGHT ; bit++){
				pinWrite(data_pin,((*(p+pos)) & (1 << byte)));
    1fd0:	e8 2f       	mov	r30, r24
    1fd2:	f0 e0       	ldi	r31, 0x00	; 0
    1fd4:	e0 56       	subi	r30, 0x60	; 96
    1fd6:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    1fd8:	40 81       	ld	r20, Z
    1fda:	49 23       	and	r20, r25
    1fdc:	09 f4       	brne	.+2      	; 0x1fe0 <__stack+0x16e1>
    1fde:	9d cf       	rjmp	.-198    	; 0x1f1a <__stack+0x161b>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1fe0:	59 9a       	sbi	0x0b, 1	; 11
    1fe2:	9c cf       	rjmp	.-200    	; 0x1f1c <__stack+0x161d>
    1fe4:	59 9a       	sbi	0x0b, 1	; 11
    1fe6:	56 ce       	rjmp	.-852    	; 0x1c94 <__stack+0x1395>
    1fe8:	59 9a       	sbi	0x0b, 1	; 11
    1fea:	48 ce       	rjmp	.-880    	; 0x1c7c <__stack+0x137d>
    1fec:	59 9a       	sbi	0x0b, 1	; 11
    1fee:	3a ce       	rjmp	.-908    	; 0x1c64 <__stack+0x1365>
    1ff0:	59 9a       	sbi	0x0b, 1	; 11
    1ff2:	2c ce       	rjmp	.-936    	; 0x1c4c <__stack+0x134d>
    1ff4:	59 9a       	sbi	0x0b, 1	; 11
    1ff6:	1e ce       	rjmp	.-964    	; 0x1c34 <__stack+0x1335>
    1ff8:	59 9a       	sbi	0x0b, 1	; 11
    1ffa:	10 ce       	rjmp	.-992    	; 0x1c1c <__stack+0x131d>
    1ffc:	b7 e0       	ldi	r27, 0x07	; 7
    1ffe:	eb 9f       	mul	r30, r27
    2000:	f0 01       	movw	r30, r0
    2002:	11 24       	eor	r1, r1
    2004:	ec 5a       	subi	r30, 0xAC	; 172
    2006:	fe 4f       	sbci	r31, 0xFE	; 254
    2008:	a2 81       	ldd	r26, Z+2	; 0x02
    200a:	b3 81       	ldd	r27, Z+3	; 0x03
    200c:	4c 91       	ld	r20, X
    200e:	21 e0       	ldi	r18, 0x01	; 1
    2010:	30 e0       	ldi	r19, 0x00	; 0
    2012:	06 80       	ldd	r0, Z+6	; 0x06
    2014:	02 c0       	rjmp	.+4      	; 0x201a <__stack+0x171b>
    2016:	22 0f       	add	r18, r18
    2018:	33 1f       	adc	r19, r19
    201a:	0a 94       	dec	r0
    201c:	e2 f7       	brpl	.-8      	; 0x2016 <__stack+0x1717>
    201e:	24 2b       	or	r18, r20
    2020:	2c 93       	st	X, r18
    2022:	a6 ce       	rjmp	.-692    	; 0x1d70 <__stack+0x1471>
    2024:	59 9a       	sbi	0x0b, 1	; 11
    2026:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2028:	5b 98       	cbi	0x0b, 3	; 11
				//toggle the clock pin
				pinWrite(clock_pin, HIGH);
				pinWrite(clock_pin, LOW);
				pos--;
    202a:	88 50       	subi	r24, 0x08	; 8
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    202c:	5a 9a       	sbi	0x0b, 2	; 11
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
    202e:	8f 3f       	cpi	r24, 0xFF	; 255
    2030:	71 f6       	brne	.-100    	; 0x1fce <__stack+0x16cf>
    2032:	a4 e0       	ldi	r26, 0x04	; 4
    2034:	b1 e0       	ldi	r27, 0x01	; 1
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    2036:	ed 91       	ld	r30, X+
    2038:	ee 23       	and	r30, r30
    203a:	01 f1       	breq	.+64     	; 0x207c <__stack+0x177d>
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    203c:	ec 3c       	cpi	r30, 0xCC	; 204
    203e:	d8 f7       	brcc	.-10     	; 0x2036 <__stack+0x1737>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2040:	47 e0       	ldi	r20, 0x07	; 7
    2042:	e4 9f       	mul	r30, r20
    2044:	f0 01       	movw	r30, r0
    2046:	11 24       	eor	r1, r1
    2048:	bf 01       	movw	r22, r30
    204a:	6c 5a       	subi	r22, 0xAC	; 172
    204c:	7e 4f       	sbci	r23, 0xFE	; 254
    204e:	fb 01       	movw	r30, r22
    2050:	42 81       	ldd	r20, Z+2	; 0x02
    2052:	53 81       	ldd	r21, Z+3	; 0x03
    2054:	fa 01       	movw	r30, r20
    2056:	90 81       	ld	r25, Z
    2058:	44 24       	eor	r4, r4
    205a:	43 94       	inc	r4
    205c:	51 2c       	mov	r5, r1
    205e:	fb 01       	movw	r30, r22
    2060:	06 80       	ldd	r0, Z+6	; 0x06
    2062:	02 c0       	rjmp	.+4      	; 0x2068 <__stack+0x1769>
    2064:	44 0c       	add	r4, r4
    2066:	55 1c       	adc	r5, r5
    2068:	0a 94       	dec	r0
    206a:	e2 f7       	brpl	.-8      	; 0x2064 <__stack+0x1765>
    206c:	84 2d       	mov	r24, r4
    206e:	80 95       	com	r24
    2070:	89 23       	and	r24, r25
    2072:	fa 01       	movw	r30, r20
    2074:	80 83       	st	Z, r24
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    2076:	ed 91       	ld	r30, X+
    2078:	e1 11       	cpse	r30, r1
    207a:	e0 cf       	rjmp	.-64     	; 0x203c <__stack+0x173d>
/* Multiplexing method                                                  */
/************************************************************************/
static inline void MultiPlex(uint8_t *pin)
{
	pinsMultiWrite(plex_pins, LOW);
	pinWrite(plex_pins[*pin], HIGH);
    207c:	d1 01       	movw	r26, r2
    207e:	ed 91       	ld	r30, X+
    2080:	1d 01       	movw	r2, r26
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    2082:	ec 3c       	cpi	r30, 0xCC	; 204
    2084:	08 f4       	brcc	.+2      	; 0x2088 <__stack+0x1789>
    2086:	93 c1       	rjmp	.+806    	; 0x23ae <__stack+0x1aaf>
	delay(delayms);
    2088:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    208c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
/*  delay                                                               */
/************************************************************************/
int delayms = 1;
static inline void delay(int dl)
{
	while(dl >= 0)
    2090:	97 fd       	sbrc	r25, 7
    2092:	08 c0       	rjmp	.+16     	; 0x20a4 <__stack+0x17a5>
    2094:	ef e9       	ldi	r30, 0x9F	; 159
    2096:	ff e0       	ldi	r31, 0x0F	; 15
    2098:	31 97       	sbiw	r30, 0x01	; 1
    209a:	f1 f7       	brne	.-4      	; 0x2098 <__stack+0x1799>
    209c:	00 c0       	rjmp	.+0      	; 0x209e <__stack+0x179f>
    209e:	00 00       	nop
	{
		_delay_ms(1);
		dl--;
    20a0:	01 97       	sbiw	r24, 0x01	; 1
    20a2:	c0 f7       	brcc	.-16     	; 0x2094 <__stack+0x1795>
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
    20a4:	a4 e0       	ldi	r26, 0x04	; 4
    20a6:	b1 e0       	ldi	r27, 0x01	; 1
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    20a8:	ed 91       	ld	r30, X+
    20aa:	ee 23       	and	r30, r30
    20ac:	01 f1       	breq	.+64     	; 0x20ee <__stack+0x17ef>
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    20ae:	ec 3c       	cpi	r30, 0xCC	; 204
    20b0:	d8 f7       	brcc	.-10     	; 0x20a8 <__stack+0x17a9>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    20b2:	47 e0       	ldi	r20, 0x07	; 7
    20b4:	e4 9f       	mul	r30, r20
    20b6:	f0 01       	movw	r30, r0
    20b8:	11 24       	eor	r1, r1
    20ba:	bf 01       	movw	r22, r30
    20bc:	6c 5a       	subi	r22, 0xAC	; 172
    20be:	7e 4f       	sbci	r23, 0xFE	; 254
    20c0:	fb 01       	movw	r30, r22
    20c2:	42 81       	ldd	r20, Z+2	; 0x02
    20c4:	53 81       	ldd	r21, Z+3	; 0x03
    20c6:	fa 01       	movw	r30, r20
    20c8:	90 81       	ld	r25, Z
    20ca:	44 24       	eor	r4, r4
    20cc:	43 94       	inc	r4
    20ce:	51 2c       	mov	r5, r1
    20d0:	fb 01       	movw	r30, r22
    20d2:	06 80       	ldd	r0, Z+6	; 0x06
    20d4:	02 c0       	rjmp	.+4      	; 0x20da <__stack+0x17db>
    20d6:	44 0c       	add	r4, r4
    20d8:	55 1c       	adc	r5, r5
    20da:	0a 94       	dec	r0
    20dc:	e2 f7       	brpl	.-8      	; 0x20d6 <__stack+0x17d7>
    20de:	84 2d       	mov	r24, r4
    20e0:	80 95       	com	r24
    20e2:	89 23       	and	r24, r25
    20e4:	fa 01       	movw	r30, r20
    20e6:	80 83       	st	Z, r24
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    20e8:	ed 91       	ld	r30, X+
    20ea:	e1 11       	cpse	r30, r1
    20ec:	e0 cf       	rjmp	.-64     	; 0x20ae <__stack+0x17af>
    20ee:	89 e0       	ldi	r24, 0x09	; 9
    20f0:	90 e0       	ldi	r25, 0x00	; 0
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    20f2:	5a 98       	cbi	0x0b, 2	; 11
    20f4:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    20f6:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    20f8:	5b 98       	cbi	0x0b, 3	; 11
    20fa:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    20fc:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    20fe:	5b 98       	cbi	0x0b, 3	; 11
    2100:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2102:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2104:	5b 98       	cbi	0x0b, 3	; 11
    2106:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2108:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    210a:	5b 98       	cbi	0x0b, 3	; 11
    210c:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    210e:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2110:	5b 98       	cbi	0x0b, 3	; 11
    2112:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2114:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2116:	5b 98       	cbi	0x0b, 3	; 11
    2118:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    211a:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    211c:	5b 98       	cbi	0x0b, 3	; 11
    211e:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2120:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2122:	5b 98       	cbi	0x0b, 3	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2124:	5a 9a       	sbi	0x0b, 2	; 11
    2126:	01 97       	sbiw	r24, 0x01	; 1
/* Clear Display                                                        */
/************************************************************************/
static inline void Clear(){
	int x, y = 0;
	pinsMultiWrite(plex_pins, LOW);
	for(x = 0; x < (SH_REG + 1); x++) {
    2128:	21 f7       	brne	.-56     	; 0x20f2 <__stack+0x17f3>
    212a:	2f 5f       	subi	r18, 0xFF	; 255
    212c:	3f 4f       	sbci	r19, 0xFF	; 255
{
	uint8_t byte, index, bit = 0;
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
    212e:	27 30       	cpi	r18, 0x07	; 7
    2130:	31 05       	cpc	r19, r1
    2132:	09 f0       	breq	.+2      	; 0x2136 <__stack+0x1837>
    2134:	ea ce       	rjmp	.-556    	; 0x1f0a <__stack+0x160b>
			pinWrite(latch_pin, HIGH);
		}
		MultiPlex(&byte);
		Clear();
	}
	delayms = 1;
    2136:	f0 92 01 01 	sts	0x0101, r15	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    213a:	e0 92 00 01 	sts	0x0100, r14	; 0x800100 <__DATA_REGION_ORIGIN__>
    213e:	8a 94       	dec	r8
}
}*/
static inline void HoldDisplayBuffer(const uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
    2140:	81 10       	cpse	r8, r1
    2142:	dd ce       	rjmp	.-582    	; 0x1efe <__stack+0x15ff>
void TypeIn(const uint8_t *p, uint8_t time)
{
	uint8_t index, begin, end = 0;
	//uint8_t *bf = buffer;
	//HoldDisplay(p, 10);
	for(index = 0; index < MT_SIZE; index++)
    2144:	93 94       	inc	r9
    2146:	f0 e4       	ldi	r31, 0x40	; 64
    2148:	9f 12       	cpse	r9, r31
    214a:	bd ce       	rjmp	.-646    	; 0x1ec6 <__stack+0x15c7>
    214c:	d8 01       	movw	r26, r16
    214e:	1d 92       	st	X+, r1
    2150:	9a 94       	dec	r9
    2152:	e9 f7       	brne	.-6      	; 0x214e <__stack+0x184f>
    2154:	a2 e1       	ldi	r26, 0x12	; 18
    2156:	b1 e0       	ldi	r27, 0x01	; 1
    2158:	20 e0       	ldi	r18, 0x00	; 0
    215a:	8a e4       	ldi	r24, 0x4A	; 74
/* returns the index of the first byte of the requested character       */
/************************************************************************/
uint8_t CharStart(const char *p)
{
	/*if(*p == ' ') return 0;
	else*/ return (uint8_t) (( *p - ' '));
    215c:	80 52       	subi	r24, 0x20	; 32
		s_pos = (MT_SIZE - (c_len * FONT_WIDTH) - c_len - 2);
	}
	pos_index = s_pos;
	ClearStringBuffer();
	while(*ch){
		index = CharStart(ch++) * FONT_WIDTH;
    215e:	e5 e0       	ldi	r30, 0x05	; 5
    2160:	8e 9f       	mul	r24, r30
    2162:	c0 01       	movw	r24, r0
    2164:	11 24       	eor	r1, r1
		for(len = 0; len < FONT_WIDTH; len++){
			stringbuffer[pos_index] = (uint8_t)(pgm_read_byte((font_5x7 + index)));
    2166:	fc 01       	movw	r30, r24
    2168:	e8 59       	subi	r30, 0x98	; 152
    216a:	ff 4f       	sbci	r31, 0xFF	; 255
    216c:	34 91       	lpm	r19, Z
    216e:	e2 2f       	mov	r30, r18
    2170:	f0 e0       	ldi	r31, 0x00	; 0
    2172:	e0 5a       	subi	r30, 0xA0	; 160
    2174:	fd 4f       	sbci	r31, 0xFD	; 253
    2176:	30 83       	st	Z, r19
    2178:	fc 01       	movw	r30, r24
    217a:	e7 59       	subi	r30, 0x97	; 151
    217c:	ff 4f       	sbci	r31, 0xFF	; 255
    217e:	34 91       	lpm	r19, Z
    2180:	e1 e0       	ldi	r30, 0x01	; 1
    2182:	e2 0f       	add	r30, r18
    2184:	f0 e0       	ldi	r31, 0x00	; 0
    2186:	e0 5a       	subi	r30, 0xA0	; 160
    2188:	fd 4f       	sbci	r31, 0xFD	; 253
    218a:	30 83       	st	Z, r19
    218c:	fc 01       	movw	r30, r24
    218e:	e6 59       	subi	r30, 0x96	; 150
    2190:	ff 4f       	sbci	r31, 0xFF	; 255
    2192:	34 91       	lpm	r19, Z
    2194:	e2 e0       	ldi	r30, 0x02	; 2
    2196:	e2 0f       	add	r30, r18
    2198:	f0 e0       	ldi	r31, 0x00	; 0
    219a:	e0 5a       	subi	r30, 0xA0	; 160
    219c:	fd 4f       	sbci	r31, 0xFD	; 253
    219e:	30 83       	st	Z, r19
    21a0:	fc 01       	movw	r30, r24
    21a2:	e5 59       	subi	r30, 0x95	; 149
    21a4:	ff 4f       	sbci	r31, 0xFF	; 255
    21a6:	34 91       	lpm	r19, Z
    21a8:	e3 e0       	ldi	r30, 0x03	; 3
    21aa:	e2 0f       	add	r30, r18
    21ac:	f0 e0       	ldi	r31, 0x00	; 0
    21ae:	e0 5a       	subi	r30, 0xA0	; 160
    21b0:	fd 4f       	sbci	r31, 0xFD	; 253
    21b2:	30 83       	st	Z, r19
    21b4:	fc 01       	movw	r30, r24
    21b6:	e4 59       	subi	r30, 0x94	; 148
    21b8:	ff 4f       	sbci	r31, 0xFF	; 255
    21ba:	84 91       	lpm	r24, Z
    21bc:	e4 e0       	ldi	r30, 0x04	; 4
    21be:	e2 0f       	add	r30, r18
    21c0:	f0 e0       	ldi	r31, 0x00	; 0
    21c2:	e0 5a       	subi	r30, 0xA0	; 160
    21c4:	fd 4f       	sbci	r31, 0xFD	; 253
    21c6:	80 83       	st	Z, r24
			index++; pos_index++;
		}
		pos_index += 1; //space the characters
    21c8:	2a 5f       	subi	r18, 0xFA	; 250
	}else if(align == RIGHT){
		s_pos = (MT_SIZE - (c_len * FONT_WIDTH) - c_len - 2);
	}
	pos_index = s_pos;
	ClearStringBuffer();
	while(*ch){
    21ca:	8d 91       	ld	r24, X+
    21cc:	81 11       	cpse	r24, r1
    21ce:	c6 cf       	rjmp	.-116    	; 0x215c <__stack+0x185d>
    21d0:	b2 e3       	ldi	r27, 0x32	; 50
    21d2:	ab 2e       	mov	r10, r27
}*/
static inline void HoldDisplayBuffer(const uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
		DisplayBuffer(data);
    21d4:	80 e6       	ldi	r24, 0x60	; 96
    21d6:	92 e0       	ldi	r25, 0x02	; 2
    21d8:	0e 94 41 01 	call	0x282	; 0x282 <DisplayBuffer>
    21dc:	aa 94       	dec	r10
}
}*/
static inline void HoldDisplayBuffer(const uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
    21de:	a1 10       	cpse	r10, r1
    21e0:	f9 cf       	rjmp	.-14     	; 0x21d4 <__stack+0x18d5>
    21e2:	d8 01       	movw	r26, r16
    21e4:	eb 2d       	mov	r30, r11
    21e6:	1d 92       	st	X+, r1
    21e8:	ea 95       	dec	r30
    21ea:	e9 f7       	brne	.-6      	; 0x21e6 <__stack+0x18e7>
    21ec:	20 e0       	ldi	r18, 0x00	; 0
    21ee:	8a e4       	ldi	r24, 0x4A	; 74
    21f0:	ab 81       	ldd	r26, Y+3	; 0x03
    21f2:	bc 81       	ldd	r27, Y+4	; 0x04
/* returns the index of the first byte of the requested character       */
/************************************************************************/
uint8_t CharStart(const char *p)
{
	/*if(*p == ' ') return 0;
	else*/ return (uint8_t) (( *p - ' '));
    21f4:	80 52       	subi	r24, 0x20	; 32
		s_pos = (MT_SIZE - (c_len * FONT_WIDTH) - c_len - 2);
	}
	pos_index = s_pos;
	ClearStringBuffer();
	while(*ch){
		index = CharStart(ch++) * FONT_WIDTH;
    21f6:	f5 e0       	ldi	r31, 0x05	; 5
    21f8:	8f 9f       	mul	r24, r31
    21fa:	c0 01       	movw	r24, r0
    21fc:	11 24       	eor	r1, r1
		for(len = 0; len < FONT_WIDTH; len++){
			stringbuffer[pos_index] = (uint8_t)(pgm_read_byte((font_5x7 + index)));
    21fe:	fc 01       	movw	r30, r24
    2200:	e8 59       	subi	r30, 0x98	; 152
    2202:	ff 4f       	sbci	r31, 0xFF	; 255
    2204:	34 91       	lpm	r19, Z
    2206:	e2 2f       	mov	r30, r18
    2208:	f0 e0       	ldi	r31, 0x00	; 0
    220a:	e0 5a       	subi	r30, 0xA0	; 160
    220c:	fd 4f       	sbci	r31, 0xFD	; 253
    220e:	30 83       	st	Z, r19
    2210:	fc 01       	movw	r30, r24
    2212:	e7 59       	subi	r30, 0x97	; 151
    2214:	ff 4f       	sbci	r31, 0xFF	; 255
    2216:	34 91       	lpm	r19, Z
    2218:	e1 e0       	ldi	r30, 0x01	; 1
    221a:	e2 0f       	add	r30, r18
    221c:	f0 e0       	ldi	r31, 0x00	; 0
    221e:	e0 5a       	subi	r30, 0xA0	; 160
    2220:	fd 4f       	sbci	r31, 0xFD	; 253
    2222:	30 83       	st	Z, r19
    2224:	fc 01       	movw	r30, r24
    2226:	e6 59       	subi	r30, 0x96	; 150
    2228:	ff 4f       	sbci	r31, 0xFF	; 255
    222a:	34 91       	lpm	r19, Z
    222c:	e2 e0       	ldi	r30, 0x02	; 2
    222e:	e2 0f       	add	r30, r18
    2230:	f0 e0       	ldi	r31, 0x00	; 0
    2232:	e0 5a       	subi	r30, 0xA0	; 160
    2234:	fd 4f       	sbci	r31, 0xFD	; 253
    2236:	30 83       	st	Z, r19
    2238:	fc 01       	movw	r30, r24
    223a:	e5 59       	subi	r30, 0x95	; 149
    223c:	ff 4f       	sbci	r31, 0xFF	; 255
    223e:	34 91       	lpm	r19, Z
    2240:	e3 e0       	ldi	r30, 0x03	; 3
    2242:	e2 0f       	add	r30, r18
    2244:	f0 e0       	ldi	r31, 0x00	; 0
    2246:	e0 5a       	subi	r30, 0xA0	; 160
    2248:	fd 4f       	sbci	r31, 0xFD	; 253
    224a:	30 83       	st	Z, r19
    224c:	fc 01       	movw	r30, r24
    224e:	e4 59       	subi	r30, 0x94	; 148
    2250:	ff 4f       	sbci	r31, 0xFF	; 255
    2252:	84 91       	lpm	r24, Z
    2254:	e4 e0       	ldi	r30, 0x04	; 4
    2256:	e2 0f       	add	r30, r18
    2258:	f0 e0       	ldi	r31, 0x00	; 0
    225a:	e0 5a       	subi	r30, 0xA0	; 160
    225c:	fd 4f       	sbci	r31, 0xFD	; 253
    225e:	80 83       	st	Z, r24
			index++; pos_index++;
		}
		pos_index += 1; //space the characters
    2260:	2a 5f       	subi	r18, 0xFA	; 250
	}else if(align == RIGHT){
		s_pos = (MT_SIZE - (c_len * FONT_WIDTH) - c_len - 2);
	}
	pos_index = s_pos;
	ClearStringBuffer();
	while(*ch){
    2262:	8d 91       	ld	r24, X+
    2264:	bc 83       	std	Y+4, r27	; 0x04
    2266:	ab 83       	std	Y+3, r26	; 0x03
    2268:	81 11       	cpse	r24, r1
    226a:	c4 cf       	rjmp	.-120    	; 0x21f4 <__stack+0x18f5>
    226c:	af e3       	ldi	r26, 0x3F	; 63
    226e:	aa 2e       	mov	r10, r26
    2270:	40 e0       	ldi	r20, 0x00	; 0
{
	uint8_t index, begin, end = 0;
	//uint8_t *bf = buffer;
	for(index = MT_SIZE -1 ; index > 0; index--)
	{
		for(begin = 0; begin <= index; begin++) (*(bf + begin)) = (*((p+begin)));
    2272:	84 2f       	mov	r24, r20
    2274:	90 e0       	ldi	r25, 0x00	; 0
    2276:	fc 01       	movw	r30, r24
    2278:	e0 5a       	subi	r30, 0xA0	; 160
    227a:	fd 4f       	sbci	r31, 0xFD	; 253
    227c:	20 81       	ld	r18, Z
    227e:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <bf>
    2282:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <bf+0x1>
    2286:	fb 01       	movw	r30, r22
    2288:	e8 0f       	add	r30, r24
    228a:	f9 1f       	adc	r31, r25
    228c:	20 83       	st	Z, r18
    228e:	4f 5f       	subi	r20, 0xFF	; 255
    2290:	a4 16       	cp	r10, r20
    2292:	78 f7       	brcc	.-34     	; 0x2272 <__stack+0x1973>
		for(end = (index-1); end < MT_SIZE ; end++) (*(bf + end)) = 0x00;
    2294:	aa 94       	dec	r10
    2296:	8a 2d       	mov	r24, r10
    2298:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <bf>
    229c:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <bf+0x1>
    22a0:	e8 0f       	add	r30, r24
    22a2:	f1 1d       	adc	r31, r1
    22a4:	10 82       	st	Z, r1
    22a6:	8f 5f       	subi	r24, 0xFF	; 255
    22a8:	80 34       	cpi	r24, 0x40	; 64
    22aa:	b1 f7       	brne	.-20     	; 0x2298 <__stack+0x1999>
    22ac:	fa e0       	ldi	r31, 0x0A	; 10
    22ae:	9f 2e       	mov	r9, r31
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    22b0:	a4 e0       	ldi	r26, 0x04	; 4
    22b2:	2a 2e       	mov	r2, r26
    22b4:	a1 e0       	ldi	r26, 0x01	; 1
    22b6:	3a 2e       	mov	r3, r26
    22b8:	20 e0       	ldi	r18, 0x00	; 0
    22ba:	30 e0       	ldi	r19, 0x00	; 0
    22bc:	91 e0       	ldi	r25, 0x01	; 1
    22be:	02 2e       	mov	r0, r18
    22c0:	01 c0       	rjmp	.+2      	; 0x22c4 <__stack+0x19c5>
    22c2:	99 0f       	add	r25, r25
    22c4:	0a 94       	dec	r0
    22c6:	ea f7       	brpl	.-6      	; 0x22c2 <__stack+0x19c3>
    22c8:	8f e3       	ldi	r24, 0x3F	; 63
    22ca:	5a c0       	rjmp	.+180    	; 0x2380 <__stack+0x1a81>
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    22cc:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    22ce:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    22d0:	5b 98       	cbi	0x0b, 3	; 11
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
			pinWrite(latch_pin, LOW);
			for(bit = 0; bit <= FONT_HEIGHT ; bit++){
				pinWrite(data_pin,((*(p+pos)) & (1 << byte)));
    22d2:	ef ef       	ldi	r30, 0xFF	; 255
    22d4:	e8 0f       	add	r30, r24
    22d6:	f0 e0       	ldi	r31, 0x00	; 0
    22d8:	e0 56       	subi	r30, 0x60	; 96
    22da:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    22dc:	40 81       	ld	r20, Z
    22de:	49 23       	and	r20, r25
    22e0:	09 f0       	breq	.+2      	; 0x22e4 <__stack+0x19e5>
    22e2:	88 c1       	rjmp	.+784    	; 0x25f4 <__stack+0x1cf5>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    22e4:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    22e6:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    22e8:	5b 98       	cbi	0x0b, 3	; 11
    22ea:	ee ef       	ldi	r30, 0xFE	; 254
    22ec:	e8 0f       	add	r30, r24
    22ee:	f0 e0       	ldi	r31, 0x00	; 0
    22f0:	e0 56       	subi	r30, 0x60	; 96
    22f2:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    22f4:	40 81       	ld	r20, Z
    22f6:	49 23       	and	r20, r25
    22f8:	09 f0       	breq	.+2      	; 0x22fc <__stack+0x19fd>
    22fa:	7a c1       	rjmp	.+756    	; 0x25f0 <__stack+0x1cf1>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    22fc:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    22fe:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2300:	5b 98       	cbi	0x0b, 3	; 11
    2302:	ed ef       	ldi	r30, 0xFD	; 253
    2304:	e8 0f       	add	r30, r24
    2306:	f0 e0       	ldi	r31, 0x00	; 0
    2308:	e0 56       	subi	r30, 0x60	; 96
    230a:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    230c:	40 81       	ld	r20, Z
    230e:	49 23       	and	r20, r25
    2310:	09 f0       	breq	.+2      	; 0x2314 <__stack+0x1a15>
    2312:	6c c1       	rjmp	.+728    	; 0x25ec <__stack+0x1ced>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2314:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2316:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2318:	5b 98       	cbi	0x0b, 3	; 11
    231a:	ec ef       	ldi	r30, 0xFC	; 252
    231c:	e8 0f       	add	r30, r24
    231e:	f0 e0       	ldi	r31, 0x00	; 0
    2320:	e0 56       	subi	r30, 0x60	; 96
    2322:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    2324:	40 81       	ld	r20, Z
    2326:	49 23       	and	r20, r25
    2328:	09 f0       	breq	.+2      	; 0x232c <__stack+0x1a2d>
    232a:	5e c1       	rjmp	.+700    	; 0x25e8 <__stack+0x1ce9>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    232c:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    232e:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2330:	5b 98       	cbi	0x0b, 3	; 11
    2332:	eb ef       	ldi	r30, 0xFB	; 251
    2334:	e8 0f       	add	r30, r24
    2336:	f0 e0       	ldi	r31, 0x00	; 0
    2338:	e0 56       	subi	r30, 0x60	; 96
    233a:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    233c:	40 81       	ld	r20, Z
    233e:	49 23       	and	r20, r25
    2340:	09 f0       	breq	.+2      	; 0x2344 <__stack+0x1a45>
    2342:	50 c1       	rjmp	.+672    	; 0x25e4 <__stack+0x1ce5>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2344:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2346:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2348:	5b 98       	cbi	0x0b, 3	; 11
    234a:	ea ef       	ldi	r30, 0xFA	; 250
    234c:	e8 0f       	add	r30, r24
    234e:	f0 e0       	ldi	r31, 0x00	; 0
    2350:	e0 56       	subi	r30, 0x60	; 96
    2352:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    2354:	40 81       	ld	r20, Z
    2356:	49 23       	and	r20, r25
    2358:	09 f0       	breq	.+2      	; 0x235c <__stack+0x1a5d>
    235a:	42 c1       	rjmp	.+644    	; 0x25e0 <__stack+0x1ce1>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    235c:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    235e:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2360:	5b 98       	cbi	0x0b, 3	; 11
    2362:	e9 ef       	ldi	r30, 0xF9	; 249
    2364:	e8 0f       	add	r30, r24
    2366:	f0 e0       	ldi	r31, 0x00	; 0
    2368:	e0 56       	subi	r30, 0x60	; 96
    236a:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    236c:	40 81       	ld	r20, Z
    236e:	49 23       	and	r20, r25
    2370:	91 f5       	brne	.+100    	; 0x23d6 <__stack+0x1ad7>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2372:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2374:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2376:	5b 98       	cbi	0x0b, 3	; 11
				//toggle the clock pin
				pinWrite(clock_pin, HIGH);
				pinWrite(clock_pin, LOW);
				pos--;
    2378:	88 50       	subi	r24, 0x08	; 8
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    237a:	5a 9a       	sbi	0x0b, 2	; 11
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
    237c:	8f 3f       	cpi	r24, 0xFF	; 255
    237e:	91 f1       	breq	.+100    	; 0x23e4 <__stack+0x1ae5>
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2380:	5a 98       	cbi	0x0b, 2	; 11
			pinWrite(latch_pin, LOW);
			for(bit = 0; bit <= FONT_HEIGHT ; bit++){
				pinWrite(data_pin,((*(p+pos)) & (1 << byte)));
    2382:	e8 2f       	mov	r30, r24
    2384:	f0 e0       	ldi	r31, 0x00	; 0
    2386:	e0 56       	subi	r30, 0x60	; 96
    2388:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    238a:	40 81       	ld	r20, Z
    238c:	49 23       	and	r20, r25
    238e:	09 f4       	brne	.+2      	; 0x2392 <__stack+0x1a93>
    2390:	9d cf       	rjmp	.-198    	; 0x22cc <__stack+0x19cd>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2392:	59 9a       	sbi	0x0b, 1	; 11
    2394:	9c cf       	rjmp	.-200    	; 0x22ce <__stack+0x19cf>
    2396:	59 9a       	sbi	0x0b, 1	; 11
    2398:	09 ce       	rjmp	.-1006   	; 0x1fac <__stack+0x16ad>
    239a:	59 9a       	sbi	0x0b, 1	; 11
    239c:	fb cd       	rjmp	.-1034   	; 0x1f94 <__stack+0x1695>
    239e:	59 9a       	sbi	0x0b, 1	; 11
    23a0:	ed cd       	rjmp	.-1062   	; 0x1f7c <__stack+0x167d>
    23a2:	59 9a       	sbi	0x0b, 1	; 11
    23a4:	df cd       	rjmp	.-1090   	; 0x1f64 <__stack+0x1665>
    23a6:	59 9a       	sbi	0x0b, 1	; 11
    23a8:	d1 cd       	rjmp	.-1118   	; 0x1f4c <__stack+0x164d>
    23aa:	59 9a       	sbi	0x0b, 1	; 11
    23ac:	c3 cd       	rjmp	.-1146   	; 0x1f34 <__stack+0x1635>
    23ae:	b7 e0       	ldi	r27, 0x07	; 7
    23b0:	eb 9f       	mul	r30, r27
    23b2:	f0 01       	movw	r30, r0
    23b4:	11 24       	eor	r1, r1
    23b6:	ec 5a       	subi	r30, 0xAC	; 172
    23b8:	fe 4f       	sbci	r31, 0xFE	; 254
    23ba:	a2 81       	ldd	r26, Z+2	; 0x02
    23bc:	b3 81       	ldd	r27, Z+3	; 0x03
    23be:	6c 91       	ld	r22, X
    23c0:	41 e0       	ldi	r20, 0x01	; 1
    23c2:	50 e0       	ldi	r21, 0x00	; 0
    23c4:	06 80       	ldd	r0, Z+6	; 0x06
    23c6:	02 c0       	rjmp	.+4      	; 0x23cc <__stack+0x1acd>
    23c8:	44 0f       	add	r20, r20
    23ca:	55 1f       	adc	r21, r21
    23cc:	0a 94       	dec	r0
    23ce:	e2 f7       	brpl	.-8      	; 0x23c8 <__stack+0x1ac9>
    23d0:	46 2b       	or	r20, r22
    23d2:	4c 93       	st	X, r20
    23d4:	59 ce       	rjmp	.-846    	; 0x2088 <__stack+0x1789>
    23d6:	59 9a       	sbi	0x0b, 1	; 11
    23d8:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    23da:	5b 98       	cbi	0x0b, 3	; 11
				//toggle the clock pin
				pinWrite(clock_pin, HIGH);
				pinWrite(clock_pin, LOW);
				pos--;
    23dc:	88 50       	subi	r24, 0x08	; 8
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    23de:	5a 9a       	sbi	0x0b, 2	; 11
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
    23e0:	8f 3f       	cpi	r24, 0xFF	; 255
    23e2:	71 f6       	brne	.-100    	; 0x2380 <__stack+0x1a81>
    23e4:	a4 e0       	ldi	r26, 0x04	; 4
    23e6:	b1 e0       	ldi	r27, 0x01	; 1
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    23e8:	ed 91       	ld	r30, X+
    23ea:	ee 23       	and	r30, r30
    23ec:	01 f1       	breq	.+64     	; 0x242e <__stack+0x1b2f>
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    23ee:	ec 3c       	cpi	r30, 0xCC	; 204
    23f0:	d8 f7       	brcc	.-10     	; 0x23e8 <__stack+0x1ae9>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    23f2:	47 e0       	ldi	r20, 0x07	; 7
    23f4:	e4 9f       	mul	r30, r20
    23f6:	f0 01       	movw	r30, r0
    23f8:	11 24       	eor	r1, r1
    23fa:	bf 01       	movw	r22, r30
    23fc:	6c 5a       	subi	r22, 0xAC	; 172
    23fe:	7e 4f       	sbci	r23, 0xFE	; 254
    2400:	fb 01       	movw	r30, r22
    2402:	42 81       	ldd	r20, Z+2	; 0x02
    2404:	53 81       	ldd	r21, Z+3	; 0x03
    2406:	fa 01       	movw	r30, r20
    2408:	90 81       	ld	r25, Z
    240a:	44 24       	eor	r4, r4
    240c:	43 94       	inc	r4
    240e:	51 2c       	mov	r5, r1
    2410:	fb 01       	movw	r30, r22
    2412:	06 80       	ldd	r0, Z+6	; 0x06
    2414:	02 c0       	rjmp	.+4      	; 0x241a <__stack+0x1b1b>
    2416:	44 0c       	add	r4, r4
    2418:	55 1c       	adc	r5, r5
    241a:	0a 94       	dec	r0
    241c:	e2 f7       	brpl	.-8      	; 0x2416 <__stack+0x1b17>
    241e:	84 2d       	mov	r24, r4
    2420:	80 95       	com	r24
    2422:	89 23       	and	r24, r25
    2424:	fa 01       	movw	r30, r20
    2426:	80 83       	st	Z, r24
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    2428:	ed 91       	ld	r30, X+
    242a:	e1 11       	cpse	r30, r1
    242c:	e0 cf       	rjmp	.-64     	; 0x23ee <__stack+0x1aef>
/* Multiplexing method                                                  */
/************************************************************************/
static inline void MultiPlex(uint8_t *pin)
{
	pinsMultiWrite(plex_pins, LOW);
	pinWrite(plex_pins[*pin], HIGH);
    242e:	d1 01       	movw	r26, r2
    2430:	ed 91       	ld	r30, X+
    2432:	1d 01       	movw	r2, r26
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    2434:	ec 3c       	cpi	r30, 0xCC	; 204
    2436:	08 f4       	brcc	.+2      	; 0x243a <__stack+0x1b3b>
    2438:	df c0       	rjmp	.+446    	; 0x25f8 <__stack+0x1cf9>
	delay(delayms);
    243a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    243e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
/*  delay                                                               */
/************************************************************************/
int delayms = 1;
static inline void delay(int dl)
{
	while(dl >= 0)
    2442:	97 fd       	sbrc	r25, 7
    2444:	08 c0       	rjmp	.+16     	; 0x2456 <__stack+0x1b57>
    2446:	ef e9       	ldi	r30, 0x9F	; 159
    2448:	ff e0       	ldi	r31, 0x0F	; 15
    244a:	31 97       	sbiw	r30, 0x01	; 1
    244c:	f1 f7       	brne	.-4      	; 0x244a <__stack+0x1b4b>
    244e:	00 c0       	rjmp	.+0      	; 0x2450 <__stack+0x1b51>
    2450:	00 00       	nop
	{
		_delay_ms(1);
		dl--;
    2452:	01 97       	sbiw	r24, 0x01	; 1
    2454:	c0 f7       	brcc	.-16     	; 0x2446 <__stack+0x1b47>
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
    2456:	a4 e0       	ldi	r26, 0x04	; 4
    2458:	b1 e0       	ldi	r27, 0x01	; 1
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    245a:	ed 91       	ld	r30, X+
    245c:	ee 23       	and	r30, r30
    245e:	01 f1       	breq	.+64     	; 0x24a0 <__stack+0x1ba1>
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    2460:	ec 3c       	cpi	r30, 0xCC	; 204
    2462:	d8 f7       	brcc	.-10     	; 0x245a <__stack+0x1b5b>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2464:	47 e0       	ldi	r20, 0x07	; 7
    2466:	e4 9f       	mul	r30, r20
    2468:	f0 01       	movw	r30, r0
    246a:	11 24       	eor	r1, r1
    246c:	bf 01       	movw	r22, r30
    246e:	6c 5a       	subi	r22, 0xAC	; 172
    2470:	7e 4f       	sbci	r23, 0xFE	; 254
    2472:	fb 01       	movw	r30, r22
    2474:	42 81       	ldd	r20, Z+2	; 0x02
    2476:	53 81       	ldd	r21, Z+3	; 0x03
    2478:	fa 01       	movw	r30, r20
    247a:	90 81       	ld	r25, Z
    247c:	44 24       	eor	r4, r4
    247e:	43 94       	inc	r4
    2480:	51 2c       	mov	r5, r1
    2482:	fb 01       	movw	r30, r22
    2484:	06 80       	ldd	r0, Z+6	; 0x06
    2486:	02 c0       	rjmp	.+4      	; 0x248c <__stack+0x1b8d>
    2488:	44 0c       	add	r4, r4
    248a:	55 1c       	adc	r5, r5
    248c:	0a 94       	dec	r0
    248e:	e2 f7       	brpl	.-8      	; 0x2488 <__stack+0x1b89>
    2490:	84 2d       	mov	r24, r4
    2492:	80 95       	com	r24
    2494:	89 23       	and	r24, r25
    2496:	fa 01       	movw	r30, r20
    2498:	80 83       	st	Z, r24
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    249a:	ed 91       	ld	r30, X+
    249c:	e1 11       	cpse	r30, r1
    249e:	e0 cf       	rjmp	.-64     	; 0x2460 <__stack+0x1b61>
    24a0:	89 e0       	ldi	r24, 0x09	; 9
    24a2:	90 e0       	ldi	r25, 0x00	; 0
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    24a4:	5a 98       	cbi	0x0b, 2	; 11
    24a6:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    24a8:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    24aa:	5b 98       	cbi	0x0b, 3	; 11
    24ac:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    24ae:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    24b0:	5b 98       	cbi	0x0b, 3	; 11
    24b2:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    24b4:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    24b6:	5b 98       	cbi	0x0b, 3	; 11
    24b8:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    24ba:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    24bc:	5b 98       	cbi	0x0b, 3	; 11
    24be:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    24c0:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    24c2:	5b 98       	cbi	0x0b, 3	; 11
    24c4:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    24c6:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    24c8:	5b 98       	cbi	0x0b, 3	; 11
    24ca:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    24cc:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    24ce:	5b 98       	cbi	0x0b, 3	; 11
    24d0:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    24d2:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    24d4:	5b 98       	cbi	0x0b, 3	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    24d6:	5a 9a       	sbi	0x0b, 2	; 11
    24d8:	01 97       	sbiw	r24, 0x01	; 1
/* Clear Display                                                        */
/************************************************************************/
static inline void Clear(){
	int x, y = 0;
	pinsMultiWrite(plex_pins, LOW);
	for(x = 0; x < (SH_REG + 1); x++) {
    24da:	21 f7       	brne	.-56     	; 0x24a4 <__stack+0x1ba5>
    24dc:	2f 5f       	subi	r18, 0xFF	; 255
    24de:	3f 4f       	sbci	r19, 0xFF	; 255
{
	uint8_t byte, index, bit = 0;
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
    24e0:	27 30       	cpi	r18, 0x07	; 7
    24e2:	31 05       	cpc	r19, r1
    24e4:	09 f0       	breq	.+2      	; 0x24e8 <__stack+0x1be9>
    24e6:	ea ce       	rjmp	.-556    	; 0x22bc <__stack+0x19bd>
			pinWrite(latch_pin, HIGH);
		}
		MultiPlex(&byte);
		Clear();
	}
	delayms = 1;
    24e8:	f0 92 01 01 	sts	0x0101, r15	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    24ec:	e0 92 00 01 	sts	0x0100, r14	; 0x800100 <__DATA_REGION_ORIGIN__>
    24f0:	9a 94       	dec	r9
}
}*/
static inline void HoldDisplayBuffer(const uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
    24f2:	91 10       	cpse	r9, r1
    24f4:	dd ce       	rjmp	.-582    	; 0x22b0 <__stack+0x19b1>
/************************************************************************/
void DeleteLeft(const uint8_t *p, uint8_t time)
{
	uint8_t index, begin, end = 0;
	//uint8_t *bf = buffer;
	for(index = MT_SIZE -1 ; index > 0; index--)
    24f6:	a1 10       	cpse	r10, r1
    24f8:	bb ce       	rjmp	.-650    	; 0x2270 <__stack+0x1971>
    24fa:	fa e0       	ldi	r31, 0x0A	; 10
    24fc:	af 2e       	mov	r10, r31
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    24fe:	64 e0       	ldi	r22, 0x04	; 4
    2500:	71 e0       	ldi	r23, 0x01	; 1
    2502:	80 e0       	ldi	r24, 0x00	; 0
    2504:	90 e0       	ldi	r25, 0x00	; 0
    2506:	31 e0       	ldi	r19, 0x01	; 1
    2508:	08 2e       	mov	r0, r24
    250a:	01 c0       	rjmp	.+2      	; 0x250e <__stack+0x1c0f>
    250c:	33 0f       	add	r19, r19
    250e:	0a 94       	dec	r0
    2510:	ea f7       	brpl	.-6      	; 0x250c <__stack+0x1c0d>
    2512:	2f e3       	ldi	r18, 0x3F	; 63
    2514:	5a c0       	rjmp	.+180    	; 0x25ca <__stack+0x1ccb>
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2516:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2518:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    251a:	5b 98       	cbi	0x0b, 3	; 11
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
			pinWrite(latch_pin, LOW);
			for(bit = 0; bit <= FONT_HEIGHT ; bit++){
				pinWrite(data_pin,((*(p+pos)) & (1 << byte)));
    251c:	ef ef       	ldi	r30, 0xFF	; 255
    251e:	e2 0f       	add	r30, r18
    2520:	f0 e0       	ldi	r31, 0x00	; 0
    2522:	e0 56       	subi	r30, 0x60	; 96
    2524:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    2526:	40 81       	ld	r20, Z
    2528:	43 23       	and	r20, r19
    252a:	09 f0       	breq	.+2      	; 0x252e <__stack+0x1c2f>
    252c:	36 c2       	rjmp	.+1132   	; 0x299a <__stack+0x209b>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    252e:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2530:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2532:	5b 98       	cbi	0x0b, 3	; 11
    2534:	ee ef       	ldi	r30, 0xFE	; 254
    2536:	e2 0f       	add	r30, r18
    2538:	f0 e0       	ldi	r31, 0x00	; 0
    253a:	e0 56       	subi	r30, 0x60	; 96
    253c:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    253e:	40 81       	ld	r20, Z
    2540:	43 23       	and	r20, r19
    2542:	09 f0       	breq	.+2      	; 0x2546 <__stack+0x1c47>
    2544:	28 c2       	rjmp	.+1104   	; 0x2996 <__stack+0x2097>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2546:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2548:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    254a:	5b 98       	cbi	0x0b, 3	; 11
    254c:	ed ef       	ldi	r30, 0xFD	; 253
    254e:	e2 0f       	add	r30, r18
    2550:	f0 e0       	ldi	r31, 0x00	; 0
    2552:	e0 56       	subi	r30, 0x60	; 96
    2554:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    2556:	40 81       	ld	r20, Z
    2558:	43 23       	and	r20, r19
    255a:	09 f0       	breq	.+2      	; 0x255e <__stack+0x1c5f>
    255c:	1a c2       	rjmp	.+1076   	; 0x2992 <__stack+0x2093>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    255e:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2560:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2562:	5b 98       	cbi	0x0b, 3	; 11
    2564:	ec ef       	ldi	r30, 0xFC	; 252
    2566:	e2 0f       	add	r30, r18
    2568:	f0 e0       	ldi	r31, 0x00	; 0
    256a:	e0 56       	subi	r30, 0x60	; 96
    256c:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    256e:	40 81       	ld	r20, Z
    2570:	43 23       	and	r20, r19
    2572:	09 f0       	breq	.+2      	; 0x2576 <__stack+0x1c77>
    2574:	0c c2       	rjmp	.+1048   	; 0x298e <__stack+0x208f>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2576:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2578:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    257a:	5b 98       	cbi	0x0b, 3	; 11
    257c:	eb ef       	ldi	r30, 0xFB	; 251
    257e:	e2 0f       	add	r30, r18
    2580:	f0 e0       	ldi	r31, 0x00	; 0
    2582:	e0 56       	subi	r30, 0x60	; 96
    2584:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    2586:	40 81       	ld	r20, Z
    2588:	43 23       	and	r20, r19
    258a:	09 f0       	breq	.+2      	; 0x258e <__stack+0x1c8f>
    258c:	fe c1       	rjmp	.+1020   	; 0x298a <__stack+0x208b>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    258e:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2590:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2592:	5b 98       	cbi	0x0b, 3	; 11
    2594:	ea ef       	ldi	r30, 0xFA	; 250
    2596:	e2 0f       	add	r30, r18
    2598:	f0 e0       	ldi	r31, 0x00	; 0
    259a:	e0 56       	subi	r30, 0x60	; 96
    259c:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    259e:	40 81       	ld	r20, Z
    25a0:	43 23       	and	r20, r19
    25a2:	09 f0       	breq	.+2      	; 0x25a6 <__stack+0x1ca7>
    25a4:	f0 c1       	rjmp	.+992    	; 0x2986 <__stack+0x2087>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    25a6:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    25a8:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    25aa:	5b 98       	cbi	0x0b, 3	; 11
    25ac:	e9 ef       	ldi	r30, 0xF9	; 249
    25ae:	e2 0f       	add	r30, r18
    25b0:	f0 e0       	ldi	r31, 0x00	; 0
    25b2:	e0 56       	subi	r30, 0x60	; 96
    25b4:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    25b6:	40 81       	ld	r20, Z
    25b8:	43 23       	and	r20, r19
    25ba:	91 f5       	brne	.+100    	; 0x2620 <__stack+0x1d21>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    25bc:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    25be:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    25c0:	5b 98       	cbi	0x0b, 3	; 11
				//toggle the clock pin
				pinWrite(clock_pin, HIGH);
				pinWrite(clock_pin, LOW);
				pos--;
    25c2:	28 50       	subi	r18, 0x08	; 8
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    25c4:	5a 9a       	sbi	0x0b, 2	; 11
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
    25c6:	2f 3f       	cpi	r18, 0xFF	; 255
    25c8:	91 f1       	breq	.+100    	; 0x262e <__stack+0x1d2f>
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    25ca:	5a 98       	cbi	0x0b, 2	; 11
			pinWrite(latch_pin, LOW);
			for(bit = 0; bit <= FONT_HEIGHT ; bit++){
				pinWrite(data_pin,((*(p+pos)) & (1 << byte)));
    25cc:	e2 2f       	mov	r30, r18
    25ce:	f0 e0       	ldi	r31, 0x00	; 0
    25d0:	e0 56       	subi	r30, 0x60	; 96
    25d2:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    25d4:	40 81       	ld	r20, Z
    25d6:	43 23       	and	r20, r19
    25d8:	09 f4       	brne	.+2      	; 0x25dc <__stack+0x1cdd>
    25da:	9d cf       	rjmp	.-198    	; 0x2516 <__stack+0x1c17>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    25dc:	59 9a       	sbi	0x0b, 1	; 11
    25de:	9c cf       	rjmp	.-200    	; 0x2518 <__stack+0x1c19>
    25e0:	59 9a       	sbi	0x0b, 1	; 11
    25e2:	bd ce       	rjmp	.-646    	; 0x235e <__stack+0x1a5f>
    25e4:	59 9a       	sbi	0x0b, 1	; 11
    25e6:	af ce       	rjmp	.-674    	; 0x2346 <__stack+0x1a47>
    25e8:	59 9a       	sbi	0x0b, 1	; 11
    25ea:	a1 ce       	rjmp	.-702    	; 0x232e <__stack+0x1a2f>
    25ec:	59 9a       	sbi	0x0b, 1	; 11
    25ee:	93 ce       	rjmp	.-730    	; 0x2316 <__stack+0x1a17>
    25f0:	59 9a       	sbi	0x0b, 1	; 11
    25f2:	85 ce       	rjmp	.-758    	; 0x22fe <__stack+0x19ff>
    25f4:	59 9a       	sbi	0x0b, 1	; 11
    25f6:	77 ce       	rjmp	.-786    	; 0x22e6 <__stack+0x19e7>
    25f8:	b7 e0       	ldi	r27, 0x07	; 7
    25fa:	eb 9f       	mul	r30, r27
    25fc:	f0 01       	movw	r30, r0
    25fe:	11 24       	eor	r1, r1
    2600:	ec 5a       	subi	r30, 0xAC	; 172
    2602:	fe 4f       	sbci	r31, 0xFE	; 254
    2604:	a2 81       	ldd	r26, Z+2	; 0x02
    2606:	b3 81       	ldd	r27, Z+3	; 0x03
    2608:	6c 91       	ld	r22, X
    260a:	41 e0       	ldi	r20, 0x01	; 1
    260c:	50 e0       	ldi	r21, 0x00	; 0
    260e:	06 80       	ldd	r0, Z+6	; 0x06
    2610:	02 c0       	rjmp	.+4      	; 0x2616 <__stack+0x1d17>
    2612:	44 0f       	add	r20, r20
    2614:	55 1f       	adc	r21, r21
    2616:	0a 94       	dec	r0
    2618:	e2 f7       	brpl	.-8      	; 0x2612 <__stack+0x1d13>
    261a:	46 2b       	or	r20, r22
    261c:	4c 93       	st	X, r20
    261e:	0d cf       	rjmp	.-486    	; 0x243a <__stack+0x1b3b>
    2620:	59 9a       	sbi	0x0b, 1	; 11
    2622:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2624:	5b 98       	cbi	0x0b, 3	; 11
				//toggle the clock pin
				pinWrite(clock_pin, HIGH);
				pinWrite(clock_pin, LOW);
				pos--;
    2626:	28 50       	subi	r18, 0x08	; 8
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2628:	5a 9a       	sbi	0x0b, 2	; 11
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
    262a:	2f 3f       	cpi	r18, 0xFF	; 255
    262c:	71 f6       	brne	.-100    	; 0x25ca <__stack+0x1ccb>
    262e:	a4 e0       	ldi	r26, 0x04	; 4
    2630:	b1 e0       	ldi	r27, 0x01	; 1
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    2632:	ed 91       	ld	r30, X+
    2634:	ee 23       	and	r30, r30
    2636:	09 f1       	breq	.+66     	; 0x267a <__stack+0x1d7b>
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    2638:	ec 3c       	cpi	r30, 0xCC	; 204
    263a:	d8 f7       	brcc	.-10     	; 0x2632 <__stack+0x1d33>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    263c:	27 e0       	ldi	r18, 0x07	; 7
    263e:	e2 9f       	mul	r30, r18
    2640:	f0 01       	movw	r30, r0
    2642:	11 24       	eor	r1, r1
    2644:	af 01       	movw	r20, r30
    2646:	4c 5a       	subi	r20, 0xAC	; 172
    2648:	5e 4f       	sbci	r21, 0xFE	; 254
    264a:	1a 01       	movw	r2, r20
    264c:	fa 01       	movw	r30, r20
    264e:	42 81       	ldd	r20, Z+2	; 0x02
    2650:	53 81       	ldd	r21, Z+3	; 0x03
    2652:	fa 01       	movw	r30, r20
    2654:	20 81       	ld	r18, Z
    2656:	88 24       	eor	r8, r8
    2658:	83 94       	inc	r8
    265a:	91 2c       	mov	r9, r1
    265c:	f1 01       	movw	r30, r2
    265e:	06 80       	ldd	r0, Z+6	; 0x06
    2660:	02 c0       	rjmp	.+4      	; 0x2666 <__stack+0x1d67>
    2662:	88 0c       	add	r8, r8
    2664:	99 1c       	adc	r9, r9
    2666:	0a 94       	dec	r0
    2668:	e2 f7       	brpl	.-8      	; 0x2662 <__stack+0x1d63>
    266a:	e8 2d       	mov	r30, r8
    266c:	e0 95       	com	r30
    266e:	2e 23       	and	r18, r30
    2670:	fa 01       	movw	r30, r20
    2672:	20 83       	st	Z, r18
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    2674:	ed 91       	ld	r30, X+
    2676:	e1 11       	cpse	r30, r1
    2678:	df cf       	rjmp	.-66     	; 0x2638 <__stack+0x1d39>
/* Multiplexing method                                                  */
/************************************************************************/
static inline void MultiPlex(uint8_t *pin)
{
	pinsMultiWrite(plex_pins, LOW);
	pinWrite(plex_pins[*pin], HIGH);
    267a:	db 01       	movw	r26, r22
    267c:	ed 91       	ld	r30, X+
    267e:	bd 01       	movw	r22, r26
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    2680:	ec 3c       	cpi	r30, 0xCC	; 204
    2682:	98 f4       	brcc	.+38     	; 0x26aa <__stack+0x1dab>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2684:	b7 e0       	ldi	r27, 0x07	; 7
    2686:	eb 9f       	mul	r30, r27
    2688:	f0 01       	movw	r30, r0
    268a:	11 24       	eor	r1, r1
    268c:	ec 5a       	subi	r30, 0xAC	; 172
    268e:	fe 4f       	sbci	r31, 0xFE	; 254
    2690:	a2 81       	ldd	r26, Z+2	; 0x02
    2692:	b3 81       	ldd	r27, Z+3	; 0x03
    2694:	4c 91       	ld	r20, X
    2696:	21 e0       	ldi	r18, 0x01	; 1
    2698:	30 e0       	ldi	r19, 0x00	; 0
    269a:	06 80       	ldd	r0, Z+6	; 0x06
    269c:	02 c0       	rjmp	.+4      	; 0x26a2 <__stack+0x1da3>
    269e:	22 0f       	add	r18, r18
    26a0:	33 1f       	adc	r19, r19
    26a2:	0a 94       	dec	r0
    26a4:	e2 f7       	brpl	.-8      	; 0x269e <__stack+0x1d9f>
    26a6:	24 2b       	or	r18, r20
    26a8:	2c 93       	st	X, r18
	delay(delayms);
    26aa:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    26ae:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
/*  delay                                                               */
/************************************************************************/
int delayms = 1;
static inline void delay(int dl)
{
	while(dl >= 0)
    26b2:	37 fd       	sbrc	r19, 7
    26b4:	09 c0       	rjmp	.+18     	; 0x26c8 <__stack+0x1dc9>
    26b6:	ef e9       	ldi	r30, 0x9F	; 159
    26b8:	ff e0       	ldi	r31, 0x0F	; 15
    26ba:	31 97       	sbiw	r30, 0x01	; 1
    26bc:	f1 f7       	brne	.-4      	; 0x26ba <__stack+0x1dbb>
    26be:	00 c0       	rjmp	.+0      	; 0x26c0 <__stack+0x1dc1>
    26c0:	00 00       	nop
	{
		_delay_ms(1);
		dl--;
    26c2:	21 50       	subi	r18, 0x01	; 1
    26c4:	31 09       	sbc	r19, r1
    26c6:	b8 f7       	brcc	.-18     	; 0x26b6 <__stack+0x1db7>
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
    26c8:	a4 e0       	ldi	r26, 0x04	; 4
    26ca:	b1 e0       	ldi	r27, 0x01	; 1
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    26cc:	ed 91       	ld	r30, X+
    26ce:	ee 23       	and	r30, r30
    26d0:	09 f1       	breq	.+66     	; 0x2714 <__stack+0x1e15>
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    26d2:	ec 3c       	cpi	r30, 0xCC	; 204
    26d4:	d8 f7       	brcc	.-10     	; 0x26cc <__stack+0x1dcd>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    26d6:	27 e0       	ldi	r18, 0x07	; 7
    26d8:	e2 9f       	mul	r30, r18
    26da:	f0 01       	movw	r30, r0
    26dc:	11 24       	eor	r1, r1
    26de:	af 01       	movw	r20, r30
    26e0:	4c 5a       	subi	r20, 0xAC	; 172
    26e2:	5e 4f       	sbci	r21, 0xFE	; 254
    26e4:	1a 01       	movw	r2, r20
    26e6:	fa 01       	movw	r30, r20
    26e8:	42 81       	ldd	r20, Z+2	; 0x02
    26ea:	53 81       	ldd	r21, Z+3	; 0x03
    26ec:	fa 01       	movw	r30, r20
    26ee:	20 81       	ld	r18, Z
    26f0:	88 24       	eor	r8, r8
    26f2:	83 94       	inc	r8
    26f4:	91 2c       	mov	r9, r1
    26f6:	f1 01       	movw	r30, r2
    26f8:	06 80       	ldd	r0, Z+6	; 0x06
    26fa:	02 c0       	rjmp	.+4      	; 0x2700 <__stack+0x1e01>
    26fc:	88 0c       	add	r8, r8
    26fe:	99 1c       	adc	r9, r9
    2700:	0a 94       	dec	r0
    2702:	e2 f7       	brpl	.-8      	; 0x26fc <__stack+0x1dfd>
    2704:	e8 2d       	mov	r30, r8
    2706:	e0 95       	com	r30
    2708:	2e 23       	and	r18, r30
    270a:	fa 01       	movw	r30, r20
    270c:	20 83       	st	Z, r18
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    270e:	ed 91       	ld	r30, X+
    2710:	e1 11       	cpse	r30, r1
    2712:	df cf       	rjmp	.-66     	; 0x26d2 <__stack+0x1dd3>
    2714:	29 e0       	ldi	r18, 0x09	; 9
    2716:	30 e0       	ldi	r19, 0x00	; 0
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2718:	5a 98       	cbi	0x0b, 2	; 11
    271a:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    271c:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    271e:	5b 98       	cbi	0x0b, 3	; 11
    2720:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2722:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2724:	5b 98       	cbi	0x0b, 3	; 11
    2726:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2728:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    272a:	5b 98       	cbi	0x0b, 3	; 11
    272c:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    272e:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2730:	5b 98       	cbi	0x0b, 3	; 11
    2732:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2734:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2736:	5b 98       	cbi	0x0b, 3	; 11
    2738:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    273a:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    273c:	5b 98       	cbi	0x0b, 3	; 11
    273e:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2740:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2742:	5b 98       	cbi	0x0b, 3	; 11
    2744:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2746:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2748:	5b 98       	cbi	0x0b, 3	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    274a:	5a 9a       	sbi	0x0b, 2	; 11
    274c:	21 50       	subi	r18, 0x01	; 1
    274e:	31 09       	sbc	r19, r1
/* Clear Display                                                        */
/************************************************************************/
static inline void Clear(){
	int x, y = 0;
	pinsMultiWrite(plex_pins, LOW);
	for(x = 0; x < (SH_REG + 1); x++) {
    2750:	19 f7       	brne	.-58     	; 0x2718 <__stack+0x1e19>
    2752:	01 96       	adiw	r24, 0x01	; 1
{
	uint8_t byte, index, bit = 0;
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
    2754:	87 30       	cpi	r24, 0x07	; 7
    2756:	91 05       	cpc	r25, r1
    2758:	09 f0       	breq	.+2      	; 0x275c <__stack+0x1e5d>
    275a:	d5 ce       	rjmp	.-598    	; 0x2506 <__stack+0x1c07>
			pinWrite(latch_pin, HIGH);
		}
		MultiPlex(&byte);
		Clear();
	}
	delayms = 1;
    275c:	22 24       	eor	r2, r2
    275e:	23 94       	inc	r2
    2760:	31 2c       	mov	r3, r1
    2762:	30 92 01 01 	sts	0x0101, r3	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    2766:	20 92 00 01 	sts	0x0100, r2	; 0x800100 <__DATA_REGION_ORIGIN__>
    276a:	aa 94       	dec	r10
}
}*/
static inline void HoldDisplayBuffer(const uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
    276c:	a1 10       	cpse	r10, r1
    276e:	c7 ce       	rjmp	.-626    	; 0x24fe <__stack+0x1bff>
    2770:	d8 01       	movw	r26, r16
    2772:	eb 2d       	mov	r30, r11
    2774:	1d 92       	st	X+, r1
    2776:	ea 95       	dec	r30
    2778:	e9 f7       	brne	.-6      	; 0x2774 <__stack+0x1e75>
    277a:	bc e0       	ldi	r27, 0x0C	; 12
    277c:	8b 2e       	mov	r8, r27
    277e:	b1 e0       	ldi	r27, 0x01	; 1
    2780:	9b 2e       	mov	r9, r27
    2782:	d4 01       	movw	r26, r8
    2784:	20 e1       	ldi	r18, 0x10	; 16
    2786:	83 e5       	ldi	r24, 0x53	; 83
/* returns the index of the first byte of the requested character       */
/************************************************************************/
uint8_t CharStart(const char *p)
{
	/*if(*p == ' ') return 0;
	else*/ return (uint8_t) (( *p - ' '));
    2788:	80 52       	subi	r24, 0x20	; 32
		s_pos = (MT_SIZE - (c_len * FONT_WIDTH) - c_len - 2);
	}
	pos_index = s_pos;
	ClearStringBuffer();
	while(*ch){
		index = CharStart(ch++) * FONT_WIDTH;
    278a:	f5 e0       	ldi	r31, 0x05	; 5
    278c:	8f 9f       	mul	r24, r31
    278e:	c0 01       	movw	r24, r0
    2790:	11 24       	eor	r1, r1
		for(len = 0; len < FONT_WIDTH; len++){
			stringbuffer[pos_index] = (uint8_t)(pgm_read_byte((font_5x7 + index)));
    2792:	fc 01       	movw	r30, r24
    2794:	e8 59       	subi	r30, 0x98	; 152
    2796:	ff 4f       	sbci	r31, 0xFF	; 255
    2798:	34 91       	lpm	r19, Z
    279a:	e2 2f       	mov	r30, r18
    279c:	f0 e0       	ldi	r31, 0x00	; 0
    279e:	e0 5a       	subi	r30, 0xA0	; 160
    27a0:	fd 4f       	sbci	r31, 0xFD	; 253
    27a2:	30 83       	st	Z, r19
    27a4:	fc 01       	movw	r30, r24
    27a6:	e7 59       	subi	r30, 0x97	; 151
    27a8:	ff 4f       	sbci	r31, 0xFF	; 255
    27aa:	34 91       	lpm	r19, Z
    27ac:	e1 e0       	ldi	r30, 0x01	; 1
    27ae:	e2 0f       	add	r30, r18
    27b0:	f0 e0       	ldi	r31, 0x00	; 0
    27b2:	e0 5a       	subi	r30, 0xA0	; 160
    27b4:	fd 4f       	sbci	r31, 0xFD	; 253
    27b6:	30 83       	st	Z, r19
    27b8:	fc 01       	movw	r30, r24
    27ba:	e6 59       	subi	r30, 0x96	; 150
    27bc:	ff 4f       	sbci	r31, 0xFF	; 255
    27be:	34 91       	lpm	r19, Z
    27c0:	e2 e0       	ldi	r30, 0x02	; 2
    27c2:	e2 0f       	add	r30, r18
    27c4:	f0 e0       	ldi	r31, 0x00	; 0
    27c6:	e0 5a       	subi	r30, 0xA0	; 160
    27c8:	fd 4f       	sbci	r31, 0xFD	; 253
    27ca:	30 83       	st	Z, r19
    27cc:	fc 01       	movw	r30, r24
    27ce:	e5 59       	subi	r30, 0x95	; 149
    27d0:	ff 4f       	sbci	r31, 0xFF	; 255
    27d2:	34 91       	lpm	r19, Z
    27d4:	e3 e0       	ldi	r30, 0x03	; 3
    27d6:	e2 0f       	add	r30, r18
    27d8:	f0 e0       	ldi	r31, 0x00	; 0
    27da:	e0 5a       	subi	r30, 0xA0	; 160
    27dc:	fd 4f       	sbci	r31, 0xFD	; 253
    27de:	30 83       	st	Z, r19
    27e0:	fc 01       	movw	r30, r24
    27e2:	e4 59       	subi	r30, 0x94	; 148
    27e4:	ff 4f       	sbci	r31, 0xFF	; 255
    27e6:	84 91       	lpm	r24, Z
    27e8:	e4 e0       	ldi	r30, 0x04	; 4
    27ea:	e2 0f       	add	r30, r18
    27ec:	f0 e0       	ldi	r31, 0x00	; 0
    27ee:	e0 5a       	subi	r30, 0xA0	; 160
    27f0:	fd 4f       	sbci	r31, 0xFD	; 253
    27f2:	80 83       	st	Z, r24
			index++; pos_index++;
		}
		pos_index += 1; //space the characters
    27f4:	2a 5f       	subi	r18, 0xFA	; 250
	}else if(align == RIGHT){
		s_pos = (MT_SIZE - (c_len * FONT_WIDTH) - c_len - 2);
	}
	pos_index = s_pos;
	ClearStringBuffer();
	while(*ch){
    27f6:	8d 91       	ld	r24, X+
    27f8:	81 11       	cpse	r24, r1
    27fa:	c6 cf       	rjmp	.-116    	; 0x2788 <__stack+0x1e89>
/*split while displaying                                                */
/************************************************************************/
void Rain(const uint8_t *p, uint8_t delay)
{
	uint8_t rt = 0;
	delayms = delay;
    27fc:	84 e6       	ldi	r24, 0x64	; 100
    27fe:	90 e0       	ldi	r25, 0x00	; 0
    2800:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    2804:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    2808:	a4 e6       	ldi	r26, 0x64	; 100
    280a:	aa 2e       	mov	r10, r26
	for(rt=0; rt<100; rt++){
		DisplayBuffer(p);
    280c:	80 e6       	ldi	r24, 0x60	; 96
    280e:	92 e0       	ldi	r25, 0x02	; 2
    2810:	0e 94 41 01 	call	0x282	; 0x282 <DisplayBuffer>
    2814:	aa 94       	dec	r10
/************************************************************************/
void Rain(const uint8_t *p, uint8_t delay)
{
	uint8_t rt = 0;
	delayms = delay;
	for(rt=0; rt<100; rt++){
    2816:	a1 10       	cpse	r10, r1
    2818:	f9 cf       	rjmp	.-14     	; 0x280c <__stack+0x1f0d>
    281a:	d8 01       	movw	r26, r16
    281c:	eb 2d       	mov	r30, r11
    281e:	1d 92       	st	X+, r1
    2820:	ea 95       	dec	r30
    2822:	e9 f7       	brne	.-6      	; 0x281e <__stack+0x1f1f>
    2824:	ac e0       	ldi	r26, 0x0C	; 12
    2826:	b1 e0       	ldi	r27, 0x01	; 1
    2828:	20 e1       	ldi	r18, 0x10	; 16
    282a:	83 e5       	ldi	r24, 0x53	; 83
/* returns the index of the first byte of the requested character       */
/************************************************************************/
uint8_t CharStart(const char *p)
{
	/*if(*p == ' ') return 0;
	else*/ return (uint8_t) (( *p - ' '));
    282c:	80 52       	subi	r24, 0x20	; 32
		s_pos = (MT_SIZE - (c_len * FONT_WIDTH) - c_len - 2);
	}
	pos_index = s_pos;
	ClearStringBuffer();
	while(*ch){
		index = CharStart(ch++) * FONT_WIDTH;
    282e:	f5 e0       	ldi	r31, 0x05	; 5
    2830:	8f 9f       	mul	r24, r31
    2832:	c0 01       	movw	r24, r0
    2834:	11 24       	eor	r1, r1
		for(len = 0; len < FONT_WIDTH; len++){
			stringbuffer[pos_index] = (uint8_t)(pgm_read_byte((font_5x7 + index)));
    2836:	fc 01       	movw	r30, r24
    2838:	e8 59       	subi	r30, 0x98	; 152
    283a:	ff 4f       	sbci	r31, 0xFF	; 255
    283c:	34 91       	lpm	r19, Z
    283e:	e2 2f       	mov	r30, r18
    2840:	f0 e0       	ldi	r31, 0x00	; 0
    2842:	e0 5a       	subi	r30, 0xA0	; 160
    2844:	fd 4f       	sbci	r31, 0xFD	; 253
    2846:	30 83       	st	Z, r19
    2848:	fc 01       	movw	r30, r24
    284a:	e7 59       	subi	r30, 0x97	; 151
    284c:	ff 4f       	sbci	r31, 0xFF	; 255
    284e:	34 91       	lpm	r19, Z
    2850:	e1 e0       	ldi	r30, 0x01	; 1
    2852:	e2 0f       	add	r30, r18
    2854:	f0 e0       	ldi	r31, 0x00	; 0
    2856:	e0 5a       	subi	r30, 0xA0	; 160
    2858:	fd 4f       	sbci	r31, 0xFD	; 253
    285a:	30 83       	st	Z, r19
    285c:	fc 01       	movw	r30, r24
    285e:	e6 59       	subi	r30, 0x96	; 150
    2860:	ff 4f       	sbci	r31, 0xFF	; 255
    2862:	34 91       	lpm	r19, Z
    2864:	e2 e0       	ldi	r30, 0x02	; 2
    2866:	e2 0f       	add	r30, r18
    2868:	f0 e0       	ldi	r31, 0x00	; 0
    286a:	e0 5a       	subi	r30, 0xA0	; 160
    286c:	fd 4f       	sbci	r31, 0xFD	; 253
    286e:	30 83       	st	Z, r19
    2870:	fc 01       	movw	r30, r24
    2872:	e5 59       	subi	r30, 0x95	; 149
    2874:	ff 4f       	sbci	r31, 0xFF	; 255
    2876:	34 91       	lpm	r19, Z
    2878:	e3 e0       	ldi	r30, 0x03	; 3
    287a:	e2 0f       	add	r30, r18
    287c:	f0 e0       	ldi	r31, 0x00	; 0
    287e:	e0 5a       	subi	r30, 0xA0	; 160
    2880:	fd 4f       	sbci	r31, 0xFD	; 253
    2882:	30 83       	st	Z, r19
    2884:	fc 01       	movw	r30, r24
    2886:	e4 59       	subi	r30, 0x94	; 148
    2888:	ff 4f       	sbci	r31, 0xFF	; 255
    288a:	84 91       	lpm	r24, Z
    288c:	e4 e0       	ldi	r30, 0x04	; 4
    288e:	e2 0f       	add	r30, r18
    2890:	f0 e0       	ldi	r31, 0x00	; 0
    2892:	e0 5a       	subi	r30, 0xA0	; 160
    2894:	fd 4f       	sbci	r31, 0xFD	; 253
    2896:	80 83       	st	Z, r24
			index++; pos_index++;
		}
		pos_index += 1; //space the characters
    2898:	2a 5f       	subi	r18, 0xFA	; 250
	}else if(align == RIGHT){
		s_pos = (MT_SIZE - (c_len * FONT_WIDTH) - c_len - 2);
	}
	pos_index = s_pos;
	ClearStringBuffer();
	while(*ch){
    289a:	8d 91       	ld	r24, X+
    289c:	81 11       	cpse	r24, r1
    289e:	c6 cf       	rjmp	.-116    	; 0x282c <__stack+0x1f2d>
    28a0:	f2 e3       	ldi	r31, 0x32	; 50
    28a2:	af 2e       	mov	r10, r31
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    28a4:	64 e0       	ldi	r22, 0x04	; 4
    28a6:	71 e0       	ldi	r23, 0x01	; 1
    28a8:	80 e0       	ldi	r24, 0x00	; 0
    28aa:	90 e0       	ldi	r25, 0x00	; 0
    28ac:	31 e0       	ldi	r19, 0x01	; 1
    28ae:	08 2e       	mov	r0, r24
    28b0:	01 c0       	rjmp	.+2      	; 0x28b4 <__stack+0x1fb5>
    28b2:	33 0f       	add	r19, r19
    28b4:	0a 94       	dec	r0
    28b6:	ea f7       	brpl	.-6      	; 0x28b2 <__stack+0x1fb3>
    28b8:	2f e3       	ldi	r18, 0x3F	; 63
    28ba:	5a c0       	rjmp	.+180    	; 0x2970 <__stack+0x2071>
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    28bc:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    28be:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    28c0:	5b 98       	cbi	0x0b, 3	; 11
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
			pinWrite(latch_pin, LOW);
			for(bit = 0; bit <= FONT_HEIGHT ; bit++){
				pinWrite(data_pin,((*(p+pos)) & (1 << byte)));
    28c2:	ef ef       	ldi	r30, 0xFF	; 255
    28c4:	e2 0f       	add	r30, r18
    28c6:	f0 e0       	ldi	r31, 0x00	; 0
    28c8:	e0 5a       	subi	r30, 0xA0	; 160
    28ca:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    28cc:	40 81       	ld	r20, Z
    28ce:	43 23       	and	r20, r19
    28d0:	09 f0       	breq	.+2      	; 0x28d4 <__stack+0x1fd5>
    28d2:	dc c1       	rjmp	.+952    	; 0x2c8c <__stack+0x238d>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    28d4:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    28d6:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    28d8:	5b 98       	cbi	0x0b, 3	; 11
    28da:	ee ef       	ldi	r30, 0xFE	; 254
    28dc:	e2 0f       	add	r30, r18
    28de:	f0 e0       	ldi	r31, 0x00	; 0
    28e0:	e0 5a       	subi	r30, 0xA0	; 160
    28e2:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    28e4:	40 81       	ld	r20, Z
    28e6:	43 23       	and	r20, r19
    28e8:	09 f0       	breq	.+2      	; 0x28ec <__stack+0x1fed>
    28ea:	ce c1       	rjmp	.+924    	; 0x2c88 <__stack+0x2389>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    28ec:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    28ee:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    28f0:	5b 98       	cbi	0x0b, 3	; 11
    28f2:	ed ef       	ldi	r30, 0xFD	; 253
    28f4:	e2 0f       	add	r30, r18
    28f6:	f0 e0       	ldi	r31, 0x00	; 0
    28f8:	e0 5a       	subi	r30, 0xA0	; 160
    28fa:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    28fc:	40 81       	ld	r20, Z
    28fe:	43 23       	and	r20, r19
    2900:	09 f0       	breq	.+2      	; 0x2904 <__stack+0x2005>
    2902:	c0 c1       	rjmp	.+896    	; 0x2c84 <__stack+0x2385>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2904:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2906:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2908:	5b 98       	cbi	0x0b, 3	; 11
    290a:	ec ef       	ldi	r30, 0xFC	; 252
    290c:	e2 0f       	add	r30, r18
    290e:	f0 e0       	ldi	r31, 0x00	; 0
    2910:	e0 5a       	subi	r30, 0xA0	; 160
    2912:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    2914:	40 81       	ld	r20, Z
    2916:	43 23       	and	r20, r19
    2918:	09 f0       	breq	.+2      	; 0x291c <__stack+0x201d>
    291a:	b2 c1       	rjmp	.+868    	; 0x2c80 <__stack+0x2381>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    291c:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    291e:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2920:	5b 98       	cbi	0x0b, 3	; 11
    2922:	eb ef       	ldi	r30, 0xFB	; 251
    2924:	e2 0f       	add	r30, r18
    2926:	f0 e0       	ldi	r31, 0x00	; 0
    2928:	e0 5a       	subi	r30, 0xA0	; 160
    292a:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    292c:	40 81       	ld	r20, Z
    292e:	43 23       	and	r20, r19
    2930:	09 f0       	breq	.+2      	; 0x2934 <__stack+0x2035>
    2932:	a4 c1       	rjmp	.+840    	; 0x2c7c <__stack+0x237d>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2934:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2936:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2938:	5b 98       	cbi	0x0b, 3	; 11
    293a:	ea ef       	ldi	r30, 0xFA	; 250
    293c:	e2 0f       	add	r30, r18
    293e:	f0 e0       	ldi	r31, 0x00	; 0
    2940:	e0 5a       	subi	r30, 0xA0	; 160
    2942:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    2944:	40 81       	ld	r20, Z
    2946:	43 23       	and	r20, r19
    2948:	09 f0       	breq	.+2      	; 0x294c <__stack+0x204d>
    294a:	96 c1       	rjmp	.+812    	; 0x2c78 <__stack+0x2379>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    294c:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    294e:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2950:	5b 98       	cbi	0x0b, 3	; 11
    2952:	e9 ef       	ldi	r30, 0xF9	; 249
    2954:	e2 0f       	add	r30, r18
    2956:	f0 e0       	ldi	r31, 0x00	; 0
    2958:	e0 5a       	subi	r30, 0xA0	; 160
    295a:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    295c:	40 81       	ld	r20, Z
    295e:	43 23       	and	r20, r19
    2960:	f1 f4       	brne	.+60     	; 0x299e <__stack+0x209f>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2962:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2964:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2966:	5b 98       	cbi	0x0b, 3	; 11
				//toggle the clock pin
				pinWrite(clock_pin, HIGH);
				pinWrite(clock_pin, LOW);
				pos--;
    2968:	28 50       	subi	r18, 0x08	; 8
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    296a:	5a 9a       	sbi	0x0b, 2	; 11
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
    296c:	2f 3f       	cpi	r18, 0xFF	; 255
    296e:	f1 f0       	breq	.+60     	; 0x29ac <__stack+0x20ad>
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2970:	5a 98       	cbi	0x0b, 2	; 11
			pinWrite(latch_pin, LOW);
			for(bit = 0; bit <= FONT_HEIGHT ; bit++){
				pinWrite(data_pin,((*(p+pos)) & (1 << byte)));
    2972:	e2 2f       	mov	r30, r18
    2974:	f0 e0       	ldi	r31, 0x00	; 0
    2976:	e0 5a       	subi	r30, 0xA0	; 160
    2978:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    297a:	40 81       	ld	r20, Z
    297c:	43 23       	and	r20, r19
    297e:	09 f4       	brne	.+2      	; 0x2982 <__stack+0x2083>
    2980:	9d cf       	rjmp	.-198    	; 0x28bc <__stack+0x1fbd>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2982:	59 9a       	sbi	0x0b, 1	; 11
    2984:	9c cf       	rjmp	.-200    	; 0x28be <__stack+0x1fbf>
    2986:	59 9a       	sbi	0x0b, 1	; 11
    2988:	0f ce       	rjmp	.-994    	; 0x25a8 <__stack+0x1ca9>
    298a:	59 9a       	sbi	0x0b, 1	; 11
    298c:	01 ce       	rjmp	.-1022   	; 0x2590 <__stack+0x1c91>
    298e:	59 9a       	sbi	0x0b, 1	; 11
    2990:	f3 cd       	rjmp	.-1050   	; 0x2578 <__stack+0x1c79>
    2992:	59 9a       	sbi	0x0b, 1	; 11
    2994:	e5 cd       	rjmp	.-1078   	; 0x2560 <__stack+0x1c61>
    2996:	59 9a       	sbi	0x0b, 1	; 11
    2998:	d7 cd       	rjmp	.-1106   	; 0x2548 <__stack+0x1c49>
    299a:	59 9a       	sbi	0x0b, 1	; 11
    299c:	c9 cd       	rjmp	.-1134   	; 0x2530 <__stack+0x1c31>
    299e:	59 9a       	sbi	0x0b, 1	; 11
    29a0:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    29a2:	5b 98       	cbi	0x0b, 3	; 11
				//toggle the clock pin
				pinWrite(clock_pin, HIGH);
				pinWrite(clock_pin, LOW);
				pos--;
    29a4:	28 50       	subi	r18, 0x08	; 8
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    29a6:	5a 9a       	sbi	0x0b, 2	; 11
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
    29a8:	2f 3f       	cpi	r18, 0xFF	; 255
    29aa:	11 f7       	brne	.-60     	; 0x2970 <__stack+0x2071>
    29ac:	a4 e0       	ldi	r26, 0x04	; 4
    29ae:	b1 e0       	ldi	r27, 0x01	; 1
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    29b0:	ed 91       	ld	r30, X+
    29b2:	ee 23       	and	r30, r30
    29b4:	09 f1       	breq	.+66     	; 0x29f8 <__stack+0x20f9>
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    29b6:	ec 3c       	cpi	r30, 0xCC	; 204
    29b8:	d8 f7       	brcc	.-10     	; 0x29b0 <__stack+0x20b1>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    29ba:	27 e0       	ldi	r18, 0x07	; 7
    29bc:	e2 9f       	mul	r30, r18
    29be:	f0 01       	movw	r30, r0
    29c0:	11 24       	eor	r1, r1
    29c2:	af 01       	movw	r20, r30
    29c4:	4c 5a       	subi	r20, 0xAC	; 172
    29c6:	5e 4f       	sbci	r21, 0xFE	; 254
    29c8:	2a 01       	movw	r4, r20
    29ca:	fa 01       	movw	r30, r20
    29cc:	42 81       	ldd	r20, Z+2	; 0x02
    29ce:	53 81       	ldd	r21, Z+3	; 0x03
    29d0:	fa 01       	movw	r30, r20
    29d2:	30 81       	ld	r19, Z
    29d4:	22 24       	eor	r2, r2
    29d6:	23 94       	inc	r2
    29d8:	31 2c       	mov	r3, r1
    29da:	f2 01       	movw	r30, r4
    29dc:	06 80       	ldd	r0, Z+6	; 0x06
    29de:	02 c0       	rjmp	.+4      	; 0x29e4 <__stack+0x20e5>
    29e0:	22 0c       	add	r2, r2
    29e2:	33 1c       	adc	r3, r3
    29e4:	0a 94       	dec	r0
    29e6:	e2 f7       	brpl	.-8      	; 0x29e0 <__stack+0x20e1>
    29e8:	22 2d       	mov	r18, r2
    29ea:	20 95       	com	r18
    29ec:	23 23       	and	r18, r19
    29ee:	fa 01       	movw	r30, r20
    29f0:	20 83       	st	Z, r18
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    29f2:	ed 91       	ld	r30, X+
    29f4:	e1 11       	cpse	r30, r1
    29f6:	df cf       	rjmp	.-66     	; 0x29b6 <__stack+0x20b7>
/* Multiplexing method                                                  */
/************************************************************************/
static inline void MultiPlex(uint8_t *pin)
{
	pinsMultiWrite(plex_pins, LOW);
	pinWrite(plex_pins[*pin], HIGH);
    29f8:	db 01       	movw	r26, r22
    29fa:	ed 91       	ld	r30, X+
    29fc:	bd 01       	movw	r22, r26
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    29fe:	ec 3c       	cpi	r30, 0xCC	; 204
    2a00:	08 f4       	brcc	.+2      	; 0x2a04 <__stack+0x2105>
    2a02:	46 c1       	rjmp	.+652    	; 0x2c90 <__stack+0x2391>
	delay(delayms);
    2a04:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    2a08:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
/*  delay                                                               */
/************************************************************************/
int delayms = 1;
static inline void delay(int dl)
{
	while(dl >= 0)
    2a0c:	37 fd       	sbrc	r19, 7
    2a0e:	09 c0       	rjmp	.+18     	; 0x2a22 <__stack+0x2123>
    2a10:	ef e9       	ldi	r30, 0x9F	; 159
    2a12:	ff e0       	ldi	r31, 0x0F	; 15
    2a14:	31 97       	sbiw	r30, 0x01	; 1
    2a16:	f1 f7       	brne	.-4      	; 0x2a14 <__stack+0x2115>
    2a18:	00 c0       	rjmp	.+0      	; 0x2a1a <__stack+0x211b>
    2a1a:	00 00       	nop
	{
		_delay_ms(1);
		dl--;
    2a1c:	21 50       	subi	r18, 0x01	; 1
    2a1e:	31 09       	sbc	r19, r1
    2a20:	b8 f7       	brcc	.-18     	; 0x2a10 <__stack+0x2111>
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
    2a22:	a4 e0       	ldi	r26, 0x04	; 4
    2a24:	b1 e0       	ldi	r27, 0x01	; 1
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    2a26:	ed 91       	ld	r30, X+
    2a28:	ee 23       	and	r30, r30
    2a2a:	09 f1       	breq	.+66     	; 0x2a6e <__stack+0x216f>
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    2a2c:	ec 3c       	cpi	r30, 0xCC	; 204
    2a2e:	d8 f7       	brcc	.-10     	; 0x2a26 <__stack+0x2127>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2a30:	27 e0       	ldi	r18, 0x07	; 7
    2a32:	e2 9f       	mul	r30, r18
    2a34:	f0 01       	movw	r30, r0
    2a36:	11 24       	eor	r1, r1
    2a38:	af 01       	movw	r20, r30
    2a3a:	4c 5a       	subi	r20, 0xAC	; 172
    2a3c:	5e 4f       	sbci	r21, 0xFE	; 254
    2a3e:	2a 01       	movw	r4, r20
    2a40:	fa 01       	movw	r30, r20
    2a42:	42 81       	ldd	r20, Z+2	; 0x02
    2a44:	53 81       	ldd	r21, Z+3	; 0x03
    2a46:	fa 01       	movw	r30, r20
    2a48:	30 81       	ld	r19, Z
    2a4a:	22 24       	eor	r2, r2
    2a4c:	23 94       	inc	r2
    2a4e:	31 2c       	mov	r3, r1
    2a50:	f2 01       	movw	r30, r4
    2a52:	06 80       	ldd	r0, Z+6	; 0x06
    2a54:	02 c0       	rjmp	.+4      	; 0x2a5a <__stack+0x215b>
    2a56:	22 0c       	add	r2, r2
    2a58:	33 1c       	adc	r3, r3
    2a5a:	0a 94       	dec	r0
    2a5c:	e2 f7       	brpl	.-8      	; 0x2a56 <__stack+0x2157>
    2a5e:	22 2d       	mov	r18, r2
    2a60:	20 95       	com	r18
    2a62:	23 23       	and	r18, r19
    2a64:	fa 01       	movw	r30, r20
    2a66:	20 83       	st	Z, r18
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    2a68:	ed 91       	ld	r30, X+
    2a6a:	e1 11       	cpse	r30, r1
    2a6c:	df cf       	rjmp	.-66     	; 0x2a2c <__stack+0x212d>
    2a6e:	29 e0       	ldi	r18, 0x09	; 9
    2a70:	30 e0       	ldi	r19, 0x00	; 0
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2a72:	5a 98       	cbi	0x0b, 2	; 11
    2a74:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2a76:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2a78:	5b 98       	cbi	0x0b, 3	; 11
    2a7a:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2a7c:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2a7e:	5b 98       	cbi	0x0b, 3	; 11
    2a80:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2a82:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2a84:	5b 98       	cbi	0x0b, 3	; 11
    2a86:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2a88:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2a8a:	5b 98       	cbi	0x0b, 3	; 11
    2a8c:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2a8e:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2a90:	5b 98       	cbi	0x0b, 3	; 11
    2a92:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2a94:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2a96:	5b 98       	cbi	0x0b, 3	; 11
    2a98:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2a9a:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2a9c:	5b 98       	cbi	0x0b, 3	; 11
    2a9e:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2aa0:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2aa2:	5b 98       	cbi	0x0b, 3	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2aa4:	5a 9a       	sbi	0x0b, 2	; 11
    2aa6:	21 50       	subi	r18, 0x01	; 1
    2aa8:	31 09       	sbc	r19, r1
/* Clear Display                                                        */
/************************************************************************/
static inline void Clear(){
	int x, y = 0;
	pinsMultiWrite(plex_pins, LOW);
	for(x = 0; x < (SH_REG + 1); x++) {
    2aaa:	19 f7       	brne	.-58     	; 0x2a72 <__stack+0x2173>
    2aac:	01 96       	adiw	r24, 0x01	; 1
{
	uint8_t byte, index, bit = 0;
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
    2aae:	87 30       	cpi	r24, 0x07	; 7
    2ab0:	91 05       	cpc	r25, r1
    2ab2:	09 f0       	breq	.+2      	; 0x2ab6 <__stack+0x21b7>
    2ab4:	fb ce       	rjmp	.-522    	; 0x28ac <__stack+0x1fad>
			pinWrite(latch_pin, HIGH);
		}
		MultiPlex(&byte);
		Clear();
	}
	delayms = 1;
    2ab6:	22 24       	eor	r2, r2
    2ab8:	23 94       	inc	r2
    2aba:	31 2c       	mov	r3, r1
    2abc:	30 92 01 01 	sts	0x0101, r3	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    2ac0:	20 92 00 01 	sts	0x0100, r2	; 0x800100 <__DATA_REGION_ORIGIN__>
    2ac4:	aa 94       	dec	r10
}
}*/
static inline void HoldDisplayBuffer(const uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
    2ac6:	a1 10       	cpse	r10, r1
    2ac8:	ed ce       	rjmp	.-550    	; 0x28a4 <__stack+0x1fa5>
    2aca:	d8 01       	movw	r26, r16
    2acc:	eb 2d       	mov	r30, r11
    2ace:	1d 92       	st	X+, r1
    2ad0:	ea 95       	dec	r30
    2ad2:	e9 f7       	brne	.-6      	; 0x2ace <__stack+0x21cf>
    2ad4:	20 e1       	ldi	r18, 0x10	; 16
    2ad6:	83 e5       	ldi	r24, 0x53	; 83
/* returns the index of the first byte of the requested character       */
/************************************************************************/
uint8_t CharStart(const char *p)
{
	/*if(*p == ' ') return 0;
	else*/ return (uint8_t) (( *p - ' '));
    2ad8:	80 52       	subi	r24, 0x20	; 32
		s_pos = (MT_SIZE - (c_len * FONT_WIDTH) - c_len - 2);
	}
	pos_index = s_pos;
	ClearStringBuffer();
	while(*ch){
		index = CharStart(ch++) * FONT_WIDTH;
    2ada:	f5 e0       	ldi	r31, 0x05	; 5
    2adc:	8f 9f       	mul	r24, r31
    2ade:	c0 01       	movw	r24, r0
    2ae0:	11 24       	eor	r1, r1
		for(len = 0; len < FONT_WIDTH; len++){
			stringbuffer[pos_index] = (uint8_t)(pgm_read_byte((font_5x7 + index)));
    2ae2:	fc 01       	movw	r30, r24
    2ae4:	e8 59       	subi	r30, 0x98	; 152
    2ae6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae8:	34 91       	lpm	r19, Z
    2aea:	e2 2f       	mov	r30, r18
    2aec:	f0 e0       	ldi	r31, 0x00	; 0
    2aee:	e0 5a       	subi	r30, 0xA0	; 160
    2af0:	fd 4f       	sbci	r31, 0xFD	; 253
    2af2:	30 83       	st	Z, r19
    2af4:	fc 01       	movw	r30, r24
    2af6:	e7 59       	subi	r30, 0x97	; 151
    2af8:	ff 4f       	sbci	r31, 0xFF	; 255
    2afa:	34 91       	lpm	r19, Z
    2afc:	e1 e0       	ldi	r30, 0x01	; 1
    2afe:	e2 0f       	add	r30, r18
    2b00:	f0 e0       	ldi	r31, 0x00	; 0
    2b02:	e0 5a       	subi	r30, 0xA0	; 160
    2b04:	fd 4f       	sbci	r31, 0xFD	; 253
    2b06:	30 83       	st	Z, r19
    2b08:	fc 01       	movw	r30, r24
    2b0a:	e6 59       	subi	r30, 0x96	; 150
    2b0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b0e:	34 91       	lpm	r19, Z
    2b10:	e2 e0       	ldi	r30, 0x02	; 2
    2b12:	e2 0f       	add	r30, r18
    2b14:	f0 e0       	ldi	r31, 0x00	; 0
    2b16:	e0 5a       	subi	r30, 0xA0	; 160
    2b18:	fd 4f       	sbci	r31, 0xFD	; 253
    2b1a:	30 83       	st	Z, r19
    2b1c:	fc 01       	movw	r30, r24
    2b1e:	e5 59       	subi	r30, 0x95	; 149
    2b20:	ff 4f       	sbci	r31, 0xFF	; 255
    2b22:	34 91       	lpm	r19, Z
    2b24:	e3 e0       	ldi	r30, 0x03	; 3
    2b26:	e2 0f       	add	r30, r18
    2b28:	f0 e0       	ldi	r31, 0x00	; 0
    2b2a:	e0 5a       	subi	r30, 0xA0	; 160
    2b2c:	fd 4f       	sbci	r31, 0xFD	; 253
    2b2e:	30 83       	st	Z, r19
    2b30:	fc 01       	movw	r30, r24
    2b32:	e4 59       	subi	r30, 0x94	; 148
    2b34:	ff 4f       	sbci	r31, 0xFF	; 255
    2b36:	84 91       	lpm	r24, Z
    2b38:	e4 e0       	ldi	r30, 0x04	; 4
    2b3a:	e2 0f       	add	r30, r18
    2b3c:	f0 e0       	ldi	r31, 0x00	; 0
    2b3e:	e0 5a       	subi	r30, 0xA0	; 160
    2b40:	fd 4f       	sbci	r31, 0xFD	; 253
    2b42:	80 83       	st	Z, r24
			index++; pos_index++;
		}
		pos_index += 1; //space the characters
    2b44:	2a 5f       	subi	r18, 0xFA	; 250
	}else if(align == RIGHT){
		s_pos = (MT_SIZE - (c_len * FONT_WIDTH) - c_len - 2);
	}
	pos_index = s_pos;
	ClearStringBuffer();
	while(*ch){
    2b46:	d4 01       	movw	r26, r8
    2b48:	8d 91       	ld	r24, X+
    2b4a:	4d 01       	movw	r8, r26
    2b4c:	81 11       	cpse	r24, r1
    2b4e:	c4 cf       	rjmp	.-120    	; 0x2ad8 <__stack+0x21d9>
    2b50:	91 2c       	mov	r9, r1
    2b52:	80 e0       	ldi	r24, 0x00	; 0
    2b54:	90 e0       	ldi	r25, 0x00	; 0
{
	uint8_t index, begin, end = 0;
	//uint8_t *bf = buffer;
	for(index = 0; index < MT_SIZE; index++)
	{
		for(begin = 0; begin <= index; begin++) (*(bf + begin) = 0x00);
    2b56:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <bf>
    2b5a:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <bf+0x1>
    2b5e:	e8 0f       	add	r30, r24
    2b60:	f9 1f       	adc	r31, r25
    2b62:	10 82       	st	Z, r1
    2b64:	01 96       	adiw	r24, 0x01	; 1
    2b66:	98 16       	cp	r9, r24
    2b68:	b0 f7       	brcc	.-20     	; 0x2b56 <__stack+0x2257>
    2b6a:	49 2d       	mov	r20, r9
		for(end = index; end < MT_SIZE; end++) (*(bf + end) = (*((p+(end)))));
    2b6c:	84 2f       	mov	r24, r20
    2b6e:	90 e0       	ldi	r25, 0x00	; 0
    2b70:	fc 01       	movw	r30, r24
    2b72:	e0 5a       	subi	r30, 0xA0	; 160
    2b74:	fd 4f       	sbci	r31, 0xFD	; 253
    2b76:	20 81       	ld	r18, Z
    2b78:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <bf>
    2b7c:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <bf+0x1>
    2b80:	fb 01       	movw	r30, r22
    2b82:	e8 0f       	add	r30, r24
    2b84:	f9 1f       	adc	r31, r25
    2b86:	20 83       	st	Z, r18
    2b88:	4f 5f       	subi	r20, 0xFF	; 255
    2b8a:	40 34       	cpi	r20, 0x40	; 64
    2b8c:	79 f7       	brne	.-34     	; 0x2b6c <__stack+0x226d>
    2b8e:	fa e0       	ldi	r31, 0x0A	; 10
    2b90:	af 2e       	mov	r10, r31
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    2b92:	a4 e0       	ldi	r26, 0x04	; 4
    2b94:	2a 2e       	mov	r2, r26
    2b96:	a1 e0       	ldi	r26, 0x01	; 1
    2b98:	3a 2e       	mov	r3, r26
    2b9a:	20 e0       	ldi	r18, 0x00	; 0
    2b9c:	30 e0       	ldi	r19, 0x00	; 0
    2b9e:	91 e0       	ldi	r25, 0x01	; 1
    2ba0:	02 2e       	mov	r0, r18
    2ba2:	01 c0       	rjmp	.+2      	; 0x2ba6 <__stack+0x22a7>
    2ba4:	99 0f       	add	r25, r25
    2ba6:	0a 94       	dec	r0
    2ba8:	ea f7       	brpl	.-6      	; 0x2ba4 <__stack+0x22a5>
{
	uint8_t index, begin, end = 0;
	//uint8_t *bf = buffer;
	for(index = 0; index < MT_SIZE; index++)
	{
		for(begin = 0; begin <= index; begin++) (*(bf + begin) = 0x00);
    2baa:	8f e3       	ldi	r24, 0x3F	; 63
    2bac:	5a c0       	rjmp	.+180    	; 0x2c62 <__stack+0x2363>
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2bae:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2bb0:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2bb2:	5b 98       	cbi	0x0b, 3	; 11
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
			pinWrite(latch_pin, LOW);
			for(bit = 0; bit <= FONT_HEIGHT ; bit++){
				pinWrite(data_pin,((*(p+pos)) & (1 << byte)));
    2bb4:	ef ef       	ldi	r30, 0xFF	; 255
    2bb6:	e8 0f       	add	r30, r24
    2bb8:	f0 e0       	ldi	r31, 0x00	; 0
    2bba:	e0 56       	subi	r30, 0x60	; 96
    2bbc:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    2bbe:	40 81       	ld	r20, Z
    2bc0:	49 23       	and	r20, r25
    2bc2:	09 f0       	breq	.+2      	; 0x2bc6 <__stack+0x22c7>
    2bc4:	ea c1       	rjmp	.+980    	; 0x2f9a <__stack+0x269b>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2bc6:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2bc8:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2bca:	5b 98       	cbi	0x0b, 3	; 11
    2bcc:	ee ef       	ldi	r30, 0xFE	; 254
    2bce:	e8 0f       	add	r30, r24
    2bd0:	f0 e0       	ldi	r31, 0x00	; 0
    2bd2:	e0 56       	subi	r30, 0x60	; 96
    2bd4:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    2bd6:	40 81       	ld	r20, Z
    2bd8:	49 23       	and	r20, r25
    2bda:	09 f0       	breq	.+2      	; 0x2bde <__stack+0x22df>
    2bdc:	dc c1       	rjmp	.+952    	; 0x2f96 <__stack+0x2697>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2bde:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2be0:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2be2:	5b 98       	cbi	0x0b, 3	; 11
    2be4:	ed ef       	ldi	r30, 0xFD	; 253
    2be6:	e8 0f       	add	r30, r24
    2be8:	f0 e0       	ldi	r31, 0x00	; 0
    2bea:	e0 56       	subi	r30, 0x60	; 96
    2bec:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    2bee:	40 81       	ld	r20, Z
    2bf0:	49 23       	and	r20, r25
    2bf2:	09 f0       	breq	.+2      	; 0x2bf6 <__stack+0x22f7>
    2bf4:	ce c1       	rjmp	.+924    	; 0x2f92 <__stack+0x2693>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2bf6:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2bf8:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2bfa:	5b 98       	cbi	0x0b, 3	; 11
    2bfc:	ec ef       	ldi	r30, 0xFC	; 252
    2bfe:	e8 0f       	add	r30, r24
    2c00:	f0 e0       	ldi	r31, 0x00	; 0
    2c02:	e0 56       	subi	r30, 0x60	; 96
    2c04:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    2c06:	40 81       	ld	r20, Z
    2c08:	49 23       	and	r20, r25
    2c0a:	09 f0       	breq	.+2      	; 0x2c0e <__stack+0x230f>
    2c0c:	c0 c1       	rjmp	.+896    	; 0x2f8e <__stack+0x268f>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2c0e:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2c10:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2c12:	5b 98       	cbi	0x0b, 3	; 11
    2c14:	eb ef       	ldi	r30, 0xFB	; 251
    2c16:	e8 0f       	add	r30, r24
    2c18:	f0 e0       	ldi	r31, 0x00	; 0
    2c1a:	e0 56       	subi	r30, 0x60	; 96
    2c1c:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    2c1e:	40 81       	ld	r20, Z
    2c20:	49 23       	and	r20, r25
    2c22:	09 f0       	breq	.+2      	; 0x2c26 <__stack+0x2327>
    2c24:	b2 c1       	rjmp	.+868    	; 0x2f8a <__stack+0x268b>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2c26:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2c28:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2c2a:	5b 98       	cbi	0x0b, 3	; 11
    2c2c:	ea ef       	ldi	r30, 0xFA	; 250
    2c2e:	e8 0f       	add	r30, r24
    2c30:	f0 e0       	ldi	r31, 0x00	; 0
    2c32:	e0 56       	subi	r30, 0x60	; 96
    2c34:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    2c36:	40 81       	ld	r20, Z
    2c38:	49 23       	and	r20, r25
    2c3a:	09 f0       	breq	.+2      	; 0x2c3e <__stack+0x233f>
    2c3c:	a4 c1       	rjmp	.+840    	; 0x2f86 <__stack+0x2687>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2c3e:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2c40:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2c42:	5b 98       	cbi	0x0b, 3	; 11
    2c44:	e9 ef       	ldi	r30, 0xF9	; 249
    2c46:	e8 0f       	add	r30, r24
    2c48:	f0 e0       	ldi	r31, 0x00	; 0
    2c4a:	e0 56       	subi	r30, 0x60	; 96
    2c4c:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    2c4e:	40 81       	ld	r20, Z
    2c50:	49 23       	and	r20, r25
    2c52:	91 f5       	brne	.+100    	; 0x2cb8 <__stack+0x23b9>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2c54:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2c56:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2c58:	5b 98       	cbi	0x0b, 3	; 11
				//toggle the clock pin
				pinWrite(clock_pin, HIGH);
				pinWrite(clock_pin, LOW);
				pos--;
    2c5a:	88 50       	subi	r24, 0x08	; 8
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2c5c:	5a 9a       	sbi	0x0b, 2	; 11
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
    2c5e:	8f 3f       	cpi	r24, 0xFF	; 255
    2c60:	91 f1       	breq	.+100    	; 0x2cc6 <__stack+0x23c7>
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2c62:	5a 98       	cbi	0x0b, 2	; 11
			pinWrite(latch_pin, LOW);
			for(bit = 0; bit <= FONT_HEIGHT ; bit++){
				pinWrite(data_pin,((*(p+pos)) & (1 << byte)));
    2c64:	e8 2f       	mov	r30, r24
    2c66:	f0 e0       	ldi	r31, 0x00	; 0
    2c68:	e0 56       	subi	r30, 0x60	; 96
    2c6a:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    2c6c:	40 81       	ld	r20, Z
    2c6e:	49 23       	and	r20, r25
    2c70:	09 f4       	brne	.+2      	; 0x2c74 <__stack+0x2375>
    2c72:	9d cf       	rjmp	.-198    	; 0x2bae <__stack+0x22af>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2c74:	59 9a       	sbi	0x0b, 1	; 11
    2c76:	9c cf       	rjmp	.-200    	; 0x2bb0 <__stack+0x22b1>
    2c78:	59 9a       	sbi	0x0b, 1	; 11
    2c7a:	69 ce       	rjmp	.-814    	; 0x294e <__stack+0x204f>
    2c7c:	59 9a       	sbi	0x0b, 1	; 11
    2c7e:	5b ce       	rjmp	.-842    	; 0x2936 <__stack+0x2037>
    2c80:	59 9a       	sbi	0x0b, 1	; 11
    2c82:	4d ce       	rjmp	.-870    	; 0x291e <__stack+0x201f>
    2c84:	59 9a       	sbi	0x0b, 1	; 11
    2c86:	3f ce       	rjmp	.-898    	; 0x2906 <__stack+0x2007>
    2c88:	59 9a       	sbi	0x0b, 1	; 11
    2c8a:	31 ce       	rjmp	.-926    	; 0x28ee <__stack+0x1fef>
    2c8c:	59 9a       	sbi	0x0b, 1	; 11
    2c8e:	23 ce       	rjmp	.-954    	; 0x28d6 <__stack+0x1fd7>
    2c90:	b7 e0       	ldi	r27, 0x07	; 7
    2c92:	eb 9f       	mul	r30, r27
    2c94:	f0 01       	movw	r30, r0
    2c96:	11 24       	eor	r1, r1
    2c98:	ec 5a       	subi	r30, 0xAC	; 172
    2c9a:	fe 4f       	sbci	r31, 0xFE	; 254
    2c9c:	a2 81       	ldd	r26, Z+2	; 0x02
    2c9e:	b3 81       	ldd	r27, Z+3	; 0x03
    2ca0:	4c 91       	ld	r20, X
    2ca2:	21 e0       	ldi	r18, 0x01	; 1
    2ca4:	30 e0       	ldi	r19, 0x00	; 0
    2ca6:	06 80       	ldd	r0, Z+6	; 0x06
    2ca8:	02 c0       	rjmp	.+4      	; 0x2cae <__stack+0x23af>
    2caa:	22 0f       	add	r18, r18
    2cac:	33 1f       	adc	r19, r19
    2cae:	0a 94       	dec	r0
    2cb0:	e2 f7       	brpl	.-8      	; 0x2caa <__stack+0x23ab>
    2cb2:	24 2b       	or	r18, r20
    2cb4:	2c 93       	st	X, r18
    2cb6:	a6 ce       	rjmp	.-692    	; 0x2a04 <__stack+0x2105>
    2cb8:	59 9a       	sbi	0x0b, 1	; 11
    2cba:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2cbc:	5b 98       	cbi	0x0b, 3	; 11
				//toggle the clock pin
				pinWrite(clock_pin, HIGH);
				pinWrite(clock_pin, LOW);
				pos--;
    2cbe:	88 50       	subi	r24, 0x08	; 8
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2cc0:	5a 9a       	sbi	0x0b, 2	; 11
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
    2cc2:	8f 3f       	cpi	r24, 0xFF	; 255
    2cc4:	71 f6       	brne	.-100    	; 0x2c62 <__stack+0x2363>
    2cc6:	a4 e0       	ldi	r26, 0x04	; 4
    2cc8:	b1 e0       	ldi	r27, 0x01	; 1
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    2cca:	ed 91       	ld	r30, X+
    2ccc:	ee 23       	and	r30, r30
    2cce:	01 f1       	breq	.+64     	; 0x2d10 <__stack+0x2411>
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    2cd0:	ec 3c       	cpi	r30, 0xCC	; 204
    2cd2:	d8 f7       	brcc	.-10     	; 0x2cca <__stack+0x23cb>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2cd4:	47 e0       	ldi	r20, 0x07	; 7
    2cd6:	e4 9f       	mul	r30, r20
    2cd8:	f0 01       	movw	r30, r0
    2cda:	11 24       	eor	r1, r1
    2cdc:	bf 01       	movw	r22, r30
    2cde:	6c 5a       	subi	r22, 0xAC	; 172
    2ce0:	7e 4f       	sbci	r23, 0xFE	; 254
    2ce2:	fb 01       	movw	r30, r22
    2ce4:	42 81       	ldd	r20, Z+2	; 0x02
    2ce6:	53 81       	ldd	r21, Z+3	; 0x03
    2ce8:	fa 01       	movw	r30, r20
    2cea:	90 81       	ld	r25, Z
    2cec:	44 24       	eor	r4, r4
    2cee:	43 94       	inc	r4
    2cf0:	51 2c       	mov	r5, r1
    2cf2:	fb 01       	movw	r30, r22
    2cf4:	06 80       	ldd	r0, Z+6	; 0x06
    2cf6:	02 c0       	rjmp	.+4      	; 0x2cfc <__stack+0x23fd>
    2cf8:	44 0c       	add	r4, r4
    2cfa:	55 1c       	adc	r5, r5
    2cfc:	0a 94       	dec	r0
    2cfe:	e2 f7       	brpl	.-8      	; 0x2cf8 <__stack+0x23f9>
    2d00:	84 2d       	mov	r24, r4
    2d02:	80 95       	com	r24
    2d04:	89 23       	and	r24, r25
    2d06:	fa 01       	movw	r30, r20
    2d08:	80 83       	st	Z, r24
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    2d0a:	ed 91       	ld	r30, X+
    2d0c:	e1 11       	cpse	r30, r1
    2d0e:	e0 cf       	rjmp	.-64     	; 0x2cd0 <__stack+0x23d1>
/* Multiplexing method                                                  */
/************************************************************************/
static inline void MultiPlex(uint8_t *pin)
{
	pinsMultiWrite(plex_pins, LOW);
	pinWrite(plex_pins[*pin], HIGH);
    2d10:	d1 01       	movw	r26, r2
    2d12:	ed 91       	ld	r30, X+
    2d14:	1d 01       	movw	r2, r26
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    2d16:	ec 3c       	cpi	r30, 0xCC	; 204
    2d18:	08 f4       	brcc	.+2      	; 0x2d1c <__stack+0x241d>
    2d1a:	41 c1       	rjmp	.+642    	; 0x2f9e <__stack+0x269f>
	delay(delayms);
    2d1c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    2d20:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
/*  delay                                                               */
/************************************************************************/
int delayms = 1;
static inline void delay(int dl)
{
	while(dl >= 0)
    2d24:	97 fd       	sbrc	r25, 7
    2d26:	08 c0       	rjmp	.+16     	; 0x2d38 <__stack+0x2439>
    2d28:	ef e9       	ldi	r30, 0x9F	; 159
    2d2a:	ff e0       	ldi	r31, 0x0F	; 15
    2d2c:	31 97       	sbiw	r30, 0x01	; 1
    2d2e:	f1 f7       	brne	.-4      	; 0x2d2c <__stack+0x242d>
    2d30:	00 c0       	rjmp	.+0      	; 0x2d32 <__stack+0x2433>
    2d32:	00 00       	nop
	{
		_delay_ms(1);
		dl--;
    2d34:	01 97       	sbiw	r24, 0x01	; 1
    2d36:	c0 f7       	brcc	.-16     	; 0x2d28 <__stack+0x2429>
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
    2d38:	a4 e0       	ldi	r26, 0x04	; 4
    2d3a:	b1 e0       	ldi	r27, 0x01	; 1
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    2d3c:	ed 91       	ld	r30, X+
    2d3e:	ee 23       	and	r30, r30
    2d40:	01 f1       	breq	.+64     	; 0x2d82 <__stack+0x2483>
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    2d42:	ec 3c       	cpi	r30, 0xCC	; 204
    2d44:	d8 f7       	brcc	.-10     	; 0x2d3c <__stack+0x243d>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2d46:	47 e0       	ldi	r20, 0x07	; 7
    2d48:	e4 9f       	mul	r30, r20
    2d4a:	f0 01       	movw	r30, r0
    2d4c:	11 24       	eor	r1, r1
    2d4e:	bf 01       	movw	r22, r30
    2d50:	6c 5a       	subi	r22, 0xAC	; 172
    2d52:	7e 4f       	sbci	r23, 0xFE	; 254
    2d54:	fb 01       	movw	r30, r22
    2d56:	42 81       	ldd	r20, Z+2	; 0x02
    2d58:	53 81       	ldd	r21, Z+3	; 0x03
    2d5a:	fa 01       	movw	r30, r20
    2d5c:	90 81       	ld	r25, Z
    2d5e:	44 24       	eor	r4, r4
    2d60:	43 94       	inc	r4
    2d62:	51 2c       	mov	r5, r1
    2d64:	fb 01       	movw	r30, r22
    2d66:	06 80       	ldd	r0, Z+6	; 0x06
    2d68:	02 c0       	rjmp	.+4      	; 0x2d6e <__stack+0x246f>
    2d6a:	44 0c       	add	r4, r4
    2d6c:	55 1c       	adc	r5, r5
    2d6e:	0a 94       	dec	r0
    2d70:	e2 f7       	brpl	.-8      	; 0x2d6a <__stack+0x246b>
    2d72:	84 2d       	mov	r24, r4
    2d74:	80 95       	com	r24
    2d76:	89 23       	and	r24, r25
    2d78:	fa 01       	movw	r30, r20
    2d7a:	80 83       	st	Z, r24
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    2d7c:	ed 91       	ld	r30, X+
    2d7e:	e1 11       	cpse	r30, r1
    2d80:	e0 cf       	rjmp	.-64     	; 0x2d42 <__stack+0x2443>
    2d82:	89 e0       	ldi	r24, 0x09	; 9
    2d84:	90 e0       	ldi	r25, 0x00	; 0
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2d86:	5a 98       	cbi	0x0b, 2	; 11
    2d88:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2d8a:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2d8c:	5b 98       	cbi	0x0b, 3	; 11
    2d8e:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2d90:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2d92:	5b 98       	cbi	0x0b, 3	; 11
    2d94:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2d96:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2d98:	5b 98       	cbi	0x0b, 3	; 11
    2d9a:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2d9c:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2d9e:	5b 98       	cbi	0x0b, 3	; 11
    2da0:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2da2:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2da4:	5b 98       	cbi	0x0b, 3	; 11
    2da6:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2da8:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2daa:	5b 98       	cbi	0x0b, 3	; 11
    2dac:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2dae:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2db0:	5b 98       	cbi	0x0b, 3	; 11
    2db2:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2db4:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2db6:	5b 98       	cbi	0x0b, 3	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2db8:	5a 9a       	sbi	0x0b, 2	; 11
    2dba:	01 97       	sbiw	r24, 0x01	; 1
/* Clear Display                                                        */
/************************************************************************/
static inline void Clear(){
	int x, y = 0;
	pinsMultiWrite(plex_pins, LOW);
	for(x = 0; x < (SH_REG + 1); x++) {
    2dbc:	21 f7       	brne	.-56     	; 0x2d86 <__stack+0x2487>
    2dbe:	2f 5f       	subi	r18, 0xFF	; 255
    2dc0:	3f 4f       	sbci	r19, 0xFF	; 255
{
	uint8_t byte, index, bit = 0;
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
    2dc2:	27 30       	cpi	r18, 0x07	; 7
    2dc4:	31 05       	cpc	r19, r1
    2dc6:	09 f0       	breq	.+2      	; 0x2dca <__stack+0x24cb>
    2dc8:	ea ce       	rjmp	.-556    	; 0x2b9e <__stack+0x229f>
			pinWrite(latch_pin, HIGH);
		}
		MultiPlex(&byte);
		Clear();
	}
	delayms = 1;
    2dca:	f0 92 01 01 	sts	0x0101, r15	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    2dce:	e0 92 00 01 	sts	0x0100, r14	; 0x800100 <__DATA_REGION_ORIGIN__>
    2dd2:	aa 94       	dec	r10
}
}*/
static inline void HoldDisplayBuffer(const uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
    2dd4:	a1 10       	cpse	r10, r1
    2dd6:	dd ce       	rjmp	.-582    	; 0x2b92 <__stack+0x2293>
/************************************************************************/
void DeleteRight(const uint8_t *p, uint8_t time)
{
	uint8_t index, begin, end = 0;
	//uint8_t *bf = buffer;
	for(index = 0; index < MT_SIZE; index++)
    2dd8:	93 94       	inc	r9
    2dda:	f0 e4       	ldi	r31, 0x40	; 64
    2ddc:	9f 12       	cpse	r9, r31
    2dde:	b9 ce       	rjmp	.-654    	; 0x2b52 <__stack+0x2253>
    2de0:	a1 ee       	ldi	r26, 0xE1	; 225
    2de2:	b2 e0       	ldi	r27, 0x02	; 2
    2de4:	e9 2d       	mov	r30, r9
    2de6:	1d 92       	st	X+, r1
    2de8:	ea 95       	dec	r30
    2dea:	e9 f7       	brne	.-6      	; 0x2de6 <__stack+0x24e7>
    2dec:	a0 e2       	ldi	r26, 0x20	; 32
    2dee:	b2 e0       	ldi	r27, 0x02	; 2
    2df0:	1d 92       	st	X+, r1
    2df2:	9a 94       	dec	r9
    2df4:	e9 f7       	brne	.-6      	; 0x2df0 <__stack+0x24f1>
    2df6:	2a e3       	ldi	r18, 0x3A	; 58
    2df8:	31 e0       	ldi	r19, 0x01	; 1
    2dfa:	3a 83       	std	Y+2, r19	; 0x02
    2dfc:	29 83       	std	Y+1, r18	; 0x01
    2dfe:	d9 01       	movw	r26, r18
void ScrollLongLeft(const char *ch, uint8_t time)
{
	uint8_t *chbuffer;// = CharBytes(ch++);
	InitializeBuffers();
	int len = 0;
	while(*ch){
    2e00:	8d 91       	ld	r24, X+
    2e02:	ba 83       	std	Y+2, r27	; 0x02
    2e04:	a9 83       	std	Y+1, r26	; 0x01
    2e06:	88 23       	and	r24, r24
    2e08:	09 f4       	brne	.+2      	; 0x2e0c <__stack+0x250d>
    2e0a:	6b c1       	rjmp	.+726    	; 0x30e2 <__stack+0x27e3>
/* returns the index of the first byte of the requested character       */
/************************************************************************/
uint8_t CharStart(const char *p)
{
	/*if(*p == ' ') return 0;
	else*/ return (uint8_t) (( *p - ' '));
    2e0c:	80 52       	subi	r24, 0x20	; 32
/************************************************************************/
/* return char bytes                                                    */
/************************************************************************/
static inline uint8_t *CharBytes(const char *ch)
{
	unsigned int index = (CharStart(ch) * FONT_WIDTH);
    2e0e:	35 e0       	ldi	r19, 0x05	; 5
    2e10:	83 9f       	mul	r24, r19
    2e12:	c0 01       	movw	r24, r0
    2e14:	11 24       	eor	r1, r1
	int len = 0;
	ClearCharBuffer();
	for(len=0; len<FONT_WIDTH; len++){
		charbuffer[len] = (uint8_t)(pgm_read_byte((font_5x7 + index)));
    2e16:	fc 01       	movw	r30, r24
    2e18:	e8 59       	subi	r30, 0x98	; 152
    2e1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e1c:	e4 91       	lpm	r30, Z
    2e1e:	e0 93 21 03 	sts	0x0321, r30	; 0x800321 <charbuffer>
    2e22:	fc 01       	movw	r30, r24
    2e24:	e7 59       	subi	r30, 0x97	; 151
    2e26:	ff 4f       	sbci	r31, 0xFF	; 255
    2e28:	e4 91       	lpm	r30, Z
    2e2a:	e0 93 22 03 	sts	0x0322, r30	; 0x800322 <charbuffer+0x1>
    2e2e:	fc 01       	movw	r30, r24
    2e30:	e6 59       	subi	r30, 0x96	; 150
    2e32:	ff 4f       	sbci	r31, 0xFF	; 255
    2e34:	e4 91       	lpm	r30, Z
    2e36:	e0 93 23 03 	sts	0x0323, r30	; 0x800323 <charbuffer+0x2>
    2e3a:	fc 01       	movw	r30, r24
    2e3c:	e5 59       	subi	r30, 0x95	; 149
    2e3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e40:	e4 91       	lpm	r30, Z
    2e42:	e0 93 24 03 	sts	0x0324, r30	; 0x800324 <charbuffer+0x3>
    2e46:	fc 01       	movw	r30, r24
    2e48:	e4 59       	subi	r30, 0x94	; 148
    2e4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e4c:	e4 91       	lpm	r30, Z
    2e4e:	e0 93 25 03 	sts	0x0325, r30	; 0x800325 <charbuffer+0x4>
    2e52:	f1 e2       	ldi	r31, 0x21	; 33
    2e54:	8f 2e       	mov	r8, r31
    2e56:	f3 e0       	ldi	r31, 0x03	; 3
    2e58:	9f 2e       	mov	r9, r31
		chbuffer = CharBytes(ch++);
		for(len =0; len<FONT_WIDTH; len++){
			HoldDisplayBuffer(ArrayShiftRightInsert(*(chbuffer+len)), time);
    2e5a:	d4 01       	movw	r26, r8
    2e5c:	9d 91       	ld	r25, X+
    2e5e:	4d 01       	movw	r8, r26
    2e60:	80 e4       	ldi	r24, 0x40	; 64
    2e62:	e1 ee       	ldi	r30, 0xE1	; 225
    2e64:	f2 e0       	ldi	r31, 0x02	; 2
    2e66:	a0 e2       	ldi	r26, 0x20	; 32
    2e68:	b2 e0       	ldi	r27, 0x02	; 2
    2e6a:	01 90       	ld	r0, Z+
    2e6c:	0d 92       	st	X+, r0
    2e6e:	8a 95       	dec	r24
    2e70:	e1 f7       	brne	.-8      	; 0x2e6a <__stack+0x256b>
/************************************************************************/
uint8_t *ArrayShiftRightInsert(const uint8_t data)
{
	uint8_t index = MT_SIZE -1;
	FillCurrentArray();
	updatedBufferArray[index--] = data;
    2e72:	90 93 20 03 	sts	0x0320, r25	; 0x800320 <updatedBufferArray+0x3f>
	for(; index>=0; index--){
		updatedBufferArray[index] = currentArray[index+1];
    2e76:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <__data_end+0x3f>
    2e7a:	80 93 1f 03 	sts	0x031F, r24	; 0x80031f <updatedBufferArray+0x3e>
/************************************************************************/
uint8_t *ArrayShiftRightInsert(const uint8_t data)
{
	uint8_t index = MT_SIZE -1;
	FillCurrentArray();
	updatedBufferArray[index--] = data;
    2e7e:	2e e3       	ldi	r18, 0x3E	; 62
	for(; index>=0; index--){
    2e80:	21 50       	subi	r18, 0x01	; 1
		updatedBufferArray[index] = currentArray[index+1];
    2e82:	82 2f       	mov	r24, r18
    2e84:	90 e0       	ldi	r25, 0x00	; 0
    2e86:	fc 01       	movw	r30, r24
    2e88:	ef 51       	subi	r30, 0x1F	; 31
    2e8a:	fd 4f       	sbci	r31, 0xFD	; 253
    2e8c:	dc 01       	movw	r26, r24
    2e8e:	a0 5e       	subi	r26, 0xE0	; 224
    2e90:	bd 4f       	sbci	r27, 0xFD	; 253
    2e92:	11 96       	adiw	r26, 0x01	; 1
    2e94:	8c 91       	ld	r24, X
    2e96:	80 83       	st	Z, r24
		if(index==0) break;
    2e98:	21 11       	cpse	r18, r1
    2e9a:	f2 cf       	rjmp	.-28     	; 0x2e80 <__stack+0x2581>
    2e9c:	aa e0       	ldi	r26, 0x0A	; 10
    2e9e:	aa 2e       	mov	r10, r26
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    2ea0:	24 e0       	ldi	r18, 0x04	; 4
    2ea2:	31 e0       	ldi	r19, 0x01	; 1
    2ea4:	80 e0       	ldi	r24, 0x00	; 0
    2ea6:	90 e0       	ldi	r25, 0x00	; 0
    2ea8:	51 e0       	ldi	r21, 0x01	; 1
    2eaa:	08 2e       	mov	r0, r24
    2eac:	01 c0       	rjmp	.+2      	; 0x2eb0 <__stack+0x25b1>
    2eae:	55 0f       	add	r21, r21
    2eb0:	0a 94       	dec	r0
    2eb2:	ea f7       	brpl	.-6      	; 0x2eae <__stack+0x25af>
/************************************************************************/
uint8_t *ArrayShiftRightInsert(const uint8_t data)
{
	uint8_t index = MT_SIZE -1;
	FillCurrentArray();
	updatedBufferArray[index--] = data;
    2eb4:	4f e3       	ldi	r20, 0x3F	; 63
    2eb6:	5c c0       	rjmp	.+184    	; 0x2f70 <__stack+0x2671>
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2eb8:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2eba:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2ebc:	5b 98       	cbi	0x0b, 3	; 11
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
			pinWrite(latch_pin, LOW);
			for(bit = 0; bit <= FONT_HEIGHT ; bit++){
				pinWrite(data_pin,((*(p+pos)) & (1 << byte)));
    2ebe:	ef ef       	ldi	r30, 0xFF	; 255
    2ec0:	e4 0f       	add	r30, r20
    2ec2:	f0 e0       	ldi	r31, 0x00	; 0
    2ec4:	ef 51       	subi	r30, 0x1F	; 31
    2ec6:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    2ec8:	60 81       	ld	r22, Z
    2eca:	65 23       	and	r22, r21
    2ecc:	09 f0       	breq	.+2      	; 0x2ed0 <__stack+0x25d1>
    2ece:	e4 c2       	rjmp	.+1480   	; 0x3498 <__stack+0x2b99>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2ed0:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2ed2:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2ed4:	5b 98       	cbi	0x0b, 3	; 11
    2ed6:	ee ef       	ldi	r30, 0xFE	; 254
    2ed8:	e4 0f       	add	r30, r20
    2eda:	f0 e0       	ldi	r31, 0x00	; 0
    2edc:	ef 51       	subi	r30, 0x1F	; 31
    2ede:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    2ee0:	60 81       	ld	r22, Z
    2ee2:	65 23       	and	r22, r21
    2ee4:	09 f0       	breq	.+2      	; 0x2ee8 <__stack+0x25e9>
    2ee6:	d6 c2       	rjmp	.+1452   	; 0x3494 <__stack+0x2b95>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2ee8:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2eea:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2eec:	5b 98       	cbi	0x0b, 3	; 11
    2eee:	ed ef       	ldi	r30, 0xFD	; 253
    2ef0:	e4 0f       	add	r30, r20
    2ef2:	f0 e0       	ldi	r31, 0x00	; 0
    2ef4:	ef 51       	subi	r30, 0x1F	; 31
    2ef6:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    2ef8:	60 81       	ld	r22, Z
    2efa:	65 23       	and	r22, r21
    2efc:	09 f0       	breq	.+2      	; 0x2f00 <__stack+0x2601>
    2efe:	c8 c2       	rjmp	.+1424   	; 0x3490 <__stack+0x2b91>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2f00:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2f02:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2f04:	5b 98       	cbi	0x0b, 3	; 11
    2f06:	ec ef       	ldi	r30, 0xFC	; 252
    2f08:	e4 0f       	add	r30, r20
    2f0a:	f0 e0       	ldi	r31, 0x00	; 0
    2f0c:	ef 51       	subi	r30, 0x1F	; 31
    2f0e:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    2f10:	60 81       	ld	r22, Z
    2f12:	65 23       	and	r22, r21
    2f14:	09 f0       	breq	.+2      	; 0x2f18 <__stack+0x2619>
    2f16:	ba c2       	rjmp	.+1396   	; 0x348c <__stack+0x2b8d>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2f18:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2f1a:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2f1c:	5b 98       	cbi	0x0b, 3	; 11
    2f1e:	eb ef       	ldi	r30, 0xFB	; 251
    2f20:	e4 0f       	add	r30, r20
    2f22:	f0 e0       	ldi	r31, 0x00	; 0
    2f24:	ef 51       	subi	r30, 0x1F	; 31
    2f26:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    2f28:	60 81       	ld	r22, Z
    2f2a:	65 23       	and	r22, r21
    2f2c:	09 f0       	breq	.+2      	; 0x2f30 <__stack+0x2631>
    2f2e:	ac c2       	rjmp	.+1368   	; 0x3488 <__stack+0x2b89>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2f30:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2f32:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2f34:	5b 98       	cbi	0x0b, 3	; 11
    2f36:	ea ef       	ldi	r30, 0xFA	; 250
    2f38:	e4 0f       	add	r30, r20
    2f3a:	f0 e0       	ldi	r31, 0x00	; 0
    2f3c:	ef 51       	subi	r30, 0x1F	; 31
    2f3e:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    2f40:	60 81       	ld	r22, Z
    2f42:	65 23       	and	r22, r21
    2f44:	09 f0       	breq	.+2      	; 0x2f48 <__stack+0x2649>
    2f46:	9e c2       	rjmp	.+1340   	; 0x3484 <__stack+0x2b85>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2f48:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2f4a:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2f4c:	5b 98       	cbi	0x0b, 3	; 11
    2f4e:	e9 ef       	ldi	r30, 0xF9	; 249
    2f50:	e4 0f       	add	r30, r20
    2f52:	f0 e0       	ldi	r31, 0x00	; 0
    2f54:	ef 51       	subi	r30, 0x1F	; 31
    2f56:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    2f58:	60 81       	ld	r22, Z
    2f5a:	65 23       	and	r22, r21
    2f5c:	09 f0       	breq	.+2      	; 0x2f60 <__stack+0x2661>
    2f5e:	60 c1       	rjmp	.+704    	; 0x3220 <__stack+0x2921>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2f60:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2f62:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2f64:	5b 98       	cbi	0x0b, 3	; 11
				//toggle the clock pin
				pinWrite(clock_pin, HIGH);
				pinWrite(clock_pin, LOW);
				pos--;
    2f66:	48 50       	subi	r20, 0x08	; 8
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2f68:	5a 9a       	sbi	0x0b, 2	; 11
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
    2f6a:	4f 3f       	cpi	r20, 0xFF	; 255
    2f6c:	09 f4       	brne	.+2      	; 0x2f70 <__stack+0x2671>
    2f6e:	60 c1       	rjmp	.+704    	; 0x3230 <__stack+0x2931>
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2f70:	5a 98       	cbi	0x0b, 2	; 11
			pinWrite(latch_pin, LOW);
			for(bit = 0; bit <= FONT_HEIGHT ; bit++){
				pinWrite(data_pin,((*(p+pos)) & (1 << byte)));
    2f72:	e4 2f       	mov	r30, r20
    2f74:	f0 e0       	ldi	r31, 0x00	; 0
    2f76:	ef 51       	subi	r30, 0x1F	; 31
    2f78:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    2f7a:	60 81       	ld	r22, Z
    2f7c:	65 23       	and	r22, r21
    2f7e:	09 f4       	brne	.+2      	; 0x2f82 <__stack+0x2683>
    2f80:	9b cf       	rjmp	.-202    	; 0x2eb8 <__stack+0x25b9>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2f82:	59 9a       	sbi	0x0b, 1	; 11
    2f84:	9a cf       	rjmp	.-204    	; 0x2eba <__stack+0x25bb>
    2f86:	59 9a       	sbi	0x0b, 1	; 11
    2f88:	5b ce       	rjmp	.-842    	; 0x2c40 <__stack+0x2341>
    2f8a:	59 9a       	sbi	0x0b, 1	; 11
    2f8c:	4d ce       	rjmp	.-870    	; 0x2c28 <__stack+0x2329>
    2f8e:	59 9a       	sbi	0x0b, 1	; 11
    2f90:	3f ce       	rjmp	.-898    	; 0x2c10 <__stack+0x2311>
    2f92:	59 9a       	sbi	0x0b, 1	; 11
    2f94:	31 ce       	rjmp	.-926    	; 0x2bf8 <__stack+0x22f9>
    2f96:	59 9a       	sbi	0x0b, 1	; 11
    2f98:	23 ce       	rjmp	.-954    	; 0x2be0 <__stack+0x22e1>
    2f9a:	59 9a       	sbi	0x0b, 1	; 11
    2f9c:	15 ce       	rjmp	.-982    	; 0x2bc8 <__stack+0x22c9>
    2f9e:	b7 e0       	ldi	r27, 0x07	; 7
    2fa0:	eb 9f       	mul	r30, r27
    2fa2:	f0 01       	movw	r30, r0
    2fa4:	11 24       	eor	r1, r1
    2fa6:	ec 5a       	subi	r30, 0xAC	; 172
    2fa8:	fe 4f       	sbci	r31, 0xFE	; 254
    2faa:	a2 81       	ldd	r26, Z+2	; 0x02
    2fac:	b3 81       	ldd	r27, Z+3	; 0x03
    2fae:	6c 91       	ld	r22, X
    2fb0:	41 e0       	ldi	r20, 0x01	; 1
    2fb2:	50 e0       	ldi	r21, 0x00	; 0
    2fb4:	06 80       	ldd	r0, Z+6	; 0x06
    2fb6:	02 c0       	rjmp	.+4      	; 0x2fbc <__stack+0x26bd>
    2fb8:	44 0f       	add	r20, r20
    2fba:	55 1f       	adc	r21, r21
    2fbc:	0a 94       	dec	r0
    2fbe:	e2 f7       	brpl	.-8      	; 0x2fb8 <__stack+0x26b9>
    2fc0:	46 2b       	or	r20, r22
    2fc2:	4c 93       	st	X, r20
    2fc4:	ab ce       	rjmp	.-682    	; 0x2d1c <__stack+0x241d>
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
    2fc6:	a4 e0       	ldi	r26, 0x04	; 4
    2fc8:	b1 e0       	ldi	r27, 0x01	; 1
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    2fca:	ed 91       	ld	r30, X+
    2fcc:	ee 23       	and	r30, r30
    2fce:	01 f1       	breq	.+64     	; 0x3010 <__stack+0x2711>
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    2fd0:	ec 3c       	cpi	r30, 0xCC	; 204
    2fd2:	d8 f7       	brcc	.-10     	; 0x2fca <__stack+0x26cb>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2fd4:	47 e0       	ldi	r20, 0x07	; 7
    2fd6:	e4 9f       	mul	r30, r20
    2fd8:	f0 01       	movw	r30, r0
    2fda:	11 24       	eor	r1, r1
    2fdc:	bf 01       	movw	r22, r30
    2fde:	6c 5a       	subi	r22, 0xAC	; 172
    2fe0:	7e 4f       	sbci	r23, 0xFE	; 254
    2fe2:	fb 01       	movw	r30, r22
    2fe4:	42 81       	ldd	r20, Z+2	; 0x02
    2fe6:	53 81       	ldd	r21, Z+3	; 0x03
    2fe8:	fa 01       	movw	r30, r20
    2fea:	90 81       	ld	r25, Z
    2fec:	22 24       	eor	r2, r2
    2fee:	23 94       	inc	r2
    2ff0:	31 2c       	mov	r3, r1
    2ff2:	fb 01       	movw	r30, r22
    2ff4:	06 80       	ldd	r0, Z+6	; 0x06
    2ff6:	02 c0       	rjmp	.+4      	; 0x2ffc <__stack+0x26fd>
    2ff8:	22 0c       	add	r2, r2
    2ffa:	33 1c       	adc	r3, r3
    2ffc:	0a 94       	dec	r0
    2ffe:	e2 f7       	brpl	.-8      	; 0x2ff8 <__stack+0x26f9>
    3000:	82 2d       	mov	r24, r2
    3002:	80 95       	com	r24
    3004:	89 23       	and	r24, r25
    3006:	fa 01       	movw	r30, r20
    3008:	80 83       	st	Z, r24
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    300a:	ed 91       	ld	r30, X+
    300c:	e1 11       	cpse	r30, r1
    300e:	e0 cf       	rjmp	.-64     	; 0x2fd0 <__stack+0x26d1>
/* Multiplexing method                                                  */
/************************************************************************/
static inline void MultiPlex(uint8_t *pin)
{
	pinsMultiWrite(plex_pins, LOW);
	pinWrite(plex_pins[*pin], HIGH);
    3010:	d4 01       	movw	r26, r8
    3012:	ed 91       	ld	r30, X+
    3014:	4d 01       	movw	r8, r26
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    3016:	ec 3c       	cpi	r30, 0xCC	; 204
    3018:	08 f4       	brcc	.+2      	; 0x301c <__stack+0x271d>
    301a:	40 c2       	rjmp	.+1152   	; 0x349c <__stack+0x2b9d>
	delay(delayms);
    301c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    3020:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
/*  delay                                                               */
/************************************************************************/
int delayms = 1;
static inline void delay(int dl)
{
	while(dl >= 0)
    3024:	97 fd       	sbrc	r25, 7
    3026:	08 c0       	rjmp	.+16     	; 0x3038 <__stack+0x2739>
    3028:	ef e9       	ldi	r30, 0x9F	; 159
    302a:	ff e0       	ldi	r31, 0x0F	; 15
    302c:	31 97       	sbiw	r30, 0x01	; 1
    302e:	f1 f7       	brne	.-4      	; 0x302c <__stack+0x272d>
    3030:	00 c0       	rjmp	.+0      	; 0x3032 <__stack+0x2733>
    3032:	00 00       	nop
	{
		_delay_ms(1);
		dl--;
    3034:	01 97       	sbiw	r24, 0x01	; 1
    3036:	c0 f7       	brcc	.-16     	; 0x3028 <__stack+0x2729>
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
    3038:	a4 e0       	ldi	r26, 0x04	; 4
    303a:	b1 e0       	ldi	r27, 0x01	; 1
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    303c:	ed 91       	ld	r30, X+
    303e:	ee 23       	and	r30, r30
    3040:	01 f1       	breq	.+64     	; 0x3082 <__stack+0x2783>
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    3042:	ec 3c       	cpi	r30, 0xCC	; 204
    3044:	d8 f7       	brcc	.-10     	; 0x303c <__stack+0x273d>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    3046:	47 e0       	ldi	r20, 0x07	; 7
    3048:	e4 9f       	mul	r30, r20
    304a:	f0 01       	movw	r30, r0
    304c:	11 24       	eor	r1, r1
    304e:	bf 01       	movw	r22, r30
    3050:	6c 5a       	subi	r22, 0xAC	; 172
    3052:	7e 4f       	sbci	r23, 0xFE	; 254
    3054:	fb 01       	movw	r30, r22
    3056:	42 81       	ldd	r20, Z+2	; 0x02
    3058:	53 81       	ldd	r21, Z+3	; 0x03
    305a:	fa 01       	movw	r30, r20
    305c:	90 81       	ld	r25, Z
    305e:	22 24       	eor	r2, r2
    3060:	23 94       	inc	r2
    3062:	31 2c       	mov	r3, r1
    3064:	fb 01       	movw	r30, r22
    3066:	06 80       	ldd	r0, Z+6	; 0x06
    3068:	02 c0       	rjmp	.+4      	; 0x306e <__stack+0x276f>
    306a:	22 0c       	add	r2, r2
    306c:	33 1c       	adc	r3, r3
    306e:	0a 94       	dec	r0
    3070:	e2 f7       	brpl	.-8      	; 0x306a <__stack+0x276b>
    3072:	82 2d       	mov	r24, r2
    3074:	80 95       	com	r24
    3076:	89 23       	and	r24, r25
    3078:	fa 01       	movw	r30, r20
    307a:	80 83       	st	Z, r24
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    307c:	ed 91       	ld	r30, X+
    307e:	e1 11       	cpse	r30, r1
    3080:	e0 cf       	rjmp	.-64     	; 0x3042 <__stack+0x2743>
    3082:	89 e0       	ldi	r24, 0x09	; 9
    3084:	90 e0       	ldi	r25, 0x00	; 0
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    3086:	5a 98       	cbi	0x0b, 2	; 11
    3088:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    308a:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    308c:	5b 98       	cbi	0x0b, 3	; 11
    308e:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    3090:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    3092:	5b 98       	cbi	0x0b, 3	; 11
    3094:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    3096:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    3098:	5b 98       	cbi	0x0b, 3	; 11
    309a:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    309c:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    309e:	5b 98       	cbi	0x0b, 3	; 11
    30a0:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    30a2:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    30a4:	5b 98       	cbi	0x0b, 3	; 11
    30a6:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    30a8:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    30aa:	5b 98       	cbi	0x0b, 3	; 11
    30ac:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    30ae:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    30b0:	5b 98       	cbi	0x0b, 3	; 11
    30b2:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    30b4:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    30b6:	5b 98       	cbi	0x0b, 3	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    30b8:	5a 9a       	sbi	0x0b, 2	; 11
    30ba:	01 97       	sbiw	r24, 0x01	; 1
/* Clear Display                                                        */
/************************************************************************/
static inline void Clear(){
	int x, y = 0;
	pinsMultiWrite(plex_pins, LOW);
	for(x = 0; x < (SH_REG + 1); x++) {
    30bc:	21 f7       	brne	.-56     	; 0x3086 <__stack+0x2787>
    30be:	2f 5f       	subi	r18, 0xFF	; 255
    30c0:	3f 4f       	sbci	r19, 0xFF	; 255
{
	uint8_t byte, index, bit = 0;
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
    30c2:	27 30       	cpi	r18, 0x07	; 7
    30c4:	31 05       	cpc	r19, r1
    30c6:	99 f5       	brne	.+102    	; 0x312e <__stack+0x282f>
			pinWrite(latch_pin, HIGH);
		}
		MultiPlex(&byte);
		Clear();
	}
	delayms = 1;
    30c8:	f0 92 01 01 	sts	0x0101, r15	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    30cc:	e0 92 00 01 	sts	0x0100, r14	; 0x800100 <__DATA_REGION_ORIGIN__>
    30d0:	aa 94       	dec	r10
}
}*/
static inline void HoldDisplayBuffer(const uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
    30d2:	a1 10       	cpse	r10, r1
    30d4:	26 c0       	rjmp	.+76     	; 0x3122 <__stack+0x2823>
    30d6:	f1 e0       	ldi	r31, 0x01	; 1
    30d8:	cf 1a       	sub	r12, r31
    30da:	d1 08       	sbc	r13, r1
		for(len =0; len<FONT_WIDTH; len++){
			HoldDisplayBuffer(ArrayShiftRightInsert(*(chbuffer+len)), time);
		}
		HoldDisplayBuffer(ArrayShiftRightInsert(0), time);
	}
	for(len =0; len<MT_SIZE; len++){
    30dc:	11 f4       	brne	.+4      	; 0x30e2 <__stack+0x27e3>
    30de:	0c 94 a0 02 	jmp	0x540	; 0x540 <main+0x26>
    30e2:	80 e4       	ldi	r24, 0x40	; 64
    30e4:	e1 ee       	ldi	r30, 0xE1	; 225
    30e6:	f2 e0       	ldi	r31, 0x02	; 2
    30e8:	a0 e2       	ldi	r26, 0x20	; 32
    30ea:	b2 e0       	ldi	r27, 0x02	; 2
    30ec:	01 90       	ld	r0, Z+
    30ee:	0d 92       	st	X+, r0
    30f0:	8a 95       	dec	r24
    30f2:	e1 f7       	brne	.-8      	; 0x30ec <__stack+0x27ed>
    30f4:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <updatedBufferArray+0x3f>
	for(; index>=0; index--){
		updatedBufferArray[index] = currentArray[index+1];
    30f8:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <__data_end+0x3f>
    30fc:	80 93 1f 03 	sts	0x031F, r24	; 0x80031f <updatedBufferArray+0x3e>
/************************************************************************/
uint8_t *ArrayShiftRightInsert(const uint8_t data)
{
	uint8_t index = MT_SIZE -1;
	FillCurrentArray();
	updatedBufferArray[index--] = data;
    3100:	2e e3       	ldi	r18, 0x3E	; 62
	for(; index>=0; index--){
    3102:	21 50       	subi	r18, 0x01	; 1
		updatedBufferArray[index] = currentArray[index+1];
    3104:	82 2f       	mov	r24, r18
    3106:	90 e0       	ldi	r25, 0x00	; 0
    3108:	fc 01       	movw	r30, r24
    310a:	ef 51       	subi	r30, 0x1F	; 31
    310c:	fd 4f       	sbci	r31, 0xFD	; 253
    310e:	dc 01       	movw	r26, r24
    3110:	a0 5e       	subi	r26, 0xE0	; 224
    3112:	bd 4f       	sbci	r27, 0xFD	; 253
    3114:	11 96       	adiw	r26, 0x01	; 1
    3116:	8c 91       	ld	r24, X
    3118:	80 83       	st	Z, r24
		if(index==0) break;
    311a:	21 11       	cpse	r18, r1
    311c:	f2 cf       	rjmp	.-28     	; 0x3102 <__stack+0x2803>
    311e:	9a e0       	ldi	r25, 0x0A	; 10
    3120:	a9 2e       	mov	r10, r25
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    3122:	84 e0       	ldi	r24, 0x04	; 4
    3124:	88 2e       	mov	r8, r24
    3126:	81 e0       	ldi	r24, 0x01	; 1
    3128:	98 2e       	mov	r9, r24
    312a:	20 e0       	ldi	r18, 0x00	; 0
    312c:	30 e0       	ldi	r19, 0x00	; 0
    312e:	91 e0       	ldi	r25, 0x01	; 1
    3130:	02 2e       	mov	r0, r18
    3132:	01 c0       	rjmp	.+2      	; 0x3136 <__stack+0x2837>
    3134:	99 0f       	add	r25, r25
    3136:	0a 94       	dec	r0
    3138:	ea f7       	brpl	.-6      	; 0x3134 <__stack+0x2835>
/************************************************************************/
uint8_t *ArrayShiftRightInsert(const uint8_t data)
{
	uint8_t index = MT_SIZE -1;
	FillCurrentArray();
	updatedBufferArray[index--] = data;
    313a:	8f e3       	ldi	r24, 0x3F	; 63
    313c:	58 c0       	rjmp	.+176    	; 0x31ee <__stack+0x28ef>
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    313e:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    3140:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    3142:	5b 98       	cbi	0x0b, 3	; 11
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
			pinWrite(latch_pin, LOW);
			for(bit = 0; bit <= FONT_HEIGHT ; bit++){
				pinWrite(data_pin,((*(p+pos)) & (1 << byte)));
    3144:	ef ef       	ldi	r30, 0xFF	; 255
    3146:	e8 0f       	add	r30, r24
    3148:	f0 e0       	ldi	r31, 0x00	; 0
    314a:	ef 51       	subi	r30, 0x1F	; 31
    314c:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    314e:	40 81       	ld	r20, Z
    3150:	49 23       	and	r20, r25
    3152:	09 f0       	breq	.+2      	; 0x3156 <__stack+0x2857>
    3154:	63 c0       	rjmp	.+198    	; 0x321c <__stack+0x291d>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    3156:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    3158:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    315a:	5b 98       	cbi	0x0b, 3	; 11
    315c:	ee ef       	ldi	r30, 0xFE	; 254
    315e:	e8 0f       	add	r30, r24
    3160:	f0 e0       	ldi	r31, 0x00	; 0
    3162:	ef 51       	subi	r30, 0x1F	; 31
    3164:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    3166:	40 81       	ld	r20, Z
    3168:	49 23       	and	r20, r25
    316a:	09 f0       	breq	.+2      	; 0x316e <__stack+0x286f>
    316c:	55 c0       	rjmp	.+170    	; 0x3218 <__stack+0x2919>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    316e:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    3170:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    3172:	5b 98       	cbi	0x0b, 3	; 11
    3174:	ed ef       	ldi	r30, 0xFD	; 253
    3176:	e8 0f       	add	r30, r24
    3178:	f0 e0       	ldi	r31, 0x00	; 0
    317a:	ef 51       	subi	r30, 0x1F	; 31
    317c:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    317e:	40 81       	ld	r20, Z
    3180:	49 23       	and	r20, r25
    3182:	09 f0       	breq	.+2      	; 0x3186 <__stack+0x2887>
    3184:	47 c0       	rjmp	.+142    	; 0x3214 <__stack+0x2915>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    3186:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    3188:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    318a:	5b 98       	cbi	0x0b, 3	; 11
    318c:	ec ef       	ldi	r30, 0xFC	; 252
    318e:	e8 0f       	add	r30, r24
    3190:	f0 e0       	ldi	r31, 0x00	; 0
    3192:	ef 51       	subi	r30, 0x1F	; 31
    3194:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    3196:	40 81       	ld	r20, Z
    3198:	49 23       	and	r20, r25
    319a:	d1 f5       	brne	.+116    	; 0x3210 <__stack+0x2911>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    319c:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    319e:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    31a0:	5b 98       	cbi	0x0b, 3	; 11
    31a2:	eb ef       	ldi	r30, 0xFB	; 251
    31a4:	e8 0f       	add	r30, r24
    31a6:	f0 e0       	ldi	r31, 0x00	; 0
    31a8:	ef 51       	subi	r30, 0x1F	; 31
    31aa:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    31ac:	40 81       	ld	r20, Z
    31ae:	49 23       	and	r20, r25
    31b0:	69 f5       	brne	.+90     	; 0x320c <__stack+0x290d>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    31b2:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    31b4:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    31b6:	5b 98       	cbi	0x0b, 3	; 11
    31b8:	ea ef       	ldi	r30, 0xFA	; 250
    31ba:	e8 0f       	add	r30, r24
    31bc:	f0 e0       	ldi	r31, 0x00	; 0
    31be:	ef 51       	subi	r30, 0x1F	; 31
    31c0:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    31c2:	40 81       	ld	r20, Z
    31c4:	49 23       	and	r20, r25
    31c6:	01 f5       	brne	.+64     	; 0x3208 <__stack+0x2909>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    31c8:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    31ca:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    31cc:	5b 98       	cbi	0x0b, 3	; 11
    31ce:	e9 ef       	ldi	r30, 0xF9	; 249
    31d0:	e8 0f       	add	r30, r24
    31d2:	f0 e0       	ldi	r31, 0x00	; 0
    31d4:	ef 51       	subi	r30, 0x1F	; 31
    31d6:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    31d8:	40 81       	ld	r20, Z
    31da:	49 23       	and	r20, r25
    31dc:	99 f4       	brne	.+38     	; 0x3204 <__stack+0x2905>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    31de:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    31e0:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    31e2:	5b 98       	cbi	0x0b, 3	; 11
				//toggle the clock pin
				pinWrite(clock_pin, HIGH);
				pinWrite(clock_pin, LOW);
				pos--;
    31e4:	88 50       	subi	r24, 0x08	; 8
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    31e6:	5a 9a       	sbi	0x0b, 2	; 11
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
    31e8:	8f 3f       	cpi	r24, 0xFF	; 255
    31ea:	09 f4       	brne	.+2      	; 0x31ee <__stack+0x28ef>
    31ec:	ec ce       	rjmp	.-552    	; 0x2fc6 <__stack+0x26c7>
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    31ee:	5a 98       	cbi	0x0b, 2	; 11
			pinWrite(latch_pin, LOW);
			for(bit = 0; bit <= FONT_HEIGHT ; bit++){
				pinWrite(data_pin,((*(p+pos)) & (1 << byte)));
    31f0:	e8 2f       	mov	r30, r24
    31f2:	f0 e0       	ldi	r31, 0x00	; 0
    31f4:	ef 51       	subi	r30, 0x1F	; 31
    31f6:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    31f8:	40 81       	ld	r20, Z
    31fa:	49 23       	and	r20, r25
    31fc:	09 f4       	brne	.+2      	; 0x3200 <__stack+0x2901>
    31fe:	9f cf       	rjmp	.-194    	; 0x313e <__stack+0x283f>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    3200:	59 9a       	sbi	0x0b, 1	; 11
    3202:	9e cf       	rjmp	.-196    	; 0x3140 <__stack+0x2841>
    3204:	59 9a       	sbi	0x0b, 1	; 11
    3206:	ec cf       	rjmp	.-40     	; 0x31e0 <__stack+0x28e1>
    3208:	59 9a       	sbi	0x0b, 1	; 11
    320a:	df cf       	rjmp	.-66     	; 0x31ca <__stack+0x28cb>
    320c:	59 9a       	sbi	0x0b, 1	; 11
    320e:	d2 cf       	rjmp	.-92     	; 0x31b4 <__stack+0x28b5>
    3210:	59 9a       	sbi	0x0b, 1	; 11
    3212:	c5 cf       	rjmp	.-118    	; 0x319e <__stack+0x289f>
    3214:	59 9a       	sbi	0x0b, 1	; 11
    3216:	b8 cf       	rjmp	.-144    	; 0x3188 <__stack+0x2889>
    3218:	59 9a       	sbi	0x0b, 1	; 11
    321a:	aa cf       	rjmp	.-172    	; 0x3170 <__stack+0x2871>
    321c:	59 9a       	sbi	0x0b, 1	; 11
    321e:	9c cf       	rjmp	.-200    	; 0x3158 <__stack+0x2859>
    3220:	59 9a       	sbi	0x0b, 1	; 11
    3222:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    3224:	5b 98       	cbi	0x0b, 3	; 11
				//toggle the clock pin
				pinWrite(clock_pin, HIGH);
				pinWrite(clock_pin, LOW);
				pos--;
    3226:	48 50       	subi	r20, 0x08	; 8
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    3228:	5a 9a       	sbi	0x0b, 2	; 11
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
    322a:	4f 3f       	cpi	r20, 0xFF	; 255
    322c:	09 f0       	breq	.+2      	; 0x3230 <__stack+0x2931>
    322e:	a0 ce       	rjmp	.-704    	; 0x2f70 <__stack+0x2671>
    3230:	a4 e0       	ldi	r26, 0x04	; 4
    3232:	b1 e0       	ldi	r27, 0x01	; 1
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    3234:	ed 91       	ld	r30, X+
    3236:	ee 23       	and	r30, r30
    3238:	09 f1       	breq	.+66     	; 0x327c <__stack+0x297d>
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    323a:	ec 3c       	cpi	r30, 0xCC	; 204
    323c:	d8 f7       	brcc	.-10     	; 0x3234 <__stack+0x2935>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    323e:	47 e0       	ldi	r20, 0x07	; 7
    3240:	e4 9f       	mul	r30, r20
    3242:	f0 01       	movw	r30, r0
    3244:	11 24       	eor	r1, r1
    3246:	bf 01       	movw	r22, r30
    3248:	6c 5a       	subi	r22, 0xAC	; 172
    324a:	7e 4f       	sbci	r23, 0xFE	; 254
    324c:	2b 01       	movw	r4, r22
    324e:	fb 01       	movw	r30, r22
    3250:	62 81       	ldd	r22, Z+2	; 0x02
    3252:	73 81       	ldd	r23, Z+3	; 0x03
    3254:	fb 01       	movw	r30, r22
    3256:	50 81       	ld	r21, Z
    3258:	22 24       	eor	r2, r2
    325a:	23 94       	inc	r2
    325c:	31 2c       	mov	r3, r1
    325e:	f2 01       	movw	r30, r4
    3260:	06 80       	ldd	r0, Z+6	; 0x06
    3262:	02 c0       	rjmp	.+4      	; 0x3268 <__stack+0x2969>
    3264:	22 0c       	add	r2, r2
    3266:	33 1c       	adc	r3, r3
    3268:	0a 94       	dec	r0
    326a:	e2 f7       	brpl	.-8      	; 0x3264 <__stack+0x2965>
    326c:	42 2d       	mov	r20, r2
    326e:	40 95       	com	r20
    3270:	45 23       	and	r20, r21
    3272:	fb 01       	movw	r30, r22
    3274:	40 83       	st	Z, r20
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    3276:	ed 91       	ld	r30, X+
    3278:	e1 11       	cpse	r30, r1
    327a:	df cf       	rjmp	.-66     	; 0x323a <__stack+0x293b>
/* Multiplexing method                                                  */
/************************************************************************/
static inline void MultiPlex(uint8_t *pin)
{
	pinsMultiWrite(plex_pins, LOW);
	pinWrite(plex_pins[*pin], HIGH);
    327c:	d9 01       	movw	r26, r18
    327e:	ed 91       	ld	r30, X+
    3280:	9d 01       	movw	r18, r26
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    3282:	ec 3c       	cpi	r30, 0xCC	; 204
    3284:	08 f4       	brcc	.+2      	; 0x3288 <__stack+0x2989>
    3286:	1e c1       	rjmp	.+572    	; 0x34c4 <__stack+0x2bc5>
	delay(delayms);
    3288:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    328c:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
/*  delay                                                               */
/************************************************************************/
int delayms = 1;
static inline void delay(int dl)
{
	while(dl >= 0)
    3290:	57 fd       	sbrc	r21, 7
    3292:	09 c0       	rjmp	.+18     	; 0x32a6 <__stack+0x29a7>
    3294:	ef e9       	ldi	r30, 0x9F	; 159
    3296:	ff e0       	ldi	r31, 0x0F	; 15
    3298:	31 97       	sbiw	r30, 0x01	; 1
    329a:	f1 f7       	brne	.-4      	; 0x3298 <__stack+0x2999>
    329c:	00 c0       	rjmp	.+0      	; 0x329e <__stack+0x299f>
    329e:	00 00       	nop
	{
		_delay_ms(1);
		dl--;
    32a0:	41 50       	subi	r20, 0x01	; 1
    32a2:	51 09       	sbc	r21, r1
    32a4:	b8 f7       	brcc	.-18     	; 0x3294 <__stack+0x2995>
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
    32a6:	a4 e0       	ldi	r26, 0x04	; 4
    32a8:	b1 e0       	ldi	r27, 0x01	; 1
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    32aa:	ed 91       	ld	r30, X+
    32ac:	ee 23       	and	r30, r30
    32ae:	09 f1       	breq	.+66     	; 0x32f2 <__stack+0x29f3>
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    32b0:	ec 3c       	cpi	r30, 0xCC	; 204
    32b2:	d8 f7       	brcc	.-10     	; 0x32aa <__stack+0x29ab>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    32b4:	47 e0       	ldi	r20, 0x07	; 7
    32b6:	e4 9f       	mul	r30, r20
    32b8:	f0 01       	movw	r30, r0
    32ba:	11 24       	eor	r1, r1
    32bc:	bf 01       	movw	r22, r30
    32be:	6c 5a       	subi	r22, 0xAC	; 172
    32c0:	7e 4f       	sbci	r23, 0xFE	; 254
    32c2:	2b 01       	movw	r4, r22
    32c4:	fb 01       	movw	r30, r22
    32c6:	62 81       	ldd	r22, Z+2	; 0x02
    32c8:	73 81       	ldd	r23, Z+3	; 0x03
    32ca:	fb 01       	movw	r30, r22
    32cc:	50 81       	ld	r21, Z
    32ce:	22 24       	eor	r2, r2
    32d0:	23 94       	inc	r2
    32d2:	31 2c       	mov	r3, r1
    32d4:	f2 01       	movw	r30, r4
    32d6:	06 80       	ldd	r0, Z+6	; 0x06
    32d8:	02 c0       	rjmp	.+4      	; 0x32de <__stack+0x29df>
    32da:	22 0c       	add	r2, r2
    32dc:	33 1c       	adc	r3, r3
    32de:	0a 94       	dec	r0
    32e0:	e2 f7       	brpl	.-8      	; 0x32da <__stack+0x29db>
    32e2:	42 2d       	mov	r20, r2
    32e4:	40 95       	com	r20
    32e6:	45 23       	and	r20, r21
    32e8:	fb 01       	movw	r30, r22
    32ea:	40 83       	st	Z, r20
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    32ec:	ed 91       	ld	r30, X+
    32ee:	e1 11       	cpse	r30, r1
    32f0:	df cf       	rjmp	.-66     	; 0x32b0 <__stack+0x29b1>
    32f2:	49 e0       	ldi	r20, 0x09	; 9
    32f4:	50 e0       	ldi	r21, 0x00	; 0
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    32f6:	5a 98       	cbi	0x0b, 2	; 11
    32f8:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    32fa:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    32fc:	5b 98       	cbi	0x0b, 3	; 11
    32fe:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    3300:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    3302:	5b 98       	cbi	0x0b, 3	; 11
    3304:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    3306:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    3308:	5b 98       	cbi	0x0b, 3	; 11
    330a:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    330c:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    330e:	5b 98       	cbi	0x0b, 3	; 11
    3310:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    3312:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    3314:	5b 98       	cbi	0x0b, 3	; 11
    3316:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    3318:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    331a:	5b 98       	cbi	0x0b, 3	; 11
    331c:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    331e:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    3320:	5b 98       	cbi	0x0b, 3	; 11
    3322:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    3324:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    3326:	5b 98       	cbi	0x0b, 3	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    3328:	5a 9a       	sbi	0x0b, 2	; 11
    332a:	41 50       	subi	r20, 0x01	; 1
    332c:	51 09       	sbc	r21, r1
/* Clear Display                                                        */
/************************************************************************/
static inline void Clear(){
	int x, y = 0;
	pinsMultiWrite(plex_pins, LOW);
	for(x = 0; x < (SH_REG + 1); x++) {
    332e:	19 f7       	brne	.-58     	; 0x32f6 <__stack+0x29f7>
    3330:	01 96       	adiw	r24, 0x01	; 1
{
	uint8_t byte, index, bit = 0;
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
    3332:	87 30       	cpi	r24, 0x07	; 7
    3334:	91 05       	cpc	r25, r1
    3336:	09 f0       	breq	.+2      	; 0x333a <__stack+0x2a3b>
    3338:	b7 cd       	rjmp	.-1170   	; 0x2ea8 <__stack+0x25a9>
			pinWrite(latch_pin, HIGH);
		}
		MultiPlex(&byte);
		Clear();
	}
	delayms = 1;
    333a:	22 24       	eor	r2, r2
    333c:	23 94       	inc	r2
    333e:	31 2c       	mov	r3, r1
    3340:	30 92 01 01 	sts	0x0101, r3	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    3344:	20 92 00 01 	sts	0x0100, r2	; 0x800100 <__DATA_REGION_ORIGIN__>
    3348:	aa 94       	dec	r10
}
}*/
static inline void HoldDisplayBuffer(const uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
    334a:	a1 10       	cpse	r10, r1
    334c:	a9 cd       	rjmp	.-1198   	; 0x2ea0 <__stack+0x25a1>
	uint8_t *chbuffer;// = CharBytes(ch++);
	InitializeBuffers();
	int len = 0;
	while(*ch){
		chbuffer = CharBytes(ch++);
		for(len =0; len<FONT_WIDTH; len++){
    334e:	f6 e2       	ldi	r31, 0x26	; 38
    3350:	4f 2e       	mov	r4, r31
    3352:	f3 e0       	ldi	r31, 0x03	; 3
    3354:	5f 2e       	mov	r5, r31
    3356:	48 14       	cp	r4, r8
    3358:	59 04       	cpc	r5, r9
    335a:	09 f0       	breq	.+2      	; 0x335e <__stack+0x2a5f>
    335c:	7e cd       	rjmp	.-1284   	; 0x2e5a <__stack+0x255b>
    335e:	80 e4       	ldi	r24, 0x40	; 64
    3360:	e1 ee       	ldi	r30, 0xE1	; 225
    3362:	f2 e0       	ldi	r31, 0x02	; 2
    3364:	a0 e2       	ldi	r26, 0x20	; 32
    3366:	b2 e0       	ldi	r27, 0x02	; 2
    3368:	01 90       	ld	r0, Z+
    336a:	0d 92       	st	X+, r0
    336c:	8a 95       	dec	r24
    336e:	e1 f7       	brne	.-8      	; 0x3368 <__stack+0x2a69>
    3370:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <updatedBufferArray+0x3f>
	for(; index>=0; index--){
		updatedBufferArray[index] = currentArray[index+1];
    3374:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <__data_end+0x3f>
    3378:	80 93 1f 03 	sts	0x031F, r24	; 0x80031f <updatedBufferArray+0x3e>
/************************************************************************/
uint8_t *ArrayShiftRightInsert(const uint8_t data)
{
	uint8_t index = MT_SIZE -1;
	FillCurrentArray();
	updatedBufferArray[index--] = data;
    337c:	8e e3       	ldi	r24, 0x3E	; 62
	for(; index>=0; index--){
    337e:	81 50       	subi	r24, 0x01	; 1
		updatedBufferArray[index] = currentArray[index+1];
    3380:	28 2f       	mov	r18, r24
    3382:	30 e0       	ldi	r19, 0x00	; 0
    3384:	f9 01       	movw	r30, r18
    3386:	ef 51       	subi	r30, 0x1F	; 31
    3388:	fd 4f       	sbci	r31, 0xFD	; 253
    338a:	d9 01       	movw	r26, r18
    338c:	a0 5e       	subi	r26, 0xE0	; 224
    338e:	bd 4f       	sbci	r27, 0xFD	; 253
    3390:	11 96       	adiw	r26, 0x01	; 1
    3392:	9c 91       	ld	r25, X
    3394:	90 83       	st	Z, r25
		if(index==0) break;
    3396:	81 11       	cpse	r24, r1
    3398:	f2 cf       	rjmp	.-28     	; 0x337e <__stack+0x2a7f>
    339a:	aa e0       	ldi	r26, 0x0A	; 10
    339c:	9a 2e       	mov	r9, r26
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    339e:	64 e0       	ldi	r22, 0x04	; 4
    33a0:	71 e0       	ldi	r23, 0x01	; 1
    33a2:	80 e0       	ldi	r24, 0x00	; 0
    33a4:	90 e0       	ldi	r25, 0x00	; 0
    33a6:	31 e0       	ldi	r19, 0x01	; 1
    33a8:	08 2e       	mov	r0, r24
    33aa:	01 c0       	rjmp	.+2      	; 0x33ae <__stack+0x2aaf>
    33ac:	33 0f       	add	r19, r19
    33ae:	0a 94       	dec	r0
    33b0:	ea f7       	brpl	.-6      	; 0x33ac <__stack+0x2aad>
/************************************************************************/
uint8_t *ArrayShiftRightInsert(const uint8_t data)
{
	uint8_t index = MT_SIZE -1;
	FillCurrentArray();
	updatedBufferArray[index--] = data;
    33b2:	2f e3       	ldi	r18, 0x3F	; 63
    33b4:	5c c0       	rjmp	.+184    	; 0x346e <__stack+0x2b6f>
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    33b6:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    33b8:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    33ba:	5b 98       	cbi	0x0b, 3	; 11
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
			pinWrite(latch_pin, LOW);
			for(bit = 0; bit <= FONT_HEIGHT ; bit++){
				pinWrite(data_pin,((*(p+pos)) & (1 << byte)));
    33bc:	ef ef       	ldi	r30, 0xFF	; 255
    33be:	e2 0f       	add	r30, r18
    33c0:	f0 e0       	ldi	r31, 0x00	; 0
    33c2:	ef 51       	subi	r30, 0x1F	; 31
    33c4:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    33c6:	40 81       	ld	r20, Z
    33c8:	43 23       	and	r20, r19
    33ca:	09 f0       	breq	.+2      	; 0x33ce <__stack+0x2acf>
    33cc:	30 c1       	rjmp	.+608    	; 0x362e <__stack+0x2d2f>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    33ce:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    33d0:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    33d2:	5b 98       	cbi	0x0b, 3	; 11
    33d4:	ee ef       	ldi	r30, 0xFE	; 254
    33d6:	e2 0f       	add	r30, r18
    33d8:	f0 e0       	ldi	r31, 0x00	; 0
    33da:	ef 51       	subi	r30, 0x1F	; 31
    33dc:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    33de:	40 81       	ld	r20, Z
    33e0:	43 23       	and	r20, r19
    33e2:	09 f0       	breq	.+2      	; 0x33e6 <__stack+0x2ae7>
    33e4:	22 c1       	rjmp	.+580    	; 0x362a <__stack+0x2d2b>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    33e6:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    33e8:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    33ea:	5b 98       	cbi	0x0b, 3	; 11
    33ec:	ed ef       	ldi	r30, 0xFD	; 253
    33ee:	e2 0f       	add	r30, r18
    33f0:	f0 e0       	ldi	r31, 0x00	; 0
    33f2:	ef 51       	subi	r30, 0x1F	; 31
    33f4:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    33f6:	40 81       	ld	r20, Z
    33f8:	43 23       	and	r20, r19
    33fa:	09 f0       	breq	.+2      	; 0x33fe <__stack+0x2aff>
    33fc:	14 c1       	rjmp	.+552    	; 0x3626 <__stack+0x2d27>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    33fe:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    3400:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    3402:	5b 98       	cbi	0x0b, 3	; 11
    3404:	ec ef       	ldi	r30, 0xFC	; 252
    3406:	e2 0f       	add	r30, r18
    3408:	f0 e0       	ldi	r31, 0x00	; 0
    340a:	ef 51       	subi	r30, 0x1F	; 31
    340c:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    340e:	40 81       	ld	r20, Z
    3410:	43 23       	and	r20, r19
    3412:	09 f0       	breq	.+2      	; 0x3416 <__stack+0x2b17>
    3414:	06 c1       	rjmp	.+524    	; 0x3622 <__stack+0x2d23>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    3416:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    3418:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    341a:	5b 98       	cbi	0x0b, 3	; 11
    341c:	eb ef       	ldi	r30, 0xFB	; 251
    341e:	e2 0f       	add	r30, r18
    3420:	f0 e0       	ldi	r31, 0x00	; 0
    3422:	ef 51       	subi	r30, 0x1F	; 31
    3424:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    3426:	40 81       	ld	r20, Z
    3428:	43 23       	and	r20, r19
    342a:	09 f0       	breq	.+2      	; 0x342e <__stack+0x2b2f>
    342c:	f8 c0       	rjmp	.+496    	; 0x361e <__stack+0x2d1f>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    342e:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    3430:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    3432:	5b 98       	cbi	0x0b, 3	; 11
    3434:	ea ef       	ldi	r30, 0xFA	; 250
    3436:	e2 0f       	add	r30, r18
    3438:	f0 e0       	ldi	r31, 0x00	; 0
    343a:	ef 51       	subi	r30, 0x1F	; 31
    343c:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    343e:	40 81       	ld	r20, Z
    3440:	43 23       	and	r20, r19
    3442:	09 f0       	breq	.+2      	; 0x3446 <__stack+0x2b47>
    3444:	ea c0       	rjmp	.+468    	; 0x361a <__stack+0x2d1b>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    3446:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    3448:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    344a:	5b 98       	cbi	0x0b, 3	; 11
    344c:	e9 ef       	ldi	r30, 0xF9	; 249
    344e:	e2 0f       	add	r30, r18
    3450:	f0 e0       	ldi	r31, 0x00	; 0
    3452:	ef 51       	subi	r30, 0x1F	; 31
    3454:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    3456:	40 81       	ld	r20, Z
    3458:	43 23       	and	r20, r19
    345a:	09 f0       	breq	.+2      	; 0x345e <__stack+0x2b5f>
    345c:	47 c0       	rjmp	.+142    	; 0x34ec <__stack+0x2bed>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    345e:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    3460:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    3462:	5b 98       	cbi	0x0b, 3	; 11
				//toggle the clock pin
				pinWrite(clock_pin, HIGH);
				pinWrite(clock_pin, LOW);
				pos--;
    3464:	28 50       	subi	r18, 0x08	; 8
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    3466:	5a 9a       	sbi	0x0b, 2	; 11
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
    3468:	2f 3f       	cpi	r18, 0xFF	; 255
    346a:	09 f4       	brne	.+2      	; 0x346e <__stack+0x2b6f>
    346c:	47 c0       	rjmp	.+142    	; 0x34fc <__stack+0x2bfd>
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    346e:	5a 98       	cbi	0x0b, 2	; 11
			pinWrite(latch_pin, LOW);
			for(bit = 0; bit <= FONT_HEIGHT ; bit++){
				pinWrite(data_pin,((*(p+pos)) & (1 << byte)));
    3470:	e2 2f       	mov	r30, r18
    3472:	f0 e0       	ldi	r31, 0x00	; 0
    3474:	ef 51       	subi	r30, 0x1F	; 31
    3476:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    3478:	40 81       	ld	r20, Z
    347a:	43 23       	and	r20, r19
    347c:	09 f4       	brne	.+2      	; 0x3480 <__stack+0x2b81>
    347e:	9b cf       	rjmp	.-202    	; 0x33b6 <__stack+0x2ab7>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    3480:	59 9a       	sbi	0x0b, 1	; 11
    3482:	9a cf       	rjmp	.-204    	; 0x33b8 <__stack+0x2ab9>
    3484:	59 9a       	sbi	0x0b, 1	; 11
    3486:	61 cd       	rjmp	.-1342   	; 0x2f4a <__stack+0x264b>
    3488:	59 9a       	sbi	0x0b, 1	; 11
    348a:	53 cd       	rjmp	.-1370   	; 0x2f32 <__stack+0x2633>
    348c:	59 9a       	sbi	0x0b, 1	; 11
    348e:	45 cd       	rjmp	.-1398   	; 0x2f1a <__stack+0x261b>
    3490:	59 9a       	sbi	0x0b, 1	; 11
    3492:	37 cd       	rjmp	.-1426   	; 0x2f02 <__stack+0x2603>
    3494:	59 9a       	sbi	0x0b, 1	; 11
    3496:	29 cd       	rjmp	.-1454   	; 0x2eea <__stack+0x25eb>
    3498:	59 9a       	sbi	0x0b, 1	; 11
    349a:	1b cd       	rjmp	.-1482   	; 0x2ed2 <__stack+0x25d3>
    349c:	b7 e0       	ldi	r27, 0x07	; 7
    349e:	eb 9f       	mul	r30, r27
    34a0:	f0 01       	movw	r30, r0
    34a2:	11 24       	eor	r1, r1
    34a4:	ec 5a       	subi	r30, 0xAC	; 172
    34a6:	fe 4f       	sbci	r31, 0xFE	; 254
    34a8:	a2 81       	ldd	r26, Z+2	; 0x02
    34aa:	b3 81       	ldd	r27, Z+3	; 0x03
    34ac:	6c 91       	ld	r22, X
    34ae:	81 e0       	ldi	r24, 0x01	; 1
    34b0:	90 e0       	ldi	r25, 0x00	; 0
    34b2:	06 80       	ldd	r0, Z+6	; 0x06
    34b4:	02 c0       	rjmp	.+4      	; 0x34ba <__stack+0x2bbb>
    34b6:	88 0f       	add	r24, r24
    34b8:	99 1f       	adc	r25, r25
    34ba:	0a 94       	dec	r0
    34bc:	e2 f7       	brpl	.-8      	; 0x34b6 <__stack+0x2bb7>
    34be:	86 2b       	or	r24, r22
    34c0:	8c 93       	st	X, r24
    34c2:	ac cd       	rjmp	.-1192   	; 0x301c <__stack+0x271d>
    34c4:	b7 e0       	ldi	r27, 0x07	; 7
    34c6:	eb 9f       	mul	r30, r27
    34c8:	f0 01       	movw	r30, r0
    34ca:	11 24       	eor	r1, r1
    34cc:	ec 5a       	subi	r30, 0xAC	; 172
    34ce:	fe 4f       	sbci	r31, 0xFE	; 254
    34d0:	a2 81       	ldd	r26, Z+2	; 0x02
    34d2:	b3 81       	ldd	r27, Z+3	; 0x03
    34d4:	6c 91       	ld	r22, X
    34d6:	41 e0       	ldi	r20, 0x01	; 1
    34d8:	50 e0       	ldi	r21, 0x00	; 0
    34da:	06 80       	ldd	r0, Z+6	; 0x06
    34dc:	02 c0       	rjmp	.+4      	; 0x34e2 <__stack+0x2be3>
    34de:	44 0f       	add	r20, r20
    34e0:	55 1f       	adc	r21, r21
    34e2:	0a 94       	dec	r0
    34e4:	e2 f7       	brpl	.-8      	; 0x34de <__stack+0x2bdf>
    34e6:	46 2b       	or	r20, r22
    34e8:	4c 93       	st	X, r20
    34ea:	ce ce       	rjmp	.-612    	; 0x3288 <__stack+0x2989>
    34ec:	59 9a       	sbi	0x0b, 1	; 11
    34ee:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    34f0:	5b 98       	cbi	0x0b, 3	; 11
				//toggle the clock pin
				pinWrite(clock_pin, HIGH);
				pinWrite(clock_pin, LOW);
				pos--;
    34f2:	28 50       	subi	r18, 0x08	; 8
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    34f4:	5a 9a       	sbi	0x0b, 2	; 11
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
    34f6:	2f 3f       	cpi	r18, 0xFF	; 255
    34f8:	09 f0       	breq	.+2      	; 0x34fc <__stack+0x2bfd>
    34fa:	b9 cf       	rjmp	.-142    	; 0x346e <__stack+0x2b6f>
    34fc:	a4 e0       	ldi	r26, 0x04	; 4
    34fe:	b1 e0       	ldi	r27, 0x01	; 1
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    3500:	ed 91       	ld	r30, X+
    3502:	ee 23       	and	r30, r30
    3504:	09 f1       	breq	.+66     	; 0x3548 <__stack+0x2c49>
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    3506:	ec 3c       	cpi	r30, 0xCC	; 204
    3508:	d8 f7       	brcc	.-10     	; 0x3500 <__stack+0x2c01>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    350a:	27 e0       	ldi	r18, 0x07	; 7
    350c:	e2 9f       	mul	r30, r18
    350e:	f0 01       	movw	r30, r0
    3510:	11 24       	eor	r1, r1
    3512:	af 01       	movw	r20, r30
    3514:	4c 5a       	subi	r20, 0xAC	; 172
    3516:	5e 4f       	sbci	r21, 0xFE	; 254
    3518:	2a 01       	movw	r4, r20
    351a:	fa 01       	movw	r30, r20
    351c:	42 81       	ldd	r20, Z+2	; 0x02
    351e:	53 81       	ldd	r21, Z+3	; 0x03
    3520:	fa 01       	movw	r30, r20
    3522:	30 81       	ld	r19, Z
    3524:	22 24       	eor	r2, r2
    3526:	23 94       	inc	r2
    3528:	31 2c       	mov	r3, r1
    352a:	f2 01       	movw	r30, r4
    352c:	06 80       	ldd	r0, Z+6	; 0x06
    352e:	02 c0       	rjmp	.+4      	; 0x3534 <__stack+0x2c35>
    3530:	22 0c       	add	r2, r2
    3532:	33 1c       	adc	r3, r3
    3534:	0a 94       	dec	r0
    3536:	e2 f7       	brpl	.-8      	; 0x3530 <__stack+0x2c31>
    3538:	22 2d       	mov	r18, r2
    353a:	20 95       	com	r18
    353c:	23 23       	and	r18, r19
    353e:	fa 01       	movw	r30, r20
    3540:	20 83       	st	Z, r18
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    3542:	ed 91       	ld	r30, X+
    3544:	e1 11       	cpse	r30, r1
    3546:	df cf       	rjmp	.-66     	; 0x3506 <__stack+0x2c07>
/* Multiplexing method                                                  */
/************************************************************************/
static inline void MultiPlex(uint8_t *pin)
{
	pinsMultiWrite(plex_pins, LOW);
	pinWrite(plex_pins[*pin], HIGH);
    3548:	db 01       	movw	r26, r22
    354a:	ed 91       	ld	r30, X+
    354c:	bd 01       	movw	r22, r26
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    354e:	ec 3c       	cpi	r30, 0xCC	; 204
    3550:	08 f4       	brcc	.+2      	; 0x3554 <__stack+0x2c55>
    3552:	6f c0       	rjmp	.+222    	; 0x3632 <__stack+0x2d33>
	delay(delayms);
    3554:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    3558:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
/*  delay                                                               */
/************************************************************************/
int delayms = 1;
static inline void delay(int dl)
{
	while(dl >= 0)
    355c:	37 fd       	sbrc	r19, 7
    355e:	09 c0       	rjmp	.+18     	; 0x3572 <__stack+0x2c73>
    3560:	ef e9       	ldi	r30, 0x9F	; 159
    3562:	ff e0       	ldi	r31, 0x0F	; 15
    3564:	31 97       	sbiw	r30, 0x01	; 1
    3566:	f1 f7       	brne	.-4      	; 0x3564 <__stack+0x2c65>
    3568:	00 c0       	rjmp	.+0      	; 0x356a <__stack+0x2c6b>
    356a:	00 00       	nop
	{
		_delay_ms(1);
		dl--;
    356c:	21 50       	subi	r18, 0x01	; 1
    356e:	31 09       	sbc	r19, r1
    3570:	b8 f7       	brcc	.-18     	; 0x3560 <__stack+0x2c61>
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
    3572:	a4 e0       	ldi	r26, 0x04	; 4
    3574:	b1 e0       	ldi	r27, 0x01	; 1
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    3576:	ed 91       	ld	r30, X+
    3578:	ee 23       	and	r30, r30
    357a:	09 f1       	breq	.+66     	; 0x35be <__stack+0x2cbf>
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    357c:	ec 3c       	cpi	r30, 0xCC	; 204
    357e:	d8 f7       	brcc	.-10     	; 0x3576 <__stack+0x2c77>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    3580:	27 e0       	ldi	r18, 0x07	; 7
    3582:	e2 9f       	mul	r30, r18
    3584:	f0 01       	movw	r30, r0
    3586:	11 24       	eor	r1, r1
    3588:	af 01       	movw	r20, r30
    358a:	4c 5a       	subi	r20, 0xAC	; 172
    358c:	5e 4f       	sbci	r21, 0xFE	; 254
    358e:	2a 01       	movw	r4, r20
    3590:	fa 01       	movw	r30, r20
    3592:	42 81       	ldd	r20, Z+2	; 0x02
    3594:	53 81       	ldd	r21, Z+3	; 0x03
    3596:	fa 01       	movw	r30, r20
    3598:	30 81       	ld	r19, Z
    359a:	22 24       	eor	r2, r2
    359c:	23 94       	inc	r2
    359e:	31 2c       	mov	r3, r1
    35a0:	f2 01       	movw	r30, r4
    35a2:	06 80       	ldd	r0, Z+6	; 0x06
    35a4:	02 c0       	rjmp	.+4      	; 0x35aa <__stack+0x2cab>
    35a6:	22 0c       	add	r2, r2
    35a8:	33 1c       	adc	r3, r3
    35aa:	0a 94       	dec	r0
    35ac:	e2 f7       	brpl	.-8      	; 0x35a6 <__stack+0x2ca7>
    35ae:	22 2d       	mov	r18, r2
    35b0:	20 95       	com	r18
    35b2:	23 23       	and	r18, r19
    35b4:	fa 01       	movw	r30, r20
    35b6:	20 83       	st	Z, r18
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    35b8:	ed 91       	ld	r30, X+
    35ba:	e1 11       	cpse	r30, r1
    35bc:	df cf       	rjmp	.-66     	; 0x357c <__stack+0x2c7d>
    35be:	29 e0       	ldi	r18, 0x09	; 9
    35c0:	30 e0       	ldi	r19, 0x00	; 0
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    35c2:	5a 98       	cbi	0x0b, 2	; 11
    35c4:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    35c6:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    35c8:	5b 98       	cbi	0x0b, 3	; 11
    35ca:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    35cc:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    35ce:	5b 98       	cbi	0x0b, 3	; 11
    35d0:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    35d2:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    35d4:	5b 98       	cbi	0x0b, 3	; 11
    35d6:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    35d8:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    35da:	5b 98       	cbi	0x0b, 3	; 11
    35dc:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    35de:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    35e0:	5b 98       	cbi	0x0b, 3	; 11
    35e2:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    35e4:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    35e6:	5b 98       	cbi	0x0b, 3	; 11
    35e8:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    35ea:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    35ec:	5b 98       	cbi	0x0b, 3	; 11
    35ee:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    35f0:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    35f2:	5b 98       	cbi	0x0b, 3	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    35f4:	5a 9a       	sbi	0x0b, 2	; 11
    35f6:	21 50       	subi	r18, 0x01	; 1
    35f8:	31 09       	sbc	r19, r1
/* Clear Display                                                        */
/************************************************************************/
static inline void Clear(){
	int x, y = 0;
	pinsMultiWrite(plex_pins, LOW);
	for(x = 0; x < (SH_REG + 1); x++) {
    35fa:	19 f7       	brne	.-58     	; 0x35c2 <__stack+0x2cc3>
    35fc:	01 96       	adiw	r24, 0x01	; 1
{
	uint8_t byte, index, bit = 0;
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
    35fe:	87 30       	cpi	r24, 0x07	; 7
    3600:	91 05       	cpc	r25, r1
    3602:	09 f0       	breq	.+2      	; 0x3606 <__stack+0x2d07>
    3604:	d0 ce       	rjmp	.-608    	; 0x33a6 <__stack+0x2aa7>
			pinWrite(latch_pin, HIGH);
		}
		MultiPlex(&byte);
		Clear();
	}
	delayms = 1;
    3606:	f0 92 01 01 	sts	0x0101, r15	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    360a:	e0 92 00 01 	sts	0x0100, r14	; 0x800100 <__DATA_REGION_ORIGIN__>
    360e:	9a 94       	dec	r9
}
}*/
static inline void HoldDisplayBuffer(const uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
    3610:	91 10       	cpse	r9, r1
    3612:	c5 ce       	rjmp	.-630    	; 0x339e <__stack+0x2a9f>
    3614:	a9 81       	ldd	r26, Y+1	; 0x01
    3616:	ba 81       	ldd	r27, Y+2	; 0x02
    3618:	f3 cb       	rjmp	.-2074   	; 0x2e00 <__stack+0x2501>
    361a:	59 9a       	sbi	0x0b, 1	; 11
    361c:	15 cf       	rjmp	.-470    	; 0x3448 <__stack+0x2b49>
    361e:	59 9a       	sbi	0x0b, 1	; 11
    3620:	07 cf       	rjmp	.-498    	; 0x3430 <__stack+0x2b31>
    3622:	59 9a       	sbi	0x0b, 1	; 11
    3624:	f9 ce       	rjmp	.-526    	; 0x3418 <__stack+0x2b19>
    3626:	59 9a       	sbi	0x0b, 1	; 11
    3628:	eb ce       	rjmp	.-554    	; 0x3400 <__stack+0x2b01>
    362a:	59 9a       	sbi	0x0b, 1	; 11
    362c:	dd ce       	rjmp	.-582    	; 0x33e8 <__stack+0x2ae9>
    362e:	59 9a       	sbi	0x0b, 1	; 11
    3630:	cf ce       	rjmp	.-610    	; 0x33d0 <__stack+0x2ad1>
    3632:	b7 e0       	ldi	r27, 0x07	; 7
    3634:	eb 9f       	mul	r30, r27
    3636:	f0 01       	movw	r30, r0
    3638:	11 24       	eor	r1, r1
    363a:	ec 5a       	subi	r30, 0xAC	; 172
    363c:	fe 4f       	sbci	r31, 0xFE	; 254
    363e:	a2 81       	ldd	r26, Z+2	; 0x02
    3640:	b3 81       	ldd	r27, Z+3	; 0x03
    3642:	4c 91       	ld	r20, X
    3644:	21 e0       	ldi	r18, 0x01	; 1
    3646:	30 e0       	ldi	r19, 0x00	; 0
    3648:	06 80       	ldd	r0, Z+6	; 0x06
    364a:	02 c0       	rjmp	.+4      	; 0x3650 <__stack+0x2d51>
    364c:	22 0f       	add	r18, r18
    364e:	33 1f       	adc	r19, r19
    3650:	0a 94       	dec	r0
    3652:	e2 f7       	brpl	.-8      	; 0x364c <__stack+0x2d4d>
    3654:	24 2b       	or	r18, r20
    3656:	2c 93       	st	X, r18
    3658:	7d cf       	rjmp	.-262    	; 0x3554 <__stack+0x2c55>

0000365a <_exit>:
    365a:	f8 94       	cli

0000365c <__stop_program>:
    365c:	ff cf       	rjmp	.-2      	; 0x365c <__stop_program>
