
Matrix-Display.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000110  00800100  00003840  000038d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003840  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000106  00800210  00800210  000039e4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000039e4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003a14  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00003a54  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000098ea  00000000  00000000  00003b0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000936  00000000  00000000  0000d3f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000054b0  00000000  00000000  0000dd2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003b8  00000000  00000000  000131dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000641  00000000  00000000  00013594  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00023555  00000000  00000000  00013bd5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00005e48  00000000  00000000  0003712a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 22 01 	jmp	0x244	; 0x244 <__ctors_end>
       4:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
       8:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
       c:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      10:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      14:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      18:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      1c:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      20:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      24:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      28:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      2c:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      30:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      34:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      38:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      3c:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      40:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      44:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      48:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      4c:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      50:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      54:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      58:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      5c:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      60:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      64:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 00       	nop
      6c:	00 00       	nop
      6e:	00 5f       	subi	r16, 0xF0	; 240
      70:	00 00       	nop
      72:	00 07       	cpc	r16, r16
      74:	00 07       	cpc	r16, r16
      76:	00 14       	cp	r0, r0
      78:	7f 14       	cp	r7, r15
      7a:	7f 14       	cp	r7, r15
      7c:	24 2a       	or	r2, r20
      7e:	7f 2a       	or	r7, r31
      80:	12 23       	and	r17, r18
      82:	13 08       	sbc	r1, r3
      84:	64 62       	ori	r22, 0x24	; 36
      86:	36 49       	sbci	r19, 0x96	; 150
      88:	56 20       	and	r5, r6
      8a:	50 00       	.word	0x0050	; ????
      8c:	08 07       	cpc	r16, r24
      8e:	03 00       	.word	0x0003	; ????
      90:	00 1c       	adc	r0, r0
      92:	22 41       	sbci	r18, 0x12	; 18
      94:	00 00       	nop
      96:	41 22       	and	r4, r17
      98:	1c 00       	.word	0x001c	; ????
      9a:	2a 1c       	adc	r2, r10
      9c:	7f 1c       	adc	r7, r15
      9e:	2a 08       	sbc	r2, r10
      a0:	08 3e       	cpi	r16, 0xE8	; 232
      a2:	08 08       	sbc	r0, r8
      a4:	00 80       	ld	r0, Z
      a6:	70 30       	cpi	r23, 0x00	; 0
      a8:	00 08       	sbc	r0, r0
      aa:	08 08       	sbc	r0, r8
      ac:	08 08       	sbc	r0, r8
      ae:	00 00       	nop
      b0:	60 60       	ori	r22, 0x00	; 0
      b2:	00 20       	and	r0, r0
      b4:	10 08       	sbc	r1, r0
      b6:	04 02       	muls	r16, r20
      b8:	3e 51       	subi	r19, 0x1E	; 30
      ba:	49 45       	sbci	r20, 0x59	; 89
      bc:	3e 00       	.word	0x003e	; ????
      be:	42 7f       	andi	r20, 0xF2	; 242
      c0:	40 00       	.word	0x0040	; ????
      c2:	72 49       	sbci	r23, 0x92	; 146
      c4:	49 49       	sbci	r20, 0x99	; 153
      c6:	46 21       	and	r20, r6
      c8:	41 49       	sbci	r20, 0x91	; 145
      ca:	4d 33       	cpi	r20, 0x3D	; 61
      cc:	18 14       	cp	r1, r8
      ce:	12 7f       	andi	r17, 0xF2	; 242
      d0:	10 27       	eor	r17, r16
      d2:	45 45       	sbci	r20, 0x55	; 85
      d4:	45 39       	cpi	r20, 0x95	; 149
      d6:	3c 4a       	sbci	r19, 0xAC	; 172
      d8:	49 49       	sbci	r20, 0x99	; 153
      da:	31 41       	sbci	r19, 0x11	; 17
      dc:	21 11       	cpse	r18, r1
      de:	09 07       	cpc	r16, r25
      e0:	36 49       	sbci	r19, 0x96	; 150
      e2:	49 49       	sbci	r20, 0x99	; 153
      e4:	36 46       	sbci	r19, 0x66	; 102
      e6:	49 49       	sbci	r20, 0x99	; 153
      e8:	29 1e       	adc	r2, r25
      ea:	00 00       	nop
      ec:	14 00       	.word	0x0014	; ????
      ee:	00 00       	nop
      f0:	40 34       	cpi	r20, 0x40	; 64
      f2:	00 00       	nop
      f4:	00 08       	sbc	r0, r0
      f6:	14 22       	and	r1, r20
      f8:	41 14       	cp	r4, r1
      fa:	14 14       	cp	r1, r4
      fc:	14 14       	cp	r1, r4
      fe:	00 41       	sbci	r16, 0x10	; 16
     100:	22 14       	cp	r2, r2
     102:	08 02       	muls	r16, r24
     104:	01 59       	subi	r16, 0x91	; 145
     106:	09 06       	cpc	r0, r25
     108:	3e 41       	sbci	r19, 0x1E	; 30
     10a:	5d 59       	subi	r21, 0x9D	; 157
     10c:	4e 7c       	andi	r20, 0xCE	; 206
     10e:	12 11       	cpse	r17, r2
     110:	12 7c       	andi	r17, 0xC2	; 194
     112:	7f 49       	sbci	r23, 0x9F	; 159
     114:	49 49       	sbci	r20, 0x99	; 153
     116:	36 3e       	cpi	r19, 0xE6	; 230
     118:	41 41       	sbci	r20, 0x11	; 17
     11a:	41 22       	and	r4, r17
     11c:	7f 41       	sbci	r23, 0x1F	; 31
     11e:	41 41       	sbci	r20, 0x11	; 17
     120:	3e 7f       	andi	r19, 0xFE	; 254
     122:	49 49       	sbci	r20, 0x99	; 153
     124:	49 41       	sbci	r20, 0x19	; 25
     126:	7f 09       	sbc	r23, r15
     128:	09 09       	sbc	r16, r9
     12a:	01 3e       	cpi	r16, 0xE1	; 225
     12c:	41 41       	sbci	r20, 0x11	; 17
     12e:	51 73       	andi	r21, 0x31	; 49
     130:	7f 08       	sbc	r7, r15
     132:	08 08       	sbc	r0, r8
     134:	7f 00       	.word	0x007f	; ????
     136:	41 7f       	andi	r20, 0xF1	; 241
     138:	41 00       	.word	0x0041	; ????
     13a:	20 40       	sbci	r18, 0x00	; 0
     13c:	41 3f       	cpi	r20, 0xF1	; 241
     13e:	01 7f       	andi	r16, 0xF1	; 241
     140:	08 14       	cp	r0, r8
     142:	22 41       	sbci	r18, 0x12	; 18
     144:	7f 40       	sbci	r23, 0x0F	; 15
     146:	40 40       	sbci	r20, 0x00	; 0
     148:	40 7f       	andi	r20, 0xF0	; 240
     14a:	02 1c       	adc	r0, r2
     14c:	02 7f       	andi	r16, 0xF2	; 242
     14e:	7f 04       	cpc	r7, r15
     150:	08 10       	cpse	r0, r8
     152:	7f 3e       	cpi	r23, 0xEF	; 239
     154:	41 41       	sbci	r20, 0x11	; 17
     156:	41 3e       	cpi	r20, 0xE1	; 225
     158:	7f 09       	sbc	r23, r15
     15a:	09 09       	sbc	r16, r9
     15c:	06 3e       	cpi	r16, 0xE6	; 230
     15e:	41 51       	subi	r20, 0x11	; 17
     160:	21 5e       	subi	r18, 0xE1	; 225
     162:	7f 09       	sbc	r23, r15
     164:	19 29       	or	r17, r9
     166:	46 26       	eor	r4, r22
     168:	49 49       	sbci	r20, 0x99	; 153
     16a:	49 32       	cpi	r20, 0x29	; 41
     16c:	03 01       	movw	r0, r6
     16e:	7f 01       	movw	r14, r30
     170:	03 3f       	cpi	r16, 0xF3	; 243
     172:	40 40       	sbci	r20, 0x00	; 0
     174:	40 3f       	cpi	r20, 0xF0	; 240
     176:	1f 20       	and	r1, r15
     178:	40 20       	and	r4, r0
     17a:	1f 3f       	cpi	r17, 0xFF	; 255
     17c:	40 38       	cpi	r20, 0x80	; 128
     17e:	40 3f       	cpi	r20, 0xF0	; 240
     180:	63 14       	cp	r6, r3
     182:	08 14       	cp	r0, r8
     184:	63 03       	mulsu	r22, r19
     186:	04 78       	andi	r16, 0x84	; 132
     188:	04 03       	mulsu	r16, r20
     18a:	61 59       	subi	r22, 0x91	; 145
     18c:	49 4d       	sbci	r20, 0xD9	; 217
     18e:	43 00       	.word	0x0043	; ????
     190:	7f 41       	sbci	r23, 0x1F	; 31
     192:	41 41       	sbci	r20, 0x11	; 17
     194:	02 04       	cpc	r0, r2
     196:	08 10       	cpse	r0, r8
     198:	20 00       	.word	0x0020	; ????
     19a:	41 41       	sbci	r20, 0x11	; 17
     19c:	41 7f       	andi	r20, 0xF1	; 241
     19e:	04 02       	muls	r16, r20
     1a0:	01 02       	muls	r16, r17
     1a2:	04 40       	sbci	r16, 0x04	; 4
     1a4:	40 40       	sbci	r20, 0x00	; 0
     1a6:	40 40       	sbci	r20, 0x00	; 0
     1a8:	00 03       	mulsu	r16, r16
     1aa:	07 08       	sbc	r0, r7
     1ac:	00 20       	and	r0, r0
     1ae:	54 54       	subi	r21, 0x44	; 68
     1b0:	78 40       	sbci	r23, 0x08	; 8
     1b2:	7f 28       	or	r7, r15
     1b4:	44 44       	sbci	r20, 0x44	; 68
     1b6:	38 38       	cpi	r19, 0x88	; 136
     1b8:	44 44       	sbci	r20, 0x44	; 68
     1ba:	44 28       	or	r4, r4
     1bc:	38 44       	sbci	r19, 0x48	; 72
     1be:	44 28       	or	r4, r4
     1c0:	7f 38       	cpi	r23, 0x8F	; 143
     1c2:	54 54       	subi	r21, 0x44	; 68
     1c4:	54 18       	sub	r5, r4
     1c6:	00 08       	sbc	r0, r0
     1c8:	7e 09       	sbc	r23, r14
     1ca:	02 18       	sub	r0, r2
     1cc:	a4 a4       	ldd	r10, Z+44	; 0x2c
     1ce:	9c 78       	andi	r25, 0x8C	; 140
     1d0:	7f 08       	sbc	r7, r15
     1d2:	04 04       	cpc	r0, r4
     1d4:	78 00       	.word	0x0078	; ????
     1d6:	44 7d       	andi	r20, 0xD4	; 212
     1d8:	40 00       	.word	0x0040	; ????
     1da:	20 40       	sbci	r18, 0x00	; 0
     1dc:	40 3d       	cpi	r20, 0xD0	; 208
     1de:	00 7f       	andi	r16, 0xF0	; 240
     1e0:	10 28       	or	r1, r0
     1e2:	44 00       	.word	0x0044	; ????
     1e4:	00 41       	sbci	r16, 0x10	; 16
     1e6:	7f 40       	sbci	r23, 0x0F	; 15
     1e8:	00 7c       	andi	r16, 0xC0	; 192
     1ea:	04 78       	andi	r16, 0x84	; 132
     1ec:	04 78       	andi	r16, 0x84	; 132
     1ee:	7c 08       	sbc	r7, r12
     1f0:	04 04       	cpc	r0, r4
     1f2:	78 38       	cpi	r23, 0x88	; 136
     1f4:	44 44       	sbci	r20, 0x44	; 68
     1f6:	44 38       	cpi	r20, 0x84	; 132
     1f8:	fc 18       	sub	r15, r12
     1fa:	24 24       	eor	r2, r4
     1fc:	18 18       	sub	r1, r8
     1fe:	24 24       	eor	r2, r4
     200:	18 fc       	.word	0xfc18	; ????
     202:	7c 08       	sbc	r7, r12
     204:	04 04       	cpc	r0, r4
     206:	08 48       	sbci	r16, 0x88	; 136
     208:	54 54       	subi	r21, 0x44	; 68
     20a:	54 24       	eor	r5, r4
     20c:	04 04       	cpc	r0, r4
     20e:	3f 44       	sbci	r19, 0x4F	; 79
     210:	24 3c       	cpi	r18, 0xC4	; 196
     212:	40 40       	sbci	r20, 0x00	; 0
     214:	20 7c       	andi	r18, 0xC0	; 192
     216:	1c 20       	and	r1, r12
     218:	40 20       	and	r4, r0
     21a:	1c 3c       	cpi	r17, 0xCC	; 204
     21c:	40 30       	cpi	r20, 0x00	; 0
     21e:	40 3c       	cpi	r20, 0xC0	; 192
     220:	44 28       	or	r4, r4
     222:	10 28       	or	r1, r0
     224:	44 4c       	sbci	r20, 0xC4	; 196
     226:	90 90 90 7c 	lds	r9, 0x7C90	; 0x807c90 <__bss_end+0x797a>
     22a:	44 64       	ori	r20, 0x44	; 68
     22c:	54 4c       	sbci	r21, 0xC4	; 196
     22e:	44 00       	.word	0x0044	; ????
     230:	08 36       	cpi	r16, 0x68	; 104
     232:	41 00       	.word	0x0041	; ????
     234:	00 00       	nop
     236:	77 00       	.word	0x0077	; ????
     238:	00 00       	nop
     23a:	41 36       	cpi	r20, 0x61	; 97
     23c:	08 00       	.word	0x0008	; ????
     23e:	02 01       	movw	r0, r4
     240:	02 04       	cpc	r0, r2
     242:	02 00       	.word	0x0002	; ????

00000244 <__ctors_end>:
     244:	11 24       	eor	r1, r1
     246:	1f be       	out	0x3f, r1	; 63
     248:	cf ef       	ldi	r28, 0xFF	; 255
     24a:	d8 e0       	ldi	r29, 0x08	; 8
     24c:	de bf       	out	0x3e, r29	; 62
     24e:	cd bf       	out	0x3d, r28	; 61

00000250 <__do_copy_data>:
     250:	12 e0       	ldi	r17, 0x02	; 2
     252:	a0 e0       	ldi	r26, 0x00	; 0
     254:	b1 e0       	ldi	r27, 0x01	; 1
     256:	e0 e4       	ldi	r30, 0x40	; 64
     258:	f8 e3       	ldi	r31, 0x38	; 56
     25a:	02 c0       	rjmp	.+4      	; 0x260 <__do_copy_data+0x10>
     25c:	05 90       	lpm	r0, Z+
     25e:	0d 92       	st	X+, r0
     260:	a0 31       	cpi	r26, 0x10	; 16
     262:	b1 07       	cpc	r27, r17
     264:	d9 f7       	brne	.-10     	; 0x25c <__do_copy_data+0xc>

00000266 <__do_clear_bss>:
     266:	23 e0       	ldi	r18, 0x03	; 3
     268:	a0 e1       	ldi	r26, 0x10	; 16
     26a:	b2 e0       	ldi	r27, 0x02	; 2
     26c:	01 c0       	rjmp	.+2      	; 0x270 <.do_clear_bss_start>

0000026e <.do_clear_bss_loop>:
     26e:	1d 92       	st	X+, r1

00000270 <.do_clear_bss_start>:
     270:	a6 31       	cpi	r26, 0x16	; 22
     272:	b2 07       	cpc	r27, r18
     274:	e1 f7       	brne	.-8      	; 0x26e <.do_clear_bss_loop>
     276:	0e 94 87 02 	call	0x50e	; 0x50e <main>
     27a:	0c 94 1e 1c 	jmp	0x383c	; 0x383c <_exit>

0000027e <__bad_interrupt>:
     27e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000282 <DisplayBuffer>:
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     282:	cf 92       	push	r12
     284:	df 92       	push	r13
     286:	ef 92       	push	r14
     288:	ff 92       	push	r15
     28a:	1f 93       	push	r17
     28c:	cf 93       	push	r28
     28e:	df 93       	push	r29
     290:	ac 01       	movw	r20, r24
     292:	84 e0       	ldi	r24, 0x04	; 4
     294:	e8 2e       	mov	r14, r24
     296:	81 e0       	ldi	r24, 0x01	; 1
     298:	f8 2e       	mov	r15, r24
     29a:	c1 2c       	mov	r12, r1
     29c:	d1 2c       	mov	r13, r1
     29e:	61 e0       	ldi	r22, 0x01	; 1
     2a0:	70 e0       	ldi	r23, 0x00	; 0
     2a2:	26 2f       	mov	r18, r22
     2a4:	0c 2c       	mov	r0, r12
     2a6:	01 c0       	rjmp	.+2      	; 0x2aa <DisplayBuffer+0x28>
     2a8:	22 0f       	add	r18, r18
     2aa:	0a 94       	dec	r0
     2ac:	ea f7       	brpl	.-6      	; 0x2a8 <DisplayBuffer+0x26>
     2ae:	9f e3       	ldi	r25, 0x3F	; 63
     2b0:	5a c0       	rjmp	.+180    	; 0x366 <DisplayBuffer+0xe4>
     2b2:	59 98       	cbi	0x0b, 1	; 11
     2b4:	5b 9a       	sbi	0x0b, 3	; 11
     2b6:	5b 98       	cbi	0x0b, 3	; 11
     2b8:	8f ef       	ldi	r24, 0xFF	; 255
     2ba:	89 0f       	add	r24, r25
     2bc:	fa 01       	movw	r30, r20
     2be:	e8 0f       	add	r30, r24
     2c0:	f1 1d       	adc	r31, r1
     2c2:	80 81       	ld	r24, Z
     2c4:	82 23       	and	r24, r18
     2c6:	09 f0       	breq	.+2      	; 0x2ca <DisplayBuffer+0x48>
     2c8:	e7 c0       	rjmp	.+462    	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
     2ca:	59 98       	cbi	0x0b, 1	; 11
     2cc:	5b 9a       	sbi	0x0b, 3	; 11
     2ce:	5b 98       	cbi	0x0b, 3	; 11
     2d0:	8e ef       	ldi	r24, 0xFE	; 254
     2d2:	89 0f       	add	r24, r25
     2d4:	fa 01       	movw	r30, r20
     2d6:	e8 0f       	add	r30, r24
     2d8:	f1 1d       	adc	r31, r1
     2da:	80 81       	ld	r24, Z
     2dc:	82 23       	and	r24, r18
     2de:	09 f0       	breq	.+2      	; 0x2e2 <DisplayBuffer+0x60>
     2e0:	d9 c0       	rjmp	.+434    	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>
     2e2:	59 98       	cbi	0x0b, 1	; 11
     2e4:	5b 9a       	sbi	0x0b, 3	; 11
     2e6:	5b 98       	cbi	0x0b, 3	; 11
     2e8:	8d ef       	ldi	r24, 0xFD	; 253
     2ea:	89 0f       	add	r24, r25
     2ec:	fa 01       	movw	r30, r20
     2ee:	e8 0f       	add	r30, r24
     2f0:	f1 1d       	adc	r31, r1
     2f2:	80 81       	ld	r24, Z
     2f4:	82 23       	and	r24, r18
     2f6:	09 f0       	breq	.+2      	; 0x2fa <DisplayBuffer+0x78>
     2f8:	cb c0       	rjmp	.+406    	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
     2fa:	59 98       	cbi	0x0b, 1	; 11
     2fc:	5b 9a       	sbi	0x0b, 3	; 11
     2fe:	5b 98       	cbi	0x0b, 3	; 11
     300:	8c ef       	ldi	r24, 0xFC	; 252
     302:	89 0f       	add	r24, r25
     304:	fa 01       	movw	r30, r20
     306:	e8 0f       	add	r30, r24
     308:	f1 1d       	adc	r31, r1
     30a:	80 81       	ld	r24, Z
     30c:	82 23       	and	r24, r18
     30e:	09 f0       	breq	.+2      	; 0x312 <DisplayBuffer+0x90>
     310:	bd c0       	rjmp	.+378    	; 0x48c <__EEPROM_REGION_LENGTH__+0x8c>
     312:	59 98       	cbi	0x0b, 1	; 11
     314:	5b 9a       	sbi	0x0b, 3	; 11
     316:	5b 98       	cbi	0x0b, 3	; 11
     318:	8b ef       	ldi	r24, 0xFB	; 251
     31a:	89 0f       	add	r24, r25
     31c:	fa 01       	movw	r30, r20
     31e:	e8 0f       	add	r30, r24
     320:	f1 1d       	adc	r31, r1
     322:	80 81       	ld	r24, Z
     324:	82 23       	and	r24, r18
     326:	09 f0       	breq	.+2      	; 0x32a <DisplayBuffer+0xa8>
     328:	af c0       	rjmp	.+350    	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
     32a:	59 98       	cbi	0x0b, 1	; 11
     32c:	5b 9a       	sbi	0x0b, 3	; 11
     32e:	5b 98       	cbi	0x0b, 3	; 11
     330:	8a ef       	ldi	r24, 0xFA	; 250
     332:	89 0f       	add	r24, r25
     334:	fa 01       	movw	r30, r20
     336:	e8 0f       	add	r30, r24
     338:	f1 1d       	adc	r31, r1
     33a:	80 81       	ld	r24, Z
     33c:	82 23       	and	r24, r18
     33e:	09 f0       	breq	.+2      	; 0x342 <DisplayBuffer+0xc0>
     340:	a1 c0       	rjmp	.+322    	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
     342:	59 98       	cbi	0x0b, 1	; 11
     344:	5b 9a       	sbi	0x0b, 3	; 11
     346:	5b 98       	cbi	0x0b, 3	; 11
     348:	89 ef       	ldi	r24, 0xF9	; 249
     34a:	89 0f       	add	r24, r25
     34c:	fa 01       	movw	r30, r20
     34e:	e8 0f       	add	r30, r24
     350:	f1 1d       	adc	r31, r1
     352:	80 81       	ld	r24, Z
     354:	82 23       	and	r24, r18
     356:	89 f4       	brne	.+34     	; 0x37a <DisplayBuffer+0xf8>
     358:	59 98       	cbi	0x0b, 1	; 11
     35a:	5b 9a       	sbi	0x0b, 3	; 11
     35c:	5b 98       	cbi	0x0b, 3	; 11
     35e:	98 50       	subi	r25, 0x08	; 8
     360:	5a 9a       	sbi	0x0b, 2	; 11
     362:	9f 3f       	cpi	r25, 0xFF	; 255
     364:	89 f0       	breq	.+34     	; 0x388 <DisplayBuffer+0x106>
     366:	5a 98       	cbi	0x0b, 2	; 11
     368:	fa 01       	movw	r30, r20
     36a:	e9 0f       	add	r30, r25
     36c:	f1 1d       	adc	r31, r1
     36e:	80 81       	ld	r24, Z
     370:	82 23       	and	r24, r18
     372:	09 f4       	brne	.+2      	; 0x376 <DisplayBuffer+0xf4>
     374:	9e cf       	rjmp	.-196    	; 0x2b2 <DisplayBuffer+0x30>
     376:	59 9a       	sbi	0x0b, 1	; 11
     378:	9d cf       	rjmp	.-198    	; 0x2b4 <DisplayBuffer+0x32>
     37a:	59 9a       	sbi	0x0b, 1	; 11
     37c:	5b 9a       	sbi	0x0b, 3	; 11
     37e:	5b 98       	cbi	0x0b, 3	; 11
     380:	98 50       	subi	r25, 0x08	; 8
     382:	5a 9a       	sbi	0x0b, 2	; 11
     384:	9f 3f       	cpi	r25, 0xFF	; 255
     386:	79 f7       	brne	.-34     	; 0x366 <DisplayBuffer+0xe4>
     388:	c4 e0       	ldi	r28, 0x04	; 4
     38a:	d1 e0       	ldi	r29, 0x01	; 1
     38c:	e9 91       	ld	r30, Y+
     38e:	ee 23       	and	r30, r30
     390:	c9 f0       	breq	.+50     	; 0x3c4 <DisplayBuffer+0x142>
     392:	ec 3c       	cpi	r30, 0xCC	; 204
     394:	d8 f7       	brcc	.-10     	; 0x38c <DisplayBuffer+0x10a>
     396:	27 e0       	ldi	r18, 0x07	; 7
     398:	e2 9f       	mul	r30, r18
     39a:	f0 01       	movw	r30, r0
     39c:	11 24       	eor	r1, r1
     39e:	ec 5b       	subi	r30, 0xBC	; 188
     3a0:	fe 4f       	sbci	r31, 0xFE	; 254
     3a2:	a2 81       	ldd	r26, Z+2	; 0x02
     3a4:	b3 81       	ldd	r27, Z+3	; 0x03
     3a6:	3c 91       	ld	r19, X
     3a8:	cb 01       	movw	r24, r22
     3aa:	06 80       	ldd	r0, Z+6	; 0x06
     3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <DisplayBuffer+0x130>
     3ae:	88 0f       	add	r24, r24
     3b0:	99 1f       	adc	r25, r25
     3b2:	0a 94       	dec	r0
     3b4:	e2 f7       	brpl	.-8      	; 0x3ae <DisplayBuffer+0x12c>
     3b6:	28 2f       	mov	r18, r24
     3b8:	20 95       	com	r18
     3ba:	23 23       	and	r18, r19
     3bc:	2c 93       	st	X, r18
     3be:	e9 91       	ld	r30, Y+
     3c0:	e1 11       	cpse	r30, r1
     3c2:	e7 cf       	rjmp	.-50     	; 0x392 <DisplayBuffer+0x110>
     3c4:	d7 01       	movw	r26, r14
     3c6:	ed 91       	ld	r30, X+
     3c8:	7d 01       	movw	r14, r26
     3ca:	ec 3c       	cpi	r30, 0xCC	; 204
     3cc:	08 f4       	brcc	.+2      	; 0x3d0 <DisplayBuffer+0x14e>
     3ce:	66 c0       	rjmp	.+204    	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
     3d0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     3d4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     3d8:	97 fd       	sbrc	r25, 7
     3da:	08 c0       	rjmp	.+16     	; 0x3ec <DisplayBuffer+0x16a>
     3dc:	ef e9       	ldi	r30, 0x9F	; 159
     3de:	ff e0       	ldi	r31, 0x0F	; 15
     3e0:	31 97       	sbiw	r30, 0x01	; 1
     3e2:	f1 f7       	brne	.-4      	; 0x3e0 <DisplayBuffer+0x15e>
     3e4:	00 c0       	rjmp	.+0      	; 0x3e6 <DisplayBuffer+0x164>
     3e6:	00 00       	nop
     3e8:	01 97       	sbiw	r24, 0x01	; 1
     3ea:	c0 f7       	brcc	.-16     	; 0x3dc <DisplayBuffer+0x15a>
     3ec:	c4 e0       	ldi	r28, 0x04	; 4
     3ee:	d1 e0       	ldi	r29, 0x01	; 1
     3f0:	e9 91       	ld	r30, Y+
     3f2:	ee 23       	and	r30, r30
     3f4:	c9 f0       	breq	.+50     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
     3f6:	ec 3c       	cpi	r30, 0xCC	; 204
     3f8:	d8 f7       	brcc	.-10     	; 0x3f0 <DisplayBuffer+0x16e>
     3fa:	27 e0       	ldi	r18, 0x07	; 7
     3fc:	e2 9f       	mul	r30, r18
     3fe:	f0 01       	movw	r30, r0
     400:	11 24       	eor	r1, r1
     402:	ec 5b       	subi	r30, 0xBC	; 188
     404:	fe 4f       	sbci	r31, 0xFE	; 254
     406:	a2 81       	ldd	r26, Z+2	; 0x02
     408:	b3 81       	ldd	r27, Z+3	; 0x03
     40a:	3c 91       	ld	r19, X
     40c:	cb 01       	movw	r24, r22
     40e:	06 80       	ldd	r0, Z+6	; 0x06
     410:	02 c0       	rjmp	.+4      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
     412:	88 0f       	add	r24, r24
     414:	99 1f       	adc	r25, r25
     416:	0a 94       	dec	r0
     418:	e2 f7       	brpl	.-8      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
     41a:	28 2f       	mov	r18, r24
     41c:	20 95       	com	r18
     41e:	23 23       	and	r18, r19
     420:	2c 93       	st	X, r18
     422:	e9 91       	ld	r30, Y+
     424:	e1 11       	cpse	r30, r1
     426:	e7 cf       	rjmp	.-50     	; 0x3f6 <DisplayBuffer+0x174>
     428:	89 e0       	ldi	r24, 0x09	; 9
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	5a 98       	cbi	0x0b, 2	; 11
     42e:	59 98       	cbi	0x0b, 1	; 11
     430:	5b 9a       	sbi	0x0b, 3	; 11
     432:	5b 98       	cbi	0x0b, 3	; 11
     434:	59 98       	cbi	0x0b, 1	; 11
     436:	5b 9a       	sbi	0x0b, 3	; 11
     438:	5b 98       	cbi	0x0b, 3	; 11
     43a:	59 98       	cbi	0x0b, 1	; 11
     43c:	5b 9a       	sbi	0x0b, 3	; 11
     43e:	5b 98       	cbi	0x0b, 3	; 11
     440:	59 98       	cbi	0x0b, 1	; 11
     442:	5b 9a       	sbi	0x0b, 3	; 11
     444:	5b 98       	cbi	0x0b, 3	; 11
     446:	59 98       	cbi	0x0b, 1	; 11
     448:	5b 9a       	sbi	0x0b, 3	; 11
     44a:	5b 98       	cbi	0x0b, 3	; 11
     44c:	59 98       	cbi	0x0b, 1	; 11
     44e:	5b 9a       	sbi	0x0b, 3	; 11
     450:	5b 98       	cbi	0x0b, 3	; 11
     452:	59 98       	cbi	0x0b, 1	; 11
     454:	5b 9a       	sbi	0x0b, 3	; 11
     456:	5b 98       	cbi	0x0b, 3	; 11
     458:	59 98       	cbi	0x0b, 1	; 11
     45a:	5b 9a       	sbi	0x0b, 3	; 11
     45c:	5b 98       	cbi	0x0b, 3	; 11
     45e:	5a 9a       	sbi	0x0b, 2	; 11
     460:	01 97       	sbiw	r24, 0x01	; 1
     462:	21 f7       	brne	.-56     	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
     464:	9f ef       	ldi	r25, 0xFF	; 255
     466:	c9 1a       	sub	r12, r25
     468:	d9 0a       	sbc	r13, r25
     46a:	a7 e0       	ldi	r26, 0x07	; 7
     46c:	ca 16       	cp	r12, r26
     46e:	d1 04       	cpc	r13, r1
     470:	09 f0       	breq	.+2      	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
     472:	17 cf       	rjmp	.-466    	; 0x2a2 <DisplayBuffer+0x20>
     474:	df 91       	pop	r29
     476:	cf 91       	pop	r28
     478:	1f 91       	pop	r17
     47a:	ff 90       	pop	r15
     47c:	ef 90       	pop	r14
     47e:	df 90       	pop	r13
     480:	cf 90       	pop	r12
     482:	08 95       	ret
     484:	59 9a       	sbi	0x0b, 1	; 11
     486:	5e cf       	rjmp	.-324    	; 0x344 <DisplayBuffer+0xc2>
     488:	59 9a       	sbi	0x0b, 1	; 11
     48a:	50 cf       	rjmp	.-352    	; 0x32c <DisplayBuffer+0xaa>
     48c:	59 9a       	sbi	0x0b, 1	; 11
     48e:	42 cf       	rjmp	.-380    	; 0x314 <DisplayBuffer+0x92>
     490:	59 9a       	sbi	0x0b, 1	; 11
     492:	34 cf       	rjmp	.-408    	; 0x2fc <DisplayBuffer+0x7a>
     494:	59 9a       	sbi	0x0b, 1	; 11
     496:	26 cf       	rjmp	.-436    	; 0x2e4 <DisplayBuffer+0x62>
     498:	59 9a       	sbi	0x0b, 1	; 11
     49a:	18 cf       	rjmp	.-464    	; 0x2cc <DisplayBuffer+0x4a>
     49c:	b7 e0       	ldi	r27, 0x07	; 7
     49e:	eb 9f       	mul	r30, r27
     4a0:	f0 01       	movw	r30, r0
     4a2:	11 24       	eor	r1, r1
     4a4:	ec 5b       	subi	r30, 0xBC	; 188
     4a6:	fe 4f       	sbci	r31, 0xFE	; 254
     4a8:	c2 81       	ldd	r28, Z+2	; 0x02
     4aa:	d3 81       	ldd	r29, Z+3	; 0x03
     4ac:	18 81       	ld	r17, Y
     4ae:	cb 01       	movw	r24, r22
     4b0:	06 80       	ldd	r0, Z+6	; 0x06
     4b2:	02 c0       	rjmp	.+4      	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
     4b4:	88 0f       	add	r24, r24
     4b6:	99 1f       	adc	r25, r25
     4b8:	0a 94       	dec	r0
     4ba:	e2 f7       	brpl	.-8      	; 0x4b4 <__EEPROM_REGION_LENGTH__+0xb4>
     4bc:	81 2b       	or	r24, r17
     4be:	88 83       	st	Y, r24
     4c0:	87 cf       	rjmp	.-242    	; 0x3d0 <DisplayBuffer+0x14e>

000004c2 <init>:
     4c2:	cf 93       	push	r28
     4c4:	df 93       	push	r29
     4c6:	51 9a       	sbi	0x0a, 1	; 10
     4c8:	52 9a       	sbi	0x0a, 2	; 10
     4ca:	53 9a       	sbi	0x0a, 3	; 10
     4cc:	a4 e0       	ldi	r26, 0x04	; 4
     4ce:	b1 e0       	ldi	r27, 0x01	; 1
     4d0:	41 e0       	ldi	r20, 0x01	; 1
     4d2:	50 e0       	ldi	r21, 0x00	; 0
     4d4:	ed 91       	ld	r30, X+
     4d6:	ee 23       	and	r30, r30
     4d8:	b9 f0       	breq	.+46     	; 0x508 <init+0x46>
     4da:	ec 3c       	cpi	r30, 0xCC	; 204
     4dc:	d8 f7       	brcc	.-10     	; 0x4d4 <init+0x12>
     4de:	87 e0       	ldi	r24, 0x07	; 7
     4e0:	e8 9f       	mul	r30, r24
     4e2:	f0 01       	movw	r30, r0
     4e4:	11 24       	eor	r1, r1
     4e6:	ec 5b       	subi	r30, 0xBC	; 188
     4e8:	fe 4f       	sbci	r31, 0xFE	; 254
     4ea:	c0 81       	ld	r28, Z
     4ec:	d1 81       	ldd	r29, Z+1	; 0x01
     4ee:	28 81       	ld	r18, Y
     4f0:	ca 01       	movw	r24, r20
     4f2:	06 80       	ldd	r0, Z+6	; 0x06
     4f4:	02 c0       	rjmp	.+4      	; 0x4fa <init+0x38>
     4f6:	88 0f       	add	r24, r24
     4f8:	99 1f       	adc	r25, r25
     4fa:	0a 94       	dec	r0
     4fc:	e2 f7       	brpl	.-8      	; 0x4f6 <init+0x34>
     4fe:	82 2b       	or	r24, r18
     500:	88 83       	st	Y, r24
     502:	ed 91       	ld	r30, X+
     504:	e1 11       	cpse	r30, r1
     506:	e9 cf       	rjmp	.-46     	; 0x4da <init+0x18>
     508:	df 91       	pop	r29
     50a:	cf 91       	pop	r28
     50c:	08 95       	ret

0000050e <main>:
}
/************************************************************************/
/* main function                                                        */
/************************************************************************/
int main(void)
{
     50e:	cf 93       	push	r28
     510:	df 93       	push	r29
     512:	00 d0       	rcall	.+0      	; 0x514 <main+0x6>
     514:	00 d0       	rcall	.+0      	; 0x516 <main+0x8>
     516:	00 d0       	rcall	.+0      	; 0x518 <main+0xa>
     518:	cd b7       	in	r28, 0x3d	; 61
     51a:	de b7       	in	r29, 0x3e	; 62
	init();
     51c:	0e 94 61 02 	call	0x4c2	; 0x4c2 <init>
     520:	20 e5       	ldi	r18, 0x50	; 80
     522:	32 e0       	ldi	r19, 0x02	; 2
     524:	3a 83       	std	Y+2, r19	; 0x02
     526:	29 83       	std	Y+1, r18	; 0x01
     528:	10 e4       	ldi	r17, 0x40	; 64
     52a:	b1 2e       	mov	r11, r17
     52c:	02 e9       	ldi	r16, 0x92	; 146
     52e:	60 2e       	mov	r6, r16
     530:	02 e0       	ldi	r16, 0x02	; 2
     532:	70 2e       	mov	r7, r16
/* Clear Display                                                        */
/************************************************************************/
static inline void Clear(){
	int x, y = 0;
	pinsMultiWrite(plex_pins, LOW);
	for(x = 0; x < (SH_REG + 1); x++) {
     534:	89 01       	movw	r16, r18
}
/************************************************************************/
/* main function                                                        */
/************************************************************************/
int main(void)
{
     536:	64 e0       	ldi	r22, 0x04	; 4
     538:	71 e0       	ldi	r23, 0x01	; 1
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
     53a:	db 01       	movw	r26, r22
     53c:	ed 91       	ld	r30, X+
     53e:	bd 01       	movw	r22, r26
     540:	ee 23       	and	r30, r30
     542:	c1 f0       	breq	.+48     	; 0x574 <main+0x66>
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
     544:	ec 3c       	cpi	r30, 0xCC	; 204
     546:	c8 f7       	brcc	.-14     	; 0x53a <main+0x2c>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     548:	37 e0       	ldi	r19, 0x07	; 7
     54a:	e3 9f       	mul	r30, r19
     54c:	f0 01       	movw	r30, r0
     54e:	11 24       	eor	r1, r1
     550:	ec 5b       	subi	r30, 0xBC	; 188
     552:	fe 4f       	sbci	r31, 0xFE	; 254
     554:	22 81       	ldd	r18, Z+2	; 0x02
     556:	33 81       	ldd	r19, Z+3	; 0x03
     558:	d9 01       	movw	r26, r18
     55a:	8c 91       	ld	r24, X
     55c:	41 e0       	ldi	r20, 0x01	; 1
     55e:	50 e0       	ldi	r21, 0x00	; 0
     560:	06 80       	ldd	r0, Z+6	; 0x06
     562:	02 c0       	rjmp	.+4      	; 0x568 <main+0x5a>
     564:	44 0f       	add	r20, r20
     566:	55 1f       	adc	r21, r21
     568:	0a 94       	dec	r0
     56a:	e2 f7       	brpl	.-8      	; 0x564 <main+0x56>
     56c:	40 95       	com	r20
     56e:	84 23       	and	r24, r20
     570:	8c 93       	st	X, r24
     572:	e3 cf       	rjmp	.-58     	; 0x53a <main+0x2c>
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
     574:	89 e0       	ldi	r24, 0x09	; 9
     576:	90 e0       	ldi	r25, 0x00	; 0
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     578:	5a 98       	cbi	0x0b, 2	; 11
     57a:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     57c:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     57e:	5b 98       	cbi	0x0b, 3	; 11
     580:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     582:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     584:	5b 98       	cbi	0x0b, 3	; 11
     586:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     588:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     58a:	5b 98       	cbi	0x0b, 3	; 11
     58c:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     58e:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     590:	5b 98       	cbi	0x0b, 3	; 11
     592:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     594:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     596:	5b 98       	cbi	0x0b, 3	; 11
     598:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     59a:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     59c:	5b 98       	cbi	0x0b, 3	; 11
     59e:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     5a0:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     5a2:	5b 98       	cbi	0x0b, 3	; 11
     5a4:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     5a6:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     5a8:	5b 98       	cbi	0x0b, 3	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     5aa:	5a 9a       	sbi	0x0b, 2	; 11
     5ac:	01 97       	sbiw	r24, 0x01	; 1
     5ae:	21 f7       	brne	.-56     	; 0x578 <main+0x6a>
     5b0:	e9 81       	ldd	r30, Y+1	; 0x01
     5b2:	fa 81       	ldd	r31, Y+2	; 0x02
     5b4:	2b 2c       	mov	r2, r11
     5b6:	11 92       	st	Z+, r1
     5b8:	2a 94       	dec	r2
     5ba:	e9 f7       	brne	.-6      	; 0x5b6 <main+0xa8>
     5bc:	2f e1       	ldi	r18, 0x1F	; 31
     5be:	31 e0       	ldi	r19, 0x01	; 1
     5c0:	b0 e5       	ldi	r27, 0x50	; 80
     5c2:	eb 2e       	mov	r14, r27
     5c4:	b2 e0       	ldi	r27, 0x02	; 2
     5c6:	fb 2e       	mov	r15, r27
     5c8:	d7 01       	movw	r26, r14
	}else if(align == RIGHT){
		s_pos = (MT_SIZE - (c_len * FONT_WIDTH) - c_len - 2);
	}
	pos_index = s_pos;
	ClearStringBuffer();
	while(*ch){
     5ca:	f9 01       	movw	r30, r18
     5cc:	81 91       	ld	r24, Z+
     5ce:	9f 01       	movw	r18, r30
     5d0:	88 23       	and	r24, r24
     5d2:	51 f1       	breq	.+84     	; 0x628 <main+0x11a>
/* returns the index of the first byte of the requested character       */
/************************************************************************/
uint8_t CharStart(const char *p)
{
	/*if(*p == ' ') return 0;
	else*/ return (uint8_t) (( *p - ' '));
     5d4:	80 52       	subi	r24, 0x20	; 32
		s_pos = (MT_SIZE - (c_len * FONT_WIDTH) - c_len - 2);
	}
	pos_index = s_pos;
	ClearStringBuffer();
	while(*ch){
		index = CharStart(ch++) * FONT_WIDTH;
     5d6:	45 e0       	ldi	r20, 0x05	; 5
     5d8:	84 9f       	mul	r24, r20
     5da:	c0 01       	movw	r24, r0
     5dc:	11 24       	eor	r1, r1
		for(len = 0; len < FONT_WIDTH; len++){
			stringbuffer[pos_index++] = (uint8_t)(pgm_read_byte((font_5x7 + index++)));
     5de:	fc 01       	movw	r30, r24
     5e0:	e8 59       	subi	r30, 0x98	; 152
     5e2:	ff 4f       	sbci	r31, 0xFF	; 255
     5e4:	e4 91       	lpm	r30, Z
     5e6:	ec 93       	st	X, r30
     5e8:	fc 01       	movw	r30, r24
     5ea:	e7 59       	subi	r30, 0x97	; 151
     5ec:	ff 4f       	sbci	r31, 0xFF	; 255
     5ee:	e4 91       	lpm	r30, Z
     5f0:	11 96       	adiw	r26, 0x01	; 1
     5f2:	ec 93       	st	X, r30
     5f4:	11 97       	sbiw	r26, 0x01	; 1
     5f6:	fc 01       	movw	r30, r24
     5f8:	e6 59       	subi	r30, 0x96	; 150
     5fa:	ff 4f       	sbci	r31, 0xFF	; 255
     5fc:	e4 91       	lpm	r30, Z
     5fe:	12 96       	adiw	r26, 0x02	; 2
     600:	ec 93       	st	X, r30
     602:	12 97       	sbiw	r26, 0x02	; 2
     604:	fc 01       	movw	r30, r24
     606:	e5 59       	subi	r30, 0x95	; 149
     608:	ff 4f       	sbci	r31, 0xFF	; 255
     60a:	e4 91       	lpm	r30, Z
     60c:	13 96       	adiw	r26, 0x03	; 3
     60e:	ec 93       	st	X, r30
     610:	13 97       	sbiw	r26, 0x03	; 3
     612:	fc 01       	movw	r30, r24
     614:	e4 59       	subi	r30, 0x94	; 148
     616:	ff 4f       	sbci	r31, 0xFF	; 255
     618:	84 91       	lpm	r24, Z
     61a:	14 96       	adiw	r26, 0x04	; 4
     61c:	8c 93       	st	X, r24
     61e:	14 97       	sbiw	r26, 0x04	; 4
     620:	16 96       	adiw	r26, 0x06	; 6
		}
		pos_index += 1; //space the characters
		if(pos_index >= MT_SIZE) break;
     622:	6a 16       	cp	r6, r26
     624:	7b 06       	cpc	r7, r27
     626:	89 f6       	brne	.-94     	; 0x5ca <main+0xbc>
     628:	a2 e3       	ldi	r26, 0x32	; 50
     62a:	da 2e       	mov	r13, r26
}*/
static inline void HoldDisplayBuffer(const uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
		DisplayBuffer(data);
     62c:	80 e5       	ldi	r24, 0x50	; 80
     62e:	92 e0       	ldi	r25, 0x02	; 2
     630:	0e 94 41 01 	call	0x282	; 0x282 <DisplayBuffer>
     634:	da 94       	dec	r13
}
}*/
static inline void HoldDisplayBuffer(const uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
     636:	d1 10       	cpse	r13, r1
     638:	f9 cf       	rjmp	.-14     	; 0x62c <main+0x11e>
     63a:	d8 01       	movw	r26, r16
     63c:	eb 2d       	mov	r30, r11
     63e:	1d 92       	st	X+, r1
     640:	ea 95       	dec	r30
     642:	e9 f7       	brne	.-6      	; 0x63e <main+0x130>
     644:	25 e1       	ldi	r18, 0x15	; 21
     646:	31 e0       	ldi	r19, 0x01	; 1
     648:	a0 e5       	ldi	r26, 0x50	; 80
     64a:	b2 e0       	ldi	r27, 0x02	; 2
	}else if(align == RIGHT){
		s_pos = (MT_SIZE - (c_len * FONT_WIDTH) - c_len - 2);
	}
	pos_index = s_pos;
	ClearStringBuffer();
	while(*ch){
     64c:	f9 01       	movw	r30, r18
     64e:	81 91       	ld	r24, Z+
     650:	9f 01       	movw	r18, r30
     652:	88 23       	and	r24, r24
     654:	51 f1       	breq	.+84     	; 0x6aa <main+0x19c>
/* returns the index of the first byte of the requested character       */
/************************************************************************/
uint8_t CharStart(const char *p)
{
	/*if(*p == ' ') return 0;
	else*/ return (uint8_t) (( *p - ' '));
     656:	80 52       	subi	r24, 0x20	; 32
		s_pos = (MT_SIZE - (c_len * FONT_WIDTH) - c_len - 2);
	}
	pos_index = s_pos;
	ClearStringBuffer();
	while(*ch){
		index = CharStart(ch++) * FONT_WIDTH;
     658:	f5 e0       	ldi	r31, 0x05	; 5
     65a:	8f 9f       	mul	r24, r31
     65c:	c0 01       	movw	r24, r0
     65e:	11 24       	eor	r1, r1
		for(len = 0; len < FONT_WIDTH; len++){
			stringbuffer[pos_index++] = (uint8_t)(pgm_read_byte((font_5x7 + index++)));
     660:	fc 01       	movw	r30, r24
     662:	e8 59       	subi	r30, 0x98	; 152
     664:	ff 4f       	sbci	r31, 0xFF	; 255
     666:	e4 91       	lpm	r30, Z
     668:	ec 93       	st	X, r30
     66a:	fc 01       	movw	r30, r24
     66c:	e7 59       	subi	r30, 0x97	; 151
     66e:	ff 4f       	sbci	r31, 0xFF	; 255
     670:	e4 91       	lpm	r30, Z
     672:	11 96       	adiw	r26, 0x01	; 1
     674:	ec 93       	st	X, r30
     676:	11 97       	sbiw	r26, 0x01	; 1
     678:	fc 01       	movw	r30, r24
     67a:	e6 59       	subi	r30, 0x96	; 150
     67c:	ff 4f       	sbci	r31, 0xFF	; 255
     67e:	e4 91       	lpm	r30, Z
     680:	12 96       	adiw	r26, 0x02	; 2
     682:	ec 93       	st	X, r30
     684:	12 97       	sbiw	r26, 0x02	; 2
     686:	fc 01       	movw	r30, r24
     688:	e5 59       	subi	r30, 0x95	; 149
     68a:	ff 4f       	sbci	r31, 0xFF	; 255
     68c:	e4 91       	lpm	r30, Z
     68e:	13 96       	adiw	r26, 0x03	; 3
     690:	ec 93       	st	X, r30
     692:	13 97       	sbiw	r26, 0x03	; 3
     694:	fc 01       	movw	r30, r24
     696:	e4 59       	subi	r30, 0x94	; 148
     698:	ff 4f       	sbci	r31, 0xFF	; 255
     69a:	84 91       	lpm	r24, Z
     69c:	14 96       	adiw	r26, 0x04	; 4
     69e:	8c 93       	st	X, r24
     6a0:	14 97       	sbiw	r26, 0x04	; 4
     6a2:	16 96       	adiw	r26, 0x06	; 6
		}
		pos_index += 1; //space the characters
		if(pos_index >= MT_SIZE) break;
     6a4:	6a 16       	cp	r6, r26
     6a6:	7b 06       	cpc	r7, r27
     6a8:	89 f6       	brne	.-94     	; 0x64c <main+0x13e>
	uint8_t index, begin, end = 0;
	//uint8_t *bf = buffer;
	for(index = MT_SIZE-1 ; index > 0; index--)
	{
		for(begin = 0; begin <= index; begin++) (*(bf + begin)) = (*((p+(begin+MT_SIZE-index))));
		for(end = (index); end < MT_SIZE ; end++) (*(bf + end)) = 0x00;
     6aa:	4f e3       	ldi	r20, 0x3F	; 63
     6ac:	50 e0       	ldi	r21, 0x00	; 0
     6ae:	94 2f       	mov	r25, r20
}
}*/
static inline void HoldDisplayBuffer(const uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
     6b0:	80 e0       	ldi	r24, 0x00	; 0
{
	uint8_t index, begin, end = 0;
	//uint8_t *bf = buffer;
	for(index = MT_SIZE-1 ; index > 0; index--)
	{
		for(begin = 0; begin <= index; begin++) (*(bf + begin)) = (*((p+(begin+MT_SIZE-index))));
     6b2:	28 2f       	mov	r18, r24
     6b4:	30 e0       	ldi	r19, 0x00	; 0
     6b6:	f9 01       	movw	r30, r18
     6b8:	e4 1b       	sub	r30, r20
     6ba:	f5 0b       	sbc	r31, r21
     6bc:	e0 57       	subi	r30, 0x70	; 112
     6be:	fd 4f       	sbci	r31, 0xFD	; 253
     6c0:	60 81       	ld	r22, Z
     6c2:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <bf>
     6c6:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <bf+0x1>
     6ca:	e2 0f       	add	r30, r18
     6cc:	f3 1f       	adc	r31, r19
     6ce:	60 83       	st	Z, r22
     6d0:	8f 5f       	subi	r24, 0xFF	; 255
     6d2:	98 17       	cp	r25, r24
     6d4:	70 f7       	brcc	.-36     	; 0x6b2 <main+0x1a4>
		for(end = (index); end < MT_SIZE ; end++) (*(bf + end)) = 0x00;
     6d6:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <bf>
     6da:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <bf+0x1>
     6de:	e9 0f       	add	r30, r25
     6e0:	f1 1d       	adc	r31, r1
     6e2:	10 82       	st	Z, r1
     6e4:	9f 5f       	subi	r25, 0xFF	; 255
     6e6:	90 34       	cpi	r25, 0x40	; 64
     6e8:	b1 f7       	brne	.-20     	; 0x6d6 <main+0x1c8>
     6ea:	fa e0       	ldi	r31, 0x0A	; 10
     6ec:	cf 2e       	mov	r12, r31
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
     6ee:	24 e0       	ldi	r18, 0x04	; 4
     6f0:	31 e0       	ldi	r19, 0x01	; 1
     6f2:	80 e0       	ldi	r24, 0x00	; 0
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	71 e0       	ldi	r23, 0x01	; 1
     6f8:	08 2e       	mov	r0, r24
     6fa:	01 c0       	rjmp	.+2      	; 0x6fe <main+0x1f0>
     6fc:	77 0f       	add	r23, r23
     6fe:	0a 94       	dec	r0
     700:	ea f7       	brpl	.-6      	; 0x6fc <main+0x1ee>
}
}*/
static inline void HoldDisplayBuffer(const uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
     702:	6f e3       	ldi	r22, 0x3F	; 63
     704:	5a c0       	rjmp	.+180    	; 0x7ba <main+0x2ac>
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     706:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     708:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     70a:	5b 98       	cbi	0x0b, 3	; 11
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
			pinWrite(latch_pin, LOW);
			for(bit = 0; bit <= FONT_HEIGHT ; bit++){
				pinWrite(data_pin,((*(p+pos)) & (1 << byte)));
     70c:	ef ef       	ldi	r30, 0xFF	; 255
     70e:	e6 0f       	add	r30, r22
     710:	f0 e0       	ldi	r31, 0x00	; 0
     712:	e0 57       	subi	r30, 0x70	; 112
     714:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
     716:	e0 81       	ld	r30, Z
     718:	e7 23       	and	r30, r23
     71a:	09 f0       	breq	.+2      	; 0x71e <main+0x210>
     71c:	54 c2       	rjmp	.+1192   	; 0xbc6 <__stack+0x2c7>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     71e:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     720:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     722:	5b 98       	cbi	0x0b, 3	; 11
     724:	ee ef       	ldi	r30, 0xFE	; 254
     726:	e6 0f       	add	r30, r22
     728:	f0 e0       	ldi	r31, 0x00	; 0
     72a:	e0 57       	subi	r30, 0x70	; 112
     72c:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
     72e:	e0 81       	ld	r30, Z
     730:	e7 23       	and	r30, r23
     732:	09 f0       	breq	.+2      	; 0x736 <main+0x228>
     734:	46 c2       	rjmp	.+1164   	; 0xbc2 <__stack+0x2c3>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     736:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     738:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     73a:	5b 98       	cbi	0x0b, 3	; 11
     73c:	ed ef       	ldi	r30, 0xFD	; 253
     73e:	e6 0f       	add	r30, r22
     740:	f0 e0       	ldi	r31, 0x00	; 0
     742:	e0 57       	subi	r30, 0x70	; 112
     744:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
     746:	e0 81       	ld	r30, Z
     748:	e7 23       	and	r30, r23
     74a:	09 f0       	breq	.+2      	; 0x74e <main+0x240>
     74c:	38 c2       	rjmp	.+1136   	; 0xbbe <__stack+0x2bf>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     74e:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     750:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     752:	5b 98       	cbi	0x0b, 3	; 11
     754:	ec ef       	ldi	r30, 0xFC	; 252
     756:	e6 0f       	add	r30, r22
     758:	f0 e0       	ldi	r31, 0x00	; 0
     75a:	e0 57       	subi	r30, 0x70	; 112
     75c:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
     75e:	e0 81       	ld	r30, Z
     760:	e7 23       	and	r30, r23
     762:	09 f0       	breq	.+2      	; 0x766 <main+0x258>
     764:	2a c2       	rjmp	.+1108   	; 0xbba <__stack+0x2bb>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     766:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     768:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     76a:	5b 98       	cbi	0x0b, 3	; 11
     76c:	eb ef       	ldi	r30, 0xFB	; 251
     76e:	e6 0f       	add	r30, r22
     770:	f0 e0       	ldi	r31, 0x00	; 0
     772:	e0 57       	subi	r30, 0x70	; 112
     774:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
     776:	e0 81       	ld	r30, Z
     778:	e7 23       	and	r30, r23
     77a:	09 f0       	breq	.+2      	; 0x77e <main+0x270>
     77c:	1c c2       	rjmp	.+1080   	; 0xbb6 <__stack+0x2b7>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     77e:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     780:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     782:	5b 98       	cbi	0x0b, 3	; 11
     784:	ea ef       	ldi	r30, 0xFA	; 250
     786:	e6 0f       	add	r30, r22
     788:	f0 e0       	ldi	r31, 0x00	; 0
     78a:	e0 57       	subi	r30, 0x70	; 112
     78c:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
     78e:	e0 81       	ld	r30, Z
     790:	e7 23       	and	r30, r23
     792:	09 f0       	breq	.+2      	; 0x796 <main+0x288>
     794:	0e c2       	rjmp	.+1052   	; 0xbb2 <__stack+0x2b3>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     796:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     798:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     79a:	5b 98       	cbi	0x0b, 3	; 11
     79c:	e9 ef       	ldi	r30, 0xF9	; 249
     79e:	e6 0f       	add	r30, r22
     7a0:	f0 e0       	ldi	r31, 0x00	; 0
     7a2:	e0 57       	subi	r30, 0x70	; 112
     7a4:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
     7a6:	e0 81       	ld	r30, Z
     7a8:	e7 23       	and	r30, r23
     7aa:	91 f4       	brne	.+36     	; 0x7d0 <main+0x2c2>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     7ac:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     7ae:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     7b0:	5b 98       	cbi	0x0b, 3	; 11
				//toggle the clock pin
				pinWrite(clock_pin, HIGH);
				pinWrite(clock_pin, LOW);
				pos--;
     7b2:	68 50       	subi	r22, 0x08	; 8
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     7b4:	5a 9a       	sbi	0x0b, 2	; 11
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
     7b6:	6f 3f       	cpi	r22, 0xFF	; 255
     7b8:	91 f0       	breq	.+36     	; 0x7de <main+0x2d0>
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     7ba:	5a 98       	cbi	0x0b, 2	; 11
			pinWrite(latch_pin, LOW);
			for(bit = 0; bit <= FONT_HEIGHT ; bit++){
				pinWrite(data_pin,((*(p+pos)) & (1 << byte)));
     7bc:	e6 2f       	mov	r30, r22
     7be:	f0 e0       	ldi	r31, 0x00	; 0
     7c0:	e0 57       	subi	r30, 0x70	; 112
     7c2:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
     7c4:	e0 81       	ld	r30, Z
     7c6:	e7 23       	and	r30, r23
     7c8:	09 f4       	brne	.+2      	; 0x7cc <main+0x2be>
     7ca:	9d cf       	rjmp	.-198    	; 0x706 <main+0x1f8>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     7cc:	59 9a       	sbi	0x0b, 1	; 11
     7ce:	9c cf       	rjmp	.-200    	; 0x708 <main+0x1fa>
     7d0:	59 9a       	sbi	0x0b, 1	; 11
     7d2:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     7d4:	5b 98       	cbi	0x0b, 3	; 11
				//toggle the clock pin
				pinWrite(clock_pin, HIGH);
				pinWrite(clock_pin, LOW);
				pos--;
     7d6:	68 50       	subi	r22, 0x08	; 8
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     7d8:	5a 9a       	sbi	0x0b, 2	; 11
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
     7da:	6f 3f       	cpi	r22, 0xFF	; 255
     7dc:	71 f7       	brne	.-36     	; 0x7ba <main+0x2ac>
     7de:	a4 e0       	ldi	r26, 0x04	; 4
     7e0:	b1 e0       	ldi	r27, 0x01	; 1
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
     7e2:	ed 91       	ld	r30, X+
     7e4:	ee 23       	and	r30, r30
     7e6:	09 f1       	breq	.+66     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
     7e8:	ec 3c       	cpi	r30, 0xCC	; 204
     7ea:	d8 f7       	brcc	.-10     	; 0x7e2 <main+0x2d4>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     7ec:	67 e0       	ldi	r22, 0x07	; 7
     7ee:	e6 9f       	mul	r30, r22
     7f0:	f0 01       	movw	r30, r0
     7f2:	11 24       	eor	r1, r1
     7f4:	bf 01       	movw	r22, r30
     7f6:	6c 5b       	subi	r22, 0xBC	; 188
     7f8:	7e 4f       	sbci	r23, 0xFE	; 254
     7fa:	2b 01       	movw	r4, r22
     7fc:	fb 01       	movw	r30, r22
     7fe:	82 80       	ldd	r8, Z+2	; 0x02
     800:	93 80       	ldd	r9, Z+3	; 0x03
     802:	f4 01       	movw	r30, r8
     804:	70 81       	ld	r23, Z
     806:	22 24       	eor	r2, r2
     808:	23 94       	inc	r2
     80a:	31 2c       	mov	r3, r1
     80c:	f2 01       	movw	r30, r4
     80e:	06 80       	ldd	r0, Z+6	; 0x06
     810:	02 c0       	rjmp	.+4      	; 0x816 <__DATA_REGION_LENGTH__+0x16>
     812:	22 0c       	add	r2, r2
     814:	33 1c       	adc	r3, r3
     816:	0a 94       	dec	r0
     818:	e2 f7       	brpl	.-8      	; 0x812 <__DATA_REGION_LENGTH__+0x12>
     81a:	62 2d       	mov	r22, r2
     81c:	60 95       	com	r22
     81e:	67 23       	and	r22, r23
     820:	f4 01       	movw	r30, r8
     822:	60 83       	st	Z, r22
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
     824:	ed 91       	ld	r30, X+
     826:	e1 11       	cpse	r30, r1
     828:	df cf       	rjmp	.-66     	; 0x7e8 <main+0x2da>
/* Multiplexing method                                                  */
/************************************************************************/
static inline void MultiPlex(uint8_t *pin)
{
	pinsMultiWrite(plex_pins, LOW);
	pinWrite(plex_pins[*pin], HIGH);
     82a:	d9 01       	movw	r26, r18
     82c:	ed 91       	ld	r30, X+
     82e:	9d 01       	movw	r18, r26
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
     830:	ec 3c       	cpi	r30, 0xCC	; 204
     832:	08 f4       	brcc	.+2      	; 0x836 <__DATA_REGION_LENGTH__+0x36>
     834:	ca c1       	rjmp	.+916    	; 0xbca <__stack+0x2cb>
	delay(delayms);
     836:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     83a:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
/*  delay                                                               */
/************************************************************************/
int delayms = 1;
static inline void delay(int dl)
{
	while(dl >= 0)
     83e:	77 fd       	sbrc	r23, 7
     840:	09 c0       	rjmp	.+18     	; 0x854 <__DATA_REGION_LENGTH__+0x54>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     842:	ef e9       	ldi	r30, 0x9F	; 159
     844:	ff e0       	ldi	r31, 0x0F	; 15
     846:	31 97       	sbiw	r30, 0x01	; 1
     848:	f1 f7       	brne	.-4      	; 0x846 <__DATA_REGION_LENGTH__+0x46>
     84a:	00 c0       	rjmp	.+0      	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
     84c:	00 00       	nop
	{
		_delay_ms(1);
		dl--;
     84e:	61 50       	subi	r22, 0x01	; 1
     850:	71 09       	sbc	r23, r1
     852:	b8 f7       	brcc	.-18     	; 0x842 <__DATA_REGION_LENGTH__+0x42>
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
     854:	a4 e0       	ldi	r26, 0x04	; 4
     856:	b1 e0       	ldi	r27, 0x01	; 1
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
     858:	ed 91       	ld	r30, X+
     85a:	ee 23       	and	r30, r30
     85c:	09 f1       	breq	.+66     	; 0x8a0 <__DATA_REGION_LENGTH__+0xa0>
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
     85e:	ec 3c       	cpi	r30, 0xCC	; 204
     860:	d8 f7       	brcc	.-10     	; 0x858 <__DATA_REGION_LENGTH__+0x58>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     862:	67 e0       	ldi	r22, 0x07	; 7
     864:	e6 9f       	mul	r30, r22
     866:	f0 01       	movw	r30, r0
     868:	11 24       	eor	r1, r1
     86a:	bf 01       	movw	r22, r30
     86c:	6c 5b       	subi	r22, 0xBC	; 188
     86e:	7e 4f       	sbci	r23, 0xFE	; 254
     870:	2b 01       	movw	r4, r22
     872:	fb 01       	movw	r30, r22
     874:	82 80       	ldd	r8, Z+2	; 0x02
     876:	93 80       	ldd	r9, Z+3	; 0x03
     878:	f4 01       	movw	r30, r8
     87a:	70 81       	ld	r23, Z
     87c:	22 24       	eor	r2, r2
     87e:	23 94       	inc	r2
     880:	31 2c       	mov	r3, r1
     882:	f2 01       	movw	r30, r4
     884:	06 80       	ldd	r0, Z+6	; 0x06
     886:	02 c0       	rjmp	.+4      	; 0x88c <__DATA_REGION_LENGTH__+0x8c>
     888:	22 0c       	add	r2, r2
     88a:	33 1c       	adc	r3, r3
     88c:	0a 94       	dec	r0
     88e:	e2 f7       	brpl	.-8      	; 0x888 <__DATA_REGION_LENGTH__+0x88>
     890:	62 2d       	mov	r22, r2
     892:	60 95       	com	r22
     894:	67 23       	and	r22, r23
     896:	f4 01       	movw	r30, r8
     898:	60 83       	st	Z, r22
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
     89a:	ed 91       	ld	r30, X+
     89c:	e1 11       	cpse	r30, r1
     89e:	df cf       	rjmp	.-66     	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
     8a0:	69 e0       	ldi	r22, 0x09	; 9
     8a2:	70 e0       	ldi	r23, 0x00	; 0
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     8a4:	5a 98       	cbi	0x0b, 2	; 11
     8a6:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     8a8:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     8aa:	5b 98       	cbi	0x0b, 3	; 11
     8ac:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     8ae:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     8b0:	5b 98       	cbi	0x0b, 3	; 11
     8b2:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     8b4:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     8b6:	5b 98       	cbi	0x0b, 3	; 11
     8b8:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     8ba:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     8bc:	5b 98       	cbi	0x0b, 3	; 11
     8be:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     8c0:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     8c2:	5b 98       	cbi	0x0b, 3	; 11
     8c4:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     8c6:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     8c8:	5b 98       	cbi	0x0b, 3	; 11
     8ca:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     8cc:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     8ce:	5b 98       	cbi	0x0b, 3	; 11
     8d0:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     8d2:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     8d4:	5b 98       	cbi	0x0b, 3	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     8d6:	5a 9a       	sbi	0x0b, 2	; 11
     8d8:	61 50       	subi	r22, 0x01	; 1
     8da:	71 09       	sbc	r23, r1
/* Clear Display                                                        */
/************************************************************************/
static inline void Clear(){
	int x, y = 0;
	pinsMultiWrite(plex_pins, LOW);
	for(x = 0; x < (SH_REG + 1); x++) {
     8dc:	19 f7       	brne	.-58     	; 0x8a4 <__DATA_REGION_LENGTH__+0xa4>
     8de:	01 96       	adiw	r24, 0x01	; 1
{
	uint8_t byte, index, bit = 0;
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
     8e0:	87 30       	cpi	r24, 0x07	; 7
     8e2:	91 05       	cpc	r25, r1
     8e4:	09 f0       	breq	.+2      	; 0x8e8 <__DATA_REGION_LENGTH__+0xe8>
     8e6:	07 cf       	rjmp	.-498    	; 0x6f6 <main+0x1e8>
     8e8:	ca 94       	dec	r12
}
}*/
static inline void HoldDisplayBuffer(const uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
     8ea:	c1 10       	cpse	r12, r1
     8ec:	00 cf       	rjmp	.-512    	; 0x6ee <main+0x1e0>
     8ee:	41 50       	subi	r20, 0x01	; 1
     8f0:	51 09       	sbc	r21, r1
/************************************************************************/
void ScrollLeft(const uint8_t *p, uint8_t time)
{
	uint8_t index, begin, end = 0;
	//uint8_t *bf = buffer;
	for(index = MT_SIZE-1 ; index > 0; index--)
     8f2:	09 f0       	breq	.+2      	; 0x8f6 <__DATA_REGION_LENGTH__+0xf6>
     8f4:	dc ce       	rjmp	.-584    	; 0x6ae <main+0x1a0>
     8f6:	d8 01       	movw	r26, r16
     8f8:	eb 2d       	mov	r30, r11
     8fa:	1d 92       	st	X+, r1
     8fc:	ea 95       	dec	r30
     8fe:	e9 f7       	brne	.-6      	; 0x8fa <__DATA_REGION_LENGTH__+0xfa>
     900:	a0 e1       	ldi	r26, 0x10	; 16
     902:	ca 2e       	mov	r12, r26
     904:	a1 e0       	ldi	r26, 0x01	; 1
     906:	da 2e       	mov	r13, r26
     908:	a0 e5       	ldi	r26, 0x50	; 80
     90a:	b2 e0       	ldi	r27, 0x02	; 2
     90c:	96 01       	movw	r18, r12
	}else if(align == RIGHT){
		s_pos = (MT_SIZE - (c_len * FONT_WIDTH) - c_len - 2);
	}
	pos_index = s_pos;
	ClearStringBuffer();
	while(*ch){
     90e:	f9 01       	movw	r30, r18
     910:	81 91       	ld	r24, Z+
     912:	9f 01       	movw	r18, r30
     914:	88 23       	and	r24, r24
     916:	59 f1       	breq	.+86     	; 0x96e <__stack+0x6f>
/* returns the index of the first byte of the requested character       */
/************************************************************************/
uint8_t CharStart(const char *p)
{
	/*if(*p == ' ') return 0;
	else*/ return (uint8_t) (( *p - ' '));
     918:	80 52       	subi	r24, 0x20	; 32
		s_pos = (MT_SIZE - (c_len * FONT_WIDTH) - c_len - 2);
	}
	pos_index = s_pos;
	ClearStringBuffer();
	while(*ch){
		index = CharStart(ch++) * FONT_WIDTH;
     91a:	f5 e0       	ldi	r31, 0x05	; 5
     91c:	8f 9f       	mul	r24, r31
     91e:	c0 01       	movw	r24, r0
     920:	11 24       	eor	r1, r1
		for(len = 0; len < FONT_WIDTH; len++){
			stringbuffer[pos_index++] = (uint8_t)(pgm_read_byte((font_5x7 + index++)));
     922:	fc 01       	movw	r30, r24
     924:	e8 59       	subi	r30, 0x98	; 152
     926:	ff 4f       	sbci	r31, 0xFF	; 255
     928:	e4 91       	lpm	r30, Z
     92a:	ec 93       	st	X, r30
     92c:	fc 01       	movw	r30, r24
     92e:	e7 59       	subi	r30, 0x97	; 151
     930:	ff 4f       	sbci	r31, 0xFF	; 255
     932:	e4 91       	lpm	r30, Z
     934:	11 96       	adiw	r26, 0x01	; 1
     936:	ec 93       	st	X, r30
     938:	11 97       	sbiw	r26, 0x01	; 1
     93a:	fc 01       	movw	r30, r24
     93c:	e6 59       	subi	r30, 0x96	; 150
     93e:	ff 4f       	sbci	r31, 0xFF	; 255
     940:	e4 91       	lpm	r30, Z
     942:	12 96       	adiw	r26, 0x02	; 2
     944:	ec 93       	st	X, r30
     946:	12 97       	sbiw	r26, 0x02	; 2
     948:	fc 01       	movw	r30, r24
     94a:	e5 59       	subi	r30, 0x95	; 149
     94c:	ff 4f       	sbci	r31, 0xFF	; 255
     94e:	e4 91       	lpm	r30, Z
     950:	13 96       	adiw	r26, 0x03	; 3
     952:	ec 93       	st	X, r30
     954:	13 97       	sbiw	r26, 0x03	; 3
     956:	fc 01       	movw	r30, r24
     958:	e4 59       	subi	r30, 0x94	; 148
     95a:	ff 4f       	sbci	r31, 0xFF	; 255
     95c:	84 91       	lpm	r24, Z
     95e:	14 96       	adiw	r26, 0x04	; 4
     960:	8c 93       	st	X, r24
     962:	14 97       	sbiw	r26, 0x04	; 4
     964:	16 96       	adiw	r26, 0x06	; 6
		}
		pos_index += 1; //space the characters
		if(pos_index >= MT_SIZE) break;
     966:	42 e0       	ldi	r20, 0x02	; 2
     968:	a2 39       	cpi	r26, 0x92	; 146
     96a:	b4 07       	cpc	r27, r20
     96c:	81 f6       	brne	.-96     	; 0x90e <__stack+0xf>
     96e:	f4 e0       	ldi	r31, 0x04	; 4
     970:	9f 2e       	mov	r9, r31
     972:	ea e0       	ldi	r30, 0x0A	; 10
     974:	ae 2e       	mov	r10, r30
}*/
static inline void HoldDisplayBuffer(const uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
		DisplayBuffer(data);
     976:	80 e5       	ldi	r24, 0x50	; 80
     978:	92 e0       	ldi	r25, 0x02	; 2
     97a:	0e 94 41 01 	call	0x282	; 0x282 <DisplayBuffer>
     97e:	aa 94       	dec	r10
}
}*/
static inline void HoldDisplayBuffer(const uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
     980:	a1 10       	cpse	r10, r1
     982:	f9 cf       	rjmp	.-14     	; 0x976 <__stack+0x77>
     984:	64 e0       	ldi	r22, 0x04	; 4
     986:	71 e0       	ldi	r23, 0x01	; 1
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
     988:	db 01       	movw	r26, r22
     98a:	ed 91       	ld	r30, X+
     98c:	bd 01       	movw	r22, r26
     98e:	ee 23       	and	r30, r30
     990:	e1 f0       	breq	.+56     	; 0x9ca <__stack+0xcb>
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
     992:	ec 3c       	cpi	r30, 0xCC	; 204
     994:	c8 f7       	brcc	.-14     	; 0x988 <__stack+0x89>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     996:	27 e0       	ldi	r18, 0x07	; 7
     998:	e2 9f       	mul	r30, r18
     99a:	f0 01       	movw	r30, r0
     99c:	11 24       	eor	r1, r1
     99e:	ec 5b       	subi	r30, 0xBC	; 188
     9a0:	fe 4f       	sbci	r31, 0xFE	; 254
     9a2:	22 81       	ldd	r18, Z+2	; 0x02
     9a4:	33 81       	ldd	r19, Z+3	; 0x03
     9a6:	d9 01       	movw	r26, r18
     9a8:	8c 91       	ld	r24, X
     9aa:	41 e0       	ldi	r20, 0x01	; 1
     9ac:	50 e0       	ldi	r21, 0x00	; 0
     9ae:	06 80       	ldd	r0, Z+6	; 0x06
     9b0:	02 c0       	rjmp	.+4      	; 0x9b6 <__stack+0xb7>
     9b2:	44 0f       	add	r20, r20
     9b4:	55 1f       	adc	r21, r21
     9b6:	0a 94       	dec	r0
     9b8:	e2 f7       	brpl	.-8      	; 0x9b2 <__stack+0xb3>
     9ba:	40 95       	com	r20
     9bc:	84 23       	and	r24, r20
     9be:	8c 93       	st	X, r24
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
     9c0:	db 01       	movw	r26, r22
     9c2:	ed 91       	ld	r30, X+
     9c4:	bd 01       	movw	r22, r26
     9c6:	e1 11       	cpse	r30, r1
     9c8:	e4 cf       	rjmp	.-56     	; 0x992 <__stack+0x93>
     9ca:	89 e0       	ldi	r24, 0x09	; 9
     9cc:	90 e0       	ldi	r25, 0x00	; 0
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     9ce:	5a 98       	cbi	0x0b, 2	; 11
     9d0:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     9d2:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     9d4:	5b 98       	cbi	0x0b, 3	; 11
     9d6:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     9d8:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     9da:	5b 98       	cbi	0x0b, 3	; 11
     9dc:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     9de:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     9e0:	5b 98       	cbi	0x0b, 3	; 11
     9e2:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     9e4:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     9e6:	5b 98       	cbi	0x0b, 3	; 11
     9e8:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     9ea:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     9ec:	5b 98       	cbi	0x0b, 3	; 11
     9ee:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     9f0:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     9f2:	5b 98       	cbi	0x0b, 3	; 11
     9f4:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     9f6:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     9f8:	5b 98       	cbi	0x0b, 3	; 11
     9fa:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     9fc:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     9fe:	5b 98       	cbi	0x0b, 3	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     a00:	5a 9a       	sbi	0x0b, 2	; 11
     a02:	01 97       	sbiw	r24, 0x01	; 1
/* Clear Display                                                        */
/************************************************************************/
static inline void Clear(){
	int x, y = 0;
	pinsMultiWrite(plex_pins, LOW);
	for(x = 0; x < (SH_REG + 1); x++) {
     a04:	21 f7       	brne	.-56     	; 0x9ce <__stack+0xcf>
     a06:	bf ef       	ldi	r27, 0xFF	; 255
     a08:	e9 e6       	ldi	r30, 0x69	; 105
     a0a:	f8 e1       	ldi	r31, 0x18	; 24
     a0c:	b1 50       	subi	r27, 0x01	; 1
     a0e:	e0 40       	sbci	r30, 0x00	; 0
     a10:	f0 40       	sbci	r31, 0x00	; 0
     a12:	e1 f7       	brne	.-8      	; 0xa0c <__stack+0x10d>
     a14:	00 c0       	rjmp	.+0      	; 0xa16 <__stack+0x117>
     a16:	00 00       	nop
     a18:	9a 94       	dec	r9
/************************************************************************/
/* blinker                                                         */
/************************************************************************/
void Blinker(const uint8_t *p, uint8_t time, uint8_t times)
{
	while(times-- > 0)
     a1a:	91 10       	cpse	r9, r1
     a1c:	aa cf       	rjmp	.-172    	; 0x972 <__stack+0x73>
     a1e:	d8 01       	movw	r26, r16
     a20:	eb 2d       	mov	r30, r11
     a22:	1d 92       	st	X+, r1
     a24:	ea 95       	dec	r30
     a26:	e9 f7       	brne	.-6      	; 0xa22 <__stack+0x123>
     a28:	a0 e5       	ldi	r26, 0x50	; 80
     a2a:	b2 e0       	ldi	r27, 0x02	; 2
	}else if(align == RIGHT){
		s_pos = (MT_SIZE - (c_len * FONT_WIDTH) - c_len - 2);
	}
	pos_index = s_pos;
	ClearStringBuffer();
	while(*ch){
     a2c:	f6 01       	movw	r30, r12
     a2e:	81 91       	ld	r24, Z+
     a30:	6f 01       	movw	r12, r30
     a32:	88 23       	and	r24, r24
     a34:	51 f1       	breq	.+84     	; 0xa8a <__stack+0x18b>
/* returns the index of the first byte of the requested character       */
/************************************************************************/
uint8_t CharStart(const char *p)
{
	/*if(*p == ' ') return 0;
	else*/ return (uint8_t) (( *p - ' '));
     a36:	80 52       	subi	r24, 0x20	; 32
		s_pos = (MT_SIZE - (c_len * FONT_WIDTH) - c_len - 2);
	}
	pos_index = s_pos;
	ClearStringBuffer();
	while(*ch){
		index = CharStart(ch++) * FONT_WIDTH;
     a38:	f5 e0       	ldi	r31, 0x05	; 5
     a3a:	8f 9f       	mul	r24, r31
     a3c:	c0 01       	movw	r24, r0
     a3e:	11 24       	eor	r1, r1
		for(len = 0; len < FONT_WIDTH; len++){
			stringbuffer[pos_index++] = (uint8_t)(pgm_read_byte((font_5x7 + index++)));
     a40:	fc 01       	movw	r30, r24
     a42:	e8 59       	subi	r30, 0x98	; 152
     a44:	ff 4f       	sbci	r31, 0xFF	; 255
     a46:	e4 91       	lpm	r30, Z
     a48:	ec 93       	st	X, r30
     a4a:	fc 01       	movw	r30, r24
     a4c:	e7 59       	subi	r30, 0x97	; 151
     a4e:	ff 4f       	sbci	r31, 0xFF	; 255
     a50:	e4 91       	lpm	r30, Z
     a52:	11 96       	adiw	r26, 0x01	; 1
     a54:	ec 93       	st	X, r30
     a56:	11 97       	sbiw	r26, 0x01	; 1
     a58:	fc 01       	movw	r30, r24
     a5a:	e6 59       	subi	r30, 0x96	; 150
     a5c:	ff 4f       	sbci	r31, 0xFF	; 255
     a5e:	e4 91       	lpm	r30, Z
     a60:	12 96       	adiw	r26, 0x02	; 2
     a62:	ec 93       	st	X, r30
     a64:	12 97       	sbiw	r26, 0x02	; 2
     a66:	fc 01       	movw	r30, r24
     a68:	e5 59       	subi	r30, 0x95	; 149
     a6a:	ff 4f       	sbci	r31, 0xFF	; 255
     a6c:	e4 91       	lpm	r30, Z
     a6e:	13 96       	adiw	r26, 0x03	; 3
     a70:	ec 93       	st	X, r30
     a72:	13 97       	sbiw	r26, 0x03	; 3
     a74:	fc 01       	movw	r30, r24
     a76:	e4 59       	subi	r30, 0x94	; 148
     a78:	ff 4f       	sbci	r31, 0xFF	; 255
     a7a:	84 91       	lpm	r24, Z
     a7c:	14 96       	adiw	r26, 0x04	; 4
     a7e:	8c 93       	st	X, r24
     a80:	14 97       	sbiw	r26, 0x04	; 4
     a82:	16 96       	adiw	r26, 0x06	; 6
		}
		pos_index += 1; //space the characters
		if(pos_index >= MT_SIZE) break;
     a84:	6a 16       	cp	r6, r26
     a86:	7b 06       	cpc	r7, r27
     a88:	89 f6       	brne	.-94     	; 0xa2c <__stack+0x12d>
	uint8_t index, begin, end = 0;
	//*bf = buffer;
	for(index = 0; index < MT_SIZE; index++)
	{
		for(begin = 0; begin <= index; begin++) (*(bf + begin) = 0x00);
		for(end = index; end < MT_SIZE; end++) (*(bf + end) = (*((p+(end-index)))));
     a8a:	c1 2c       	mov	r12, r1
     a8c:	d1 2c       	mov	r13, r1
     a8e:	2c 2d       	mov	r18, r12
/************************************************************************/
/* blinker                                                         */
/************************************************************************/
void Blinker(const uint8_t *p, uint8_t time, uint8_t times)
{
	while(times-- > 0)
     a90:	80 e0       	ldi	r24, 0x00	; 0
     a92:	90 e0       	ldi	r25, 0x00	; 0
{
	uint8_t index, begin, end = 0;
	//*bf = buffer;
	for(index = 0; index < MT_SIZE; index++)
	{
		for(begin = 0; begin <= index; begin++) (*(bf + begin) = 0x00);
     a94:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <bf>
     a98:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <bf+0x1>
     a9c:	e8 0f       	add	r30, r24
     a9e:	f9 1f       	adc	r31, r25
     aa0:	10 82       	st	Z, r1
     aa2:	01 96       	adiw	r24, 0x01	; 1
     aa4:	28 17       	cp	r18, r24
     aa6:	b0 f7       	brcc	.-20     	; 0xa94 <__stack+0x195>
		for(end = index; end < MT_SIZE; end++) (*(bf + end) = (*((p+(end-index)))));
     aa8:	82 2f       	mov	r24, r18
     aaa:	90 e0       	ldi	r25, 0x00	; 0
     aac:	fc 01       	movw	r30, r24
     aae:	ec 19       	sub	r30, r12
     ab0:	fd 09       	sbc	r31, r13
     ab2:	e0 5b       	subi	r30, 0xB0	; 176
     ab4:	fd 4f       	sbci	r31, 0xFD	; 253
     ab6:	30 81       	ld	r19, Z
     ab8:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <bf>
     abc:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <bf+0x1>
     ac0:	fa 01       	movw	r30, r20
     ac2:	e8 0f       	add	r30, r24
     ac4:	f9 1f       	adc	r31, r25
     ac6:	30 83       	st	Z, r19
     ac8:	2f 5f       	subi	r18, 0xFF	; 255
     aca:	20 34       	cpi	r18, 0x40	; 64
     acc:	69 f7       	brne	.-38     	; 0xaa8 <__stack+0x1a9>
     ace:	6a e0       	ldi	r22, 0x0A	; 10
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
     ad0:	84 e0       	ldi	r24, 0x04	; 4
     ad2:	91 e0       	ldi	r25, 0x01	; 1
     ad4:	81 2c       	mov	r8, r1
     ad6:	91 2c       	mov	r9, r1
     ad8:	31 e0       	ldi	r19, 0x01	; 1
     ada:	08 2c       	mov	r0, r8
     adc:	01 c0       	rjmp	.+2      	; 0xae0 <__stack+0x1e1>
     ade:	33 0f       	add	r19, r19
     ae0:	0a 94       	dec	r0
     ae2:	ea f7       	brpl	.-6      	; 0xade <__stack+0x1df>
/************************************************************************/
/* blinker                                                         */
/************************************************************************/
void Blinker(const uint8_t *p, uint8_t time, uint8_t times)
{
	while(times-- > 0)
     ae4:	2f e3       	ldi	r18, 0x3F	; 63
     ae6:	5a c0       	rjmp	.+180    	; 0xb9c <__stack+0x29d>
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     ae8:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     aea:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     aec:	5b 98       	cbi	0x0b, 3	; 11
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
			pinWrite(latch_pin, LOW);
			for(bit = 0; bit <= FONT_HEIGHT ; bit++){
				pinWrite(data_pin,((*(p+pos)) & (1 << byte)));
     aee:	ef ef       	ldi	r30, 0xFF	; 255
     af0:	e2 0f       	add	r30, r18
     af2:	f0 e0       	ldi	r31, 0x00	; 0
     af4:	e0 57       	subi	r30, 0x70	; 112
     af6:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
     af8:	40 81       	ld	r20, Z
     afa:	43 23       	and	r20, r19
     afc:	09 f0       	breq	.+2      	; 0xb00 <__stack+0x201>
     afe:	24 c2       	rjmp	.+1096   	; 0xf48 <__stack+0x649>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     b00:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     b02:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     b04:	5b 98       	cbi	0x0b, 3	; 11
     b06:	ee ef       	ldi	r30, 0xFE	; 254
     b08:	e2 0f       	add	r30, r18
     b0a:	f0 e0       	ldi	r31, 0x00	; 0
     b0c:	e0 57       	subi	r30, 0x70	; 112
     b0e:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
     b10:	40 81       	ld	r20, Z
     b12:	43 23       	and	r20, r19
     b14:	09 f0       	breq	.+2      	; 0xb18 <__stack+0x219>
     b16:	16 c2       	rjmp	.+1068   	; 0xf44 <__stack+0x645>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     b18:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     b1a:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     b1c:	5b 98       	cbi	0x0b, 3	; 11
     b1e:	ed ef       	ldi	r30, 0xFD	; 253
     b20:	e2 0f       	add	r30, r18
     b22:	f0 e0       	ldi	r31, 0x00	; 0
     b24:	e0 57       	subi	r30, 0x70	; 112
     b26:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
     b28:	40 81       	ld	r20, Z
     b2a:	43 23       	and	r20, r19
     b2c:	09 f0       	breq	.+2      	; 0xb30 <__stack+0x231>
     b2e:	08 c2       	rjmp	.+1040   	; 0xf40 <__stack+0x641>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     b30:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     b32:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     b34:	5b 98       	cbi	0x0b, 3	; 11
     b36:	ec ef       	ldi	r30, 0xFC	; 252
     b38:	e2 0f       	add	r30, r18
     b3a:	f0 e0       	ldi	r31, 0x00	; 0
     b3c:	e0 57       	subi	r30, 0x70	; 112
     b3e:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
     b40:	40 81       	ld	r20, Z
     b42:	43 23       	and	r20, r19
     b44:	09 f0       	breq	.+2      	; 0xb48 <__stack+0x249>
     b46:	fa c1       	rjmp	.+1012   	; 0xf3c <__stack+0x63d>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     b48:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     b4a:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     b4c:	5b 98       	cbi	0x0b, 3	; 11
     b4e:	eb ef       	ldi	r30, 0xFB	; 251
     b50:	e2 0f       	add	r30, r18
     b52:	f0 e0       	ldi	r31, 0x00	; 0
     b54:	e0 57       	subi	r30, 0x70	; 112
     b56:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
     b58:	40 81       	ld	r20, Z
     b5a:	43 23       	and	r20, r19
     b5c:	09 f0       	breq	.+2      	; 0xb60 <__stack+0x261>
     b5e:	ec c1       	rjmp	.+984    	; 0xf38 <__stack+0x639>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     b60:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     b62:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     b64:	5b 98       	cbi	0x0b, 3	; 11
     b66:	ea ef       	ldi	r30, 0xFA	; 250
     b68:	e2 0f       	add	r30, r18
     b6a:	f0 e0       	ldi	r31, 0x00	; 0
     b6c:	e0 57       	subi	r30, 0x70	; 112
     b6e:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
     b70:	40 81       	ld	r20, Z
     b72:	43 23       	and	r20, r19
     b74:	09 f0       	breq	.+2      	; 0xb78 <__stack+0x279>
     b76:	de c1       	rjmp	.+956    	; 0xf34 <__stack+0x635>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     b78:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     b7a:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     b7c:	5b 98       	cbi	0x0b, 3	; 11
     b7e:	e9 ef       	ldi	r30, 0xF9	; 249
     b80:	e2 0f       	add	r30, r18
     b82:	f0 e0       	ldi	r31, 0x00	; 0
     b84:	e0 57       	subi	r30, 0x70	; 112
     b86:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
     b88:	40 81       	ld	r20, Z
     b8a:	43 23       	and	r20, r19
     b8c:	91 f5       	brne	.+100    	; 0xbf2 <__stack+0x2f3>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     b8e:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     b90:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     b92:	5b 98       	cbi	0x0b, 3	; 11
				//toggle the clock pin
				pinWrite(clock_pin, HIGH);
				pinWrite(clock_pin, LOW);
				pos--;
     b94:	28 50       	subi	r18, 0x08	; 8
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     b96:	5a 9a       	sbi	0x0b, 2	; 11
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
     b98:	2f 3f       	cpi	r18, 0xFF	; 255
     b9a:	91 f1       	breq	.+100    	; 0xc00 <__stack+0x301>
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     b9c:	5a 98       	cbi	0x0b, 2	; 11
			pinWrite(latch_pin, LOW);
			for(bit = 0; bit <= FONT_HEIGHT ; bit++){
				pinWrite(data_pin,((*(p+pos)) & (1 << byte)));
     b9e:	e2 2f       	mov	r30, r18
     ba0:	f0 e0       	ldi	r31, 0x00	; 0
     ba2:	e0 57       	subi	r30, 0x70	; 112
     ba4:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
     ba6:	40 81       	ld	r20, Z
     ba8:	43 23       	and	r20, r19
     baa:	09 f4       	brne	.+2      	; 0xbae <__stack+0x2af>
     bac:	9d cf       	rjmp	.-198    	; 0xae8 <__stack+0x1e9>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     bae:	59 9a       	sbi	0x0b, 1	; 11
     bb0:	9c cf       	rjmp	.-200    	; 0xaea <__stack+0x1eb>
     bb2:	59 9a       	sbi	0x0b, 1	; 11
     bb4:	f1 cd       	rjmp	.-1054   	; 0x798 <main+0x28a>
     bb6:	59 9a       	sbi	0x0b, 1	; 11
     bb8:	e3 cd       	rjmp	.-1082   	; 0x780 <main+0x272>
     bba:	59 9a       	sbi	0x0b, 1	; 11
     bbc:	d5 cd       	rjmp	.-1110   	; 0x768 <main+0x25a>
     bbe:	59 9a       	sbi	0x0b, 1	; 11
     bc0:	c7 cd       	rjmp	.-1138   	; 0x750 <main+0x242>
     bc2:	59 9a       	sbi	0x0b, 1	; 11
     bc4:	b9 cd       	rjmp	.-1166   	; 0x738 <main+0x22a>
     bc6:	59 9a       	sbi	0x0b, 1	; 11
     bc8:	ab cd       	rjmp	.-1194   	; 0x720 <main+0x212>
     bca:	b7 e0       	ldi	r27, 0x07	; 7
     bcc:	eb 9f       	mul	r30, r27
     bce:	f0 01       	movw	r30, r0
     bd0:	11 24       	eor	r1, r1
     bd2:	ec 5b       	subi	r30, 0xBC	; 188
     bd4:	fe 4f       	sbci	r31, 0xFE	; 254
     bd6:	a2 81       	ldd	r26, Z+2	; 0x02
     bd8:	b3 81       	ldd	r27, Z+3	; 0x03
     bda:	dc 90       	ld	r13, X
     bdc:	61 e0       	ldi	r22, 0x01	; 1
     bde:	70 e0       	ldi	r23, 0x00	; 0
     be0:	06 80       	ldd	r0, Z+6	; 0x06
     be2:	02 c0       	rjmp	.+4      	; 0xbe8 <__stack+0x2e9>
     be4:	66 0f       	add	r22, r22
     be6:	77 1f       	adc	r23, r23
     be8:	0a 94       	dec	r0
     bea:	e2 f7       	brpl	.-8      	; 0xbe4 <__stack+0x2e5>
     bec:	6d 29       	or	r22, r13
     bee:	6c 93       	st	X, r22
     bf0:	22 ce       	rjmp	.-956    	; 0x836 <__DATA_REGION_LENGTH__+0x36>
     bf2:	59 9a       	sbi	0x0b, 1	; 11
     bf4:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     bf6:	5b 98       	cbi	0x0b, 3	; 11
				//toggle the clock pin
				pinWrite(clock_pin, HIGH);
				pinWrite(clock_pin, LOW);
				pos--;
     bf8:	28 50       	subi	r18, 0x08	; 8
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     bfa:	5a 9a       	sbi	0x0b, 2	; 11
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
     bfc:	2f 3f       	cpi	r18, 0xFF	; 255
     bfe:	71 f6       	brne	.-100    	; 0xb9c <__stack+0x29d>
     c00:	a4 e0       	ldi	r26, 0x04	; 4
     c02:	b1 e0       	ldi	r27, 0x01	; 1
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
     c04:	ed 91       	ld	r30, X+
     c06:	ee 23       	and	r30, r30
     c08:	09 f1       	breq	.+66     	; 0xc4c <__stack+0x34d>
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
     c0a:	ec 3c       	cpi	r30, 0xCC	; 204
     c0c:	d8 f7       	brcc	.-10     	; 0xc04 <__stack+0x305>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     c0e:	27 e0       	ldi	r18, 0x07	; 7
     c10:	e2 9f       	mul	r30, r18
     c12:	f0 01       	movw	r30, r0
     c14:	11 24       	eor	r1, r1
     c16:	af 01       	movw	r20, r30
     c18:	4c 5b       	subi	r20, 0xBC	; 188
     c1a:	5e 4f       	sbci	r21, 0xFE	; 254
     c1c:	2a 01       	movw	r4, r20
     c1e:	fa 01       	movw	r30, r20
     c20:	42 81       	ldd	r20, Z+2	; 0x02
     c22:	53 81       	ldd	r21, Z+3	; 0x03
     c24:	fa 01       	movw	r30, r20
     c26:	30 81       	ld	r19, Z
     c28:	22 24       	eor	r2, r2
     c2a:	23 94       	inc	r2
     c2c:	31 2c       	mov	r3, r1
     c2e:	f2 01       	movw	r30, r4
     c30:	06 80       	ldd	r0, Z+6	; 0x06
     c32:	02 c0       	rjmp	.+4      	; 0xc38 <__stack+0x339>
     c34:	22 0c       	add	r2, r2
     c36:	33 1c       	adc	r3, r3
     c38:	0a 94       	dec	r0
     c3a:	e2 f7       	brpl	.-8      	; 0xc34 <__stack+0x335>
     c3c:	22 2d       	mov	r18, r2
     c3e:	20 95       	com	r18
     c40:	23 23       	and	r18, r19
     c42:	fa 01       	movw	r30, r20
     c44:	20 83       	st	Z, r18
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
     c46:	ed 91       	ld	r30, X+
     c48:	e1 11       	cpse	r30, r1
     c4a:	df cf       	rjmp	.-66     	; 0xc0a <__stack+0x30b>
/* Multiplexing method                                                  */
/************************************************************************/
static inline void MultiPlex(uint8_t *pin)
{
	pinsMultiWrite(plex_pins, LOW);
	pinWrite(plex_pins[*pin], HIGH);
     c4c:	dc 01       	movw	r26, r24
     c4e:	ed 91       	ld	r30, X+
     c50:	cd 01       	movw	r24, r26
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
     c52:	ec 3c       	cpi	r30, 0xCC	; 204
     c54:	08 f4       	brcc	.+2      	; 0xc58 <__stack+0x359>
     c56:	7a c1       	rjmp	.+756    	; 0xf4c <__stack+0x64d>
	delay(delayms);
     c58:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     c5c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
/*  delay                                                               */
/************************************************************************/
int delayms = 1;
static inline void delay(int dl)
{
	while(dl >= 0)
     c60:	37 fd       	sbrc	r19, 7
     c62:	09 c0       	rjmp	.+18     	; 0xc76 <__stack+0x377>
     c64:	ef e9       	ldi	r30, 0x9F	; 159
     c66:	ff e0       	ldi	r31, 0x0F	; 15
     c68:	31 97       	sbiw	r30, 0x01	; 1
     c6a:	f1 f7       	brne	.-4      	; 0xc68 <__stack+0x369>
     c6c:	00 c0       	rjmp	.+0      	; 0xc6e <__stack+0x36f>
     c6e:	00 00       	nop
	{
		_delay_ms(1);
		dl--;
     c70:	21 50       	subi	r18, 0x01	; 1
     c72:	31 09       	sbc	r19, r1
     c74:	b8 f7       	brcc	.-18     	; 0xc64 <__stack+0x365>
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
     c76:	a4 e0       	ldi	r26, 0x04	; 4
     c78:	b1 e0       	ldi	r27, 0x01	; 1
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
     c7a:	ed 91       	ld	r30, X+
     c7c:	ee 23       	and	r30, r30
     c7e:	09 f1       	breq	.+66     	; 0xcc2 <__stack+0x3c3>
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
     c80:	ec 3c       	cpi	r30, 0xCC	; 204
     c82:	d8 f7       	brcc	.-10     	; 0xc7a <__stack+0x37b>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     c84:	27 e0       	ldi	r18, 0x07	; 7
     c86:	e2 9f       	mul	r30, r18
     c88:	f0 01       	movw	r30, r0
     c8a:	11 24       	eor	r1, r1
     c8c:	af 01       	movw	r20, r30
     c8e:	4c 5b       	subi	r20, 0xBC	; 188
     c90:	5e 4f       	sbci	r21, 0xFE	; 254
     c92:	2a 01       	movw	r4, r20
     c94:	fa 01       	movw	r30, r20
     c96:	42 81       	ldd	r20, Z+2	; 0x02
     c98:	53 81       	ldd	r21, Z+3	; 0x03
     c9a:	fa 01       	movw	r30, r20
     c9c:	30 81       	ld	r19, Z
     c9e:	22 24       	eor	r2, r2
     ca0:	23 94       	inc	r2
     ca2:	31 2c       	mov	r3, r1
     ca4:	f2 01       	movw	r30, r4
     ca6:	06 80       	ldd	r0, Z+6	; 0x06
     ca8:	02 c0       	rjmp	.+4      	; 0xcae <__stack+0x3af>
     caa:	22 0c       	add	r2, r2
     cac:	33 1c       	adc	r3, r3
     cae:	0a 94       	dec	r0
     cb0:	e2 f7       	brpl	.-8      	; 0xcaa <__stack+0x3ab>
     cb2:	22 2d       	mov	r18, r2
     cb4:	20 95       	com	r18
     cb6:	23 23       	and	r18, r19
     cb8:	fa 01       	movw	r30, r20
     cba:	20 83       	st	Z, r18
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
     cbc:	ed 91       	ld	r30, X+
     cbe:	e1 11       	cpse	r30, r1
     cc0:	df cf       	rjmp	.-66     	; 0xc80 <__stack+0x381>
     cc2:	29 e0       	ldi	r18, 0x09	; 9
     cc4:	30 e0       	ldi	r19, 0x00	; 0
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     cc6:	5a 98       	cbi	0x0b, 2	; 11
     cc8:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     cca:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     ccc:	5b 98       	cbi	0x0b, 3	; 11
     cce:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     cd0:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     cd2:	5b 98       	cbi	0x0b, 3	; 11
     cd4:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     cd6:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     cd8:	5b 98       	cbi	0x0b, 3	; 11
     cda:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     cdc:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     cde:	5b 98       	cbi	0x0b, 3	; 11
     ce0:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     ce2:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     ce4:	5b 98       	cbi	0x0b, 3	; 11
     ce6:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     ce8:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     cea:	5b 98       	cbi	0x0b, 3	; 11
     cec:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     cee:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     cf0:	5b 98       	cbi	0x0b, 3	; 11
     cf2:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     cf4:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     cf6:	5b 98       	cbi	0x0b, 3	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     cf8:	5a 9a       	sbi	0x0b, 2	; 11
     cfa:	21 50       	subi	r18, 0x01	; 1
     cfc:	31 09       	sbc	r19, r1
/* Clear Display                                                        */
/************************************************************************/
static inline void Clear(){
	int x, y = 0;
	pinsMultiWrite(plex_pins, LOW);
	for(x = 0; x < (SH_REG + 1); x++) {
     cfe:	19 f7       	brne	.-58     	; 0xcc6 <__stack+0x3c7>
     d00:	ff ef       	ldi	r31, 0xFF	; 255
     d02:	8f 1a       	sub	r8, r31
     d04:	9f 0a       	sbc	r9, r31
{
	uint8_t byte, index, bit = 0;
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
     d06:	27 e0       	ldi	r18, 0x07	; 7
     d08:	82 16       	cp	r8, r18
     d0a:	91 04       	cpc	r9, r1
     d0c:	09 f0       	breq	.+2      	; 0xd10 <__stack+0x411>
     d0e:	e4 ce       	rjmp	.-568    	; 0xad8 <__stack+0x1d9>
     d10:	61 50       	subi	r22, 0x01	; 1
}
}*/
static inline void HoldDisplayBuffer(const uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
     d12:	09 f0       	breq	.+2      	; 0xd16 <__stack+0x417>
     d14:	dd ce       	rjmp	.-582    	; 0xad0 <__stack+0x1d1>
     d16:	3f ef       	ldi	r19, 0xFF	; 255
     d18:	c3 1a       	sub	r12, r19
     d1a:	d3 0a       	sbc	r13, r19
/************************************************************************/
void ScrollRight(const uint8_t *p, uint8_t time)
{
	uint8_t index, begin, end = 0;
	//*bf = buffer;
	for(index = 0; index < MT_SIZE; index++)
     d1c:	40 e4       	ldi	r20, 0x40	; 64
     d1e:	c4 16       	cp	r12, r20
     d20:	d1 04       	cpc	r13, r1
     d22:	09 f0       	breq	.+2      	; 0xd26 <__stack+0x427>
     d24:	b4 ce       	rjmp	.-664    	; 0xa8e <__stack+0x18f>
     d26:	d8 01       	movw	r26, r16
     d28:	eb 2d       	mov	r30, r11
     d2a:	1d 92       	st	X+, r1
     d2c:	ea 95       	dec	r30
     d2e:	e9 f7       	brne	.-6      	; 0xd2a <__stack+0x42b>
	pos_index = s_pos;
	ClearStringBuffer();
	while(*ch){
		index = CharStart(ch++) * FONT_WIDTH;
		for(len = 0; len < FONT_WIDTH; len++){
			stringbuffer[pos_index++] = (uint8_t)(pgm_read_byte((font_5x7 + index++)));
     d30:	e0 e3       	ldi	r30, 0x30	; 48
     d32:	f1 e0       	ldi	r31, 0x01	; 1
     d34:	84 91       	lpm	r24, Z
     d36:	80 93 63 02 	sts	0x0263, r24	; 0x800263 <stringbuffer+0x13>
     d3a:	e1 e3       	ldi	r30, 0x31	; 49
     d3c:	f1 e0       	ldi	r31, 0x01	; 1
     d3e:	84 91       	lpm	r24, Z
     d40:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <stringbuffer+0x14>
     d44:	e2 e3       	ldi	r30, 0x32	; 50
     d46:	f1 e0       	ldi	r31, 0x01	; 1
     d48:	84 91       	lpm	r24, Z
     d4a:	80 93 65 02 	sts	0x0265, r24	; 0x800265 <stringbuffer+0x15>
     d4e:	e3 e3       	ldi	r30, 0x33	; 51
     d50:	f1 e0       	ldi	r31, 0x01	; 1
     d52:	84 91       	lpm	r24, Z
     d54:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <stringbuffer+0x16>
     d58:	e4 e3       	ldi	r30, 0x34	; 52
     d5a:	f1 e0       	ldi	r31, 0x01	; 1
     d5c:	84 91       	lpm	r24, Z
     d5e:	80 93 67 02 	sts	0x0267, r24	; 0x800267 <stringbuffer+0x17>
     d62:	ed e0       	ldi	r30, 0x0D	; 13
     d64:	f1 e0       	ldi	r31, 0x01	; 1
     d66:	84 91       	lpm	r24, Z
     d68:	80 93 69 02 	sts	0x0269, r24	; 0x800269 <stringbuffer+0x19>
     d6c:	ee e0       	ldi	r30, 0x0E	; 14
     d6e:	f1 e0       	ldi	r31, 0x01	; 1
     d70:	84 91       	lpm	r24, Z
     d72:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <stringbuffer+0x1a>
     d76:	ef e0       	ldi	r30, 0x0F	; 15
     d78:	f1 e0       	ldi	r31, 0x01	; 1
     d7a:	84 91       	lpm	r24, Z
     d7c:	80 93 6b 02 	sts	0x026B, r24	; 0x80026b <stringbuffer+0x1b>
     d80:	e0 e1       	ldi	r30, 0x10	; 16
     d82:	f1 e0       	ldi	r31, 0x01	; 1
     d84:	84 91       	lpm	r24, Z
     d86:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <stringbuffer+0x1c>
     d8a:	e1 e1       	ldi	r30, 0x11	; 17
     d8c:	f1 e0       	ldi	r31, 0x01	; 1
     d8e:	84 91       	lpm	r24, Z
     d90:	80 93 6d 02 	sts	0x026D, r24	; 0x80026d <stringbuffer+0x1d>
     d94:	e7 e1       	ldi	r30, 0x17	; 23
     d96:	f1 e0       	ldi	r31, 0x01	; 1
     d98:	84 91       	lpm	r24, Z
     d9a:	80 93 6f 02 	sts	0x026F, r24	; 0x80026f <stringbuffer+0x1f>
     d9e:	e8 e1       	ldi	r30, 0x18	; 24
     da0:	f1 e0       	ldi	r31, 0x01	; 1
     da2:	84 91       	lpm	r24, Z
     da4:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <stringbuffer+0x20>
     da8:	e9 e1       	ldi	r30, 0x19	; 25
     daa:	f1 e0       	ldi	r31, 0x01	; 1
     dac:	84 91       	lpm	r24, Z
     dae:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <stringbuffer+0x21>
     db2:	ea e1       	ldi	r30, 0x1A	; 26
     db4:	f1 e0       	ldi	r31, 0x01	; 1
     db6:	84 91       	lpm	r24, Z
     db8:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <stringbuffer+0x22>
     dbc:	eb e1       	ldi	r30, 0x1B	; 27
     dbe:	f1 e0       	ldi	r31, 0x01	; 1
     dc0:	84 91       	lpm	r24, Z
     dc2:	80 93 73 02 	sts	0x0273, r24	; 0x800273 <stringbuffer+0x23>
     dc6:	ef e3       	ldi	r30, 0x3F	; 63
     dc8:	f1 e0       	ldi	r31, 0x01	; 1
     dca:	84 91       	lpm	r24, Z
     dcc:	80 93 75 02 	sts	0x0275, r24	; 0x800275 <stringbuffer+0x25>
     dd0:	e0 e4       	ldi	r30, 0x40	; 64
     dd2:	f1 e0       	ldi	r31, 0x01	; 1
     dd4:	84 91       	lpm	r24, Z
     dd6:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <stringbuffer+0x26>
     dda:	e1 e4       	ldi	r30, 0x41	; 65
     ddc:	f1 e0       	ldi	r31, 0x01	; 1
     dde:	84 91       	lpm	r24, Z
     de0:	80 93 77 02 	sts	0x0277, r24	; 0x800277 <stringbuffer+0x27>
     de4:	e2 e4       	ldi	r30, 0x42	; 66
     de6:	f1 e0       	ldi	r31, 0x01	; 1
     de8:	84 91       	lpm	r24, Z
     dea:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <stringbuffer+0x28>
     dee:	e3 e4       	ldi	r30, 0x43	; 67
     df0:	f1 e0       	ldi	r31, 0x01	; 1
     df2:	84 91       	lpm	r24, Z
     df4:	80 93 79 02 	sts	0x0279, r24	; 0x800279 <stringbuffer+0x29>
     df8:	28 2d       	mov	r18, r8
	{
		for(begin = 0; begin <= index; begin++) (*(bf + begin) = 0x00);
		for(end = index; end < MT_SIZE; end++) (*(bf + end) = (*((p+(end-index)))));
     dfa:	e0 e5       	ldi	r30, 0x50	; 80
     dfc:	f2 e0       	ldi	r31, 0x02	; 2
		for(index = 0; index < MT_SIZE; index++)
		{
			if(dir)
			*(bf + index) = (*((p+index)) >> (FONT_HEIGHT-step));
			else
			*(bf + index) = (*((p+index)) << (FONT_HEIGHT-step));
     dfe:	cf 01       	movw	r24, r30
     e00:	80 55       	subi	r24, 0x50	; 80
     e02:	92 40       	sbci	r25, 0x02	; 2
     e04:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <bf>
     e08:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <bf+0x1>
     e0c:	a8 0f       	add	r26, r24
     e0e:	b9 1f       	adc	r27, r25
     e10:	81 91       	ld	r24, Z+
     e12:	02 2e       	mov	r0, r18
     e14:	01 c0       	rjmp	.+2      	; 0xe18 <__stack+0x519>
     e16:	88 0f       	add	r24, r24
     e18:	0a 94       	dec	r0
     e1a:	ea f7       	brpl	.-6      	; 0xe16 <__stack+0x517>
     e1c:	8c 93       	st	X, r24
{
	//uint8_t *bf = buffer;
	uint8_t index, step = 0;
	for(step = 0; step < FONT_HEIGHT; step++)
	{
		for(index = 0; index < MT_SIZE; index++)
     e1e:	b0 e9       	ldi	r27, 0x90	; 144
     e20:	2b 2e       	mov	r2, r27
     e22:	b2 e0       	ldi	r27, 0x02	; 2
     e24:	3b 2e       	mov	r3, r27
     e26:	2e 16       	cp	r2, r30
     e28:	3f 06       	cpc	r3, r31
     e2a:	49 f7       	brne	.-46     	; 0xdfe <__stack+0x4ff>
			if(dir)
			*(bf + index) = (*((p+index)) >> (FONT_HEIGHT-step));
			else
			*(bf + index) = (*((p+index)) << (FONT_HEIGHT-step));
		}
		HoldDisplayBuffer(bf, time);
     e2c:	40 90 02 01 	lds	r4, 0x0102	; 0x800102 <bf>
     e30:	50 90 03 01 	lds	r5, 0x0103	; 0x800103 <bf+0x1>
     e34:	aa e0       	ldi	r26, 0x0A	; 10
     e36:	aa 2e       	mov	r10, r26
}*/
static inline void HoldDisplayBuffer(const uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
		DisplayBuffer(data);
     e38:	c2 01       	movw	r24, r4
     e3a:	0e 94 41 01 	call	0x282	; 0x282 <DisplayBuffer>
     e3e:	aa 94       	dec	r10
}
}*/
static inline void HoldDisplayBuffer(const uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
     e40:	a1 10       	cpse	r10, r1
     e42:	fa cf       	rjmp	.-12     	; 0xe38 <__stack+0x539>
     e44:	21 e0       	ldi	r18, 0x01	; 1
     e46:	82 1a       	sub	r8, r18
     e48:	91 08       	sbc	r9, r1
enum direction{ up, down};
void Drop(const uint8_t *p, uint8_t time, uint8_t dir )
{
	//uint8_t *bf = buffer;
	uint8_t index, step = 0;
	for(step = 0; step < FONT_HEIGHT; step++)
     e4a:	b1 f6       	brne	.-84     	; 0xdf8 <__stack+0x4f9>
     e4c:	7a e0       	ldi	r23, 0x0A	; 10
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
     e4e:	84 e0       	ldi	r24, 0x04	; 4
     e50:	88 2e       	mov	r8, r24
     e52:	81 e0       	ldi	r24, 0x01	; 1
     e54:	98 2e       	mov	r9, r24
     e56:	80 e0       	ldi	r24, 0x00	; 0
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	31 e0       	ldi	r19, 0x01	; 1
     e5c:	08 2e       	mov	r0, r24
     e5e:	01 c0       	rjmp	.+2      	; 0xe62 <__stack+0x563>
     e60:	33 0f       	add	r19, r19
     e62:	0a 94       	dec	r0
     e64:	ea f7       	brpl	.-6      	; 0xe60 <__stack+0x561>
			if(dir)
			*(bf + index) = (*((p+index)) >> (FONT_HEIGHT-step));
			else
			*(bf + index) = (*((p+index)) << (FONT_HEIGHT-step));
		}
		HoldDisplayBuffer(bf, time);
     e66:	2f e3       	ldi	r18, 0x3F	; 63
     e68:	5a c0       	rjmp	.+180    	; 0xf1e <__stack+0x61f>
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     e6a:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     e6c:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     e6e:	5b 98       	cbi	0x0b, 3	; 11
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
			pinWrite(latch_pin, LOW);
			for(bit = 0; bit <= FONT_HEIGHT ; bit++){
				pinWrite(data_pin,((*(p+pos)) & (1 << byte)));
     e70:	ef ef       	ldi	r30, 0xFF	; 255
     e72:	e2 0f       	add	r30, r18
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	e0 5b       	subi	r30, 0xB0	; 176
     e78:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
     e7a:	40 81       	ld	r20, Z
     e7c:	43 23       	and	r20, r19
     e7e:	09 f0       	breq	.+2      	; 0xe82 <__stack+0x583>
     e80:	97 c2       	rjmp	.+1326   	; 0x13b0 <__stack+0xab1>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     e82:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     e84:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     e86:	5b 98       	cbi	0x0b, 3	; 11
     e88:	ee ef       	ldi	r30, 0xFE	; 254
     e8a:	e2 0f       	add	r30, r18
     e8c:	f0 e0       	ldi	r31, 0x00	; 0
     e8e:	e0 5b       	subi	r30, 0xB0	; 176
     e90:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
     e92:	40 81       	ld	r20, Z
     e94:	43 23       	and	r20, r19
     e96:	09 f0       	breq	.+2      	; 0xe9a <__stack+0x59b>
     e98:	89 c2       	rjmp	.+1298   	; 0x13ac <__stack+0xaad>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     e9a:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     e9c:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     e9e:	5b 98       	cbi	0x0b, 3	; 11
     ea0:	ed ef       	ldi	r30, 0xFD	; 253
     ea2:	e2 0f       	add	r30, r18
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	e0 5b       	subi	r30, 0xB0	; 176
     ea8:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
     eaa:	40 81       	ld	r20, Z
     eac:	43 23       	and	r20, r19
     eae:	09 f0       	breq	.+2      	; 0xeb2 <__stack+0x5b3>
     eb0:	7b c2       	rjmp	.+1270   	; 0x13a8 <__stack+0xaa9>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     eb2:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     eb4:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     eb6:	5b 98       	cbi	0x0b, 3	; 11
     eb8:	ec ef       	ldi	r30, 0xFC	; 252
     eba:	e2 0f       	add	r30, r18
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	e0 5b       	subi	r30, 0xB0	; 176
     ec0:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
     ec2:	40 81       	ld	r20, Z
     ec4:	43 23       	and	r20, r19
     ec6:	09 f0       	breq	.+2      	; 0xeca <__stack+0x5cb>
     ec8:	6d c2       	rjmp	.+1242   	; 0x13a4 <__stack+0xaa5>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     eca:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     ecc:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     ece:	5b 98       	cbi	0x0b, 3	; 11
     ed0:	eb ef       	ldi	r30, 0xFB	; 251
     ed2:	e2 0f       	add	r30, r18
     ed4:	f0 e0       	ldi	r31, 0x00	; 0
     ed6:	e0 5b       	subi	r30, 0xB0	; 176
     ed8:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
     eda:	40 81       	ld	r20, Z
     edc:	43 23       	and	r20, r19
     ede:	09 f0       	breq	.+2      	; 0xee2 <__stack+0x5e3>
     ee0:	5f c2       	rjmp	.+1214   	; 0x13a0 <__stack+0xaa1>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     ee2:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     ee4:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     ee6:	5b 98       	cbi	0x0b, 3	; 11
     ee8:	ea ef       	ldi	r30, 0xFA	; 250
     eea:	e2 0f       	add	r30, r18
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	e0 5b       	subi	r30, 0xB0	; 176
     ef0:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
     ef2:	40 81       	ld	r20, Z
     ef4:	43 23       	and	r20, r19
     ef6:	09 f0       	breq	.+2      	; 0xefa <__stack+0x5fb>
     ef8:	51 c2       	rjmp	.+1186   	; 0x139c <__stack+0xa9d>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     efa:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     efc:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     efe:	5b 98       	cbi	0x0b, 3	; 11
     f00:	e9 ef       	ldi	r30, 0xF9	; 249
     f02:	e2 0f       	add	r30, r18
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	e0 5b       	subi	r30, 0xB0	; 176
     f08:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
     f0a:	40 81       	ld	r20, Z
     f0c:	43 23       	and	r20, r19
     f0e:	91 f5       	brne	.+100    	; 0xf74 <__stack+0x675>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     f10:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     f12:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     f14:	5b 98       	cbi	0x0b, 3	; 11
				//toggle the clock pin
				pinWrite(clock_pin, HIGH);
				pinWrite(clock_pin, LOW);
				pos--;
     f16:	28 50       	subi	r18, 0x08	; 8
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     f18:	5a 9a       	sbi	0x0b, 2	; 11
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
     f1a:	2f 3f       	cpi	r18, 0xFF	; 255
     f1c:	91 f1       	breq	.+100    	; 0xf82 <__stack+0x683>
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     f1e:	5a 98       	cbi	0x0b, 2	; 11
			pinWrite(latch_pin, LOW);
			for(bit = 0; bit <= FONT_HEIGHT ; bit++){
				pinWrite(data_pin,((*(p+pos)) & (1 << byte)));
     f20:	e2 2f       	mov	r30, r18
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	e0 5b       	subi	r30, 0xB0	; 176
     f26:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
     f28:	40 81       	ld	r20, Z
     f2a:	43 23       	and	r20, r19
     f2c:	09 f4       	brne	.+2      	; 0xf30 <__stack+0x631>
     f2e:	9d cf       	rjmp	.-198    	; 0xe6a <__stack+0x56b>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     f30:	59 9a       	sbi	0x0b, 1	; 11
     f32:	9c cf       	rjmp	.-200    	; 0xe6c <__stack+0x56d>
     f34:	59 9a       	sbi	0x0b, 1	; 11
     f36:	21 ce       	rjmp	.-958    	; 0xb7a <__stack+0x27b>
     f38:	59 9a       	sbi	0x0b, 1	; 11
     f3a:	13 ce       	rjmp	.-986    	; 0xb62 <__stack+0x263>
     f3c:	59 9a       	sbi	0x0b, 1	; 11
     f3e:	05 ce       	rjmp	.-1014   	; 0xb4a <__stack+0x24b>
     f40:	59 9a       	sbi	0x0b, 1	; 11
     f42:	f7 cd       	rjmp	.-1042   	; 0xb32 <__stack+0x233>
     f44:	59 9a       	sbi	0x0b, 1	; 11
     f46:	e9 cd       	rjmp	.-1070   	; 0xb1a <__stack+0x21b>
     f48:	59 9a       	sbi	0x0b, 1	; 11
     f4a:	db cd       	rjmp	.-1098   	; 0xb02 <__stack+0x203>
     f4c:	b7 e0       	ldi	r27, 0x07	; 7
     f4e:	eb 9f       	mul	r30, r27
     f50:	f0 01       	movw	r30, r0
     f52:	11 24       	eor	r1, r1
     f54:	ec 5b       	subi	r30, 0xBC	; 188
     f56:	fe 4f       	sbci	r31, 0xFE	; 254
     f58:	a2 81       	ldd	r26, Z+2	; 0x02
     f5a:	b3 81       	ldd	r27, Z+3	; 0x03
     f5c:	4c 91       	ld	r20, X
     f5e:	21 e0       	ldi	r18, 0x01	; 1
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	06 80       	ldd	r0, Z+6	; 0x06
     f64:	02 c0       	rjmp	.+4      	; 0xf6a <__stack+0x66b>
     f66:	22 0f       	add	r18, r18
     f68:	33 1f       	adc	r19, r19
     f6a:	0a 94       	dec	r0
     f6c:	e2 f7       	brpl	.-8      	; 0xf66 <__stack+0x667>
     f6e:	24 2b       	or	r18, r20
     f70:	2c 93       	st	X, r18
     f72:	72 ce       	rjmp	.-796    	; 0xc58 <__stack+0x359>
     f74:	59 9a       	sbi	0x0b, 1	; 11
     f76:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     f78:	5b 98       	cbi	0x0b, 3	; 11
				//toggle the clock pin
				pinWrite(clock_pin, HIGH);
				pinWrite(clock_pin, LOW);
				pos--;
     f7a:	28 50       	subi	r18, 0x08	; 8
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     f7c:	5a 9a       	sbi	0x0b, 2	; 11
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
     f7e:	2f 3f       	cpi	r18, 0xFF	; 255
     f80:	71 f6       	brne	.-100    	; 0xf1e <__stack+0x61f>
     f82:	a4 e0       	ldi	r26, 0x04	; 4
     f84:	b1 e0       	ldi	r27, 0x01	; 1
     f86:	37 2f       	mov	r19, r23
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
     f88:	ed 91       	ld	r30, X+
     f8a:	ee 23       	and	r30, r30
     f8c:	01 f1       	breq	.+64     	; 0xfce <__stack+0x6cf>
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
     f8e:	ec 3c       	cpi	r30, 0xCC	; 204
     f90:	d8 f7       	brcc	.-10     	; 0xf88 <__stack+0x689>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     f92:	47 e0       	ldi	r20, 0x07	; 7
     f94:	e4 9f       	mul	r30, r20
     f96:	f0 01       	movw	r30, r0
     f98:	11 24       	eor	r1, r1
     f9a:	bf 01       	movw	r22, r30
     f9c:	6c 5b       	subi	r22, 0xBC	; 188
     f9e:	7e 4f       	sbci	r23, 0xFE	; 254
     fa0:	fb 01       	movw	r30, r22
     fa2:	42 81       	ldd	r20, Z+2	; 0x02
     fa4:	53 81       	ldd	r21, Z+3	; 0x03
     fa6:	fa 01       	movw	r30, r20
     fa8:	20 81       	ld	r18, Z
     faa:	22 24       	eor	r2, r2
     fac:	23 94       	inc	r2
     fae:	31 2c       	mov	r3, r1
     fb0:	fb 01       	movw	r30, r22
     fb2:	06 80       	ldd	r0, Z+6	; 0x06
     fb4:	02 c0       	rjmp	.+4      	; 0xfba <__stack+0x6bb>
     fb6:	22 0c       	add	r2, r2
     fb8:	33 1c       	adc	r3, r3
     fba:	0a 94       	dec	r0
     fbc:	e2 f7       	brpl	.-8      	; 0xfb6 <__stack+0x6b7>
     fbe:	b1 01       	movw	r22, r2
     fc0:	60 95       	com	r22
     fc2:	26 23       	and	r18, r22
     fc4:	fa 01       	movw	r30, r20
     fc6:	20 83       	st	Z, r18
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
     fc8:	ed 91       	ld	r30, X+
     fca:	e1 11       	cpse	r30, r1
     fcc:	e0 cf       	rjmp	.-64     	; 0xf8e <__stack+0x68f>
     fce:	73 2f       	mov	r23, r19
/* Multiplexing method                                                  */
/************************************************************************/
static inline void MultiPlex(uint8_t *pin)
{
	pinsMultiWrite(plex_pins, LOW);
	pinWrite(plex_pins[*pin], HIGH);
     fd0:	d4 01       	movw	r26, r8
     fd2:	ed 91       	ld	r30, X+
     fd4:	4d 01       	movw	r8, r26
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
     fd6:	ec 3c       	cpi	r30, 0xCC	; 204
     fd8:	98 f4       	brcc	.+38     	; 0x1000 <__stack+0x701>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     fda:	b7 e0       	ldi	r27, 0x07	; 7
     fdc:	eb 9f       	mul	r30, r27
     fde:	f0 01       	movw	r30, r0
     fe0:	11 24       	eor	r1, r1
     fe2:	ec 5b       	subi	r30, 0xBC	; 188
     fe4:	fe 4f       	sbci	r31, 0xFE	; 254
     fe6:	a2 81       	ldd	r26, Z+2	; 0x02
     fe8:	b3 81       	ldd	r27, Z+3	; 0x03
     fea:	4c 91       	ld	r20, X
     fec:	21 e0       	ldi	r18, 0x01	; 1
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	06 80       	ldd	r0, Z+6	; 0x06
     ff2:	02 c0       	rjmp	.+4      	; 0xff8 <__stack+0x6f9>
     ff4:	22 0f       	add	r18, r18
     ff6:	33 1f       	adc	r19, r19
     ff8:	0a 94       	dec	r0
     ffa:	e2 f7       	brpl	.-8      	; 0xff4 <__stack+0x6f5>
     ffc:	24 2b       	or	r18, r20
     ffe:	2c 93       	st	X, r18
	delay(delayms);
    1000:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1004:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
/*  delay                                                               */
/************************************************************************/
int delayms = 1;
static inline void delay(int dl)
{
	while(dl >= 0)
    1008:	37 fd       	sbrc	r19, 7
    100a:	09 c0       	rjmp	.+18     	; 0x101e <__stack+0x71f>
    100c:	ef e9       	ldi	r30, 0x9F	; 159
    100e:	ff e0       	ldi	r31, 0x0F	; 15
    1010:	31 97       	sbiw	r30, 0x01	; 1
    1012:	f1 f7       	brne	.-4      	; 0x1010 <__stack+0x711>
    1014:	00 c0       	rjmp	.+0      	; 0x1016 <__stack+0x717>
    1016:	00 00       	nop
	{
		_delay_ms(1);
		dl--;
    1018:	21 50       	subi	r18, 0x01	; 1
    101a:	31 09       	sbc	r19, r1
    101c:	b8 f7       	brcc	.-18     	; 0x100c <__stack+0x70d>
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
    101e:	a4 e0       	ldi	r26, 0x04	; 4
    1020:	b1 e0       	ldi	r27, 0x01	; 1
    1022:	37 2f       	mov	r19, r23
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    1024:	ed 91       	ld	r30, X+
    1026:	ee 23       	and	r30, r30
    1028:	01 f1       	breq	.+64     	; 0x106a <__stack+0x76b>
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    102a:	ec 3c       	cpi	r30, 0xCC	; 204
    102c:	d8 f7       	brcc	.-10     	; 0x1024 <__stack+0x725>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    102e:	27 e0       	ldi	r18, 0x07	; 7
    1030:	e2 9f       	mul	r30, r18
    1032:	f0 01       	movw	r30, r0
    1034:	11 24       	eor	r1, r1
    1036:	bf 01       	movw	r22, r30
    1038:	6c 5b       	subi	r22, 0xBC	; 188
    103a:	7e 4f       	sbci	r23, 0xFE	; 254
    103c:	fb 01       	movw	r30, r22
    103e:	42 81       	ldd	r20, Z+2	; 0x02
    1040:	53 81       	ldd	r21, Z+3	; 0x03
    1042:	fa 01       	movw	r30, r20
    1044:	20 81       	ld	r18, Z
    1046:	22 24       	eor	r2, r2
    1048:	23 94       	inc	r2
    104a:	31 2c       	mov	r3, r1
    104c:	fb 01       	movw	r30, r22
    104e:	06 80       	ldd	r0, Z+6	; 0x06
    1050:	02 c0       	rjmp	.+4      	; 0x1056 <__stack+0x757>
    1052:	22 0c       	add	r2, r2
    1054:	33 1c       	adc	r3, r3
    1056:	0a 94       	dec	r0
    1058:	e2 f7       	brpl	.-8      	; 0x1052 <__stack+0x753>
    105a:	b1 01       	movw	r22, r2
    105c:	60 95       	com	r22
    105e:	26 23       	and	r18, r22
    1060:	fa 01       	movw	r30, r20
    1062:	20 83       	st	Z, r18
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    1064:	ed 91       	ld	r30, X+
    1066:	e1 11       	cpse	r30, r1
    1068:	e0 cf       	rjmp	.-64     	; 0x102a <__stack+0x72b>
    106a:	73 2f       	mov	r23, r19
    106c:	29 e0       	ldi	r18, 0x09	; 9
    106e:	30 e0       	ldi	r19, 0x00	; 0
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1070:	5a 98       	cbi	0x0b, 2	; 11
    1072:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1074:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1076:	5b 98       	cbi	0x0b, 3	; 11
    1078:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    107a:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    107c:	5b 98       	cbi	0x0b, 3	; 11
    107e:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1080:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1082:	5b 98       	cbi	0x0b, 3	; 11
    1084:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1086:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1088:	5b 98       	cbi	0x0b, 3	; 11
    108a:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    108c:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    108e:	5b 98       	cbi	0x0b, 3	; 11
    1090:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1092:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1094:	5b 98       	cbi	0x0b, 3	; 11
    1096:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1098:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    109a:	5b 98       	cbi	0x0b, 3	; 11
    109c:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    109e:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    10a0:	5b 98       	cbi	0x0b, 3	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    10a2:	5a 9a       	sbi	0x0b, 2	; 11
    10a4:	21 50       	subi	r18, 0x01	; 1
    10a6:	31 09       	sbc	r19, r1
/* Clear Display                                                        */
/************************************************************************/
static inline void Clear(){
	int x, y = 0;
	pinsMultiWrite(plex_pins, LOW);
	for(x = 0; x < (SH_REG + 1); x++) {
    10a8:	19 f7       	brne	.-58     	; 0x1070 <__stack+0x771>
    10aa:	01 96       	adiw	r24, 0x01	; 1
{
	uint8_t byte, index, bit = 0;
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
    10ac:	87 30       	cpi	r24, 0x07	; 7
    10ae:	91 05       	cpc	r25, r1
    10b0:	09 f0       	breq	.+2      	; 0x10b4 <__stack+0x7b5>
    10b2:	d3 ce       	rjmp	.-602    	; 0xe5a <__stack+0x55b>
    10b4:	71 50       	subi	r23, 0x01	; 1
}
}*/
static inline void HoldDisplayBuffer(const uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
    10b6:	09 f0       	breq	.+2      	; 0x10ba <__stack+0x7bb>
    10b8:	ca ce       	rjmp	.-620    	; 0xe4e <__stack+0x54f>
    10ba:	d8 01       	movw	r26, r16
    10bc:	eb 2d       	mov	r30, r11
    10be:	1d 92       	st	X+, r1
    10c0:	ea 95       	dec	r30
    10c2:	e9 f7       	brne	.-6      	; 0x10be <__stack+0x7bf>
    10c4:	e0 e3       	ldi	r30, 0x30	; 48
    10c6:	f1 e0       	ldi	r31, 0x01	; 1
    10c8:	84 91       	lpm	r24, Z
    10ca:	80 93 63 02 	sts	0x0263, r24	; 0x800263 <stringbuffer+0x13>
    10ce:	e1 e3       	ldi	r30, 0x31	; 49
    10d0:	f1 e0       	ldi	r31, 0x01	; 1
    10d2:	84 91       	lpm	r24, Z
    10d4:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <stringbuffer+0x14>
    10d8:	e2 e3       	ldi	r30, 0x32	; 50
    10da:	f1 e0       	ldi	r31, 0x01	; 1
    10dc:	84 91       	lpm	r24, Z
    10de:	80 93 65 02 	sts	0x0265, r24	; 0x800265 <stringbuffer+0x15>
    10e2:	e3 e3       	ldi	r30, 0x33	; 51
    10e4:	f1 e0       	ldi	r31, 0x01	; 1
    10e6:	84 91       	lpm	r24, Z
    10e8:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <stringbuffer+0x16>
    10ec:	e4 e3       	ldi	r30, 0x34	; 52
    10ee:	f1 e0       	ldi	r31, 0x01	; 1
    10f0:	84 91       	lpm	r24, Z
    10f2:	80 93 67 02 	sts	0x0267, r24	; 0x800267 <stringbuffer+0x17>
    10f6:	ed e0       	ldi	r30, 0x0D	; 13
    10f8:	f1 e0       	ldi	r31, 0x01	; 1
    10fa:	84 91       	lpm	r24, Z
    10fc:	80 93 69 02 	sts	0x0269, r24	; 0x800269 <stringbuffer+0x19>
    1100:	ee e0       	ldi	r30, 0x0E	; 14
    1102:	f1 e0       	ldi	r31, 0x01	; 1
    1104:	84 91       	lpm	r24, Z
    1106:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <stringbuffer+0x1a>
    110a:	ef e0       	ldi	r30, 0x0F	; 15
    110c:	f1 e0       	ldi	r31, 0x01	; 1
    110e:	84 91       	lpm	r24, Z
    1110:	80 93 6b 02 	sts	0x026B, r24	; 0x80026b <stringbuffer+0x1b>
    1114:	e0 e1       	ldi	r30, 0x10	; 16
    1116:	f1 e0       	ldi	r31, 0x01	; 1
    1118:	84 91       	lpm	r24, Z
    111a:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <stringbuffer+0x1c>
    111e:	e1 e1       	ldi	r30, 0x11	; 17
    1120:	f1 e0       	ldi	r31, 0x01	; 1
    1122:	84 91       	lpm	r24, Z
    1124:	80 93 6d 02 	sts	0x026D, r24	; 0x80026d <stringbuffer+0x1d>
    1128:	e7 e1       	ldi	r30, 0x17	; 23
    112a:	f1 e0       	ldi	r31, 0x01	; 1
    112c:	84 91       	lpm	r24, Z
    112e:	80 93 6f 02 	sts	0x026F, r24	; 0x80026f <stringbuffer+0x1f>
    1132:	e8 e1       	ldi	r30, 0x18	; 24
    1134:	f1 e0       	ldi	r31, 0x01	; 1
    1136:	84 91       	lpm	r24, Z
    1138:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <stringbuffer+0x20>
    113c:	e9 e1       	ldi	r30, 0x19	; 25
    113e:	f1 e0       	ldi	r31, 0x01	; 1
    1140:	84 91       	lpm	r24, Z
    1142:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <stringbuffer+0x21>
    1146:	ea e1       	ldi	r30, 0x1A	; 26
    1148:	f1 e0       	ldi	r31, 0x01	; 1
    114a:	84 91       	lpm	r24, Z
    114c:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <stringbuffer+0x22>
    1150:	eb e1       	ldi	r30, 0x1B	; 27
    1152:	f1 e0       	ldi	r31, 0x01	; 1
    1154:	84 91       	lpm	r24, Z
    1156:	80 93 73 02 	sts	0x0273, r24	; 0x800273 <stringbuffer+0x23>
    115a:	ef e3       	ldi	r30, 0x3F	; 63
    115c:	f1 e0       	ldi	r31, 0x01	; 1
    115e:	84 91       	lpm	r24, Z
    1160:	80 93 75 02 	sts	0x0275, r24	; 0x800275 <stringbuffer+0x25>
    1164:	e0 e4       	ldi	r30, 0x40	; 64
    1166:	f1 e0       	ldi	r31, 0x01	; 1
    1168:	84 91       	lpm	r24, Z
    116a:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <stringbuffer+0x26>
    116e:	e1 e4       	ldi	r30, 0x41	; 65
    1170:	f1 e0       	ldi	r31, 0x01	; 1
    1172:	84 91       	lpm	r24, Z
    1174:	80 93 77 02 	sts	0x0277, r24	; 0x800277 <stringbuffer+0x27>
    1178:	e2 e4       	ldi	r30, 0x42	; 66
    117a:	f1 e0       	ldi	r31, 0x01	; 1
    117c:	84 91       	lpm	r24, Z
    117e:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <stringbuffer+0x28>
    1182:	e3 e4       	ldi	r30, 0x43	; 67
    1184:	f1 e0       	ldi	r31, 0x01	; 1
    1186:	84 91       	lpm	r24, Z
    1188:	80 93 79 02 	sts	0x0279, r24	; 0x800279 <stringbuffer+0x29>
    118c:	b2 e3       	ldi	r27, 0x32	; 50
    118e:	ab 2e       	mov	r10, r27
		DisplayBuffer(data);
    1190:	80 e5       	ldi	r24, 0x50	; 80
    1192:	92 e0       	ldi	r25, 0x02	; 2
    1194:	0e 94 41 01 	call	0x282	; 0x282 <DisplayBuffer>
    1198:	aa 94       	dec	r10
}
}*/
static inline void HoldDisplayBuffer(const uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
    119a:	a1 10       	cpse	r10, r1
    119c:	f9 cf       	rjmp	.-14     	; 0x1190 <__stack+0x891>
    119e:	d8 01       	movw	r26, r16
    11a0:	eb 2d       	mov	r30, r11
    11a2:	1d 92       	st	X+, r1
    11a4:	ea 95       	dec	r30
    11a6:	e9 f7       	brne	.-6      	; 0x11a2 <__stack+0x8a3>
    11a8:	e0 e3       	ldi	r30, 0x30	; 48
    11aa:	f1 e0       	ldi	r31, 0x01	; 1
    11ac:	84 91       	lpm	r24, Z
    11ae:	80 93 63 02 	sts	0x0263, r24	; 0x800263 <stringbuffer+0x13>
    11b2:	e1 e3       	ldi	r30, 0x31	; 49
    11b4:	f1 e0       	ldi	r31, 0x01	; 1
    11b6:	84 91       	lpm	r24, Z
    11b8:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <stringbuffer+0x14>
    11bc:	e2 e3       	ldi	r30, 0x32	; 50
    11be:	f1 e0       	ldi	r31, 0x01	; 1
    11c0:	84 91       	lpm	r24, Z
    11c2:	80 93 65 02 	sts	0x0265, r24	; 0x800265 <stringbuffer+0x15>
    11c6:	e3 e3       	ldi	r30, 0x33	; 51
    11c8:	f1 e0       	ldi	r31, 0x01	; 1
    11ca:	84 91       	lpm	r24, Z
    11cc:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <stringbuffer+0x16>
    11d0:	e4 e3       	ldi	r30, 0x34	; 52
    11d2:	f1 e0       	ldi	r31, 0x01	; 1
    11d4:	84 91       	lpm	r24, Z
    11d6:	80 93 67 02 	sts	0x0267, r24	; 0x800267 <stringbuffer+0x17>
    11da:	ed e0       	ldi	r30, 0x0D	; 13
    11dc:	f1 e0       	ldi	r31, 0x01	; 1
    11de:	84 91       	lpm	r24, Z
    11e0:	80 93 69 02 	sts	0x0269, r24	; 0x800269 <stringbuffer+0x19>
    11e4:	ee e0       	ldi	r30, 0x0E	; 14
    11e6:	f1 e0       	ldi	r31, 0x01	; 1
    11e8:	84 91       	lpm	r24, Z
    11ea:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <stringbuffer+0x1a>
    11ee:	ef e0       	ldi	r30, 0x0F	; 15
    11f0:	f1 e0       	ldi	r31, 0x01	; 1
    11f2:	84 91       	lpm	r24, Z
    11f4:	80 93 6b 02 	sts	0x026B, r24	; 0x80026b <stringbuffer+0x1b>
    11f8:	e0 e1       	ldi	r30, 0x10	; 16
    11fa:	f1 e0       	ldi	r31, 0x01	; 1
    11fc:	84 91       	lpm	r24, Z
    11fe:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <stringbuffer+0x1c>
    1202:	e1 e1       	ldi	r30, 0x11	; 17
    1204:	f1 e0       	ldi	r31, 0x01	; 1
    1206:	84 91       	lpm	r24, Z
    1208:	80 93 6d 02 	sts	0x026D, r24	; 0x80026d <stringbuffer+0x1d>
    120c:	e7 e1       	ldi	r30, 0x17	; 23
    120e:	f1 e0       	ldi	r31, 0x01	; 1
    1210:	84 91       	lpm	r24, Z
    1212:	80 93 6f 02 	sts	0x026F, r24	; 0x80026f <stringbuffer+0x1f>
    1216:	e8 e1       	ldi	r30, 0x18	; 24
    1218:	f1 e0       	ldi	r31, 0x01	; 1
    121a:	84 91       	lpm	r24, Z
    121c:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <stringbuffer+0x20>
    1220:	e9 e1       	ldi	r30, 0x19	; 25
    1222:	f1 e0       	ldi	r31, 0x01	; 1
    1224:	84 91       	lpm	r24, Z
    1226:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <stringbuffer+0x21>
    122a:	ea e1       	ldi	r30, 0x1A	; 26
    122c:	f1 e0       	ldi	r31, 0x01	; 1
    122e:	84 91       	lpm	r24, Z
    1230:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <stringbuffer+0x22>
    1234:	eb e1       	ldi	r30, 0x1B	; 27
    1236:	f1 e0       	ldi	r31, 0x01	; 1
    1238:	84 91       	lpm	r24, Z
    123a:	80 93 73 02 	sts	0x0273, r24	; 0x800273 <stringbuffer+0x23>
    123e:	ef e3       	ldi	r30, 0x3F	; 63
    1240:	f1 e0       	ldi	r31, 0x01	; 1
    1242:	84 91       	lpm	r24, Z
    1244:	80 93 75 02 	sts	0x0275, r24	; 0x800275 <stringbuffer+0x25>
    1248:	e0 e4       	ldi	r30, 0x40	; 64
    124a:	f1 e0       	ldi	r31, 0x01	; 1
    124c:	84 91       	lpm	r24, Z
    124e:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <stringbuffer+0x26>
    1252:	e1 e4       	ldi	r30, 0x41	; 65
    1254:	f1 e0       	ldi	r31, 0x01	; 1
    1256:	84 91       	lpm	r24, Z
    1258:	80 93 77 02 	sts	0x0277, r24	; 0x800277 <stringbuffer+0x27>
    125c:	e2 e4       	ldi	r30, 0x42	; 66
    125e:	f1 e0       	ldi	r31, 0x01	; 1
    1260:	84 91       	lpm	r24, Z
    1262:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <stringbuffer+0x28>
    1266:	e3 e4       	ldi	r30, 0x43	; 67
    1268:	f1 e0       	ldi	r31, 0x01	; 1
    126a:	84 91       	lpm	r24, Z
    126c:	80 93 79 02 	sts	0x0279, r24	; 0x800279 <stringbuffer+0x29>
    1270:	60 e0       	ldi	r22, 0x00	; 0
    1272:	70 e0       	ldi	r23, 0x00	; 0
    1274:	26 2f       	mov	r18, r22
    1276:	e0 e5       	ldi	r30, 0x50	; 80
    1278:	f2 e0       	ldi	r31, 0x02	; 2
	for(step = 0; step <= FONT_HEIGHT; step++)
	{
		for(index = 0; index < MT_SIZE; index++)
		{
			if(!dir)
			*(bf + index) = (*((p+index)) >> (step));
    127a:	cf 01       	movw	r24, r30
    127c:	80 55       	subi	r24, 0x50	; 80
    127e:	92 40       	sbci	r25, 0x02	; 2
    1280:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <bf>
    1284:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <bf+0x1>
    1288:	a8 0f       	add	r26, r24
    128a:	b9 1f       	adc	r27, r25
    128c:	81 91       	ld	r24, Z+
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	02 2e       	mov	r0, r18
    1292:	02 c0       	rjmp	.+4      	; 0x1298 <__stack+0x999>
    1294:	95 95       	asr	r25
    1296:	87 95       	ror	r24
    1298:	0a 94       	dec	r0
    129a:	e2 f7       	brpl	.-8      	; 0x1294 <__stack+0x995>
    129c:	8c 93       	st	X, r24
{
	//uint8_t *bf = buffer;
	uint8_t index, step = 0;
	for(step = 0; step <= FONT_HEIGHT; step++)
	{
		for(index = 0; index < MT_SIZE; index++)
    129e:	a0 e9       	ldi	r26, 0x90	; 144
    12a0:	2a 2e       	mov	r2, r26
    12a2:	a2 e0       	ldi	r26, 0x02	; 2
    12a4:	3a 2e       	mov	r3, r26
    12a6:	2e 16       	cp	r2, r30
    12a8:	3f 06       	cpc	r3, r31
    12aa:	39 f7       	brne	.-50     	; 0x127a <__stack+0x97b>
			if(!dir)
			*(bf + index) = (*((p+index)) >> (step));
			else
			*(bf + index) = (*((p+index)) << (step));
		}
		HoldDisplayBuffer(bf, time);
    12ac:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <bf>
    12b0:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <bf+0x1>
    12b4:	fa e0       	ldi	r31, 0x0A	; 10
    12b6:	af 2e       	mov	r10, r31
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    12b8:	e4 e0       	ldi	r30, 0x04	; 4
    12ba:	2e 2e       	mov	r2, r30
    12bc:	e1 e0       	ldi	r30, 0x01	; 1
    12be:	3e 2e       	mov	r3, r30
    12c0:	81 2c       	mov	r8, r1
    12c2:	91 2c       	mov	r9, r1
    12c4:	31 e0       	ldi	r19, 0x01	; 1
    12c6:	08 2c       	mov	r0, r8
    12c8:	01 c0       	rjmp	.+2      	; 0x12cc <__stack+0x9cd>
    12ca:	33 0f       	add	r19, r19
    12cc:	0a 94       	dec	r0
    12ce:	ea f7       	brpl	.-6      	; 0x12ca <__stack+0x9cb>
    12d0:	2f e3       	ldi	r18, 0x3F	; 63
    12d2:	5a c0       	rjmp	.+180    	; 0x1388 <__stack+0xa89>
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    12d4:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    12d6:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    12d8:	5b 98       	cbi	0x0b, 3	; 11
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
			pinWrite(latch_pin, LOW);
			for(bit = 0; bit <= FONT_HEIGHT ; bit++){
				pinWrite(data_pin,((*(p+pos)) & (1 << byte)));
    12da:	4f ef       	ldi	r20, 0xFF	; 255
    12dc:	42 0f       	add	r20, r18
    12de:	fc 01       	movw	r30, r24
    12e0:	e4 0f       	add	r30, r20
    12e2:	f1 1d       	adc	r31, r1
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    12e4:	40 81       	ld	r20, Z
    12e6:	43 23       	and	r20, r19
    12e8:	09 f0       	breq	.+2      	; 0x12ec <__stack+0x9ed>
    12ea:	26 c3       	rjmp	.+1612   	; 0x1938 <__stack+0x1039>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    12ec:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    12ee:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    12f0:	5b 98       	cbi	0x0b, 3	; 11
    12f2:	4e ef       	ldi	r20, 0xFE	; 254
    12f4:	42 0f       	add	r20, r18
    12f6:	fc 01       	movw	r30, r24
    12f8:	e4 0f       	add	r30, r20
    12fa:	f1 1d       	adc	r31, r1
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    12fc:	40 81       	ld	r20, Z
    12fe:	43 23       	and	r20, r19
    1300:	09 f0       	breq	.+2      	; 0x1304 <__stack+0xa05>
    1302:	18 c3       	rjmp	.+1584   	; 0x1934 <__stack+0x1035>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1304:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1306:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1308:	5b 98       	cbi	0x0b, 3	; 11
    130a:	4d ef       	ldi	r20, 0xFD	; 253
    130c:	42 0f       	add	r20, r18
    130e:	fc 01       	movw	r30, r24
    1310:	e4 0f       	add	r30, r20
    1312:	f1 1d       	adc	r31, r1
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    1314:	40 81       	ld	r20, Z
    1316:	43 23       	and	r20, r19
    1318:	09 f0       	breq	.+2      	; 0x131c <__stack+0xa1d>
    131a:	0a c3       	rjmp	.+1556   	; 0x1930 <__stack+0x1031>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    131c:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    131e:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1320:	5b 98       	cbi	0x0b, 3	; 11
    1322:	4c ef       	ldi	r20, 0xFC	; 252
    1324:	42 0f       	add	r20, r18
    1326:	fc 01       	movw	r30, r24
    1328:	e4 0f       	add	r30, r20
    132a:	f1 1d       	adc	r31, r1
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    132c:	40 81       	ld	r20, Z
    132e:	43 23       	and	r20, r19
    1330:	09 f0       	breq	.+2      	; 0x1334 <__stack+0xa35>
    1332:	fc c2       	rjmp	.+1528   	; 0x192c <__stack+0x102d>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1334:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1336:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1338:	5b 98       	cbi	0x0b, 3	; 11
    133a:	4b ef       	ldi	r20, 0xFB	; 251
    133c:	42 0f       	add	r20, r18
    133e:	fc 01       	movw	r30, r24
    1340:	e4 0f       	add	r30, r20
    1342:	f1 1d       	adc	r31, r1
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    1344:	40 81       	ld	r20, Z
    1346:	43 23       	and	r20, r19
    1348:	09 f0       	breq	.+2      	; 0x134c <__stack+0xa4d>
    134a:	ee c2       	rjmp	.+1500   	; 0x1928 <__stack+0x1029>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    134c:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    134e:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1350:	5b 98       	cbi	0x0b, 3	; 11
    1352:	4a ef       	ldi	r20, 0xFA	; 250
    1354:	42 0f       	add	r20, r18
    1356:	fc 01       	movw	r30, r24
    1358:	e4 0f       	add	r30, r20
    135a:	f1 1d       	adc	r31, r1
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    135c:	40 81       	ld	r20, Z
    135e:	43 23       	and	r20, r19
    1360:	09 f0       	breq	.+2      	; 0x1364 <__stack+0xa65>
    1362:	e0 c2       	rjmp	.+1472   	; 0x1924 <__stack+0x1025>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1364:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1366:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1368:	5b 98       	cbi	0x0b, 3	; 11
    136a:	49 ef       	ldi	r20, 0xF9	; 249
    136c:	42 0f       	add	r20, r18
    136e:	fc 01       	movw	r30, r24
    1370:	e4 0f       	add	r30, r20
    1372:	f1 1d       	adc	r31, r1
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    1374:	40 81       	ld	r20, Z
    1376:	43 23       	and	r20, r19
    1378:	e9 f4       	brne	.+58     	; 0x13b4 <__stack+0xab5>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    137a:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    137c:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    137e:	5b 98       	cbi	0x0b, 3	; 11
				//toggle the clock pin
				pinWrite(clock_pin, HIGH);
				pinWrite(clock_pin, LOW);
				pos--;
    1380:	28 50       	subi	r18, 0x08	; 8
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1382:	5a 9a       	sbi	0x0b, 2	; 11
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
    1384:	2f 3f       	cpi	r18, 0xFF	; 255
    1386:	e9 f0       	breq	.+58     	; 0x13c2 <__stack+0xac3>
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1388:	5a 98       	cbi	0x0b, 2	; 11
			pinWrite(latch_pin, LOW);
			for(bit = 0; bit <= FONT_HEIGHT ; bit++){
				pinWrite(data_pin,((*(p+pos)) & (1 << byte)));
    138a:	fc 01       	movw	r30, r24
    138c:	e2 0f       	add	r30, r18
    138e:	f1 1d       	adc	r31, r1
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    1390:	40 81       	ld	r20, Z
    1392:	43 23       	and	r20, r19
    1394:	09 f4       	brne	.+2      	; 0x1398 <__stack+0xa99>
    1396:	9e cf       	rjmp	.-196    	; 0x12d4 <__stack+0x9d5>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1398:	59 9a       	sbi	0x0b, 1	; 11
    139a:	9d cf       	rjmp	.-198    	; 0x12d6 <__stack+0x9d7>
    139c:	59 9a       	sbi	0x0b, 1	; 11
    139e:	ae cd       	rjmp	.-1188   	; 0xefc <__stack+0x5fd>
    13a0:	59 9a       	sbi	0x0b, 1	; 11
    13a2:	a0 cd       	rjmp	.-1216   	; 0xee4 <__stack+0x5e5>
    13a4:	59 9a       	sbi	0x0b, 1	; 11
    13a6:	92 cd       	rjmp	.-1244   	; 0xecc <__stack+0x5cd>
    13a8:	59 9a       	sbi	0x0b, 1	; 11
    13aa:	84 cd       	rjmp	.-1272   	; 0xeb4 <__stack+0x5b5>
    13ac:	59 9a       	sbi	0x0b, 1	; 11
    13ae:	76 cd       	rjmp	.-1300   	; 0xe9c <__stack+0x59d>
    13b0:	59 9a       	sbi	0x0b, 1	; 11
    13b2:	68 cd       	rjmp	.-1328   	; 0xe84 <__stack+0x585>
    13b4:	59 9a       	sbi	0x0b, 1	; 11
    13b6:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    13b8:	5b 98       	cbi	0x0b, 3	; 11
				//toggle the clock pin
				pinWrite(clock_pin, HIGH);
				pinWrite(clock_pin, LOW);
				pos--;
    13ba:	28 50       	subi	r18, 0x08	; 8
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    13bc:	5a 9a       	sbi	0x0b, 2	; 11
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
    13be:	2f 3f       	cpi	r18, 0xFF	; 255
    13c0:	19 f7       	brne	.-58     	; 0x1388 <__stack+0xa89>
    13c2:	a4 e0       	ldi	r26, 0x04	; 4
    13c4:	b1 e0       	ldi	r27, 0x01	; 1
    13c6:	9e 83       	std	Y+6, r25	; 0x06
    13c8:	8d 83       	std	Y+5, r24	; 0x05
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    13ca:	ed 91       	ld	r30, X+
    13cc:	ee 23       	and	r30, r30
    13ce:	01 f1       	breq	.+64     	; 0x1410 <__stack+0xb11>
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    13d0:	ec 3c       	cpi	r30, 0xCC	; 204
    13d2:	d8 f7       	brcc	.-10     	; 0x13ca <__stack+0xacb>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    13d4:	27 e0       	ldi	r18, 0x07	; 7
    13d6:	e2 9f       	mul	r30, r18
    13d8:	f0 01       	movw	r30, r0
    13da:	11 24       	eor	r1, r1
    13dc:	af 01       	movw	r20, r30
    13de:	4c 5b       	subi	r20, 0xBC	; 188
    13e0:	5e 4f       	sbci	r21, 0xFE	; 254
    13e2:	2a 01       	movw	r4, r20
    13e4:	fa 01       	movw	r30, r20
    13e6:	42 81       	ldd	r20, Z+2	; 0x02
    13e8:	53 81       	ldd	r21, Z+3	; 0x03
    13ea:	fa 01       	movw	r30, r20
    13ec:	30 81       	ld	r19, Z
    13ee:	81 e0       	ldi	r24, 0x01	; 1
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	f2 01       	movw	r30, r4
    13f4:	06 80       	ldd	r0, Z+6	; 0x06
    13f6:	02 c0       	rjmp	.+4      	; 0x13fc <__stack+0xafd>
    13f8:	88 0f       	add	r24, r24
    13fa:	99 1f       	adc	r25, r25
    13fc:	0a 94       	dec	r0
    13fe:	e2 f7       	brpl	.-8      	; 0x13f8 <__stack+0xaf9>
    1400:	28 2f       	mov	r18, r24
    1402:	20 95       	com	r18
    1404:	23 23       	and	r18, r19
    1406:	fa 01       	movw	r30, r20
    1408:	20 83       	st	Z, r18
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    140a:	ed 91       	ld	r30, X+
    140c:	e1 11       	cpse	r30, r1
    140e:	e0 cf       	rjmp	.-64     	; 0x13d0 <__stack+0xad1>
    1410:	8d 81       	ldd	r24, Y+5	; 0x05
    1412:	9e 81       	ldd	r25, Y+6	; 0x06
/* Multiplexing method                                                  */
/************************************************************************/
static inline void MultiPlex(uint8_t *pin)
{
	pinsMultiWrite(plex_pins, LOW);
	pinWrite(plex_pins[*pin], HIGH);
    1414:	d1 01       	movw	r26, r2
    1416:	ed 91       	ld	r30, X+
    1418:	1d 01       	movw	r2, r26
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    141a:	ec 3c       	cpi	r30, 0xCC	; 204
    141c:	08 f4       	brcc	.+2      	; 0x1420 <__stack+0xb21>
    141e:	8e c2       	rjmp	.+1308   	; 0x193c <__stack+0x103d>
	delay(delayms);
    1420:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1424:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
/*  delay                                                               */
/************************************************************************/
int delayms = 1;
static inline void delay(int dl)
{
	while(dl >= 0)
    1428:	37 fd       	sbrc	r19, 7
    142a:	09 c0       	rjmp	.+18     	; 0x143e <__stack+0xb3f>
    142c:	ef e9       	ldi	r30, 0x9F	; 159
    142e:	ff e0       	ldi	r31, 0x0F	; 15
    1430:	31 97       	sbiw	r30, 0x01	; 1
    1432:	f1 f7       	brne	.-4      	; 0x1430 <__stack+0xb31>
    1434:	00 c0       	rjmp	.+0      	; 0x1436 <__stack+0xb37>
    1436:	00 00       	nop
	{
		_delay_ms(1);
		dl--;
    1438:	21 50       	subi	r18, 0x01	; 1
    143a:	31 09       	sbc	r19, r1
    143c:	b8 f7       	brcc	.-18     	; 0x142c <__stack+0xb2d>
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
    143e:	a4 e0       	ldi	r26, 0x04	; 4
    1440:	b1 e0       	ldi	r27, 0x01	; 1
    1442:	9e 83       	std	Y+6, r25	; 0x06
    1444:	8d 83       	std	Y+5, r24	; 0x05
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    1446:	ed 91       	ld	r30, X+
    1448:	ee 23       	and	r30, r30
    144a:	01 f1       	breq	.+64     	; 0x148c <__stack+0xb8d>
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    144c:	ec 3c       	cpi	r30, 0xCC	; 204
    144e:	d8 f7       	brcc	.-10     	; 0x1446 <__stack+0xb47>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1450:	27 e0       	ldi	r18, 0x07	; 7
    1452:	e2 9f       	mul	r30, r18
    1454:	f0 01       	movw	r30, r0
    1456:	11 24       	eor	r1, r1
    1458:	af 01       	movw	r20, r30
    145a:	4c 5b       	subi	r20, 0xBC	; 188
    145c:	5e 4f       	sbci	r21, 0xFE	; 254
    145e:	2a 01       	movw	r4, r20
    1460:	fa 01       	movw	r30, r20
    1462:	42 81       	ldd	r20, Z+2	; 0x02
    1464:	53 81       	ldd	r21, Z+3	; 0x03
    1466:	fa 01       	movw	r30, r20
    1468:	30 81       	ld	r19, Z
    146a:	81 e0       	ldi	r24, 0x01	; 1
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	f2 01       	movw	r30, r4
    1470:	06 80       	ldd	r0, Z+6	; 0x06
    1472:	02 c0       	rjmp	.+4      	; 0x1478 <__stack+0xb79>
    1474:	88 0f       	add	r24, r24
    1476:	99 1f       	adc	r25, r25
    1478:	0a 94       	dec	r0
    147a:	e2 f7       	brpl	.-8      	; 0x1474 <__stack+0xb75>
    147c:	28 2f       	mov	r18, r24
    147e:	20 95       	com	r18
    1480:	23 23       	and	r18, r19
    1482:	fa 01       	movw	r30, r20
    1484:	20 83       	st	Z, r18
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    1486:	ed 91       	ld	r30, X+
    1488:	e1 11       	cpse	r30, r1
    148a:	e0 cf       	rjmp	.-64     	; 0x144c <__stack+0xb4d>
    148c:	8d 81       	ldd	r24, Y+5	; 0x05
    148e:	9e 81       	ldd	r25, Y+6	; 0x06
    1490:	29 e0       	ldi	r18, 0x09	; 9
    1492:	30 e0       	ldi	r19, 0x00	; 0
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1494:	5a 98       	cbi	0x0b, 2	; 11
    1496:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1498:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    149a:	5b 98       	cbi	0x0b, 3	; 11
    149c:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    149e:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    14a0:	5b 98       	cbi	0x0b, 3	; 11
    14a2:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    14a4:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    14a6:	5b 98       	cbi	0x0b, 3	; 11
    14a8:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    14aa:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    14ac:	5b 98       	cbi	0x0b, 3	; 11
    14ae:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    14b0:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    14b2:	5b 98       	cbi	0x0b, 3	; 11
    14b4:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    14b6:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    14b8:	5b 98       	cbi	0x0b, 3	; 11
    14ba:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    14bc:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    14be:	5b 98       	cbi	0x0b, 3	; 11
    14c0:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    14c2:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    14c4:	5b 98       	cbi	0x0b, 3	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    14c6:	5a 9a       	sbi	0x0b, 2	; 11
    14c8:	21 50       	subi	r18, 0x01	; 1
    14ca:	31 09       	sbc	r19, r1
/* Clear Display                                                        */
/************************************************************************/
static inline void Clear(){
	int x, y = 0;
	pinsMultiWrite(plex_pins, LOW);
	for(x = 0; x < (SH_REG + 1); x++) {
    14cc:	19 f7       	brne	.-58     	; 0x1494 <__stack+0xb95>
    14ce:	ff ef       	ldi	r31, 0xFF	; 255
    14d0:	8f 1a       	sub	r8, r31
    14d2:	9f 0a       	sbc	r9, r31
{
	uint8_t byte, index, bit = 0;
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
    14d4:	27 e0       	ldi	r18, 0x07	; 7
    14d6:	82 16       	cp	r8, r18
    14d8:	91 04       	cpc	r9, r1
    14da:	09 f0       	breq	.+2      	; 0x14de <__stack+0xbdf>
    14dc:	f3 ce       	rjmp	.-538    	; 0x12c4 <__stack+0x9c5>
    14de:	aa 94       	dec	r10
}
}*/
static inline void HoldDisplayBuffer(const uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
    14e0:	a1 10       	cpse	r10, r1
    14e2:	ea ce       	rjmp	.-556    	; 0x12b8 <__stack+0x9b9>
    14e4:	6f 5f       	subi	r22, 0xFF	; 255
    14e6:	7f 4f       	sbci	r23, 0xFF	; 255
/************************************************************************/
void Fall(const uint8_t *p, uint8_t time, uint8_t dir )
{
	//uint8_t *bf = buffer;
	uint8_t index, step = 0;
	for(step = 0; step <= FONT_HEIGHT; step++)
    14e8:	68 30       	cpi	r22, 0x08	; 8
    14ea:	71 05       	cpc	r23, r1
    14ec:	09 f0       	breq	.+2      	; 0x14f0 <__stack+0xbf1>
    14ee:	c2 ce       	rjmp	.-636    	; 0x1274 <__stack+0x975>
			else
			*(bf + index) = (*((p+index)) << (step));
		}
		HoldDisplayBuffer(bf, time);
	}
	HoldDisplayBuffer(bf,50);
    14f0:	40 90 02 01 	lds	r4, 0x0102	; 0x800102 <bf>
    14f4:	50 90 03 01 	lds	r5, 0x0103	; 0x800103 <bf+0x1>
    14f8:	52 e3       	ldi	r21, 0x32	; 50
    14fa:	a5 2e       	mov	r10, r21
}*/
static inline void HoldDisplayBuffer(const uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
		DisplayBuffer(data);
    14fc:	c2 01       	movw	r24, r4
    14fe:	0e 94 41 01 	call	0x282	; 0x282 <DisplayBuffer>
    1502:	aa 94       	dec	r10
}
}*/
static inline void HoldDisplayBuffer(const uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
    1504:	a1 10       	cpse	r10, r1
    1506:	fa cf       	rjmp	.-12     	; 0x14fc <__stack+0xbfd>
    1508:	d8 01       	movw	r26, r16
    150a:	eb 2d       	mov	r30, r11
    150c:	1d 92       	st	X+, r1
    150e:	ea 95       	dec	r30
    1510:	e9 f7       	brne	.-6      	; 0x150c <__stack+0xc0d>
    1512:	e7 e1       	ldi	r30, 0x17	; 23
    1514:	f1 e0       	ldi	r31, 0x01	; 1
    1516:	84 91       	lpm	r24, Z
    1518:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <stringbuffer+0x26>
    151c:	e8 e1       	ldi	r30, 0x18	; 24
    151e:	f1 e0       	ldi	r31, 0x01	; 1
    1520:	84 91       	lpm	r24, Z
    1522:	80 93 77 02 	sts	0x0277, r24	; 0x800277 <stringbuffer+0x27>
    1526:	e9 e1       	ldi	r30, 0x19	; 25
    1528:	f1 e0       	ldi	r31, 0x01	; 1
    152a:	84 91       	lpm	r24, Z
    152c:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <stringbuffer+0x28>
    1530:	ea e1       	ldi	r30, 0x1A	; 26
    1532:	f1 e0       	ldi	r31, 0x01	; 1
    1534:	84 91       	lpm	r24, Z
    1536:	80 93 79 02 	sts	0x0279, r24	; 0x800279 <stringbuffer+0x29>
    153a:	eb e1       	ldi	r30, 0x1B	; 27
    153c:	f1 e0       	ldi	r31, 0x01	; 1
    153e:	84 91       	lpm	r24, Z
    1540:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <stringbuffer+0x2a>
    1544:	e3 e5       	ldi	r30, 0x53	; 83
    1546:	f1 e0       	ldi	r31, 0x01	; 1
    1548:	84 91       	lpm	r24, Z
    154a:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <stringbuffer+0x2c>
    154e:	e4 e5       	ldi	r30, 0x54	; 84
    1550:	f1 e0       	ldi	r31, 0x01	; 1
    1552:	84 91       	lpm	r24, Z
    1554:	80 93 7d 02 	sts	0x027D, r24	; 0x80027d <stringbuffer+0x2d>
    1558:	e5 e5       	ldi	r30, 0x55	; 85
    155a:	f1 e0       	ldi	r31, 0x01	; 1
    155c:	84 91       	lpm	r24, Z
    155e:	80 93 7e 02 	sts	0x027E, r24	; 0x80027e <stringbuffer+0x2e>
    1562:	e6 e5       	ldi	r30, 0x56	; 86
    1564:	f1 e0       	ldi	r31, 0x01	; 1
    1566:	84 91       	lpm	r24, Z
    1568:	80 93 7f 02 	sts	0x027F, r24	; 0x80027f <stringbuffer+0x2f>
    156c:	e7 e5       	ldi	r30, 0x57	; 87
    156e:	f1 e0       	ldi	r31, 0x01	; 1
    1570:	84 91       	lpm	r24, Z
    1572:	80 93 80 02 	sts	0x0280, r24	; 0x800280 <stringbuffer+0x30>
    1576:	ec e1       	ldi	r30, 0x1C	; 28
    1578:	f1 e0       	ldi	r31, 0x01	; 1
    157a:	84 91       	lpm	r24, Z
    157c:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <stringbuffer+0x32>
    1580:	ed e1       	ldi	r30, 0x1D	; 29
    1582:	f1 e0       	ldi	r31, 0x01	; 1
    1584:	84 91       	lpm	r24, Z
    1586:	80 93 83 02 	sts	0x0283, r24	; 0x800283 <stringbuffer+0x33>
    158a:	ee e1       	ldi	r30, 0x1E	; 30
    158c:	f1 e0       	ldi	r31, 0x01	; 1
    158e:	84 91       	lpm	r24, Z
    1590:	80 93 84 02 	sts	0x0284, r24	; 0x800284 <stringbuffer+0x34>
    1594:	ef e1       	ldi	r30, 0x1F	; 31
    1596:	f1 e0       	ldi	r31, 0x01	; 1
    1598:	84 91       	lpm	r24, Z
    159a:	80 93 85 02 	sts	0x0285, r24	; 0x800285 <stringbuffer+0x35>
    159e:	e0 e2       	ldi	r30, 0x20	; 32
    15a0:	f1 e0       	ldi	r31, 0x01	; 1
    15a2:	84 91       	lpm	r24, Z
    15a4:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <stringbuffer+0x36>
    15a8:	e1 e2       	ldi	r30, 0x21	; 33
    15aa:	f1 e0       	ldi	r31, 0x01	; 1
    15ac:	84 91       	lpm	r24, Z
    15ae:	80 93 88 02 	sts	0x0288, r24	; 0x800288 <stringbuffer+0x38>
    15b2:	e2 e2       	ldi	r30, 0x22	; 34
    15b4:	f1 e0       	ldi	r31, 0x01	; 1
    15b6:	84 91       	lpm	r24, Z
    15b8:	80 93 89 02 	sts	0x0289, r24	; 0x800289 <stringbuffer+0x39>
    15bc:	e3 e2       	ldi	r30, 0x23	; 35
    15be:	f1 e0       	ldi	r31, 0x01	; 1
    15c0:	84 91       	lpm	r24, Z
    15c2:	80 93 8a 02 	sts	0x028A, r24	; 0x80028a <stringbuffer+0x3a>
    15c6:	e4 e2       	ldi	r30, 0x24	; 36
    15c8:	f1 e0       	ldi	r31, 0x01	; 1
    15ca:	84 91       	lpm	r24, Z
    15cc:	80 93 8b 02 	sts	0x028B, r24	; 0x80028b <stringbuffer+0x3b>
    15d0:	e5 e2       	ldi	r30, 0x25	; 37
    15d2:	f1 e0       	ldi	r31, 0x01	; 1
    15d4:	84 91       	lpm	r24, Z
    15d6:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <stringbuffer+0x3c>
    15da:	28 2d       	mov	r18, r8
			else
			*(bf + index) = (*((p+index)) << (step));
		}
		HoldDisplayBuffer(bf, time);
	}
	HoldDisplayBuffer(bf,50);
    15dc:	e0 e5       	ldi	r30, 0x50	; 80
    15de:	f2 e0       	ldi	r31, 0x02	; 2
	for(step = 0; step < FONT_HEIGHT; step++)
	{
		for(index = 0; index < MT_SIZE; index++)
		{
			if(dir)
			*(bf + index) = (*((p+index)) >> (FONT_HEIGHT-step));
    15e0:	cf 01       	movw	r24, r30
    15e2:	80 55       	subi	r24, 0x50	; 80
    15e4:	92 40       	sbci	r25, 0x02	; 2
    15e6:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <bf>
    15ea:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <bf+0x1>
    15ee:	a8 0f       	add	r26, r24
    15f0:	b9 1f       	adc	r27, r25
    15f2:	81 91       	ld	r24, Z+
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	02 2e       	mov	r0, r18
    15f8:	02 c0       	rjmp	.+4      	; 0x15fe <__stack+0xcff>
    15fa:	95 95       	asr	r25
    15fc:	87 95       	ror	r24
    15fe:	0a 94       	dec	r0
    1600:	e2 f7       	brpl	.-8      	; 0x15fa <__stack+0xcfb>
    1602:	8c 93       	st	X, r24
{
	//uint8_t *bf = buffer;
	uint8_t index, step = 0;
	for(step = 0; step < FONT_HEIGHT; step++)
	{
		for(index = 0; index < MT_SIZE; index++)
    1604:	40 e9       	ldi	r20, 0x90	; 144
    1606:	24 2e       	mov	r2, r20
    1608:	42 e0       	ldi	r20, 0x02	; 2
    160a:	34 2e       	mov	r3, r20
    160c:	2e 16       	cp	r2, r30
    160e:	3f 06       	cpc	r3, r31
    1610:	39 f7       	brne	.-50     	; 0x15e0 <__stack+0xce1>
			if(dir)
			*(bf + index) = (*((p+index)) >> (FONT_HEIGHT-step));
			else
			*(bf + index) = (*((p+index)) << (FONT_HEIGHT-step));
		}
		HoldDisplayBuffer(bf, time);
    1612:	40 90 02 01 	lds	r4, 0x0102	; 0x800102 <bf>
    1616:	50 90 03 01 	lds	r5, 0x0103	; 0x800103 <bf+0x1>
    161a:	3a e0       	ldi	r19, 0x0A	; 10
    161c:	a3 2e       	mov	r10, r19
}*/
static inline void HoldDisplayBuffer(const uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
		DisplayBuffer(data);
    161e:	c2 01       	movw	r24, r4
    1620:	0e 94 41 01 	call	0x282	; 0x282 <DisplayBuffer>
    1624:	aa 94       	dec	r10
}
}*/
static inline void HoldDisplayBuffer(const uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
    1626:	a1 10       	cpse	r10, r1
    1628:	fa cf       	rjmp	.-12     	; 0x161e <__stack+0xd1f>
    162a:	21 e0       	ldi	r18, 0x01	; 1
    162c:	82 1a       	sub	r8, r18
    162e:	91 08       	sbc	r9, r1
enum direction{ up, down};
void Drop(const uint8_t *p, uint8_t time, uint8_t dir )
{
	//uint8_t *bf = buffer;
	uint8_t index, step = 0;
	for(step = 0; step < FONT_HEIGHT; step++)
    1630:	a1 f6       	brne	.-88     	; 0x15da <__stack+0xcdb>
    1632:	2a e0       	ldi	r18, 0x0A	; 10
    1634:	a2 2e       	mov	r10, r18
}*/
static inline void HoldDisplayBuffer(const uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
		DisplayBuffer(data);
    1636:	80 e5       	ldi	r24, 0x50	; 80
    1638:	92 e0       	ldi	r25, 0x02	; 2
    163a:	0e 94 41 01 	call	0x282	; 0x282 <DisplayBuffer>
    163e:	aa 94       	dec	r10
}
}*/
static inline void HoldDisplayBuffer(const uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
    1640:	a1 10       	cpse	r10, r1
    1642:	f9 cf       	rjmp	.-14     	; 0x1636 <__stack+0xd37>
    1644:	d8 01       	movw	r26, r16
    1646:	eb 2d       	mov	r30, r11
    1648:	1d 92       	st	X+, r1
    164a:	ea 95       	dec	r30
    164c:	e9 f7       	brne	.-6      	; 0x1648 <__stack+0xd49>
    164e:	e7 e1       	ldi	r30, 0x17	; 23
    1650:	f1 e0       	ldi	r31, 0x01	; 1
    1652:	84 91       	lpm	r24, Z
    1654:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <stringbuffer+0x26>
    1658:	e8 e1       	ldi	r30, 0x18	; 24
    165a:	f1 e0       	ldi	r31, 0x01	; 1
    165c:	84 91       	lpm	r24, Z
    165e:	80 93 77 02 	sts	0x0277, r24	; 0x800277 <stringbuffer+0x27>
    1662:	e9 e1       	ldi	r30, 0x19	; 25
    1664:	f1 e0       	ldi	r31, 0x01	; 1
    1666:	84 91       	lpm	r24, Z
    1668:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <stringbuffer+0x28>
    166c:	ea e1       	ldi	r30, 0x1A	; 26
    166e:	f1 e0       	ldi	r31, 0x01	; 1
    1670:	84 91       	lpm	r24, Z
    1672:	80 93 79 02 	sts	0x0279, r24	; 0x800279 <stringbuffer+0x29>
    1676:	eb e1       	ldi	r30, 0x1B	; 27
    1678:	f1 e0       	ldi	r31, 0x01	; 1
    167a:	84 91       	lpm	r24, Z
    167c:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <stringbuffer+0x2a>
    1680:	e3 e5       	ldi	r30, 0x53	; 83
    1682:	f1 e0       	ldi	r31, 0x01	; 1
    1684:	84 91       	lpm	r24, Z
    1686:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <stringbuffer+0x2c>
    168a:	e4 e5       	ldi	r30, 0x54	; 84
    168c:	f1 e0       	ldi	r31, 0x01	; 1
    168e:	84 91       	lpm	r24, Z
    1690:	80 93 7d 02 	sts	0x027D, r24	; 0x80027d <stringbuffer+0x2d>
    1694:	e5 e5       	ldi	r30, 0x55	; 85
    1696:	f1 e0       	ldi	r31, 0x01	; 1
    1698:	84 91       	lpm	r24, Z
    169a:	80 93 7e 02 	sts	0x027E, r24	; 0x80027e <stringbuffer+0x2e>
    169e:	e6 e5       	ldi	r30, 0x56	; 86
    16a0:	f1 e0       	ldi	r31, 0x01	; 1
    16a2:	84 91       	lpm	r24, Z
    16a4:	80 93 7f 02 	sts	0x027F, r24	; 0x80027f <stringbuffer+0x2f>
    16a8:	e7 e5       	ldi	r30, 0x57	; 87
    16aa:	f1 e0       	ldi	r31, 0x01	; 1
    16ac:	84 91       	lpm	r24, Z
    16ae:	80 93 80 02 	sts	0x0280, r24	; 0x800280 <stringbuffer+0x30>
    16b2:	ec e1       	ldi	r30, 0x1C	; 28
    16b4:	f1 e0       	ldi	r31, 0x01	; 1
    16b6:	84 91       	lpm	r24, Z
    16b8:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <stringbuffer+0x32>
    16bc:	ed e1       	ldi	r30, 0x1D	; 29
    16be:	f1 e0       	ldi	r31, 0x01	; 1
    16c0:	84 91       	lpm	r24, Z
    16c2:	80 93 83 02 	sts	0x0283, r24	; 0x800283 <stringbuffer+0x33>
    16c6:	ee e1       	ldi	r30, 0x1E	; 30
    16c8:	f1 e0       	ldi	r31, 0x01	; 1
    16ca:	84 91       	lpm	r24, Z
    16cc:	80 93 84 02 	sts	0x0284, r24	; 0x800284 <stringbuffer+0x34>
    16d0:	ef e1       	ldi	r30, 0x1F	; 31
    16d2:	f1 e0       	ldi	r31, 0x01	; 1
    16d4:	84 91       	lpm	r24, Z
    16d6:	80 93 85 02 	sts	0x0285, r24	; 0x800285 <stringbuffer+0x35>
    16da:	e0 e2       	ldi	r30, 0x20	; 32
    16dc:	f1 e0       	ldi	r31, 0x01	; 1
    16de:	84 91       	lpm	r24, Z
    16e0:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <stringbuffer+0x36>
    16e4:	e1 e2       	ldi	r30, 0x21	; 33
    16e6:	f1 e0       	ldi	r31, 0x01	; 1
    16e8:	84 91       	lpm	r24, Z
    16ea:	80 93 88 02 	sts	0x0288, r24	; 0x800288 <stringbuffer+0x38>
    16ee:	e2 e2       	ldi	r30, 0x22	; 34
    16f0:	f1 e0       	ldi	r31, 0x01	; 1
    16f2:	84 91       	lpm	r24, Z
    16f4:	80 93 89 02 	sts	0x0289, r24	; 0x800289 <stringbuffer+0x39>
    16f8:	e3 e2       	ldi	r30, 0x23	; 35
    16fa:	f1 e0       	ldi	r31, 0x01	; 1
    16fc:	84 91       	lpm	r24, Z
    16fe:	80 93 8a 02 	sts	0x028A, r24	; 0x80028a <stringbuffer+0x3a>
    1702:	e4 e2       	ldi	r30, 0x24	; 36
    1704:	f1 e0       	ldi	r31, 0x01	; 1
    1706:	84 91       	lpm	r24, Z
    1708:	80 93 8b 02 	sts	0x028B, r24	; 0x80028b <stringbuffer+0x3b>
    170c:	e5 e2       	ldi	r30, 0x25	; 37
    170e:	f1 e0       	ldi	r31, 0x01	; 1
    1710:	84 91       	lpm	r24, Z
    1712:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <stringbuffer+0x3c>
    1716:	92 e3       	ldi	r25, 0x32	; 50
    1718:	a9 2e       	mov	r10, r25
		DisplayBuffer(data);
    171a:	80 e5       	ldi	r24, 0x50	; 80
    171c:	92 e0       	ldi	r25, 0x02	; 2
    171e:	0e 94 41 01 	call	0x282	; 0x282 <DisplayBuffer>
    1722:	aa 94       	dec	r10
}
}*/
static inline void HoldDisplayBuffer(const uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
    1724:	a1 10       	cpse	r10, r1
    1726:	f9 cf       	rjmp	.-14     	; 0x171a <__stack+0xe1b>
    1728:	d8 01       	movw	r26, r16
    172a:	eb 2d       	mov	r30, r11
    172c:	1d 92       	st	X+, r1
    172e:	ea 95       	dec	r30
    1730:	e9 f7       	brne	.-6      	; 0x172c <__stack+0xe2d>
    1732:	e7 e1       	ldi	r30, 0x17	; 23
    1734:	f1 e0       	ldi	r31, 0x01	; 1
    1736:	84 91       	lpm	r24, Z
    1738:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <stringbuffer+0x26>
    173c:	e8 e1       	ldi	r30, 0x18	; 24
    173e:	f1 e0       	ldi	r31, 0x01	; 1
    1740:	84 91       	lpm	r24, Z
    1742:	80 93 77 02 	sts	0x0277, r24	; 0x800277 <stringbuffer+0x27>
    1746:	e9 e1       	ldi	r30, 0x19	; 25
    1748:	f1 e0       	ldi	r31, 0x01	; 1
    174a:	84 91       	lpm	r24, Z
    174c:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <stringbuffer+0x28>
    1750:	ea e1       	ldi	r30, 0x1A	; 26
    1752:	f1 e0       	ldi	r31, 0x01	; 1
    1754:	84 91       	lpm	r24, Z
    1756:	80 93 79 02 	sts	0x0279, r24	; 0x800279 <stringbuffer+0x29>
    175a:	eb e1       	ldi	r30, 0x1B	; 27
    175c:	f1 e0       	ldi	r31, 0x01	; 1
    175e:	84 91       	lpm	r24, Z
    1760:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <stringbuffer+0x2a>
    1764:	e3 e5       	ldi	r30, 0x53	; 83
    1766:	f1 e0       	ldi	r31, 0x01	; 1
    1768:	84 91       	lpm	r24, Z
    176a:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <stringbuffer+0x2c>
    176e:	e4 e5       	ldi	r30, 0x54	; 84
    1770:	f1 e0       	ldi	r31, 0x01	; 1
    1772:	84 91       	lpm	r24, Z
    1774:	80 93 7d 02 	sts	0x027D, r24	; 0x80027d <stringbuffer+0x2d>
    1778:	e5 e5       	ldi	r30, 0x55	; 85
    177a:	f1 e0       	ldi	r31, 0x01	; 1
    177c:	84 91       	lpm	r24, Z
    177e:	80 93 7e 02 	sts	0x027E, r24	; 0x80027e <stringbuffer+0x2e>
    1782:	e6 e5       	ldi	r30, 0x56	; 86
    1784:	f1 e0       	ldi	r31, 0x01	; 1
    1786:	84 91       	lpm	r24, Z
    1788:	80 93 7f 02 	sts	0x027F, r24	; 0x80027f <stringbuffer+0x2f>
    178c:	e7 e5       	ldi	r30, 0x57	; 87
    178e:	f1 e0       	ldi	r31, 0x01	; 1
    1790:	84 91       	lpm	r24, Z
    1792:	80 93 80 02 	sts	0x0280, r24	; 0x800280 <stringbuffer+0x30>
    1796:	ec e1       	ldi	r30, 0x1C	; 28
    1798:	f1 e0       	ldi	r31, 0x01	; 1
    179a:	84 91       	lpm	r24, Z
    179c:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <stringbuffer+0x32>
    17a0:	ed e1       	ldi	r30, 0x1D	; 29
    17a2:	f1 e0       	ldi	r31, 0x01	; 1
    17a4:	84 91       	lpm	r24, Z
    17a6:	80 93 83 02 	sts	0x0283, r24	; 0x800283 <stringbuffer+0x33>
    17aa:	ee e1       	ldi	r30, 0x1E	; 30
    17ac:	f1 e0       	ldi	r31, 0x01	; 1
    17ae:	84 91       	lpm	r24, Z
    17b0:	80 93 84 02 	sts	0x0284, r24	; 0x800284 <stringbuffer+0x34>
    17b4:	ef e1       	ldi	r30, 0x1F	; 31
    17b6:	f1 e0       	ldi	r31, 0x01	; 1
    17b8:	84 91       	lpm	r24, Z
    17ba:	80 93 85 02 	sts	0x0285, r24	; 0x800285 <stringbuffer+0x35>
    17be:	e0 e2       	ldi	r30, 0x20	; 32
    17c0:	f1 e0       	ldi	r31, 0x01	; 1
    17c2:	84 91       	lpm	r24, Z
    17c4:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <stringbuffer+0x36>
    17c8:	e1 e2       	ldi	r30, 0x21	; 33
    17ca:	f1 e0       	ldi	r31, 0x01	; 1
    17cc:	84 91       	lpm	r24, Z
    17ce:	80 93 88 02 	sts	0x0288, r24	; 0x800288 <stringbuffer+0x38>
    17d2:	e2 e2       	ldi	r30, 0x22	; 34
    17d4:	f1 e0       	ldi	r31, 0x01	; 1
    17d6:	84 91       	lpm	r24, Z
    17d8:	80 93 89 02 	sts	0x0289, r24	; 0x800289 <stringbuffer+0x39>
    17dc:	e3 e2       	ldi	r30, 0x23	; 35
    17de:	f1 e0       	ldi	r31, 0x01	; 1
    17e0:	84 91       	lpm	r24, Z
    17e2:	80 93 8a 02 	sts	0x028A, r24	; 0x80028a <stringbuffer+0x3a>
    17e6:	e4 e2       	ldi	r30, 0x24	; 36
    17e8:	f1 e0       	ldi	r31, 0x01	; 1
    17ea:	84 91       	lpm	r24, Z
    17ec:	80 93 8b 02 	sts	0x028B, r24	; 0x80028b <stringbuffer+0x3b>
    17f0:	e5 e2       	ldi	r30, 0x25	; 37
    17f2:	f1 e0       	ldi	r31, 0x01	; 1
    17f4:	84 91       	lpm	r24, Z
    17f6:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <stringbuffer+0x3c>
    17fa:	81 2c       	mov	r8, r1
    17fc:	91 2c       	mov	r9, r1
    17fe:	48 2d       	mov	r20, r8
    1800:	e0 e5       	ldi	r30, 0x50	; 80
    1802:	f2 e0       	ldi	r31, 0x02	; 2
		for(index = 0; index < MT_SIZE; index++)
		{
			if(!dir)
			*(bf + index) = (*((p+index)) >> (step));
			else
			*(bf + index) = (*((p+index)) << (step));
    1804:	cf 01       	movw	r24, r30
    1806:	80 55       	subi	r24, 0x50	; 80
    1808:	92 40       	sbci	r25, 0x02	; 2
    180a:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <bf>
    180e:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <bf+0x1>
    1812:	d9 01       	movw	r26, r18
    1814:	a8 0f       	add	r26, r24
    1816:	b9 1f       	adc	r27, r25
    1818:	91 91       	ld	r25, Z+
    181a:	04 2e       	mov	r0, r20
    181c:	01 c0       	rjmp	.+2      	; 0x1820 <__stack+0xf21>
    181e:	99 0f       	add	r25, r25
    1820:	0a 94       	dec	r0
    1822:	ea f7       	brpl	.-6      	; 0x181e <__stack+0xf1f>
    1824:	9c 93       	st	X, r25
{
	//uint8_t *bf = buffer;
	uint8_t index, step = 0;
	for(step = 0; step <= FONT_HEIGHT; step++)
	{
		for(index = 0; index < MT_SIZE; index++)
    1826:	80 e9       	ldi	r24, 0x90	; 144
    1828:	28 2e       	mov	r2, r24
    182a:	82 e0       	ldi	r24, 0x02	; 2
    182c:	38 2e       	mov	r3, r24
    182e:	2e 16       	cp	r2, r30
    1830:	3f 06       	cpc	r3, r31
    1832:	41 f7       	brne	.-48     	; 0x1804 <__stack+0xf05>
			if(!dir)
			*(bf + index) = (*((p+index)) >> (step));
			else
			*(bf + index) = (*((p+index)) << (step));
		}
		HoldDisplayBuffer(bf, time);
    1834:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <bf>
    1838:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <bf+0x1>
    183c:	ba e0       	ldi	r27, 0x0A	; 10
    183e:	ab 2e       	mov	r10, r27
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    1840:	a4 e0       	ldi	r26, 0x04	; 4
    1842:	2a 2e       	mov	r2, r26
    1844:	a1 e0       	ldi	r26, 0x01	; 1
    1846:	3a 2e       	mov	r3, r26
    1848:	60 e0       	ldi	r22, 0x00	; 0
    184a:	70 e0       	ldi	r23, 0x00	; 0
    184c:	31 e0       	ldi	r19, 0x01	; 1
    184e:	06 2e       	mov	r0, r22
    1850:	01 c0       	rjmp	.+2      	; 0x1854 <__stack+0xf55>
    1852:	33 0f       	add	r19, r19
    1854:	0a 94       	dec	r0
    1856:	ea f7       	brpl	.-6      	; 0x1852 <__stack+0xf53>
    1858:	2f e3       	ldi	r18, 0x3F	; 63
    185a:	5a c0       	rjmp	.+180    	; 0x1910 <__stack+0x1011>
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    185c:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    185e:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1860:	5b 98       	cbi	0x0b, 3	; 11
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
			pinWrite(latch_pin, LOW);
			for(bit = 0; bit <= FONT_HEIGHT ; bit++){
				pinWrite(data_pin,((*(p+pos)) & (1 << byte)));
    1862:	4f ef       	ldi	r20, 0xFF	; 255
    1864:	42 0f       	add	r20, r18
    1866:	fc 01       	movw	r30, r24
    1868:	e4 0f       	add	r30, r20
    186a:	f1 1d       	adc	r31, r1
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    186c:	40 81       	ld	r20, Z
    186e:	43 23       	and	r20, r19
    1870:	09 f0       	breq	.+2      	; 0x1874 <__stack+0xf75>
    1872:	98 c1       	rjmp	.+816    	; 0x1ba4 <__stack+0x12a5>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1874:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1876:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1878:	5b 98       	cbi	0x0b, 3	; 11
    187a:	4e ef       	ldi	r20, 0xFE	; 254
    187c:	42 0f       	add	r20, r18
    187e:	fc 01       	movw	r30, r24
    1880:	e4 0f       	add	r30, r20
    1882:	f1 1d       	adc	r31, r1
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    1884:	40 81       	ld	r20, Z
    1886:	43 23       	and	r20, r19
    1888:	09 f0       	breq	.+2      	; 0x188c <__stack+0xf8d>
    188a:	8a c1       	rjmp	.+788    	; 0x1ba0 <__stack+0x12a1>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    188c:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    188e:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1890:	5b 98       	cbi	0x0b, 3	; 11
    1892:	4d ef       	ldi	r20, 0xFD	; 253
    1894:	42 0f       	add	r20, r18
    1896:	fc 01       	movw	r30, r24
    1898:	e4 0f       	add	r30, r20
    189a:	f1 1d       	adc	r31, r1
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    189c:	40 81       	ld	r20, Z
    189e:	43 23       	and	r20, r19
    18a0:	09 f0       	breq	.+2      	; 0x18a4 <__stack+0xfa5>
    18a2:	7c c1       	rjmp	.+760    	; 0x1b9c <__stack+0x129d>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    18a4:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    18a6:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    18a8:	5b 98       	cbi	0x0b, 3	; 11
    18aa:	4c ef       	ldi	r20, 0xFC	; 252
    18ac:	42 0f       	add	r20, r18
    18ae:	fc 01       	movw	r30, r24
    18b0:	e4 0f       	add	r30, r20
    18b2:	f1 1d       	adc	r31, r1
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    18b4:	40 81       	ld	r20, Z
    18b6:	43 23       	and	r20, r19
    18b8:	09 f0       	breq	.+2      	; 0x18bc <__stack+0xfbd>
    18ba:	6e c1       	rjmp	.+732    	; 0x1b98 <__stack+0x1299>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    18bc:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    18be:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    18c0:	5b 98       	cbi	0x0b, 3	; 11
    18c2:	4b ef       	ldi	r20, 0xFB	; 251
    18c4:	42 0f       	add	r20, r18
    18c6:	fc 01       	movw	r30, r24
    18c8:	e4 0f       	add	r30, r20
    18ca:	f1 1d       	adc	r31, r1
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    18cc:	40 81       	ld	r20, Z
    18ce:	43 23       	and	r20, r19
    18d0:	09 f0       	breq	.+2      	; 0x18d4 <__stack+0xfd5>
    18d2:	60 c1       	rjmp	.+704    	; 0x1b94 <__stack+0x1295>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    18d4:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    18d6:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    18d8:	5b 98       	cbi	0x0b, 3	; 11
    18da:	4a ef       	ldi	r20, 0xFA	; 250
    18dc:	42 0f       	add	r20, r18
    18de:	fc 01       	movw	r30, r24
    18e0:	e4 0f       	add	r30, r20
    18e2:	f1 1d       	adc	r31, r1
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    18e4:	40 81       	ld	r20, Z
    18e6:	43 23       	and	r20, r19
    18e8:	09 f0       	breq	.+2      	; 0x18ec <__stack+0xfed>
    18ea:	52 c1       	rjmp	.+676    	; 0x1b90 <__stack+0x1291>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    18ec:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    18ee:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    18f0:	5b 98       	cbi	0x0b, 3	; 11
    18f2:	49 ef       	ldi	r20, 0xF9	; 249
    18f4:	42 0f       	add	r20, r18
    18f6:	fc 01       	movw	r30, r24
    18f8:	e4 0f       	add	r30, r20
    18fa:	f1 1d       	adc	r31, r1
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    18fc:	40 81       	ld	r20, Z
    18fe:	43 23       	and	r20, r19
    1900:	89 f5       	brne	.+98     	; 0x1964 <__stack+0x1065>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1902:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1904:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1906:	5b 98       	cbi	0x0b, 3	; 11
				//toggle the clock pin
				pinWrite(clock_pin, HIGH);
				pinWrite(clock_pin, LOW);
				pos--;
    1908:	28 50       	subi	r18, 0x08	; 8
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    190a:	5a 9a       	sbi	0x0b, 2	; 11
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
    190c:	2f 3f       	cpi	r18, 0xFF	; 255
    190e:	89 f1       	breq	.+98     	; 0x1972 <__stack+0x1073>
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1910:	5a 98       	cbi	0x0b, 2	; 11
			pinWrite(latch_pin, LOW);
			for(bit = 0; bit <= FONT_HEIGHT ; bit++){
				pinWrite(data_pin,((*(p+pos)) & (1 << byte)));
    1912:	fc 01       	movw	r30, r24
    1914:	e2 0f       	add	r30, r18
    1916:	f1 1d       	adc	r31, r1
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    1918:	40 81       	ld	r20, Z
    191a:	43 23       	and	r20, r19
    191c:	09 f4       	brne	.+2      	; 0x1920 <__stack+0x1021>
    191e:	9e cf       	rjmp	.-196    	; 0x185c <__stack+0xf5d>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1920:	59 9a       	sbi	0x0b, 1	; 11
    1922:	9d cf       	rjmp	.-198    	; 0x185e <__stack+0xf5f>
    1924:	59 9a       	sbi	0x0b, 1	; 11
    1926:	1f cd       	rjmp	.-1474   	; 0x1366 <__stack+0xa67>
    1928:	59 9a       	sbi	0x0b, 1	; 11
    192a:	11 cd       	rjmp	.-1502   	; 0x134e <__stack+0xa4f>
    192c:	59 9a       	sbi	0x0b, 1	; 11
    192e:	03 cd       	rjmp	.-1530   	; 0x1336 <__stack+0xa37>
    1930:	59 9a       	sbi	0x0b, 1	; 11
    1932:	f5 cc       	rjmp	.-1558   	; 0x131e <__stack+0xa1f>
    1934:	59 9a       	sbi	0x0b, 1	; 11
    1936:	e7 cc       	rjmp	.-1586   	; 0x1306 <__stack+0xa07>
    1938:	59 9a       	sbi	0x0b, 1	; 11
    193a:	d9 cc       	rjmp	.-1614   	; 0x12ee <__stack+0x9ef>
    193c:	b7 e0       	ldi	r27, 0x07	; 7
    193e:	eb 9f       	mul	r30, r27
    1940:	f0 01       	movw	r30, r0
    1942:	11 24       	eor	r1, r1
    1944:	ec 5b       	subi	r30, 0xBC	; 188
    1946:	fe 4f       	sbci	r31, 0xFE	; 254
    1948:	a2 81       	ldd	r26, Z+2	; 0x02
    194a:	b3 81       	ldd	r27, Z+3	; 0x03
    194c:	4c 91       	ld	r20, X
    194e:	21 e0       	ldi	r18, 0x01	; 1
    1950:	30 e0       	ldi	r19, 0x00	; 0
    1952:	06 80       	ldd	r0, Z+6	; 0x06
    1954:	02 c0       	rjmp	.+4      	; 0x195a <__stack+0x105b>
    1956:	22 0f       	add	r18, r18
    1958:	33 1f       	adc	r19, r19
    195a:	0a 94       	dec	r0
    195c:	e2 f7       	brpl	.-8      	; 0x1956 <__stack+0x1057>
    195e:	24 2b       	or	r18, r20
    1960:	2c 93       	st	X, r18
    1962:	5e cd       	rjmp	.-1348   	; 0x1420 <__stack+0xb21>
    1964:	59 9a       	sbi	0x0b, 1	; 11
    1966:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1968:	5b 98       	cbi	0x0b, 3	; 11
				//toggle the clock pin
				pinWrite(clock_pin, HIGH);
				pinWrite(clock_pin, LOW);
				pos--;
    196a:	28 50       	subi	r18, 0x08	; 8
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    196c:	5a 9a       	sbi	0x0b, 2	; 11
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
    196e:	2f 3f       	cpi	r18, 0xFF	; 255
    1970:	79 f6       	brne	.-98     	; 0x1910 <__stack+0x1011>
    1972:	a4 e0       	ldi	r26, 0x04	; 4
    1974:	b1 e0       	ldi	r27, 0x01	; 1
    1976:	9e 83       	std	Y+6, r25	; 0x06
    1978:	8d 83       	std	Y+5, r24	; 0x05
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    197a:	ed 91       	ld	r30, X+
    197c:	ee 23       	and	r30, r30
    197e:	01 f1       	breq	.+64     	; 0x19c0 <__stack+0x10c1>
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    1980:	ec 3c       	cpi	r30, 0xCC	; 204
    1982:	d8 f7       	brcc	.-10     	; 0x197a <__stack+0x107b>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1984:	27 e0       	ldi	r18, 0x07	; 7
    1986:	e2 9f       	mul	r30, r18
    1988:	f0 01       	movw	r30, r0
    198a:	11 24       	eor	r1, r1
    198c:	af 01       	movw	r20, r30
    198e:	4c 5b       	subi	r20, 0xBC	; 188
    1990:	5e 4f       	sbci	r21, 0xFE	; 254
    1992:	2a 01       	movw	r4, r20
    1994:	fa 01       	movw	r30, r20
    1996:	42 81       	ldd	r20, Z+2	; 0x02
    1998:	53 81       	ldd	r21, Z+3	; 0x03
    199a:	fa 01       	movw	r30, r20
    199c:	30 81       	ld	r19, Z
    199e:	81 e0       	ldi	r24, 0x01	; 1
    19a0:	90 e0       	ldi	r25, 0x00	; 0
    19a2:	f2 01       	movw	r30, r4
    19a4:	06 80       	ldd	r0, Z+6	; 0x06
    19a6:	02 c0       	rjmp	.+4      	; 0x19ac <__stack+0x10ad>
    19a8:	88 0f       	add	r24, r24
    19aa:	99 1f       	adc	r25, r25
    19ac:	0a 94       	dec	r0
    19ae:	e2 f7       	brpl	.-8      	; 0x19a8 <__stack+0x10a9>
    19b0:	28 2f       	mov	r18, r24
    19b2:	20 95       	com	r18
    19b4:	23 23       	and	r18, r19
    19b6:	fa 01       	movw	r30, r20
    19b8:	20 83       	st	Z, r18
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    19ba:	ed 91       	ld	r30, X+
    19bc:	e1 11       	cpse	r30, r1
    19be:	e0 cf       	rjmp	.-64     	; 0x1980 <__stack+0x1081>
    19c0:	8d 81       	ldd	r24, Y+5	; 0x05
    19c2:	9e 81       	ldd	r25, Y+6	; 0x06
/* Multiplexing method                                                  */
/************************************************************************/
static inline void MultiPlex(uint8_t *pin)
{
	pinsMultiWrite(plex_pins, LOW);
	pinWrite(plex_pins[*pin], HIGH);
    19c4:	d1 01       	movw	r26, r2
    19c6:	ed 91       	ld	r30, X+
    19c8:	1d 01       	movw	r2, r26
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    19ca:	ec 3c       	cpi	r30, 0xCC	; 204
    19cc:	08 f4       	brcc	.+2      	; 0x19d0 <__stack+0x10d1>
    19ce:	ec c0       	rjmp	.+472    	; 0x1ba8 <__stack+0x12a9>
	delay(delayms);
    19d0:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    19d4:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
/*  delay                                                               */
/************************************************************************/
int delayms = 1;
static inline void delay(int dl)
{
	while(dl >= 0)
    19d8:	37 fd       	sbrc	r19, 7
    19da:	09 c0       	rjmp	.+18     	; 0x19ee <__stack+0x10ef>
    19dc:	ef e9       	ldi	r30, 0x9F	; 159
    19de:	ff e0       	ldi	r31, 0x0F	; 15
    19e0:	31 97       	sbiw	r30, 0x01	; 1
    19e2:	f1 f7       	brne	.-4      	; 0x19e0 <__stack+0x10e1>
    19e4:	00 c0       	rjmp	.+0      	; 0x19e6 <__stack+0x10e7>
    19e6:	00 00       	nop
	{
		_delay_ms(1);
		dl--;
    19e8:	21 50       	subi	r18, 0x01	; 1
    19ea:	31 09       	sbc	r19, r1
    19ec:	b8 f7       	brcc	.-18     	; 0x19dc <__stack+0x10dd>
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
    19ee:	a4 e0       	ldi	r26, 0x04	; 4
    19f0:	b1 e0       	ldi	r27, 0x01	; 1
    19f2:	9e 83       	std	Y+6, r25	; 0x06
    19f4:	8d 83       	std	Y+5, r24	; 0x05
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    19f6:	ed 91       	ld	r30, X+
    19f8:	ee 23       	and	r30, r30
    19fa:	01 f1       	breq	.+64     	; 0x1a3c <__stack+0x113d>
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    19fc:	ec 3c       	cpi	r30, 0xCC	; 204
    19fe:	d8 f7       	brcc	.-10     	; 0x19f6 <__stack+0x10f7>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1a00:	27 e0       	ldi	r18, 0x07	; 7
    1a02:	e2 9f       	mul	r30, r18
    1a04:	f0 01       	movw	r30, r0
    1a06:	11 24       	eor	r1, r1
    1a08:	af 01       	movw	r20, r30
    1a0a:	4c 5b       	subi	r20, 0xBC	; 188
    1a0c:	5e 4f       	sbci	r21, 0xFE	; 254
    1a0e:	2a 01       	movw	r4, r20
    1a10:	fa 01       	movw	r30, r20
    1a12:	42 81       	ldd	r20, Z+2	; 0x02
    1a14:	53 81       	ldd	r21, Z+3	; 0x03
    1a16:	fa 01       	movw	r30, r20
    1a18:	30 81       	ld	r19, Z
    1a1a:	81 e0       	ldi	r24, 0x01	; 1
    1a1c:	90 e0       	ldi	r25, 0x00	; 0
    1a1e:	f2 01       	movw	r30, r4
    1a20:	06 80       	ldd	r0, Z+6	; 0x06
    1a22:	02 c0       	rjmp	.+4      	; 0x1a28 <__stack+0x1129>
    1a24:	88 0f       	add	r24, r24
    1a26:	99 1f       	adc	r25, r25
    1a28:	0a 94       	dec	r0
    1a2a:	e2 f7       	brpl	.-8      	; 0x1a24 <__stack+0x1125>
    1a2c:	28 2f       	mov	r18, r24
    1a2e:	20 95       	com	r18
    1a30:	23 23       	and	r18, r19
    1a32:	fa 01       	movw	r30, r20
    1a34:	20 83       	st	Z, r18
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    1a36:	ed 91       	ld	r30, X+
    1a38:	e1 11       	cpse	r30, r1
    1a3a:	e0 cf       	rjmp	.-64     	; 0x19fc <__stack+0x10fd>
    1a3c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a3e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a40:	29 e0       	ldi	r18, 0x09	; 9
    1a42:	30 e0       	ldi	r19, 0x00	; 0
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1a44:	5a 98       	cbi	0x0b, 2	; 11
    1a46:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1a48:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1a4a:	5b 98       	cbi	0x0b, 3	; 11
    1a4c:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1a4e:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1a50:	5b 98       	cbi	0x0b, 3	; 11
    1a52:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1a54:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1a56:	5b 98       	cbi	0x0b, 3	; 11
    1a58:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1a5a:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1a5c:	5b 98       	cbi	0x0b, 3	; 11
    1a5e:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1a60:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1a62:	5b 98       	cbi	0x0b, 3	; 11
    1a64:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1a66:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1a68:	5b 98       	cbi	0x0b, 3	; 11
    1a6a:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1a6c:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1a6e:	5b 98       	cbi	0x0b, 3	; 11
    1a70:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1a72:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1a74:	5b 98       	cbi	0x0b, 3	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1a76:	5a 9a       	sbi	0x0b, 2	; 11
    1a78:	21 50       	subi	r18, 0x01	; 1
    1a7a:	31 09       	sbc	r19, r1
/* Clear Display                                                        */
/************************************************************************/
static inline void Clear(){
	int x, y = 0;
	pinsMultiWrite(plex_pins, LOW);
	for(x = 0; x < (SH_REG + 1); x++) {
    1a7c:	19 f7       	brne	.-58     	; 0x1a44 <__stack+0x1145>
    1a7e:	6f 5f       	subi	r22, 0xFF	; 255
    1a80:	7f 4f       	sbci	r23, 0xFF	; 255
{
	uint8_t byte, index, bit = 0;
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
    1a82:	67 30       	cpi	r22, 0x07	; 7
    1a84:	71 05       	cpc	r23, r1
    1a86:	09 f0       	breq	.+2      	; 0x1a8a <__stack+0x118b>
    1a88:	e1 ce       	rjmp	.-574    	; 0x184c <__stack+0xf4d>
    1a8a:	aa 94       	dec	r10
}
}*/
static inline void HoldDisplayBuffer(const uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
    1a8c:	a1 10       	cpse	r10, r1
    1a8e:	d8 ce       	rjmp	.-592    	; 0x1840 <__stack+0xf41>
    1a90:	ff ef       	ldi	r31, 0xFF	; 255
    1a92:	8f 1a       	sub	r8, r31
    1a94:	9f 0a       	sbc	r9, r31
/************************************************************************/
void Fall(const uint8_t *p, uint8_t time, uint8_t dir )
{
	//uint8_t *bf = buffer;
	uint8_t index, step = 0;
	for(step = 0; step <= FONT_HEIGHT; step++)
    1a96:	28 e0       	ldi	r18, 0x08	; 8
    1a98:	82 16       	cp	r8, r18
    1a9a:	91 04       	cpc	r9, r1
    1a9c:	09 f0       	breq	.+2      	; 0x1aa0 <__stack+0x11a1>
    1a9e:	af ce       	rjmp	.-674    	; 0x17fe <__stack+0xeff>
			else
			*(bf + index) = (*((p+index)) << (step));
		}
		HoldDisplayBuffer(bf, time);
	}
	HoldDisplayBuffer(bf,50);
    1aa0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <bf>
    1aa4:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <bf+0x1>
    1aa8:	f2 e3       	ldi	r31, 0x32	; 50
    1aaa:	af 2e       	mov	r10, r31
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    1aac:	a4 e0       	ldi	r26, 0x04	; 4
    1aae:	8a 2e       	mov	r8, r26
    1ab0:	a1 e0       	ldi	r26, 0x01	; 1
    1ab2:	9a 2e       	mov	r9, r26
    1ab4:	60 e0       	ldi	r22, 0x00	; 0
    1ab6:	70 e0       	ldi	r23, 0x00	; 0
    1ab8:	31 e0       	ldi	r19, 0x01	; 1
    1aba:	06 2e       	mov	r0, r22
    1abc:	01 c0       	rjmp	.+2      	; 0x1ac0 <__stack+0x11c1>
    1abe:	33 0f       	add	r19, r19
    1ac0:	0a 94       	dec	r0
    1ac2:	ea f7       	brpl	.-6      	; 0x1abe <__stack+0x11bf>
    1ac4:	2f e3       	ldi	r18, 0x3F	; 63
    1ac6:	5a c0       	rjmp	.+180    	; 0x1b7c <__stack+0x127d>
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1ac8:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1aca:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1acc:	5b 98       	cbi	0x0b, 3	; 11
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
			pinWrite(latch_pin, LOW);
			for(bit = 0; bit <= FONT_HEIGHT ; bit++){
				pinWrite(data_pin,((*(p+pos)) & (1 << byte)));
    1ace:	4f ef       	ldi	r20, 0xFF	; 255
    1ad0:	42 0f       	add	r20, r18
    1ad2:	fc 01       	movw	r30, r24
    1ad4:	e4 0f       	add	r30, r20
    1ad6:	f1 1d       	adc	r31, r1
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    1ad8:	40 81       	ld	r20, Z
    1ada:	43 23       	and	r20, r19
    1adc:	09 f0       	breq	.+2      	; 0x1ae0 <__stack+0x11e1>
    1ade:	dc c1       	rjmp	.+952    	; 0x1e98 <__stack+0x1599>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1ae0:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1ae2:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1ae4:	5b 98       	cbi	0x0b, 3	; 11
    1ae6:	4e ef       	ldi	r20, 0xFE	; 254
    1ae8:	42 0f       	add	r20, r18
    1aea:	fc 01       	movw	r30, r24
    1aec:	e4 0f       	add	r30, r20
    1aee:	f1 1d       	adc	r31, r1
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    1af0:	40 81       	ld	r20, Z
    1af2:	43 23       	and	r20, r19
    1af4:	09 f0       	breq	.+2      	; 0x1af8 <__stack+0x11f9>
    1af6:	ce c1       	rjmp	.+924    	; 0x1e94 <__stack+0x1595>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1af8:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1afa:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1afc:	5b 98       	cbi	0x0b, 3	; 11
    1afe:	4d ef       	ldi	r20, 0xFD	; 253
    1b00:	42 0f       	add	r20, r18
    1b02:	fc 01       	movw	r30, r24
    1b04:	e4 0f       	add	r30, r20
    1b06:	f1 1d       	adc	r31, r1
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    1b08:	40 81       	ld	r20, Z
    1b0a:	43 23       	and	r20, r19
    1b0c:	09 f0       	breq	.+2      	; 0x1b10 <__stack+0x1211>
    1b0e:	c0 c1       	rjmp	.+896    	; 0x1e90 <__stack+0x1591>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1b10:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1b12:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1b14:	5b 98       	cbi	0x0b, 3	; 11
    1b16:	4c ef       	ldi	r20, 0xFC	; 252
    1b18:	42 0f       	add	r20, r18
    1b1a:	fc 01       	movw	r30, r24
    1b1c:	e4 0f       	add	r30, r20
    1b1e:	f1 1d       	adc	r31, r1
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    1b20:	40 81       	ld	r20, Z
    1b22:	43 23       	and	r20, r19
    1b24:	09 f0       	breq	.+2      	; 0x1b28 <__stack+0x1229>
    1b26:	b2 c1       	rjmp	.+868    	; 0x1e8c <__stack+0x158d>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1b28:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1b2a:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1b2c:	5b 98       	cbi	0x0b, 3	; 11
    1b2e:	4b ef       	ldi	r20, 0xFB	; 251
    1b30:	42 0f       	add	r20, r18
    1b32:	fc 01       	movw	r30, r24
    1b34:	e4 0f       	add	r30, r20
    1b36:	f1 1d       	adc	r31, r1
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    1b38:	40 81       	ld	r20, Z
    1b3a:	43 23       	and	r20, r19
    1b3c:	09 f0       	breq	.+2      	; 0x1b40 <__stack+0x1241>
    1b3e:	a4 c1       	rjmp	.+840    	; 0x1e88 <__stack+0x1589>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1b40:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1b42:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1b44:	5b 98       	cbi	0x0b, 3	; 11
    1b46:	4a ef       	ldi	r20, 0xFA	; 250
    1b48:	42 0f       	add	r20, r18
    1b4a:	fc 01       	movw	r30, r24
    1b4c:	e4 0f       	add	r30, r20
    1b4e:	f1 1d       	adc	r31, r1
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    1b50:	40 81       	ld	r20, Z
    1b52:	43 23       	and	r20, r19
    1b54:	09 f0       	breq	.+2      	; 0x1b58 <__stack+0x1259>
    1b56:	96 c1       	rjmp	.+812    	; 0x1e84 <__stack+0x1585>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1b58:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1b5a:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1b5c:	5b 98       	cbi	0x0b, 3	; 11
    1b5e:	49 ef       	ldi	r20, 0xF9	; 249
    1b60:	42 0f       	add	r20, r18
    1b62:	fc 01       	movw	r30, r24
    1b64:	e4 0f       	add	r30, r20
    1b66:	f1 1d       	adc	r31, r1
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    1b68:	40 81       	ld	r20, Z
    1b6a:	43 23       	and	r20, r19
    1b6c:	89 f5       	brne	.+98     	; 0x1bd0 <__stack+0x12d1>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1b6e:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1b70:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1b72:	5b 98       	cbi	0x0b, 3	; 11
				//toggle the clock pin
				pinWrite(clock_pin, HIGH);
				pinWrite(clock_pin, LOW);
				pos--;
    1b74:	28 50       	subi	r18, 0x08	; 8
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1b76:	5a 9a       	sbi	0x0b, 2	; 11
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
    1b78:	2f 3f       	cpi	r18, 0xFF	; 255
    1b7a:	89 f1       	breq	.+98     	; 0x1bde <__stack+0x12df>
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1b7c:	5a 98       	cbi	0x0b, 2	; 11
			pinWrite(latch_pin, LOW);
			for(bit = 0; bit <= FONT_HEIGHT ; bit++){
				pinWrite(data_pin,((*(p+pos)) & (1 << byte)));
    1b7e:	fc 01       	movw	r30, r24
    1b80:	e2 0f       	add	r30, r18
    1b82:	f1 1d       	adc	r31, r1
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    1b84:	40 81       	ld	r20, Z
    1b86:	43 23       	and	r20, r19
    1b88:	09 f4       	brne	.+2      	; 0x1b8c <__stack+0x128d>
    1b8a:	9e cf       	rjmp	.-196    	; 0x1ac8 <__stack+0x11c9>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1b8c:	59 9a       	sbi	0x0b, 1	; 11
    1b8e:	9d cf       	rjmp	.-198    	; 0x1aca <__stack+0x11cb>
    1b90:	59 9a       	sbi	0x0b, 1	; 11
    1b92:	ad ce       	rjmp	.-678    	; 0x18ee <__stack+0xfef>
    1b94:	59 9a       	sbi	0x0b, 1	; 11
    1b96:	9f ce       	rjmp	.-706    	; 0x18d6 <__stack+0xfd7>
    1b98:	59 9a       	sbi	0x0b, 1	; 11
    1b9a:	91 ce       	rjmp	.-734    	; 0x18be <__stack+0xfbf>
    1b9c:	59 9a       	sbi	0x0b, 1	; 11
    1b9e:	83 ce       	rjmp	.-762    	; 0x18a6 <__stack+0xfa7>
    1ba0:	59 9a       	sbi	0x0b, 1	; 11
    1ba2:	75 ce       	rjmp	.-790    	; 0x188e <__stack+0xf8f>
    1ba4:	59 9a       	sbi	0x0b, 1	; 11
    1ba6:	67 ce       	rjmp	.-818    	; 0x1876 <__stack+0xf77>
    1ba8:	b7 e0       	ldi	r27, 0x07	; 7
    1baa:	eb 9f       	mul	r30, r27
    1bac:	f0 01       	movw	r30, r0
    1bae:	11 24       	eor	r1, r1
    1bb0:	ec 5b       	subi	r30, 0xBC	; 188
    1bb2:	fe 4f       	sbci	r31, 0xFE	; 254
    1bb4:	a2 81       	ldd	r26, Z+2	; 0x02
    1bb6:	b3 81       	ldd	r27, Z+3	; 0x03
    1bb8:	4c 91       	ld	r20, X
    1bba:	21 e0       	ldi	r18, 0x01	; 1
    1bbc:	30 e0       	ldi	r19, 0x00	; 0
    1bbe:	06 80       	ldd	r0, Z+6	; 0x06
    1bc0:	02 c0       	rjmp	.+4      	; 0x1bc6 <__stack+0x12c7>
    1bc2:	22 0f       	add	r18, r18
    1bc4:	33 1f       	adc	r19, r19
    1bc6:	0a 94       	dec	r0
    1bc8:	e2 f7       	brpl	.-8      	; 0x1bc2 <__stack+0x12c3>
    1bca:	24 2b       	or	r18, r20
    1bcc:	2c 93       	st	X, r18
    1bce:	00 cf       	rjmp	.-512    	; 0x19d0 <__stack+0x10d1>
    1bd0:	59 9a       	sbi	0x0b, 1	; 11
    1bd2:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1bd4:	5b 98       	cbi	0x0b, 3	; 11
				//toggle the clock pin
				pinWrite(clock_pin, HIGH);
				pinWrite(clock_pin, LOW);
				pos--;
    1bd6:	28 50       	subi	r18, 0x08	; 8
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1bd8:	5a 9a       	sbi	0x0b, 2	; 11
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
    1bda:	2f 3f       	cpi	r18, 0xFF	; 255
    1bdc:	79 f6       	brne	.-98     	; 0x1b7c <__stack+0x127d>
    1bde:	a4 e0       	ldi	r26, 0x04	; 4
    1be0:	b1 e0       	ldi	r27, 0x01	; 1
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    1be2:	ed 91       	ld	r30, X+
    1be4:	ee 23       	and	r30, r30
    1be6:	09 f1       	breq	.+66     	; 0x1c2a <__stack+0x132b>
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    1be8:	ec 3c       	cpi	r30, 0xCC	; 204
    1bea:	d8 f7       	brcc	.-10     	; 0x1be2 <__stack+0x12e3>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1bec:	37 e0       	ldi	r19, 0x07	; 7
    1bee:	e3 9f       	mul	r30, r19
    1bf0:	f0 01       	movw	r30, r0
    1bf2:	11 24       	eor	r1, r1
    1bf4:	af 01       	movw	r20, r30
    1bf6:	4c 5b       	subi	r20, 0xBC	; 188
    1bf8:	5e 4f       	sbci	r21, 0xFE	; 254
    1bfa:	2a 01       	movw	r4, r20
    1bfc:	fa 01       	movw	r30, r20
    1bfe:	42 81       	ldd	r20, Z+2	; 0x02
    1c00:	53 81       	ldd	r21, Z+3	; 0x03
    1c02:	fa 01       	movw	r30, r20
    1c04:	30 81       	ld	r19, Z
    1c06:	22 24       	eor	r2, r2
    1c08:	23 94       	inc	r2
    1c0a:	31 2c       	mov	r3, r1
    1c0c:	f2 01       	movw	r30, r4
    1c0e:	06 80       	ldd	r0, Z+6	; 0x06
    1c10:	02 c0       	rjmp	.+4      	; 0x1c16 <__stack+0x1317>
    1c12:	22 0c       	add	r2, r2
    1c14:	33 1c       	adc	r3, r3
    1c16:	0a 94       	dec	r0
    1c18:	e2 f7       	brpl	.-8      	; 0x1c12 <__stack+0x1313>
    1c1a:	22 2d       	mov	r18, r2
    1c1c:	20 95       	com	r18
    1c1e:	23 23       	and	r18, r19
    1c20:	fa 01       	movw	r30, r20
    1c22:	20 83       	st	Z, r18
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    1c24:	ed 91       	ld	r30, X+
    1c26:	e1 11       	cpse	r30, r1
    1c28:	df cf       	rjmp	.-66     	; 0x1be8 <__stack+0x12e9>
/* Multiplexing method                                                  */
/************************************************************************/
static inline void MultiPlex(uint8_t *pin)
{
	pinsMultiWrite(plex_pins, LOW);
	pinWrite(plex_pins[*pin], HIGH);
    1c2a:	d4 01       	movw	r26, r8
    1c2c:	ed 91       	ld	r30, X+
    1c2e:	4d 01       	movw	r8, r26
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    1c30:	ec 3c       	cpi	r30, 0xCC	; 204
    1c32:	08 f4       	brcc	.+2      	; 0x1c36 <__stack+0x1337>
    1c34:	33 c1       	rjmp	.+614    	; 0x1e9c <__stack+0x159d>
	delay(delayms);
    1c36:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1c3a:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
/*  delay                                                               */
/************************************************************************/
int delayms = 1;
static inline void delay(int dl)
{
	while(dl >= 0)
    1c3e:	37 fd       	sbrc	r19, 7
    1c40:	09 c0       	rjmp	.+18     	; 0x1c54 <__stack+0x1355>
    1c42:	ef e9       	ldi	r30, 0x9F	; 159
    1c44:	ff e0       	ldi	r31, 0x0F	; 15
    1c46:	31 97       	sbiw	r30, 0x01	; 1
    1c48:	f1 f7       	brne	.-4      	; 0x1c46 <__stack+0x1347>
    1c4a:	00 c0       	rjmp	.+0      	; 0x1c4c <__stack+0x134d>
    1c4c:	00 00       	nop
	{
		_delay_ms(1);
		dl--;
    1c4e:	21 50       	subi	r18, 0x01	; 1
    1c50:	31 09       	sbc	r19, r1
    1c52:	b8 f7       	brcc	.-18     	; 0x1c42 <__stack+0x1343>
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
    1c54:	a4 e0       	ldi	r26, 0x04	; 4
    1c56:	b1 e0       	ldi	r27, 0x01	; 1
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    1c58:	ed 91       	ld	r30, X+
    1c5a:	ee 23       	and	r30, r30
    1c5c:	09 f1       	breq	.+66     	; 0x1ca0 <__stack+0x13a1>
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    1c5e:	ec 3c       	cpi	r30, 0xCC	; 204
    1c60:	d8 f7       	brcc	.-10     	; 0x1c58 <__stack+0x1359>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1c62:	27 e0       	ldi	r18, 0x07	; 7
    1c64:	e2 9f       	mul	r30, r18
    1c66:	f0 01       	movw	r30, r0
    1c68:	11 24       	eor	r1, r1
    1c6a:	af 01       	movw	r20, r30
    1c6c:	4c 5b       	subi	r20, 0xBC	; 188
    1c6e:	5e 4f       	sbci	r21, 0xFE	; 254
    1c70:	2a 01       	movw	r4, r20
    1c72:	fa 01       	movw	r30, r20
    1c74:	42 81       	ldd	r20, Z+2	; 0x02
    1c76:	53 81       	ldd	r21, Z+3	; 0x03
    1c78:	fa 01       	movw	r30, r20
    1c7a:	30 81       	ld	r19, Z
    1c7c:	22 24       	eor	r2, r2
    1c7e:	23 94       	inc	r2
    1c80:	31 2c       	mov	r3, r1
    1c82:	f2 01       	movw	r30, r4
    1c84:	06 80       	ldd	r0, Z+6	; 0x06
    1c86:	02 c0       	rjmp	.+4      	; 0x1c8c <__stack+0x138d>
    1c88:	22 0c       	add	r2, r2
    1c8a:	33 1c       	adc	r3, r3
    1c8c:	0a 94       	dec	r0
    1c8e:	e2 f7       	brpl	.-8      	; 0x1c88 <__stack+0x1389>
    1c90:	22 2d       	mov	r18, r2
    1c92:	20 95       	com	r18
    1c94:	23 23       	and	r18, r19
    1c96:	fa 01       	movw	r30, r20
    1c98:	20 83       	st	Z, r18
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    1c9a:	ed 91       	ld	r30, X+
    1c9c:	e1 11       	cpse	r30, r1
    1c9e:	df cf       	rjmp	.-66     	; 0x1c5e <__stack+0x135f>
    1ca0:	29 e0       	ldi	r18, 0x09	; 9
    1ca2:	30 e0       	ldi	r19, 0x00	; 0
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1ca4:	5a 98       	cbi	0x0b, 2	; 11
    1ca6:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1ca8:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1caa:	5b 98       	cbi	0x0b, 3	; 11
    1cac:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1cae:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1cb0:	5b 98       	cbi	0x0b, 3	; 11
    1cb2:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1cb4:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1cb6:	5b 98       	cbi	0x0b, 3	; 11
    1cb8:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1cba:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1cbc:	5b 98       	cbi	0x0b, 3	; 11
    1cbe:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1cc0:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1cc2:	5b 98       	cbi	0x0b, 3	; 11
    1cc4:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1cc6:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1cc8:	5b 98       	cbi	0x0b, 3	; 11
    1cca:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1ccc:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1cce:	5b 98       	cbi	0x0b, 3	; 11
    1cd0:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1cd2:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1cd4:	5b 98       	cbi	0x0b, 3	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1cd6:	5a 9a       	sbi	0x0b, 2	; 11
    1cd8:	21 50       	subi	r18, 0x01	; 1
    1cda:	31 09       	sbc	r19, r1
/* Clear Display                                                        */
/************************************************************************/
static inline void Clear(){
	int x, y = 0;
	pinsMultiWrite(plex_pins, LOW);
	for(x = 0; x < (SH_REG + 1); x++) {
    1cdc:	19 f7       	brne	.-58     	; 0x1ca4 <__stack+0x13a5>
    1cde:	6f 5f       	subi	r22, 0xFF	; 255
    1ce0:	7f 4f       	sbci	r23, 0xFF	; 255
{
	uint8_t byte, index, bit = 0;
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
    1ce2:	67 30       	cpi	r22, 0x07	; 7
    1ce4:	71 05       	cpc	r23, r1
    1ce6:	09 f0       	breq	.+2      	; 0x1cea <__stack+0x13eb>
    1ce8:	e7 ce       	rjmp	.-562    	; 0x1ab8 <__stack+0x11b9>
    1cea:	aa 94       	dec	r10
}
}*/
static inline void HoldDisplayBuffer(const uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
    1cec:	a1 10       	cpse	r10, r1
    1cee:	de ce       	rjmp	.-580    	; 0x1aac <__stack+0x11ad>
    1cf0:	d8 01       	movw	r26, r16
    1cf2:	eb 2d       	mov	r30, r11
    1cf4:	1d 92       	st	X+, r1
    1cf6:	ea 95       	dec	r30
    1cf8:	e9 f7       	brne	.-6      	; 0x1cf4 <__stack+0x13f5>
    1cfa:	2b e0       	ldi	r18, 0x0B	; 11
    1cfc:	31 e0       	ldi	r19, 0x01	; 1
    1cfe:	3c 83       	std	Y+4, r19	; 0x04
    1d00:	2b 83       	std	Y+3, r18	; 0x03
    1d02:	a0 e5       	ldi	r26, 0x50	; 80
    1d04:	b2 e0       	ldi	r27, 0x02	; 2
	}else if(align == RIGHT){
		s_pos = (MT_SIZE - (c_len * FONT_WIDTH) - c_len - 2);
	}
	pos_index = s_pos;
	ClearStringBuffer();
	while(*ch){
    1d06:	f9 01       	movw	r30, r18
    1d08:	81 91       	ld	r24, Z+
    1d0a:	9f 01       	movw	r18, r30
    1d0c:	88 23       	and	r24, r24
    1d0e:	51 f1       	breq	.+84     	; 0x1d64 <__stack+0x1465>
/* returns the index of the first byte of the requested character       */
/************************************************************************/
uint8_t CharStart(const char *p)
{
	/*if(*p == ' ') return 0;
	else*/ return (uint8_t) (( *p - ' '));
    1d10:	80 52       	subi	r24, 0x20	; 32
		s_pos = (MT_SIZE - (c_len * FONT_WIDTH) - c_len - 2);
	}
	pos_index = s_pos;
	ClearStringBuffer();
	while(*ch){
		index = CharStart(ch++) * FONT_WIDTH;
    1d12:	45 e0       	ldi	r20, 0x05	; 5
    1d14:	84 9f       	mul	r24, r20
    1d16:	c0 01       	movw	r24, r0
    1d18:	11 24       	eor	r1, r1
		for(len = 0; len < FONT_WIDTH; len++){
			stringbuffer[pos_index++] = (uint8_t)(pgm_read_byte((font_5x7 + index++)));
    1d1a:	fc 01       	movw	r30, r24
    1d1c:	e8 59       	subi	r30, 0x98	; 152
    1d1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d20:	e4 91       	lpm	r30, Z
    1d22:	ec 93       	st	X, r30
    1d24:	fc 01       	movw	r30, r24
    1d26:	e7 59       	subi	r30, 0x97	; 151
    1d28:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2a:	e4 91       	lpm	r30, Z
    1d2c:	11 96       	adiw	r26, 0x01	; 1
    1d2e:	ec 93       	st	X, r30
    1d30:	11 97       	sbiw	r26, 0x01	; 1
    1d32:	fc 01       	movw	r30, r24
    1d34:	e6 59       	subi	r30, 0x96	; 150
    1d36:	ff 4f       	sbci	r31, 0xFF	; 255
    1d38:	e4 91       	lpm	r30, Z
    1d3a:	12 96       	adiw	r26, 0x02	; 2
    1d3c:	ec 93       	st	X, r30
    1d3e:	12 97       	sbiw	r26, 0x02	; 2
    1d40:	fc 01       	movw	r30, r24
    1d42:	e5 59       	subi	r30, 0x95	; 149
    1d44:	ff 4f       	sbci	r31, 0xFF	; 255
    1d46:	e4 91       	lpm	r30, Z
    1d48:	13 96       	adiw	r26, 0x03	; 3
    1d4a:	ec 93       	st	X, r30
    1d4c:	13 97       	sbiw	r26, 0x03	; 3
    1d4e:	fc 01       	movw	r30, r24
    1d50:	e4 59       	subi	r30, 0x94	; 148
    1d52:	ff 4f       	sbci	r31, 0xFF	; 255
    1d54:	84 91       	lpm	r24, Z
    1d56:	14 96       	adiw	r26, 0x04	; 4
    1d58:	8c 93       	st	X, r24
    1d5a:	14 97       	sbiw	r26, 0x04	; 4
    1d5c:	16 96       	adiw	r26, 0x06	; 6
		}
		pos_index += 1; //space the characters
		if(pos_index >= MT_SIZE) break;
    1d5e:	6a 16       	cp	r6, r26
    1d60:	7b 06       	cpc	r7, r27
    1d62:	89 f6       	brne	.-94     	; 0x1d06 <__stack+0x1407>
	//uint8_t *bf = buffer;
	//HoldDisplay(p, 10);
	for(index = 0; index < MT_SIZE; index++)
	{
		for(begin = 0; begin <= index; begin++)(*(bf + begin) = (*((p+(begin)))));
		for(end = index; end < MT_SIZE; end++) (*(bf + end) = 0x00);
    1d64:	91 2c       	mov	r9, r1
}
}*/
static inline void HoldDisplayBuffer(const uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
    1d66:	a0 e5       	ldi	r26, 0x50	; 80
    1d68:	b2 e0       	ldi	r27, 0x02	; 2
    1d6a:	80 e0       	ldi	r24, 0x00	; 0
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t index, begin, end = 0;
	//uint8_t *bf = buffer;
	//HoldDisplay(p, 10);
	for(index = 0; index < MT_SIZE; index++)
	{
		for(begin = 0; begin <= index; begin++)(*(bf + begin) = (*((p+(begin)))));
    1d6e:	2d 91       	ld	r18, X+
    1d70:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <bf>
    1d74:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <bf+0x1>
    1d78:	e8 0f       	add	r30, r24
    1d7a:	f9 1f       	adc	r31, r25
    1d7c:	20 83       	st	Z, r18
    1d7e:	01 96       	adiw	r24, 0x01	; 1
    1d80:	98 16       	cp	r9, r24
    1d82:	a8 f7       	brcc	.-22     	; 0x1d6e <__stack+0x146f>
    1d84:	89 2d       	mov	r24, r9
		for(end = index; end < MT_SIZE; end++) (*(bf + end) = 0x00);
    1d86:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <bf>
    1d8a:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <bf+0x1>
    1d8e:	e8 0f       	add	r30, r24
    1d90:	f1 1d       	adc	r31, r1
    1d92:	10 82       	st	Z, r1
    1d94:	8f 5f       	subi	r24, 0xFF	; 255
    1d96:	80 34       	cpi	r24, 0x40	; 64
    1d98:	b1 f7       	brne	.-20     	; 0x1d86 <__stack+0x1487>
    1d9a:	fa e0       	ldi	r31, 0x0A	; 10
    1d9c:	8f 2e       	mov	r8, r31
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    1d9e:	f4 e0       	ldi	r31, 0x04	; 4
    1da0:	4f 2e       	mov	r4, r31
    1da2:	f1 e0       	ldi	r31, 0x01	; 1
    1da4:	5f 2e       	mov	r5, r31
    1da6:	20 e0       	ldi	r18, 0x00	; 0
    1da8:	30 e0       	ldi	r19, 0x00	; 0
    1daa:	91 e0       	ldi	r25, 0x01	; 1
    1dac:	02 2e       	mov	r0, r18
    1dae:	01 c0       	rjmp	.+2      	; 0x1db2 <__stack+0x14b3>
    1db0:	99 0f       	add	r25, r25
    1db2:	0a 94       	dec	r0
    1db4:	ea f7       	brpl	.-6      	; 0x1db0 <__stack+0x14b1>
	uint8_t index, begin, end = 0;
	//uint8_t *bf = buffer;
	//HoldDisplay(p, 10);
	for(index = 0; index < MT_SIZE; index++)
	{
		for(begin = 0; begin <= index; begin++)(*(bf + begin) = (*((p+(begin)))));
    1db6:	8f e3       	ldi	r24, 0x3F	; 63
    1db8:	5a c0       	rjmp	.+180    	; 0x1e6e <__stack+0x156f>
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1dba:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1dbc:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1dbe:	5b 98       	cbi	0x0b, 3	; 11
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
			pinWrite(latch_pin, LOW);
			for(bit = 0; bit <= FONT_HEIGHT ; bit++){
				pinWrite(data_pin,((*(p+pos)) & (1 << byte)));
    1dc0:	ef ef       	ldi	r30, 0xFF	; 255
    1dc2:	e8 0f       	add	r30, r24
    1dc4:	f0 e0       	ldi	r31, 0x00	; 0
    1dc6:	e0 57       	subi	r30, 0x70	; 112
    1dc8:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    1dca:	40 81       	ld	r20, Z
    1dcc:	49 23       	and	r20, r25
    1dce:	09 f0       	breq	.+2      	; 0x1dd2 <__stack+0x14d3>
    1dd0:	c1 c1       	rjmp	.+898    	; 0x2154 <__stack+0x1855>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1dd2:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1dd4:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1dd6:	5b 98       	cbi	0x0b, 3	; 11
    1dd8:	ee ef       	ldi	r30, 0xFE	; 254
    1dda:	e8 0f       	add	r30, r24
    1ddc:	f0 e0       	ldi	r31, 0x00	; 0
    1dde:	e0 57       	subi	r30, 0x70	; 112
    1de0:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    1de2:	40 81       	ld	r20, Z
    1de4:	49 23       	and	r20, r25
    1de6:	09 f0       	breq	.+2      	; 0x1dea <__stack+0x14eb>
    1de8:	b3 c1       	rjmp	.+870    	; 0x2150 <__stack+0x1851>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1dea:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1dec:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1dee:	5b 98       	cbi	0x0b, 3	; 11
    1df0:	ed ef       	ldi	r30, 0xFD	; 253
    1df2:	e8 0f       	add	r30, r24
    1df4:	f0 e0       	ldi	r31, 0x00	; 0
    1df6:	e0 57       	subi	r30, 0x70	; 112
    1df8:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    1dfa:	40 81       	ld	r20, Z
    1dfc:	49 23       	and	r20, r25
    1dfe:	09 f0       	breq	.+2      	; 0x1e02 <__stack+0x1503>
    1e00:	a5 c1       	rjmp	.+842    	; 0x214c <__stack+0x184d>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1e02:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1e04:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1e06:	5b 98       	cbi	0x0b, 3	; 11
    1e08:	ec ef       	ldi	r30, 0xFC	; 252
    1e0a:	e8 0f       	add	r30, r24
    1e0c:	f0 e0       	ldi	r31, 0x00	; 0
    1e0e:	e0 57       	subi	r30, 0x70	; 112
    1e10:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    1e12:	40 81       	ld	r20, Z
    1e14:	49 23       	and	r20, r25
    1e16:	09 f0       	breq	.+2      	; 0x1e1a <__stack+0x151b>
    1e18:	97 c1       	rjmp	.+814    	; 0x2148 <__stack+0x1849>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1e1a:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1e1c:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1e1e:	5b 98       	cbi	0x0b, 3	; 11
    1e20:	eb ef       	ldi	r30, 0xFB	; 251
    1e22:	e8 0f       	add	r30, r24
    1e24:	f0 e0       	ldi	r31, 0x00	; 0
    1e26:	e0 57       	subi	r30, 0x70	; 112
    1e28:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    1e2a:	40 81       	ld	r20, Z
    1e2c:	49 23       	and	r20, r25
    1e2e:	09 f0       	breq	.+2      	; 0x1e32 <__stack+0x1533>
    1e30:	89 c1       	rjmp	.+786    	; 0x2144 <__stack+0x1845>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1e32:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1e34:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1e36:	5b 98       	cbi	0x0b, 3	; 11
    1e38:	ea ef       	ldi	r30, 0xFA	; 250
    1e3a:	e8 0f       	add	r30, r24
    1e3c:	f0 e0       	ldi	r31, 0x00	; 0
    1e3e:	e0 57       	subi	r30, 0x70	; 112
    1e40:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    1e42:	40 81       	ld	r20, Z
    1e44:	49 23       	and	r20, r25
    1e46:	09 f0       	breq	.+2      	; 0x1e4a <__stack+0x154b>
    1e48:	7b c1       	rjmp	.+758    	; 0x2140 <__stack+0x1841>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1e4a:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1e4c:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1e4e:	5b 98       	cbi	0x0b, 3	; 11
    1e50:	e9 ef       	ldi	r30, 0xF9	; 249
    1e52:	e8 0f       	add	r30, r24
    1e54:	f0 e0       	ldi	r31, 0x00	; 0
    1e56:	e0 57       	subi	r30, 0x70	; 112
    1e58:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    1e5a:	40 81       	ld	r20, Z
    1e5c:	49 23       	and	r20, r25
    1e5e:	91 f5       	brne	.+100    	; 0x1ec4 <__stack+0x15c5>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1e60:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1e62:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1e64:	5b 98       	cbi	0x0b, 3	; 11
				//toggle the clock pin
				pinWrite(clock_pin, HIGH);
				pinWrite(clock_pin, LOW);
				pos--;
    1e66:	88 50       	subi	r24, 0x08	; 8
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1e68:	5a 9a       	sbi	0x0b, 2	; 11
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
    1e6a:	8f 3f       	cpi	r24, 0xFF	; 255
    1e6c:	91 f1       	breq	.+100    	; 0x1ed2 <__stack+0x15d3>
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1e6e:	5a 98       	cbi	0x0b, 2	; 11
			pinWrite(latch_pin, LOW);
			for(bit = 0; bit <= FONT_HEIGHT ; bit++){
				pinWrite(data_pin,((*(p+pos)) & (1 << byte)));
    1e70:	e8 2f       	mov	r30, r24
    1e72:	f0 e0       	ldi	r31, 0x00	; 0
    1e74:	e0 57       	subi	r30, 0x70	; 112
    1e76:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    1e78:	40 81       	ld	r20, Z
    1e7a:	49 23       	and	r20, r25
    1e7c:	09 f4       	brne	.+2      	; 0x1e80 <__stack+0x1581>
    1e7e:	9d cf       	rjmp	.-198    	; 0x1dba <__stack+0x14bb>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1e80:	59 9a       	sbi	0x0b, 1	; 11
    1e82:	9c cf       	rjmp	.-200    	; 0x1dbc <__stack+0x14bd>
    1e84:	59 9a       	sbi	0x0b, 1	; 11
    1e86:	69 ce       	rjmp	.-814    	; 0x1b5a <__stack+0x125b>
    1e88:	59 9a       	sbi	0x0b, 1	; 11
    1e8a:	5b ce       	rjmp	.-842    	; 0x1b42 <__stack+0x1243>
    1e8c:	59 9a       	sbi	0x0b, 1	; 11
    1e8e:	4d ce       	rjmp	.-870    	; 0x1b2a <__stack+0x122b>
    1e90:	59 9a       	sbi	0x0b, 1	; 11
    1e92:	3f ce       	rjmp	.-898    	; 0x1b12 <__stack+0x1213>
    1e94:	59 9a       	sbi	0x0b, 1	; 11
    1e96:	31 ce       	rjmp	.-926    	; 0x1afa <__stack+0x11fb>
    1e98:	59 9a       	sbi	0x0b, 1	; 11
    1e9a:	23 ce       	rjmp	.-954    	; 0x1ae2 <__stack+0x11e3>
    1e9c:	b7 e0       	ldi	r27, 0x07	; 7
    1e9e:	eb 9f       	mul	r30, r27
    1ea0:	f0 01       	movw	r30, r0
    1ea2:	11 24       	eor	r1, r1
    1ea4:	ec 5b       	subi	r30, 0xBC	; 188
    1ea6:	fe 4f       	sbci	r31, 0xFE	; 254
    1ea8:	a2 81       	ldd	r26, Z+2	; 0x02
    1eaa:	b3 81       	ldd	r27, Z+3	; 0x03
    1eac:	4c 91       	ld	r20, X
    1eae:	21 e0       	ldi	r18, 0x01	; 1
    1eb0:	30 e0       	ldi	r19, 0x00	; 0
    1eb2:	06 80       	ldd	r0, Z+6	; 0x06
    1eb4:	02 c0       	rjmp	.+4      	; 0x1eba <__stack+0x15bb>
    1eb6:	22 0f       	add	r18, r18
    1eb8:	33 1f       	adc	r19, r19
    1eba:	0a 94       	dec	r0
    1ebc:	e2 f7       	brpl	.-8      	; 0x1eb6 <__stack+0x15b7>
    1ebe:	24 2b       	or	r18, r20
    1ec0:	2c 93       	st	X, r18
    1ec2:	b9 ce       	rjmp	.-654    	; 0x1c36 <__stack+0x1337>
    1ec4:	59 9a       	sbi	0x0b, 1	; 11
    1ec6:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1ec8:	5b 98       	cbi	0x0b, 3	; 11
				//toggle the clock pin
				pinWrite(clock_pin, HIGH);
				pinWrite(clock_pin, LOW);
				pos--;
    1eca:	88 50       	subi	r24, 0x08	; 8
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1ecc:	5a 9a       	sbi	0x0b, 2	; 11
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
    1ece:	8f 3f       	cpi	r24, 0xFF	; 255
    1ed0:	71 f6       	brne	.-100    	; 0x1e6e <__stack+0x156f>
    1ed2:	a4 e0       	ldi	r26, 0x04	; 4
    1ed4:	b1 e0       	ldi	r27, 0x01	; 1
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    1ed6:	ed 91       	ld	r30, X+
    1ed8:	ee 23       	and	r30, r30
    1eda:	01 f1       	breq	.+64     	; 0x1f1c <__stack+0x161d>
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    1edc:	ec 3c       	cpi	r30, 0xCC	; 204
    1ede:	d8 f7       	brcc	.-10     	; 0x1ed6 <__stack+0x15d7>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1ee0:	47 e0       	ldi	r20, 0x07	; 7
    1ee2:	e4 9f       	mul	r30, r20
    1ee4:	f0 01       	movw	r30, r0
    1ee6:	11 24       	eor	r1, r1
    1ee8:	bf 01       	movw	r22, r30
    1eea:	6c 5b       	subi	r22, 0xBC	; 188
    1eec:	7e 4f       	sbci	r23, 0xFE	; 254
    1eee:	fb 01       	movw	r30, r22
    1ef0:	42 81       	ldd	r20, Z+2	; 0x02
    1ef2:	53 81       	ldd	r21, Z+3	; 0x03
    1ef4:	fa 01       	movw	r30, r20
    1ef6:	90 81       	ld	r25, Z
    1ef8:	22 24       	eor	r2, r2
    1efa:	23 94       	inc	r2
    1efc:	31 2c       	mov	r3, r1
    1efe:	fb 01       	movw	r30, r22
    1f00:	06 80       	ldd	r0, Z+6	; 0x06
    1f02:	02 c0       	rjmp	.+4      	; 0x1f08 <__stack+0x1609>
    1f04:	22 0c       	add	r2, r2
    1f06:	33 1c       	adc	r3, r3
    1f08:	0a 94       	dec	r0
    1f0a:	e2 f7       	brpl	.-8      	; 0x1f04 <__stack+0x1605>
    1f0c:	82 2d       	mov	r24, r2
    1f0e:	80 95       	com	r24
    1f10:	89 23       	and	r24, r25
    1f12:	fa 01       	movw	r30, r20
    1f14:	80 83       	st	Z, r24
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    1f16:	ed 91       	ld	r30, X+
    1f18:	e1 11       	cpse	r30, r1
    1f1a:	e0 cf       	rjmp	.-64     	; 0x1edc <__stack+0x15dd>
/* Multiplexing method                                                  */
/************************************************************************/
static inline void MultiPlex(uint8_t *pin)
{
	pinsMultiWrite(plex_pins, LOW);
	pinWrite(plex_pins[*pin], HIGH);
    1f1c:	d2 01       	movw	r26, r4
    1f1e:	ed 91       	ld	r30, X+
    1f20:	2d 01       	movw	r4, r26
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    1f22:	ec 3c       	cpi	r30, 0xCC	; 204
    1f24:	08 f4       	brcc	.+2      	; 0x1f28 <__stack+0x1629>
    1f26:	18 c1       	rjmp	.+560    	; 0x2158 <__stack+0x1859>
	delay(delayms);
    1f28:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1f2c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
/*  delay                                                               */
/************************************************************************/
int delayms = 1;
static inline void delay(int dl)
{
	while(dl >= 0)
    1f30:	97 fd       	sbrc	r25, 7
    1f32:	08 c0       	rjmp	.+16     	; 0x1f44 <__stack+0x1645>
    1f34:	ef e9       	ldi	r30, 0x9F	; 159
    1f36:	ff e0       	ldi	r31, 0x0F	; 15
    1f38:	31 97       	sbiw	r30, 0x01	; 1
    1f3a:	f1 f7       	brne	.-4      	; 0x1f38 <__stack+0x1639>
    1f3c:	00 c0       	rjmp	.+0      	; 0x1f3e <__stack+0x163f>
    1f3e:	00 00       	nop
	{
		_delay_ms(1);
		dl--;
    1f40:	01 97       	sbiw	r24, 0x01	; 1
    1f42:	c0 f7       	brcc	.-16     	; 0x1f34 <__stack+0x1635>
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
    1f44:	a4 e0       	ldi	r26, 0x04	; 4
    1f46:	b1 e0       	ldi	r27, 0x01	; 1
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    1f48:	ed 91       	ld	r30, X+
    1f4a:	ee 23       	and	r30, r30
    1f4c:	01 f1       	breq	.+64     	; 0x1f8e <__stack+0x168f>
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    1f4e:	ec 3c       	cpi	r30, 0xCC	; 204
    1f50:	d8 f7       	brcc	.-10     	; 0x1f48 <__stack+0x1649>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1f52:	47 e0       	ldi	r20, 0x07	; 7
    1f54:	e4 9f       	mul	r30, r20
    1f56:	f0 01       	movw	r30, r0
    1f58:	11 24       	eor	r1, r1
    1f5a:	bf 01       	movw	r22, r30
    1f5c:	6c 5b       	subi	r22, 0xBC	; 188
    1f5e:	7e 4f       	sbci	r23, 0xFE	; 254
    1f60:	fb 01       	movw	r30, r22
    1f62:	42 81       	ldd	r20, Z+2	; 0x02
    1f64:	53 81       	ldd	r21, Z+3	; 0x03
    1f66:	fa 01       	movw	r30, r20
    1f68:	90 81       	ld	r25, Z
    1f6a:	22 24       	eor	r2, r2
    1f6c:	23 94       	inc	r2
    1f6e:	31 2c       	mov	r3, r1
    1f70:	fb 01       	movw	r30, r22
    1f72:	06 80       	ldd	r0, Z+6	; 0x06
    1f74:	02 c0       	rjmp	.+4      	; 0x1f7a <__stack+0x167b>
    1f76:	22 0c       	add	r2, r2
    1f78:	33 1c       	adc	r3, r3
    1f7a:	0a 94       	dec	r0
    1f7c:	e2 f7       	brpl	.-8      	; 0x1f76 <__stack+0x1677>
    1f7e:	82 2d       	mov	r24, r2
    1f80:	80 95       	com	r24
    1f82:	89 23       	and	r24, r25
    1f84:	fa 01       	movw	r30, r20
    1f86:	80 83       	st	Z, r24
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    1f88:	ed 91       	ld	r30, X+
    1f8a:	e1 11       	cpse	r30, r1
    1f8c:	e0 cf       	rjmp	.-64     	; 0x1f4e <__stack+0x164f>
    1f8e:	89 e0       	ldi	r24, 0x09	; 9
    1f90:	90 e0       	ldi	r25, 0x00	; 0
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1f92:	5a 98       	cbi	0x0b, 2	; 11
    1f94:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1f96:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1f98:	5b 98       	cbi	0x0b, 3	; 11
    1f9a:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1f9c:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1f9e:	5b 98       	cbi	0x0b, 3	; 11
    1fa0:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1fa2:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1fa4:	5b 98       	cbi	0x0b, 3	; 11
    1fa6:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1fa8:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1faa:	5b 98       	cbi	0x0b, 3	; 11
    1fac:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1fae:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1fb0:	5b 98       	cbi	0x0b, 3	; 11
    1fb2:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1fb4:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1fb6:	5b 98       	cbi	0x0b, 3	; 11
    1fb8:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1fba:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1fbc:	5b 98       	cbi	0x0b, 3	; 11
    1fbe:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1fc0:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1fc2:	5b 98       	cbi	0x0b, 3	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1fc4:	5a 9a       	sbi	0x0b, 2	; 11
    1fc6:	01 97       	sbiw	r24, 0x01	; 1
/* Clear Display                                                        */
/************************************************************************/
static inline void Clear(){
	int x, y = 0;
	pinsMultiWrite(plex_pins, LOW);
	for(x = 0; x < (SH_REG + 1); x++) {
    1fc8:	21 f7       	brne	.-56     	; 0x1f92 <__stack+0x1693>
    1fca:	2f 5f       	subi	r18, 0xFF	; 255
    1fcc:	3f 4f       	sbci	r19, 0xFF	; 255
{
	uint8_t byte, index, bit = 0;
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
    1fce:	27 30       	cpi	r18, 0x07	; 7
    1fd0:	31 05       	cpc	r19, r1
    1fd2:	09 f0       	breq	.+2      	; 0x1fd6 <__stack+0x16d7>
    1fd4:	ea ce       	rjmp	.-556    	; 0x1daa <__stack+0x14ab>
    1fd6:	8a 94       	dec	r8
}
}*/
static inline void HoldDisplayBuffer(const uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
    1fd8:	81 10       	cpse	r8, r1
    1fda:	e1 ce       	rjmp	.-574    	; 0x1d9e <__stack+0x149f>
void TypeIn(const uint8_t *p, uint8_t time)
{
	uint8_t index, begin, end = 0;
	//uint8_t *bf = buffer;
	//HoldDisplay(p, 10);
	for(index = 0; index < MT_SIZE; index++)
    1fdc:	93 94       	inc	r9
    1fde:	f0 e4       	ldi	r31, 0x40	; 64
    1fe0:	9f 12       	cpse	r9, r31
    1fe2:	c1 ce       	rjmp	.-638    	; 0x1d66 <__stack+0x1467>
    1fe4:	d8 01       	movw	r26, r16
    1fe6:	1d 92       	st	X+, r1
    1fe8:	9a 94       	dec	r9
    1fea:	e9 f7       	brne	.-6      	; 0x1fe6 <__stack+0x16e7>
    1fec:	e0 e5       	ldi	r30, 0x50	; 80
    1fee:	f2 e0       	ldi	r31, 0x02	; 2
    1ff0:	fa 83       	std	Y+2, r31	; 0x02
    1ff2:	e9 83       	std	Y+1, r30	; 0x01
    1ff4:	df 01       	movw	r26, r30
    1ff6:	2b e0       	ldi	r18, 0x0B	; 11
    1ff8:	31 e0       	ldi	r19, 0x01	; 1
	}else if(align == RIGHT){
		s_pos = (MT_SIZE - (c_len * FONT_WIDTH) - c_len - 2);
	}
	pos_index = s_pos;
	ClearStringBuffer();
	while(*ch){
    1ffa:	f9 01       	movw	r30, r18
    1ffc:	81 91       	ld	r24, Z+
    1ffe:	9f 01       	movw	r18, r30
    2000:	88 23       	and	r24, r24
    2002:	51 f1       	breq	.+84     	; 0x2058 <__stack+0x1759>
/* returns the index of the first byte of the requested character       */
/************************************************************************/
uint8_t CharStart(const char *p)
{
	/*if(*p == ' ') return 0;
	else*/ return (uint8_t) (( *p - ' '));
    2004:	80 52       	subi	r24, 0x20	; 32
		s_pos = (MT_SIZE - (c_len * FONT_WIDTH) - c_len - 2);
	}
	pos_index = s_pos;
	ClearStringBuffer();
	while(*ch){
		index = CharStart(ch++) * FONT_WIDTH;
    2006:	f5 e0       	ldi	r31, 0x05	; 5
    2008:	8f 9f       	mul	r24, r31
    200a:	c0 01       	movw	r24, r0
    200c:	11 24       	eor	r1, r1
		for(len = 0; len < FONT_WIDTH; len++){
			stringbuffer[pos_index++] = (uint8_t)(pgm_read_byte((font_5x7 + index++)));
    200e:	fc 01       	movw	r30, r24
    2010:	e8 59       	subi	r30, 0x98	; 152
    2012:	ff 4f       	sbci	r31, 0xFF	; 255
    2014:	e4 91       	lpm	r30, Z
    2016:	ec 93       	st	X, r30
    2018:	fc 01       	movw	r30, r24
    201a:	e7 59       	subi	r30, 0x97	; 151
    201c:	ff 4f       	sbci	r31, 0xFF	; 255
    201e:	e4 91       	lpm	r30, Z
    2020:	11 96       	adiw	r26, 0x01	; 1
    2022:	ec 93       	st	X, r30
    2024:	11 97       	sbiw	r26, 0x01	; 1
    2026:	fc 01       	movw	r30, r24
    2028:	e6 59       	subi	r30, 0x96	; 150
    202a:	ff 4f       	sbci	r31, 0xFF	; 255
    202c:	e4 91       	lpm	r30, Z
    202e:	12 96       	adiw	r26, 0x02	; 2
    2030:	ec 93       	st	X, r30
    2032:	12 97       	sbiw	r26, 0x02	; 2
    2034:	fc 01       	movw	r30, r24
    2036:	e5 59       	subi	r30, 0x95	; 149
    2038:	ff 4f       	sbci	r31, 0xFF	; 255
    203a:	e4 91       	lpm	r30, Z
    203c:	13 96       	adiw	r26, 0x03	; 3
    203e:	ec 93       	st	X, r30
    2040:	13 97       	sbiw	r26, 0x03	; 3
    2042:	fc 01       	movw	r30, r24
    2044:	e4 59       	subi	r30, 0x94	; 148
    2046:	ff 4f       	sbci	r31, 0xFF	; 255
    2048:	84 91       	lpm	r24, Z
    204a:	14 96       	adiw	r26, 0x04	; 4
    204c:	8c 93       	st	X, r24
    204e:	14 97       	sbiw	r26, 0x04	; 4
    2050:	16 96       	adiw	r26, 0x06	; 6
		}
		pos_index += 1; //space the characters
		if(pos_index >= MT_SIZE) break;
    2052:	6a 16       	cp	r6, r26
    2054:	7b 06       	cpc	r7, r27
    2056:	89 f6       	brne	.-94     	; 0x1ffa <__stack+0x16fb>
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    2058:	72 e3       	ldi	r23, 0x32	; 50
    205a:	a4 e0       	ldi	r26, 0x04	; 4
    205c:	8a 2e       	mov	r8, r26
    205e:	a1 e0       	ldi	r26, 0x01	; 1
    2060:	9a 2e       	mov	r9, r26
    2062:	80 e0       	ldi	r24, 0x00	; 0
    2064:	90 e0       	ldi	r25, 0x00	; 0
    2066:	31 e0       	ldi	r19, 0x01	; 1
    2068:	08 2e       	mov	r0, r24
    206a:	01 c0       	rjmp	.+2      	; 0x206e <__stack+0x176f>
    206c:	33 0f       	add	r19, r19
    206e:	0a 94       	dec	r0
    2070:	ea f7       	brpl	.-6      	; 0x206c <__stack+0x176d>
    2072:	2f e3       	ldi	r18, 0x3F	; 63
    2074:	5a c0       	rjmp	.+180    	; 0x212a <__stack+0x182b>
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2076:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2078:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    207a:	5b 98       	cbi	0x0b, 3	; 11
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
			pinWrite(latch_pin, LOW);
			for(bit = 0; bit <= FONT_HEIGHT ; bit++){
				pinWrite(data_pin,((*(p+pos)) & (1 << byte)));
    207c:	ef ef       	ldi	r30, 0xFF	; 255
    207e:	e2 0f       	add	r30, r18
    2080:	f0 e0       	ldi	r31, 0x00	; 0
    2082:	e0 5b       	subi	r30, 0xB0	; 176
    2084:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    2086:	40 81       	ld	r20, Z
    2088:	43 23       	and	r20, r19
    208a:	09 f0       	breq	.+2      	; 0x208e <__stack+0x178f>
    208c:	e1 c1       	rjmp	.+962    	; 0x2450 <__stack+0x1b51>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    208e:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2090:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2092:	5b 98       	cbi	0x0b, 3	; 11
    2094:	ee ef       	ldi	r30, 0xFE	; 254
    2096:	e2 0f       	add	r30, r18
    2098:	f0 e0       	ldi	r31, 0x00	; 0
    209a:	e0 5b       	subi	r30, 0xB0	; 176
    209c:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    209e:	40 81       	ld	r20, Z
    20a0:	43 23       	and	r20, r19
    20a2:	09 f0       	breq	.+2      	; 0x20a6 <__stack+0x17a7>
    20a4:	d3 c1       	rjmp	.+934    	; 0x244c <__stack+0x1b4d>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    20a6:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    20a8:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    20aa:	5b 98       	cbi	0x0b, 3	; 11
    20ac:	ed ef       	ldi	r30, 0xFD	; 253
    20ae:	e2 0f       	add	r30, r18
    20b0:	f0 e0       	ldi	r31, 0x00	; 0
    20b2:	e0 5b       	subi	r30, 0xB0	; 176
    20b4:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    20b6:	40 81       	ld	r20, Z
    20b8:	43 23       	and	r20, r19
    20ba:	09 f0       	breq	.+2      	; 0x20be <__stack+0x17bf>
    20bc:	c5 c1       	rjmp	.+906    	; 0x2448 <__stack+0x1b49>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    20be:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    20c0:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    20c2:	5b 98       	cbi	0x0b, 3	; 11
    20c4:	ec ef       	ldi	r30, 0xFC	; 252
    20c6:	e2 0f       	add	r30, r18
    20c8:	f0 e0       	ldi	r31, 0x00	; 0
    20ca:	e0 5b       	subi	r30, 0xB0	; 176
    20cc:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    20ce:	40 81       	ld	r20, Z
    20d0:	43 23       	and	r20, r19
    20d2:	09 f0       	breq	.+2      	; 0x20d6 <__stack+0x17d7>
    20d4:	b7 c1       	rjmp	.+878    	; 0x2444 <__stack+0x1b45>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    20d6:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    20d8:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    20da:	5b 98       	cbi	0x0b, 3	; 11
    20dc:	eb ef       	ldi	r30, 0xFB	; 251
    20de:	e2 0f       	add	r30, r18
    20e0:	f0 e0       	ldi	r31, 0x00	; 0
    20e2:	e0 5b       	subi	r30, 0xB0	; 176
    20e4:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    20e6:	40 81       	ld	r20, Z
    20e8:	43 23       	and	r20, r19
    20ea:	09 f0       	breq	.+2      	; 0x20ee <__stack+0x17ef>
    20ec:	a9 c1       	rjmp	.+850    	; 0x2440 <__stack+0x1b41>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    20ee:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    20f0:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    20f2:	5b 98       	cbi	0x0b, 3	; 11
    20f4:	ea ef       	ldi	r30, 0xFA	; 250
    20f6:	e2 0f       	add	r30, r18
    20f8:	f0 e0       	ldi	r31, 0x00	; 0
    20fa:	e0 5b       	subi	r30, 0xB0	; 176
    20fc:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    20fe:	40 81       	ld	r20, Z
    2100:	43 23       	and	r20, r19
    2102:	09 f0       	breq	.+2      	; 0x2106 <__stack+0x1807>
    2104:	9b c1       	rjmp	.+822    	; 0x243c <__stack+0x1b3d>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2106:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2108:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    210a:	5b 98       	cbi	0x0b, 3	; 11
    210c:	e9 ef       	ldi	r30, 0xF9	; 249
    210e:	e2 0f       	add	r30, r18
    2110:	f0 e0       	ldi	r31, 0x00	; 0
    2112:	e0 5b       	subi	r30, 0xB0	; 176
    2114:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    2116:	40 81       	ld	r20, Z
    2118:	43 23       	and	r20, r19
    211a:	91 f5       	brne	.+100    	; 0x2180 <__stack+0x1881>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    211c:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    211e:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2120:	5b 98       	cbi	0x0b, 3	; 11
				//toggle the clock pin
				pinWrite(clock_pin, HIGH);
				pinWrite(clock_pin, LOW);
				pos--;
    2122:	28 50       	subi	r18, 0x08	; 8
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2124:	5a 9a       	sbi	0x0b, 2	; 11
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
    2126:	2f 3f       	cpi	r18, 0xFF	; 255
    2128:	91 f1       	breq	.+100    	; 0x218e <__stack+0x188f>
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    212a:	5a 98       	cbi	0x0b, 2	; 11
			pinWrite(latch_pin, LOW);
			for(bit = 0; bit <= FONT_HEIGHT ; bit++){
				pinWrite(data_pin,((*(p+pos)) & (1 << byte)));
    212c:	e2 2f       	mov	r30, r18
    212e:	f0 e0       	ldi	r31, 0x00	; 0
    2130:	e0 5b       	subi	r30, 0xB0	; 176
    2132:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    2134:	40 81       	ld	r20, Z
    2136:	43 23       	and	r20, r19
    2138:	09 f4       	brne	.+2      	; 0x213c <__stack+0x183d>
    213a:	9d cf       	rjmp	.-198    	; 0x2076 <__stack+0x1777>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    213c:	59 9a       	sbi	0x0b, 1	; 11
    213e:	9c cf       	rjmp	.-200    	; 0x2078 <__stack+0x1779>
    2140:	59 9a       	sbi	0x0b, 1	; 11
    2142:	84 ce       	rjmp	.-760    	; 0x1e4c <__stack+0x154d>
    2144:	59 9a       	sbi	0x0b, 1	; 11
    2146:	76 ce       	rjmp	.-788    	; 0x1e34 <__stack+0x1535>
    2148:	59 9a       	sbi	0x0b, 1	; 11
    214a:	68 ce       	rjmp	.-816    	; 0x1e1c <__stack+0x151d>
    214c:	59 9a       	sbi	0x0b, 1	; 11
    214e:	5a ce       	rjmp	.-844    	; 0x1e04 <__stack+0x1505>
    2150:	59 9a       	sbi	0x0b, 1	; 11
    2152:	4c ce       	rjmp	.-872    	; 0x1dec <__stack+0x14ed>
    2154:	59 9a       	sbi	0x0b, 1	; 11
    2156:	3e ce       	rjmp	.-900    	; 0x1dd4 <__stack+0x14d5>
    2158:	b7 e0       	ldi	r27, 0x07	; 7
    215a:	eb 9f       	mul	r30, r27
    215c:	f0 01       	movw	r30, r0
    215e:	11 24       	eor	r1, r1
    2160:	ec 5b       	subi	r30, 0xBC	; 188
    2162:	fe 4f       	sbci	r31, 0xFE	; 254
    2164:	a2 81       	ldd	r26, Z+2	; 0x02
    2166:	b3 81       	ldd	r27, Z+3	; 0x03
    2168:	6c 91       	ld	r22, X
    216a:	41 e0       	ldi	r20, 0x01	; 1
    216c:	50 e0       	ldi	r21, 0x00	; 0
    216e:	06 80       	ldd	r0, Z+6	; 0x06
    2170:	02 c0       	rjmp	.+4      	; 0x2176 <__stack+0x1877>
    2172:	44 0f       	add	r20, r20
    2174:	55 1f       	adc	r21, r21
    2176:	0a 94       	dec	r0
    2178:	e2 f7       	brpl	.-8      	; 0x2172 <__stack+0x1873>
    217a:	46 2b       	or	r20, r22
    217c:	4c 93       	st	X, r20
    217e:	d4 ce       	rjmp	.-600    	; 0x1f28 <__stack+0x1629>
    2180:	59 9a       	sbi	0x0b, 1	; 11
    2182:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2184:	5b 98       	cbi	0x0b, 3	; 11
				//toggle the clock pin
				pinWrite(clock_pin, HIGH);
				pinWrite(clock_pin, LOW);
				pos--;
    2186:	28 50       	subi	r18, 0x08	; 8
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2188:	5a 9a       	sbi	0x0b, 2	; 11
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
    218a:	2f 3f       	cpi	r18, 0xFF	; 255
    218c:	71 f6       	brne	.-100    	; 0x212a <__stack+0x182b>
    218e:	a4 e0       	ldi	r26, 0x04	; 4
    2190:	b1 e0       	ldi	r27, 0x01	; 1
    2192:	a7 2e       	mov	r10, r23
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    2194:	ed 91       	ld	r30, X+
    2196:	ee 23       	and	r30, r30
    2198:	01 f1       	breq	.+64     	; 0x21da <__stack+0x18db>
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    219a:	ec 3c       	cpi	r30, 0xCC	; 204
    219c:	d8 f7       	brcc	.-10     	; 0x2194 <__stack+0x1895>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    219e:	27 e0       	ldi	r18, 0x07	; 7
    21a0:	e2 9f       	mul	r30, r18
    21a2:	f0 01       	movw	r30, r0
    21a4:	11 24       	eor	r1, r1
    21a6:	bf 01       	movw	r22, r30
    21a8:	6c 5b       	subi	r22, 0xBC	; 188
    21aa:	7e 4f       	sbci	r23, 0xFE	; 254
    21ac:	fb 01       	movw	r30, r22
    21ae:	42 81       	ldd	r20, Z+2	; 0x02
    21b0:	53 81       	ldd	r21, Z+3	; 0x03
    21b2:	fa 01       	movw	r30, r20
    21b4:	30 81       	ld	r19, Z
    21b6:	22 24       	eor	r2, r2
    21b8:	23 94       	inc	r2
    21ba:	31 2c       	mov	r3, r1
    21bc:	fb 01       	movw	r30, r22
    21be:	06 80       	ldd	r0, Z+6	; 0x06
    21c0:	02 c0       	rjmp	.+4      	; 0x21c6 <__stack+0x18c7>
    21c2:	22 0c       	add	r2, r2
    21c4:	33 1c       	adc	r3, r3
    21c6:	0a 94       	dec	r0
    21c8:	e2 f7       	brpl	.-8      	; 0x21c2 <__stack+0x18c3>
    21ca:	22 2d       	mov	r18, r2
    21cc:	20 95       	com	r18
    21ce:	23 23       	and	r18, r19
    21d0:	fa 01       	movw	r30, r20
    21d2:	20 83       	st	Z, r18
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    21d4:	ed 91       	ld	r30, X+
    21d6:	e1 11       	cpse	r30, r1
    21d8:	e0 cf       	rjmp	.-64     	; 0x219a <__stack+0x189b>
    21da:	7a 2d       	mov	r23, r10
/* Multiplexing method                                                  */
/************************************************************************/
static inline void MultiPlex(uint8_t *pin)
{
	pinsMultiWrite(plex_pins, LOW);
	pinWrite(plex_pins[*pin], HIGH);
    21dc:	d4 01       	movw	r26, r8
    21de:	ed 91       	ld	r30, X+
    21e0:	4d 01       	movw	r8, r26
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    21e2:	ec 3c       	cpi	r30, 0xCC	; 204
    21e4:	08 f4       	brcc	.+2      	; 0x21e8 <__stack+0x18e9>
    21e6:	36 c1       	rjmp	.+620    	; 0x2454 <__stack+0x1b55>
	delay(delayms);
    21e8:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    21ec:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
/*  delay                                                               */
/************************************************************************/
int delayms = 1;
static inline void delay(int dl)
{
	while(dl >= 0)
    21f0:	37 fd       	sbrc	r19, 7
    21f2:	09 c0       	rjmp	.+18     	; 0x2206 <__stack+0x1907>
    21f4:	ef e9       	ldi	r30, 0x9F	; 159
    21f6:	ff e0       	ldi	r31, 0x0F	; 15
    21f8:	31 97       	sbiw	r30, 0x01	; 1
    21fa:	f1 f7       	brne	.-4      	; 0x21f8 <__stack+0x18f9>
    21fc:	00 c0       	rjmp	.+0      	; 0x21fe <__stack+0x18ff>
    21fe:	00 00       	nop
	{
		_delay_ms(1);
		dl--;
    2200:	21 50       	subi	r18, 0x01	; 1
    2202:	31 09       	sbc	r19, r1
    2204:	b8 f7       	brcc	.-18     	; 0x21f4 <__stack+0x18f5>
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
    2206:	a4 e0       	ldi	r26, 0x04	; 4
    2208:	b1 e0       	ldi	r27, 0x01	; 1
    220a:	a7 2e       	mov	r10, r23
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    220c:	ed 91       	ld	r30, X+
    220e:	ee 23       	and	r30, r30
    2210:	01 f1       	breq	.+64     	; 0x2252 <__stack+0x1953>
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    2212:	ec 3c       	cpi	r30, 0xCC	; 204
    2214:	d8 f7       	brcc	.-10     	; 0x220c <__stack+0x190d>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2216:	27 e0       	ldi	r18, 0x07	; 7
    2218:	e2 9f       	mul	r30, r18
    221a:	f0 01       	movw	r30, r0
    221c:	11 24       	eor	r1, r1
    221e:	bf 01       	movw	r22, r30
    2220:	6c 5b       	subi	r22, 0xBC	; 188
    2222:	7e 4f       	sbci	r23, 0xFE	; 254
    2224:	fb 01       	movw	r30, r22
    2226:	42 81       	ldd	r20, Z+2	; 0x02
    2228:	53 81       	ldd	r21, Z+3	; 0x03
    222a:	fa 01       	movw	r30, r20
    222c:	30 81       	ld	r19, Z
    222e:	22 24       	eor	r2, r2
    2230:	23 94       	inc	r2
    2232:	31 2c       	mov	r3, r1
    2234:	fb 01       	movw	r30, r22
    2236:	06 80       	ldd	r0, Z+6	; 0x06
    2238:	02 c0       	rjmp	.+4      	; 0x223e <__stack+0x193f>
    223a:	22 0c       	add	r2, r2
    223c:	33 1c       	adc	r3, r3
    223e:	0a 94       	dec	r0
    2240:	e2 f7       	brpl	.-8      	; 0x223a <__stack+0x193b>
    2242:	22 2d       	mov	r18, r2
    2244:	20 95       	com	r18
    2246:	23 23       	and	r18, r19
    2248:	fa 01       	movw	r30, r20
    224a:	20 83       	st	Z, r18
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    224c:	ed 91       	ld	r30, X+
    224e:	e1 11       	cpse	r30, r1
    2250:	e0 cf       	rjmp	.-64     	; 0x2212 <__stack+0x1913>
    2252:	7a 2d       	mov	r23, r10
    2254:	29 e0       	ldi	r18, 0x09	; 9
    2256:	30 e0       	ldi	r19, 0x00	; 0
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2258:	5a 98       	cbi	0x0b, 2	; 11
    225a:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    225c:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    225e:	5b 98       	cbi	0x0b, 3	; 11
    2260:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2262:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2264:	5b 98       	cbi	0x0b, 3	; 11
    2266:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2268:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    226a:	5b 98       	cbi	0x0b, 3	; 11
    226c:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    226e:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2270:	5b 98       	cbi	0x0b, 3	; 11
    2272:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2274:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2276:	5b 98       	cbi	0x0b, 3	; 11
    2278:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    227a:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    227c:	5b 98       	cbi	0x0b, 3	; 11
    227e:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2280:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2282:	5b 98       	cbi	0x0b, 3	; 11
    2284:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2286:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2288:	5b 98       	cbi	0x0b, 3	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    228a:	5a 9a       	sbi	0x0b, 2	; 11
    228c:	21 50       	subi	r18, 0x01	; 1
    228e:	31 09       	sbc	r19, r1
/* Clear Display                                                        */
/************************************************************************/
static inline void Clear(){
	int x, y = 0;
	pinsMultiWrite(plex_pins, LOW);
	for(x = 0; x < (SH_REG + 1); x++) {
    2290:	19 f7       	brne	.-58     	; 0x2258 <__stack+0x1959>
    2292:	01 96       	adiw	r24, 0x01	; 1
{
	uint8_t byte, index, bit = 0;
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
    2294:	87 30       	cpi	r24, 0x07	; 7
    2296:	91 05       	cpc	r25, r1
    2298:	09 f0       	breq	.+2      	; 0x229c <__stack+0x199d>
    229a:	e5 ce       	rjmp	.-566    	; 0x2066 <__stack+0x1767>
    229c:	71 50       	subi	r23, 0x01	; 1
}
}*/
static inline void HoldDisplayBuffer(const uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
    229e:	09 f0       	breq	.+2      	; 0x22a2 <__stack+0x19a3>
    22a0:	dc ce       	rjmp	.-584    	; 0x205a <__stack+0x175b>
    22a2:	d8 01       	movw	r26, r16
    22a4:	eb 2d       	mov	r30, r11
    22a6:	1d 92       	st	X+, r1
    22a8:	ea 95       	dec	r30
    22aa:	e9 f7       	brne	.-6      	; 0x22a6 <__stack+0x19a7>
	}else if(align == RIGHT){
		s_pos = (MT_SIZE - (c_len * FONT_WIDTH) - c_len - 2);
	}
	pos_index = s_pos;
	ClearStringBuffer();
	while(*ch){
    22ac:	ab 81       	ldd	r26, Y+3	; 0x03
    22ae:	bc 81       	ldd	r27, Y+4	; 0x04
    22b0:	8d 91       	ld	r24, X+
    22b2:	bc 83       	std	Y+4, r27	; 0x04
    22b4:	ab 83       	std	Y+3, r26	; 0x03
    22b6:	88 23       	and	r24, r24
    22b8:	61 f1       	breq	.+88     	; 0x2312 <__stack+0x1a13>
/* returns the index of the first byte of the requested character       */
/************************************************************************/
uint8_t CharStart(const char *p)
{
	/*if(*p == ' ') return 0;
	else*/ return (uint8_t) (( *p - ' '));
    22ba:	80 52       	subi	r24, 0x20	; 32
		s_pos = (MT_SIZE - (c_len * FONT_WIDTH) - c_len - 2);
	}
	pos_index = s_pos;
	ClearStringBuffer();
	while(*ch){
		index = CharStart(ch++) * FONT_WIDTH;
    22bc:	f5 e0       	ldi	r31, 0x05	; 5
    22be:	8f 9f       	mul	r24, r31
    22c0:	c0 01       	movw	r24, r0
    22c2:	11 24       	eor	r1, r1
		for(len = 0; len < FONT_WIDTH; len++){
			stringbuffer[pos_index++] = (uint8_t)(pgm_read_byte((font_5x7 + index++)));
    22c4:	fc 01       	movw	r30, r24
    22c6:	e8 59       	subi	r30, 0x98	; 152
    22c8:	ff 4f       	sbci	r31, 0xFF	; 255
    22ca:	e4 91       	lpm	r30, Z
    22cc:	d7 01       	movw	r26, r14
    22ce:	ec 93       	st	X, r30
    22d0:	fc 01       	movw	r30, r24
    22d2:	e7 59       	subi	r30, 0x97	; 151
    22d4:	ff 4f       	sbci	r31, 0xFF	; 255
    22d6:	e4 91       	lpm	r30, Z
    22d8:	11 96       	adiw	r26, 0x01	; 1
    22da:	ec 93       	st	X, r30
    22dc:	11 97       	sbiw	r26, 0x01	; 1
    22de:	fc 01       	movw	r30, r24
    22e0:	e6 59       	subi	r30, 0x96	; 150
    22e2:	ff 4f       	sbci	r31, 0xFF	; 255
    22e4:	e4 91       	lpm	r30, Z
    22e6:	12 96       	adiw	r26, 0x02	; 2
    22e8:	ec 93       	st	X, r30
    22ea:	12 97       	sbiw	r26, 0x02	; 2
    22ec:	fc 01       	movw	r30, r24
    22ee:	e5 59       	subi	r30, 0x95	; 149
    22f0:	ff 4f       	sbci	r31, 0xFF	; 255
    22f2:	e4 91       	lpm	r30, Z
    22f4:	13 96       	adiw	r26, 0x03	; 3
    22f6:	ec 93       	st	X, r30
    22f8:	fc 01       	movw	r30, r24
    22fa:	e4 59       	subi	r30, 0x94	; 148
    22fc:	ff 4f       	sbci	r31, 0xFF	; 255
    22fe:	84 91       	lpm	r24, Z
    2300:	f7 01       	movw	r30, r14
    2302:	84 83       	std	Z+4, r24	; 0x04
    2304:	f6 e0       	ldi	r31, 0x06	; 6
    2306:	ef 0e       	add	r14, r31
    2308:	f1 1c       	adc	r15, r1
		}
		pos_index += 1; //space the characters
		if(pos_index >= MT_SIZE) break;
    230a:	6e 14       	cp	r6, r14
    230c:	7f 04       	cpc	r7, r15
    230e:	09 f0       	breq	.+2      	; 0x2312 <__stack+0x1a13>
    2310:	cd cf       	rjmp	.-102    	; 0x22ac <__stack+0x19ad>
	uint8_t index, begin, end = 0;
	//uint8_t *bf = buffer;
	for(index = MT_SIZE -1 ; index > 0; index--)
	{
		for(begin = 0; begin <= index; begin++) (*(bf + begin)) = (*((p+begin)));
		for(end = (index-1); end < MT_SIZE ; end++) (*(bf + end)) = 0x00;
    2312:	af e3       	ldi	r26, 0x3F	; 63
    2314:	ea 2e       	mov	r14, r26
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    2316:	40 e0       	ldi	r20, 0x00	; 0
{
	uint8_t index, begin, end = 0;
	//uint8_t *bf = buffer;
	for(index = MT_SIZE -1 ; index > 0; index--)
	{
		for(begin = 0; begin <= index; begin++) (*(bf + begin)) = (*((p+begin)));
    2318:	84 2f       	mov	r24, r20
    231a:	90 e0       	ldi	r25, 0x00	; 0
    231c:	fc 01       	movw	r30, r24
    231e:	e0 5b       	subi	r30, 0xB0	; 176
    2320:	fd 4f       	sbci	r31, 0xFD	; 253
    2322:	20 81       	ld	r18, Z
    2324:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <bf>
    2328:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <bf+0x1>
    232c:	fb 01       	movw	r30, r22
    232e:	e8 0f       	add	r30, r24
    2330:	f9 1f       	adc	r31, r25
    2332:	20 83       	st	Z, r18
    2334:	4f 5f       	subi	r20, 0xFF	; 255
    2336:	e4 16       	cp	r14, r20
    2338:	78 f7       	brcc	.-34     	; 0x2318 <__stack+0x1a19>
		for(end = (index-1); end < MT_SIZE ; end++) (*(bf + end)) = 0x00;
    233a:	ea 94       	dec	r14
    233c:	8e 2d       	mov	r24, r14
    233e:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <bf>
    2342:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <bf+0x1>
    2346:	e8 0f       	add	r30, r24
    2348:	f1 1d       	adc	r31, r1
    234a:	10 82       	st	Z, r1
    234c:	8f 5f       	subi	r24, 0xFF	; 255
    234e:	80 34       	cpi	r24, 0x40	; 64
    2350:	b1 f7       	brne	.-20     	; 0x233e <__stack+0x1a3f>
    2352:	fa e0       	ldi	r31, 0x0A	; 10
    2354:	af 2e       	mov	r10, r31
    2356:	b4 e0       	ldi	r27, 0x04	; 4
    2358:	8b 2e       	mov	r8, r27
    235a:	b1 e0       	ldi	r27, 0x01	; 1
    235c:	9b 2e       	mov	r9, r27
    235e:	20 e0       	ldi	r18, 0x00	; 0
    2360:	30 e0       	ldi	r19, 0x00	; 0
    2362:	91 e0       	ldi	r25, 0x01	; 1
    2364:	02 2e       	mov	r0, r18
    2366:	01 c0       	rjmp	.+2      	; 0x236a <__stack+0x1a6b>
    2368:	99 0f       	add	r25, r25
    236a:	0a 94       	dec	r0
    236c:	ea f7       	brpl	.-6      	; 0x2368 <__stack+0x1a69>
    236e:	8f e3       	ldi	r24, 0x3F	; 63
    2370:	5a c0       	rjmp	.+180    	; 0x2426 <__stack+0x1b27>
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2372:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2374:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2376:	5b 98       	cbi	0x0b, 3	; 11
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
			pinWrite(latch_pin, LOW);
			for(bit = 0; bit <= FONT_HEIGHT ; bit++){
				pinWrite(data_pin,((*(p+pos)) & (1 << byte)));
    2378:	ef ef       	ldi	r30, 0xFF	; 255
    237a:	e8 0f       	add	r30, r24
    237c:	f0 e0       	ldi	r31, 0x00	; 0
    237e:	e0 57       	subi	r30, 0x70	; 112
    2380:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    2382:	40 81       	ld	r20, Z
    2384:	49 23       	and	r20, r25
    2386:	09 f0       	breq	.+2      	; 0x238a <__stack+0x1a8b>
    2388:	85 c1       	rjmp	.+778    	; 0x2694 <__stack+0x1d95>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    238a:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    238c:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    238e:	5b 98       	cbi	0x0b, 3	; 11
    2390:	ee ef       	ldi	r30, 0xFE	; 254
    2392:	e8 0f       	add	r30, r24
    2394:	f0 e0       	ldi	r31, 0x00	; 0
    2396:	e0 57       	subi	r30, 0x70	; 112
    2398:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    239a:	40 81       	ld	r20, Z
    239c:	49 23       	and	r20, r25
    239e:	09 f0       	breq	.+2      	; 0x23a2 <__stack+0x1aa3>
    23a0:	77 c1       	rjmp	.+750    	; 0x2690 <__stack+0x1d91>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    23a2:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    23a4:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    23a6:	5b 98       	cbi	0x0b, 3	; 11
    23a8:	ed ef       	ldi	r30, 0xFD	; 253
    23aa:	e8 0f       	add	r30, r24
    23ac:	f0 e0       	ldi	r31, 0x00	; 0
    23ae:	e0 57       	subi	r30, 0x70	; 112
    23b0:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    23b2:	40 81       	ld	r20, Z
    23b4:	49 23       	and	r20, r25
    23b6:	09 f0       	breq	.+2      	; 0x23ba <__stack+0x1abb>
    23b8:	69 c1       	rjmp	.+722    	; 0x268c <__stack+0x1d8d>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    23ba:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    23bc:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    23be:	5b 98       	cbi	0x0b, 3	; 11
    23c0:	ec ef       	ldi	r30, 0xFC	; 252
    23c2:	e8 0f       	add	r30, r24
    23c4:	f0 e0       	ldi	r31, 0x00	; 0
    23c6:	e0 57       	subi	r30, 0x70	; 112
    23c8:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    23ca:	40 81       	ld	r20, Z
    23cc:	49 23       	and	r20, r25
    23ce:	09 f0       	breq	.+2      	; 0x23d2 <__stack+0x1ad3>
    23d0:	5b c1       	rjmp	.+694    	; 0x2688 <__stack+0x1d89>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    23d2:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    23d4:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    23d6:	5b 98       	cbi	0x0b, 3	; 11
    23d8:	eb ef       	ldi	r30, 0xFB	; 251
    23da:	e8 0f       	add	r30, r24
    23dc:	f0 e0       	ldi	r31, 0x00	; 0
    23de:	e0 57       	subi	r30, 0x70	; 112
    23e0:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    23e2:	40 81       	ld	r20, Z
    23e4:	49 23       	and	r20, r25
    23e6:	09 f0       	breq	.+2      	; 0x23ea <__stack+0x1aeb>
    23e8:	4d c1       	rjmp	.+666    	; 0x2684 <__stack+0x1d85>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    23ea:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    23ec:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    23ee:	5b 98       	cbi	0x0b, 3	; 11
    23f0:	ea ef       	ldi	r30, 0xFA	; 250
    23f2:	e8 0f       	add	r30, r24
    23f4:	f0 e0       	ldi	r31, 0x00	; 0
    23f6:	e0 57       	subi	r30, 0x70	; 112
    23f8:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    23fa:	40 81       	ld	r20, Z
    23fc:	49 23       	and	r20, r25
    23fe:	09 f0       	breq	.+2      	; 0x2402 <__stack+0x1b03>
    2400:	3f c1       	rjmp	.+638    	; 0x2680 <__stack+0x1d81>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2402:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2404:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2406:	5b 98       	cbi	0x0b, 3	; 11
    2408:	e9 ef       	ldi	r30, 0xF9	; 249
    240a:	e8 0f       	add	r30, r24
    240c:	f0 e0       	ldi	r31, 0x00	; 0
    240e:	e0 57       	subi	r30, 0x70	; 112
    2410:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    2412:	40 81       	ld	r20, Z
    2414:	49 23       	and	r20, r25
    2416:	91 f5       	brne	.+100    	; 0x247c <__stack+0x1b7d>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2418:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    241a:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    241c:	5b 98       	cbi	0x0b, 3	; 11
				//toggle the clock pin
				pinWrite(clock_pin, HIGH);
				pinWrite(clock_pin, LOW);
				pos--;
    241e:	88 50       	subi	r24, 0x08	; 8
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2420:	5a 9a       	sbi	0x0b, 2	; 11
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
    2422:	8f 3f       	cpi	r24, 0xFF	; 255
    2424:	91 f1       	breq	.+100    	; 0x248a <__stack+0x1b8b>
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2426:	5a 98       	cbi	0x0b, 2	; 11
			pinWrite(latch_pin, LOW);
			for(bit = 0; bit <= FONT_HEIGHT ; bit++){
				pinWrite(data_pin,((*(p+pos)) & (1 << byte)));
    2428:	e8 2f       	mov	r30, r24
    242a:	f0 e0       	ldi	r31, 0x00	; 0
    242c:	e0 57       	subi	r30, 0x70	; 112
    242e:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    2430:	40 81       	ld	r20, Z
    2432:	49 23       	and	r20, r25
    2434:	09 f4       	brne	.+2      	; 0x2438 <__stack+0x1b39>
    2436:	9d cf       	rjmp	.-198    	; 0x2372 <__stack+0x1a73>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2438:	59 9a       	sbi	0x0b, 1	; 11
    243a:	9c cf       	rjmp	.-200    	; 0x2374 <__stack+0x1a75>
    243c:	59 9a       	sbi	0x0b, 1	; 11
    243e:	64 ce       	rjmp	.-824    	; 0x2108 <__stack+0x1809>
    2440:	59 9a       	sbi	0x0b, 1	; 11
    2442:	56 ce       	rjmp	.-852    	; 0x20f0 <__stack+0x17f1>
    2444:	59 9a       	sbi	0x0b, 1	; 11
    2446:	48 ce       	rjmp	.-880    	; 0x20d8 <__stack+0x17d9>
    2448:	59 9a       	sbi	0x0b, 1	; 11
    244a:	3a ce       	rjmp	.-908    	; 0x20c0 <__stack+0x17c1>
    244c:	59 9a       	sbi	0x0b, 1	; 11
    244e:	2c ce       	rjmp	.-936    	; 0x20a8 <__stack+0x17a9>
    2450:	59 9a       	sbi	0x0b, 1	; 11
    2452:	1e ce       	rjmp	.-964    	; 0x2090 <__stack+0x1791>
    2454:	b7 e0       	ldi	r27, 0x07	; 7
    2456:	eb 9f       	mul	r30, r27
    2458:	f0 01       	movw	r30, r0
    245a:	11 24       	eor	r1, r1
    245c:	ec 5b       	subi	r30, 0xBC	; 188
    245e:	fe 4f       	sbci	r31, 0xFE	; 254
    2460:	a2 81       	ldd	r26, Z+2	; 0x02
    2462:	b3 81       	ldd	r27, Z+3	; 0x03
    2464:	4c 91       	ld	r20, X
    2466:	21 e0       	ldi	r18, 0x01	; 1
    2468:	30 e0       	ldi	r19, 0x00	; 0
    246a:	06 80       	ldd	r0, Z+6	; 0x06
    246c:	02 c0       	rjmp	.+4      	; 0x2472 <__stack+0x1b73>
    246e:	22 0f       	add	r18, r18
    2470:	33 1f       	adc	r19, r19
    2472:	0a 94       	dec	r0
    2474:	e2 f7       	brpl	.-8      	; 0x246e <__stack+0x1b6f>
    2476:	24 2b       	or	r18, r20
    2478:	2c 93       	st	X, r18
    247a:	b6 ce       	rjmp	.-660    	; 0x21e8 <__stack+0x18e9>
    247c:	59 9a       	sbi	0x0b, 1	; 11
    247e:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2480:	5b 98       	cbi	0x0b, 3	; 11
				//toggle the clock pin
				pinWrite(clock_pin, HIGH);
				pinWrite(clock_pin, LOW);
				pos--;
    2482:	88 50       	subi	r24, 0x08	; 8
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2484:	5a 9a       	sbi	0x0b, 2	; 11
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
    2486:	8f 3f       	cpi	r24, 0xFF	; 255
    2488:	71 f6       	brne	.-100    	; 0x2426 <__stack+0x1b27>
    248a:	a4 e0       	ldi	r26, 0x04	; 4
    248c:	b1 e0       	ldi	r27, 0x01	; 1
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    248e:	ed 91       	ld	r30, X+
    2490:	ee 23       	and	r30, r30
    2492:	01 f1       	breq	.+64     	; 0x24d4 <__stack+0x1bd5>
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    2494:	ec 3c       	cpi	r30, 0xCC	; 204
    2496:	d8 f7       	brcc	.-10     	; 0x248e <__stack+0x1b8f>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2498:	47 e0       	ldi	r20, 0x07	; 7
    249a:	e4 9f       	mul	r30, r20
    249c:	f0 01       	movw	r30, r0
    249e:	11 24       	eor	r1, r1
    24a0:	bf 01       	movw	r22, r30
    24a2:	6c 5b       	subi	r22, 0xBC	; 188
    24a4:	7e 4f       	sbci	r23, 0xFE	; 254
    24a6:	fb 01       	movw	r30, r22
    24a8:	42 81       	ldd	r20, Z+2	; 0x02
    24aa:	53 81       	ldd	r21, Z+3	; 0x03
    24ac:	fa 01       	movw	r30, r20
    24ae:	90 81       	ld	r25, Z
    24b0:	22 24       	eor	r2, r2
    24b2:	23 94       	inc	r2
    24b4:	31 2c       	mov	r3, r1
    24b6:	fb 01       	movw	r30, r22
    24b8:	06 80       	ldd	r0, Z+6	; 0x06
    24ba:	02 c0       	rjmp	.+4      	; 0x24c0 <__stack+0x1bc1>
    24bc:	22 0c       	add	r2, r2
    24be:	33 1c       	adc	r3, r3
    24c0:	0a 94       	dec	r0
    24c2:	e2 f7       	brpl	.-8      	; 0x24bc <__stack+0x1bbd>
    24c4:	82 2d       	mov	r24, r2
    24c6:	80 95       	com	r24
    24c8:	89 23       	and	r24, r25
    24ca:	fa 01       	movw	r30, r20
    24cc:	80 83       	st	Z, r24
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    24ce:	ed 91       	ld	r30, X+
    24d0:	e1 11       	cpse	r30, r1
    24d2:	e0 cf       	rjmp	.-64     	; 0x2494 <__stack+0x1b95>
/* Multiplexing method                                                  */
/************************************************************************/
static inline void MultiPlex(uint8_t *pin)
{
	pinsMultiWrite(plex_pins, LOW);
	pinWrite(plex_pins[*pin], HIGH);
    24d4:	d4 01       	movw	r26, r8
    24d6:	ed 91       	ld	r30, X+
    24d8:	4d 01       	movw	r8, r26
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    24da:	ec 3c       	cpi	r30, 0xCC	; 204
    24dc:	08 f4       	brcc	.+2      	; 0x24e0 <__stack+0x1be1>
    24de:	dc c0       	rjmp	.+440    	; 0x2698 <__stack+0x1d99>
	delay(delayms);
    24e0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    24e4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
/*  delay                                                               */
/************************************************************************/
int delayms = 1;
static inline void delay(int dl)
{
	while(dl >= 0)
    24e8:	97 fd       	sbrc	r25, 7
    24ea:	08 c0       	rjmp	.+16     	; 0x24fc <__stack+0x1bfd>
    24ec:	ef e9       	ldi	r30, 0x9F	; 159
    24ee:	ff e0       	ldi	r31, 0x0F	; 15
    24f0:	31 97       	sbiw	r30, 0x01	; 1
    24f2:	f1 f7       	brne	.-4      	; 0x24f0 <__stack+0x1bf1>
    24f4:	00 c0       	rjmp	.+0      	; 0x24f6 <__stack+0x1bf7>
    24f6:	00 00       	nop
	{
		_delay_ms(1);
		dl--;
    24f8:	01 97       	sbiw	r24, 0x01	; 1
    24fa:	c0 f7       	brcc	.-16     	; 0x24ec <__stack+0x1bed>
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
    24fc:	a4 e0       	ldi	r26, 0x04	; 4
    24fe:	b1 e0       	ldi	r27, 0x01	; 1
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    2500:	ed 91       	ld	r30, X+
    2502:	ee 23       	and	r30, r30
    2504:	01 f1       	breq	.+64     	; 0x2546 <__stack+0x1c47>
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    2506:	ec 3c       	cpi	r30, 0xCC	; 204
    2508:	d8 f7       	brcc	.-10     	; 0x2500 <__stack+0x1c01>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    250a:	47 e0       	ldi	r20, 0x07	; 7
    250c:	e4 9f       	mul	r30, r20
    250e:	f0 01       	movw	r30, r0
    2510:	11 24       	eor	r1, r1
    2512:	bf 01       	movw	r22, r30
    2514:	6c 5b       	subi	r22, 0xBC	; 188
    2516:	7e 4f       	sbci	r23, 0xFE	; 254
    2518:	fb 01       	movw	r30, r22
    251a:	42 81       	ldd	r20, Z+2	; 0x02
    251c:	53 81       	ldd	r21, Z+3	; 0x03
    251e:	fa 01       	movw	r30, r20
    2520:	90 81       	ld	r25, Z
    2522:	22 24       	eor	r2, r2
    2524:	23 94       	inc	r2
    2526:	31 2c       	mov	r3, r1
    2528:	fb 01       	movw	r30, r22
    252a:	06 80       	ldd	r0, Z+6	; 0x06
    252c:	02 c0       	rjmp	.+4      	; 0x2532 <__stack+0x1c33>
    252e:	22 0c       	add	r2, r2
    2530:	33 1c       	adc	r3, r3
    2532:	0a 94       	dec	r0
    2534:	e2 f7       	brpl	.-8      	; 0x252e <__stack+0x1c2f>
    2536:	82 2d       	mov	r24, r2
    2538:	80 95       	com	r24
    253a:	89 23       	and	r24, r25
    253c:	fa 01       	movw	r30, r20
    253e:	80 83       	st	Z, r24
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    2540:	ed 91       	ld	r30, X+
    2542:	e1 11       	cpse	r30, r1
    2544:	e0 cf       	rjmp	.-64     	; 0x2506 <__stack+0x1c07>
    2546:	89 e0       	ldi	r24, 0x09	; 9
    2548:	90 e0       	ldi	r25, 0x00	; 0
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    254a:	5a 98       	cbi	0x0b, 2	; 11
    254c:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    254e:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2550:	5b 98       	cbi	0x0b, 3	; 11
    2552:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2554:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2556:	5b 98       	cbi	0x0b, 3	; 11
    2558:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    255a:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    255c:	5b 98       	cbi	0x0b, 3	; 11
    255e:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2560:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2562:	5b 98       	cbi	0x0b, 3	; 11
    2564:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2566:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2568:	5b 98       	cbi	0x0b, 3	; 11
    256a:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    256c:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    256e:	5b 98       	cbi	0x0b, 3	; 11
    2570:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2572:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2574:	5b 98       	cbi	0x0b, 3	; 11
    2576:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2578:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    257a:	5b 98       	cbi	0x0b, 3	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    257c:	5a 9a       	sbi	0x0b, 2	; 11
    257e:	01 97       	sbiw	r24, 0x01	; 1
/* Clear Display                                                        */
/************************************************************************/
static inline void Clear(){
	int x, y = 0;
	pinsMultiWrite(plex_pins, LOW);
	for(x = 0; x < (SH_REG + 1); x++) {
    2580:	21 f7       	brne	.-56     	; 0x254a <__stack+0x1c4b>
    2582:	2f 5f       	subi	r18, 0xFF	; 255
    2584:	3f 4f       	sbci	r19, 0xFF	; 255
{
	uint8_t byte, index, bit = 0;
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
    2586:	27 30       	cpi	r18, 0x07	; 7
    2588:	31 05       	cpc	r19, r1
    258a:	09 f0       	breq	.+2      	; 0x258e <__stack+0x1c8f>
    258c:	ea ce       	rjmp	.-556    	; 0x2362 <__stack+0x1a63>
    258e:	aa 94       	dec	r10
}
}*/
static inline void HoldDisplayBuffer(const uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
    2590:	a1 10       	cpse	r10, r1
    2592:	e1 ce       	rjmp	.-574    	; 0x2356 <__stack+0x1a57>
/************************************************************************/
void DeleteLeft(const uint8_t *p, uint8_t time)
{
	uint8_t index, begin, end = 0;
	//uint8_t *bf = buffer;
	for(index = MT_SIZE -1 ; index > 0; index--)
    2594:	e1 10       	cpse	r14, r1
    2596:	bf ce       	rjmp	.-642    	; 0x2316 <__stack+0x1a17>
    2598:	7a e0       	ldi	r23, 0x0A	; 10
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    259a:	f4 e0       	ldi	r31, 0x04	; 4
    259c:	ef 2e       	mov	r14, r31
    259e:	f1 e0       	ldi	r31, 0x01	; 1
    25a0:	ff 2e       	mov	r15, r31
    25a2:	80 e0       	ldi	r24, 0x00	; 0
    25a4:	90 e0       	ldi	r25, 0x00	; 0
    25a6:	31 e0       	ldi	r19, 0x01	; 1
    25a8:	08 2e       	mov	r0, r24
    25aa:	01 c0       	rjmp	.+2      	; 0x25ae <__stack+0x1caf>
    25ac:	33 0f       	add	r19, r19
    25ae:	0a 94       	dec	r0
    25b0:	ea f7       	brpl	.-6      	; 0x25ac <__stack+0x1cad>
	{
		for(begin = 0; begin <= index; begin++) (*(bf + begin)) = (*((p+begin)));
		for(end = (index-1); end < MT_SIZE ; end++) (*(bf + end)) = 0x00;
    25b2:	2f e3       	ldi	r18, 0x3F	; 63
    25b4:	5a c0       	rjmp	.+180    	; 0x266a <__stack+0x1d6b>
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    25b6:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    25b8:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    25ba:	5b 98       	cbi	0x0b, 3	; 11
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
			pinWrite(latch_pin, LOW);
			for(bit = 0; bit <= FONT_HEIGHT ; bit++){
				pinWrite(data_pin,((*(p+pos)) & (1 << byte)));
    25bc:	ef ef       	ldi	r30, 0xFF	; 255
    25be:	e2 0f       	add	r30, r18
    25c0:	f0 e0       	ldi	r31, 0x00	; 0
    25c2:	e0 57       	subi	r30, 0x70	; 112
    25c4:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    25c6:	40 81       	ld	r20, Z
    25c8:	43 23       	and	r20, r19
    25ca:	09 f0       	breq	.+2      	; 0x25ce <__stack+0x1ccf>
    25cc:	22 c2       	rjmp	.+1092   	; 0x2a12 <__stack+0x2113>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    25ce:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    25d0:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    25d2:	5b 98       	cbi	0x0b, 3	; 11
    25d4:	ee ef       	ldi	r30, 0xFE	; 254
    25d6:	e2 0f       	add	r30, r18
    25d8:	f0 e0       	ldi	r31, 0x00	; 0
    25da:	e0 57       	subi	r30, 0x70	; 112
    25dc:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    25de:	40 81       	ld	r20, Z
    25e0:	43 23       	and	r20, r19
    25e2:	09 f0       	breq	.+2      	; 0x25e6 <__stack+0x1ce7>
    25e4:	14 c2       	rjmp	.+1064   	; 0x2a0e <__stack+0x210f>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    25e6:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    25e8:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    25ea:	5b 98       	cbi	0x0b, 3	; 11
    25ec:	ed ef       	ldi	r30, 0xFD	; 253
    25ee:	e2 0f       	add	r30, r18
    25f0:	f0 e0       	ldi	r31, 0x00	; 0
    25f2:	e0 57       	subi	r30, 0x70	; 112
    25f4:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    25f6:	40 81       	ld	r20, Z
    25f8:	43 23       	and	r20, r19
    25fa:	09 f0       	breq	.+2      	; 0x25fe <__stack+0x1cff>
    25fc:	06 c2       	rjmp	.+1036   	; 0x2a0a <__stack+0x210b>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    25fe:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2600:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2602:	5b 98       	cbi	0x0b, 3	; 11
    2604:	ec ef       	ldi	r30, 0xFC	; 252
    2606:	e2 0f       	add	r30, r18
    2608:	f0 e0       	ldi	r31, 0x00	; 0
    260a:	e0 57       	subi	r30, 0x70	; 112
    260c:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    260e:	40 81       	ld	r20, Z
    2610:	43 23       	and	r20, r19
    2612:	09 f0       	breq	.+2      	; 0x2616 <__stack+0x1d17>
    2614:	f8 c1       	rjmp	.+1008   	; 0x2a06 <__stack+0x2107>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2616:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2618:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    261a:	5b 98       	cbi	0x0b, 3	; 11
    261c:	eb ef       	ldi	r30, 0xFB	; 251
    261e:	e2 0f       	add	r30, r18
    2620:	f0 e0       	ldi	r31, 0x00	; 0
    2622:	e0 57       	subi	r30, 0x70	; 112
    2624:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    2626:	40 81       	ld	r20, Z
    2628:	43 23       	and	r20, r19
    262a:	09 f0       	breq	.+2      	; 0x262e <__stack+0x1d2f>
    262c:	ea c1       	rjmp	.+980    	; 0x2a02 <__stack+0x2103>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    262e:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2630:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2632:	5b 98       	cbi	0x0b, 3	; 11
    2634:	ea ef       	ldi	r30, 0xFA	; 250
    2636:	e2 0f       	add	r30, r18
    2638:	f0 e0       	ldi	r31, 0x00	; 0
    263a:	e0 57       	subi	r30, 0x70	; 112
    263c:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    263e:	40 81       	ld	r20, Z
    2640:	43 23       	and	r20, r19
    2642:	09 f0       	breq	.+2      	; 0x2646 <__stack+0x1d47>
    2644:	dc c1       	rjmp	.+952    	; 0x29fe <__stack+0x20ff>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2646:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2648:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    264a:	5b 98       	cbi	0x0b, 3	; 11
    264c:	e9 ef       	ldi	r30, 0xF9	; 249
    264e:	e2 0f       	add	r30, r18
    2650:	f0 e0       	ldi	r31, 0x00	; 0
    2652:	e0 57       	subi	r30, 0x70	; 112
    2654:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    2656:	40 81       	ld	r20, Z
    2658:	43 23       	and	r20, r19
    265a:	91 f5       	brne	.+100    	; 0x26c0 <__stack+0x1dc1>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    265c:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    265e:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2660:	5b 98       	cbi	0x0b, 3	; 11
				//toggle the clock pin
				pinWrite(clock_pin, HIGH);
				pinWrite(clock_pin, LOW);
				pos--;
    2662:	28 50       	subi	r18, 0x08	; 8
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2664:	5a 9a       	sbi	0x0b, 2	; 11
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
    2666:	2f 3f       	cpi	r18, 0xFF	; 255
    2668:	91 f1       	breq	.+100    	; 0x26ce <__stack+0x1dcf>
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    266a:	5a 98       	cbi	0x0b, 2	; 11
			pinWrite(latch_pin, LOW);
			for(bit = 0; bit <= FONT_HEIGHT ; bit++){
				pinWrite(data_pin,((*(p+pos)) & (1 << byte)));
    266c:	e2 2f       	mov	r30, r18
    266e:	f0 e0       	ldi	r31, 0x00	; 0
    2670:	e0 57       	subi	r30, 0x70	; 112
    2672:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    2674:	40 81       	ld	r20, Z
    2676:	43 23       	and	r20, r19
    2678:	09 f4       	brne	.+2      	; 0x267c <__stack+0x1d7d>
    267a:	9d cf       	rjmp	.-198    	; 0x25b6 <__stack+0x1cb7>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    267c:	59 9a       	sbi	0x0b, 1	; 11
    267e:	9c cf       	rjmp	.-200    	; 0x25b8 <__stack+0x1cb9>
    2680:	59 9a       	sbi	0x0b, 1	; 11
    2682:	c0 ce       	rjmp	.-640    	; 0x2404 <__stack+0x1b05>
    2684:	59 9a       	sbi	0x0b, 1	; 11
    2686:	b2 ce       	rjmp	.-668    	; 0x23ec <__stack+0x1aed>
    2688:	59 9a       	sbi	0x0b, 1	; 11
    268a:	a4 ce       	rjmp	.-696    	; 0x23d4 <__stack+0x1ad5>
    268c:	59 9a       	sbi	0x0b, 1	; 11
    268e:	96 ce       	rjmp	.-724    	; 0x23bc <__stack+0x1abd>
    2690:	59 9a       	sbi	0x0b, 1	; 11
    2692:	88 ce       	rjmp	.-752    	; 0x23a4 <__stack+0x1aa5>
    2694:	59 9a       	sbi	0x0b, 1	; 11
    2696:	7a ce       	rjmp	.-780    	; 0x238c <__stack+0x1a8d>
    2698:	b7 e0       	ldi	r27, 0x07	; 7
    269a:	eb 9f       	mul	r30, r27
    269c:	f0 01       	movw	r30, r0
    269e:	11 24       	eor	r1, r1
    26a0:	ec 5b       	subi	r30, 0xBC	; 188
    26a2:	fe 4f       	sbci	r31, 0xFE	; 254
    26a4:	a2 81       	ldd	r26, Z+2	; 0x02
    26a6:	b3 81       	ldd	r27, Z+3	; 0x03
    26a8:	4c 91       	ld	r20, X
    26aa:	81 e0       	ldi	r24, 0x01	; 1
    26ac:	90 e0       	ldi	r25, 0x00	; 0
    26ae:	06 80       	ldd	r0, Z+6	; 0x06
    26b0:	02 c0       	rjmp	.+4      	; 0x26b6 <__stack+0x1db7>
    26b2:	88 0f       	add	r24, r24
    26b4:	99 1f       	adc	r25, r25
    26b6:	0a 94       	dec	r0
    26b8:	e2 f7       	brpl	.-8      	; 0x26b2 <__stack+0x1db3>
    26ba:	84 2b       	or	r24, r20
    26bc:	8c 93       	st	X, r24
    26be:	10 cf       	rjmp	.-480    	; 0x24e0 <__stack+0x1be1>
    26c0:	59 9a       	sbi	0x0b, 1	; 11
    26c2:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    26c4:	5b 98       	cbi	0x0b, 3	; 11
				//toggle the clock pin
				pinWrite(clock_pin, HIGH);
				pinWrite(clock_pin, LOW);
				pos--;
    26c6:	28 50       	subi	r18, 0x08	; 8
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    26c8:	5a 9a       	sbi	0x0b, 2	; 11
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
    26ca:	2f 3f       	cpi	r18, 0xFF	; 255
    26cc:	71 f6       	brne	.-100    	; 0x266a <__stack+0x1d6b>
    26ce:	a4 e0       	ldi	r26, 0x04	; 4
    26d0:	b1 e0       	ldi	r27, 0x01	; 1
    26d2:	37 2f       	mov	r19, r23
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    26d4:	ed 91       	ld	r30, X+
    26d6:	ee 23       	and	r30, r30
    26d8:	01 f1       	breq	.+64     	; 0x271a <__stack+0x1e1b>
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    26da:	ec 3c       	cpi	r30, 0xCC	; 204
    26dc:	d8 f7       	brcc	.-10     	; 0x26d4 <__stack+0x1dd5>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    26de:	27 e0       	ldi	r18, 0x07	; 7
    26e0:	e2 9f       	mul	r30, r18
    26e2:	f0 01       	movw	r30, r0
    26e4:	11 24       	eor	r1, r1
    26e6:	bf 01       	movw	r22, r30
    26e8:	6c 5b       	subi	r22, 0xBC	; 188
    26ea:	7e 4f       	sbci	r23, 0xFE	; 254
    26ec:	fb 01       	movw	r30, r22
    26ee:	42 81       	ldd	r20, Z+2	; 0x02
    26f0:	53 81       	ldd	r21, Z+3	; 0x03
    26f2:	fa 01       	movw	r30, r20
    26f4:	20 81       	ld	r18, Z
    26f6:	22 24       	eor	r2, r2
    26f8:	23 94       	inc	r2
    26fa:	31 2c       	mov	r3, r1
    26fc:	fb 01       	movw	r30, r22
    26fe:	06 80       	ldd	r0, Z+6	; 0x06
    2700:	02 c0       	rjmp	.+4      	; 0x2706 <__stack+0x1e07>
    2702:	22 0c       	add	r2, r2
    2704:	33 1c       	adc	r3, r3
    2706:	0a 94       	dec	r0
    2708:	e2 f7       	brpl	.-8      	; 0x2702 <__stack+0x1e03>
    270a:	b1 01       	movw	r22, r2
    270c:	60 95       	com	r22
    270e:	26 23       	and	r18, r22
    2710:	fa 01       	movw	r30, r20
    2712:	20 83       	st	Z, r18
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    2714:	ed 91       	ld	r30, X+
    2716:	e1 11       	cpse	r30, r1
    2718:	e0 cf       	rjmp	.-64     	; 0x26da <__stack+0x1ddb>
    271a:	73 2f       	mov	r23, r19
/* Multiplexing method                                                  */
/************************************************************************/
static inline void MultiPlex(uint8_t *pin)
{
	pinsMultiWrite(plex_pins, LOW);
	pinWrite(plex_pins[*pin], HIGH);
    271c:	d7 01       	movw	r26, r14
    271e:	ed 91       	ld	r30, X+
    2720:	7d 01       	movw	r14, r26
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    2722:	ec 3c       	cpi	r30, 0xCC	; 204
    2724:	98 f4       	brcc	.+38     	; 0x274c <__stack+0x1e4d>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2726:	b7 e0       	ldi	r27, 0x07	; 7
    2728:	eb 9f       	mul	r30, r27
    272a:	f0 01       	movw	r30, r0
    272c:	11 24       	eor	r1, r1
    272e:	ec 5b       	subi	r30, 0xBC	; 188
    2730:	fe 4f       	sbci	r31, 0xFE	; 254
    2732:	a2 81       	ldd	r26, Z+2	; 0x02
    2734:	b3 81       	ldd	r27, Z+3	; 0x03
    2736:	4c 91       	ld	r20, X
    2738:	21 e0       	ldi	r18, 0x01	; 1
    273a:	30 e0       	ldi	r19, 0x00	; 0
    273c:	06 80       	ldd	r0, Z+6	; 0x06
    273e:	02 c0       	rjmp	.+4      	; 0x2744 <__stack+0x1e45>
    2740:	22 0f       	add	r18, r18
    2742:	33 1f       	adc	r19, r19
    2744:	0a 94       	dec	r0
    2746:	e2 f7       	brpl	.-8      	; 0x2740 <__stack+0x1e41>
    2748:	24 2b       	or	r18, r20
    274a:	2c 93       	st	X, r18
	delay(delayms);
    274c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    2750:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
/*  delay                                                               */
/************************************************************************/
int delayms = 1;
static inline void delay(int dl)
{
	while(dl >= 0)
    2754:	37 fd       	sbrc	r19, 7
    2756:	09 c0       	rjmp	.+18     	; 0x276a <__stack+0x1e6b>
    2758:	ef e9       	ldi	r30, 0x9F	; 159
    275a:	ff e0       	ldi	r31, 0x0F	; 15
    275c:	31 97       	sbiw	r30, 0x01	; 1
    275e:	f1 f7       	brne	.-4      	; 0x275c <__stack+0x1e5d>
    2760:	00 c0       	rjmp	.+0      	; 0x2762 <__stack+0x1e63>
    2762:	00 00       	nop
	{
		_delay_ms(1);
		dl--;
    2764:	21 50       	subi	r18, 0x01	; 1
    2766:	31 09       	sbc	r19, r1
    2768:	b8 f7       	brcc	.-18     	; 0x2758 <__stack+0x1e59>
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
    276a:	a4 e0       	ldi	r26, 0x04	; 4
    276c:	b1 e0       	ldi	r27, 0x01	; 1
    276e:	37 2f       	mov	r19, r23
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    2770:	ed 91       	ld	r30, X+
    2772:	ee 23       	and	r30, r30
    2774:	01 f1       	breq	.+64     	; 0x27b6 <__stack+0x1eb7>
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    2776:	ec 3c       	cpi	r30, 0xCC	; 204
    2778:	d8 f7       	brcc	.-10     	; 0x2770 <__stack+0x1e71>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    277a:	27 e0       	ldi	r18, 0x07	; 7
    277c:	e2 9f       	mul	r30, r18
    277e:	f0 01       	movw	r30, r0
    2780:	11 24       	eor	r1, r1
    2782:	bf 01       	movw	r22, r30
    2784:	6c 5b       	subi	r22, 0xBC	; 188
    2786:	7e 4f       	sbci	r23, 0xFE	; 254
    2788:	fb 01       	movw	r30, r22
    278a:	42 81       	ldd	r20, Z+2	; 0x02
    278c:	53 81       	ldd	r21, Z+3	; 0x03
    278e:	fa 01       	movw	r30, r20
    2790:	20 81       	ld	r18, Z
    2792:	22 24       	eor	r2, r2
    2794:	23 94       	inc	r2
    2796:	31 2c       	mov	r3, r1
    2798:	fb 01       	movw	r30, r22
    279a:	06 80       	ldd	r0, Z+6	; 0x06
    279c:	02 c0       	rjmp	.+4      	; 0x27a2 <__stack+0x1ea3>
    279e:	22 0c       	add	r2, r2
    27a0:	33 1c       	adc	r3, r3
    27a2:	0a 94       	dec	r0
    27a4:	e2 f7       	brpl	.-8      	; 0x279e <__stack+0x1e9f>
    27a6:	b1 01       	movw	r22, r2
    27a8:	60 95       	com	r22
    27aa:	26 23       	and	r18, r22
    27ac:	fa 01       	movw	r30, r20
    27ae:	20 83       	st	Z, r18
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    27b0:	ed 91       	ld	r30, X+
    27b2:	e1 11       	cpse	r30, r1
    27b4:	e0 cf       	rjmp	.-64     	; 0x2776 <__stack+0x1e77>
    27b6:	73 2f       	mov	r23, r19
    27b8:	29 e0       	ldi	r18, 0x09	; 9
    27ba:	30 e0       	ldi	r19, 0x00	; 0
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    27bc:	5a 98       	cbi	0x0b, 2	; 11
    27be:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    27c0:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    27c2:	5b 98       	cbi	0x0b, 3	; 11
    27c4:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    27c6:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    27c8:	5b 98       	cbi	0x0b, 3	; 11
    27ca:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    27cc:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    27ce:	5b 98       	cbi	0x0b, 3	; 11
    27d0:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    27d2:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    27d4:	5b 98       	cbi	0x0b, 3	; 11
    27d6:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    27d8:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    27da:	5b 98       	cbi	0x0b, 3	; 11
    27dc:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    27de:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    27e0:	5b 98       	cbi	0x0b, 3	; 11
    27e2:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    27e4:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    27e6:	5b 98       	cbi	0x0b, 3	; 11
    27e8:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    27ea:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    27ec:	5b 98       	cbi	0x0b, 3	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    27ee:	5a 9a       	sbi	0x0b, 2	; 11
    27f0:	21 50       	subi	r18, 0x01	; 1
    27f2:	31 09       	sbc	r19, r1
/* Clear Display                                                        */
/************************************************************************/
static inline void Clear(){
	int x, y = 0;
	pinsMultiWrite(plex_pins, LOW);
	for(x = 0; x < (SH_REG + 1); x++) {
    27f4:	19 f7       	brne	.-58     	; 0x27bc <__stack+0x1ebd>
    27f6:	01 96       	adiw	r24, 0x01	; 1
{
	uint8_t byte, index, bit = 0;
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
    27f8:	87 30       	cpi	r24, 0x07	; 7
    27fa:	91 05       	cpc	r25, r1
    27fc:	09 f0       	breq	.+2      	; 0x2800 <__stack+0x1f01>
    27fe:	d3 ce       	rjmp	.-602    	; 0x25a6 <__stack+0x1ca7>
    2800:	71 50       	subi	r23, 0x01	; 1
}
}*/
static inline void HoldDisplayBuffer(const uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
    2802:	09 f0       	breq	.+2      	; 0x2806 <__stack+0x1f07>
    2804:	ca ce       	rjmp	.-620    	; 0x259a <__stack+0x1c9b>
    2806:	d8 01       	movw	r26, r16
    2808:	eb 2d       	mov	r30, r11
    280a:	1d 92       	st	X+, r1
    280c:	ea 95       	dec	r30
    280e:	e9 f7       	brne	.-6      	; 0x280a <__stack+0x1f0b>
	pos_index = s_pos;
	ClearStringBuffer();
	while(*ch){
		index = CharStart(ch++) * FONT_WIDTH;
		for(len = 0; len < FONT_WIDTH; len++){
			stringbuffer[pos_index++] = (uint8_t)(pgm_read_byte((font_5x7 + index++)));
    2810:	e7 e6       	ldi	r30, 0x67	; 103
    2812:	f1 e0       	ldi	r31, 0x01	; 1
    2814:	84 91       	lpm	r24, Z
    2816:	80 93 60 02 	sts	0x0260, r24	; 0x800260 <stringbuffer+0x10>
    281a:	e8 e6       	ldi	r30, 0x68	; 104
    281c:	f1 e0       	ldi	r31, 0x01	; 1
    281e:	84 91       	lpm	r24, Z
    2820:	80 93 61 02 	sts	0x0261, r24	; 0x800261 <stringbuffer+0x11>
    2824:	e9 e6       	ldi	r30, 0x69	; 105
    2826:	f1 e0       	ldi	r31, 0x01	; 1
    2828:	84 91       	lpm	r24, Z
    282a:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <stringbuffer+0x12>
    282e:	ea e6       	ldi	r30, 0x6A	; 106
    2830:	f1 e0       	ldi	r31, 0x01	; 1
    2832:	84 91       	lpm	r24, Z
    2834:	80 93 63 02 	sts	0x0263, r24	; 0x800263 <stringbuffer+0x13>
    2838:	eb e6       	ldi	r30, 0x6B	; 107
    283a:	f1 e0       	ldi	r31, 0x01	; 1
    283c:	84 91       	lpm	r24, Z
    283e:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <stringbuffer+0x14>
    2842:	e0 e3       	ldi	r30, 0x30	; 48
    2844:	f1 e0       	ldi	r31, 0x01	; 1
    2846:	84 91       	lpm	r24, Z
    2848:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <stringbuffer+0x16>
    284c:	e1 e3       	ldi	r30, 0x31	; 49
    284e:	f1 e0       	ldi	r31, 0x01	; 1
    2850:	84 91       	lpm	r24, Z
    2852:	80 93 67 02 	sts	0x0267, r24	; 0x800267 <stringbuffer+0x17>
    2856:	e2 e3       	ldi	r30, 0x32	; 50
    2858:	f1 e0       	ldi	r31, 0x01	; 1
    285a:	84 91       	lpm	r24, Z
    285c:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <stringbuffer+0x18>
    2860:	e3 e3       	ldi	r30, 0x33	; 51
    2862:	f1 e0       	ldi	r31, 0x01	; 1
    2864:	84 91       	lpm	r24, Z
    2866:	80 93 69 02 	sts	0x0269, r24	; 0x800269 <stringbuffer+0x19>
    286a:	e4 e3       	ldi	r30, 0x34	; 52
    286c:	f1 e0       	ldi	r31, 0x01	; 1
    286e:	84 91       	lpm	r24, Z
    2870:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <stringbuffer+0x1a>
    2874:	ed e0       	ldi	r30, 0x0D	; 13
    2876:	f1 e0       	ldi	r31, 0x01	; 1
    2878:	84 91       	lpm	r24, Z
    287a:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <stringbuffer+0x1c>
    287e:	ee e0       	ldi	r30, 0x0E	; 14
    2880:	f1 e0       	ldi	r31, 0x01	; 1
    2882:	84 91       	lpm	r24, Z
    2884:	80 93 6d 02 	sts	0x026D, r24	; 0x80026d <stringbuffer+0x1d>
    2888:	ef e0       	ldi	r30, 0x0F	; 15
    288a:	f1 e0       	ldi	r31, 0x01	; 1
    288c:	84 91       	lpm	r24, Z
    288e:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <stringbuffer+0x1e>
    2892:	e0 e1       	ldi	r30, 0x10	; 16
    2894:	f1 e0       	ldi	r31, 0x01	; 1
    2896:	84 91       	lpm	r24, Z
    2898:	80 93 6f 02 	sts	0x026F, r24	; 0x80026f <stringbuffer+0x1f>
    289c:	e1 e1       	ldi	r30, 0x11	; 17
    289e:	f1 e0       	ldi	r31, 0x01	; 1
    28a0:	84 91       	lpm	r24, Z
    28a2:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <stringbuffer+0x20>
    28a6:	e2 e6       	ldi	r30, 0x62	; 98
    28a8:	f1 e0       	ldi	r31, 0x01	; 1
    28aa:	84 91       	lpm	r24, Z
    28ac:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <stringbuffer+0x22>
    28b0:	e3 e6       	ldi	r30, 0x63	; 99
    28b2:	f1 e0       	ldi	r31, 0x01	; 1
    28b4:	84 91       	lpm	r24, Z
    28b6:	80 93 73 02 	sts	0x0273, r24	; 0x800273 <stringbuffer+0x23>
    28ba:	e4 e6       	ldi	r30, 0x64	; 100
    28bc:	f1 e0       	ldi	r31, 0x01	; 1
    28be:	84 91       	lpm	r24, Z
    28c0:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <stringbuffer+0x24>
    28c4:	e5 e6       	ldi	r30, 0x65	; 101
    28c6:	f1 e0       	ldi	r31, 0x01	; 1
    28c8:	84 91       	lpm	r24, Z
    28ca:	80 93 75 02 	sts	0x0275, r24	; 0x800275 <stringbuffer+0x25>
    28ce:	e6 e6       	ldi	r30, 0x66	; 102
    28d0:	f1 e0       	ldi	r31, 0x01	; 1
    28d2:	84 91       	lpm	r24, Z
    28d4:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <stringbuffer+0x26>
    28d8:	e1 e2       	ldi	r30, 0x21	; 33
    28da:	f1 e0       	ldi	r31, 0x01	; 1
    28dc:	84 91       	lpm	r24, Z
    28de:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <stringbuffer+0x28>
    28e2:	e2 e2       	ldi	r30, 0x22	; 34
    28e4:	f1 e0       	ldi	r31, 0x01	; 1
    28e6:	84 91       	lpm	r24, Z
    28e8:	80 93 79 02 	sts	0x0279, r24	; 0x800279 <stringbuffer+0x29>
    28ec:	e3 e2       	ldi	r30, 0x23	; 35
    28ee:	f1 e0       	ldi	r31, 0x01	; 1
    28f0:	84 91       	lpm	r24, Z
    28f2:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <stringbuffer+0x2a>
    28f6:	e4 e2       	ldi	r30, 0x24	; 36
    28f8:	f1 e0       	ldi	r31, 0x01	; 1
    28fa:	84 91       	lpm	r24, Z
    28fc:	80 93 7b 02 	sts	0x027B, r24	; 0x80027b <stringbuffer+0x2b>
    2900:	e5 e2       	ldi	r30, 0x25	; 37
    2902:	f1 e0       	ldi	r31, 0x01	; 1
    2904:	84 91       	lpm	r24, Z
    2906:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <stringbuffer+0x2c>
/*split while displaying                                                */
/************************************************************************/
void Rain(const uint8_t *p, uint8_t delay)
{
	uint8_t rt = 0;
	delayms = delay;
    290a:	84 e6       	ldi	r24, 0x64	; 100
    290c:	90 e0       	ldi	r25, 0x00	; 0
    290e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    2912:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    2916:	74 e6       	ldi	r23, 0x64	; 100
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    2918:	b4 e0       	ldi	r27, 0x04	; 4
    291a:	eb 2e       	mov	r14, r27
    291c:	b1 e0       	ldi	r27, 0x01	; 1
    291e:	fb 2e       	mov	r15, r27
    2920:	80 e0       	ldi	r24, 0x00	; 0
    2922:	90 e0       	ldi	r25, 0x00	; 0
    2924:	31 e0       	ldi	r19, 0x01	; 1
    2926:	08 2e       	mov	r0, r24
    2928:	01 c0       	rjmp	.+2      	; 0x292c <__stack+0x202d>
    292a:	33 0f       	add	r19, r19
    292c:	0a 94       	dec	r0
    292e:	ea f7       	brpl	.-6      	; 0x292a <__stack+0x202b>
/************************************************************************/
void DeleteLeft(const uint8_t *p, uint8_t time)
{
	uint8_t index, begin, end = 0;
	//uint8_t *bf = buffer;
	for(index = MT_SIZE -1 ; index > 0; index--)
    2930:	2f e3       	ldi	r18, 0x3F	; 63
    2932:	5a c0       	rjmp	.+180    	; 0x29e8 <__stack+0x20e9>
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2934:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2936:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2938:	5b 98       	cbi	0x0b, 3	; 11
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
			pinWrite(latch_pin, LOW);
			for(bit = 0; bit <= FONT_HEIGHT ; bit++){
				pinWrite(data_pin,((*(p+pos)) & (1 << byte)));
    293a:	ef ef       	ldi	r30, 0xFF	; 255
    293c:	e2 0f       	add	r30, r18
    293e:	f0 e0       	ldi	r31, 0x00	; 0
    2940:	e0 5b       	subi	r30, 0xB0	; 176
    2942:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    2944:	40 81       	ld	r20, Z
    2946:	43 23       	and	r20, r19
    2948:	09 f0       	breq	.+2      	; 0x294c <__stack+0x204d>
    294a:	a2 c2       	rjmp	.+1348   	; 0x2e90 <__stack+0x2591>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    294c:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    294e:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2950:	5b 98       	cbi	0x0b, 3	; 11
    2952:	ee ef       	ldi	r30, 0xFE	; 254
    2954:	e2 0f       	add	r30, r18
    2956:	f0 e0       	ldi	r31, 0x00	; 0
    2958:	e0 5b       	subi	r30, 0xB0	; 176
    295a:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    295c:	40 81       	ld	r20, Z
    295e:	43 23       	and	r20, r19
    2960:	09 f0       	breq	.+2      	; 0x2964 <__stack+0x2065>
    2962:	94 c2       	rjmp	.+1320   	; 0x2e8c <__stack+0x258d>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2964:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2966:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2968:	5b 98       	cbi	0x0b, 3	; 11
    296a:	ed ef       	ldi	r30, 0xFD	; 253
    296c:	e2 0f       	add	r30, r18
    296e:	f0 e0       	ldi	r31, 0x00	; 0
    2970:	e0 5b       	subi	r30, 0xB0	; 176
    2972:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    2974:	40 81       	ld	r20, Z
    2976:	43 23       	and	r20, r19
    2978:	09 f0       	breq	.+2      	; 0x297c <__stack+0x207d>
    297a:	86 c2       	rjmp	.+1292   	; 0x2e88 <__stack+0x2589>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    297c:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    297e:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2980:	5b 98       	cbi	0x0b, 3	; 11
    2982:	ec ef       	ldi	r30, 0xFC	; 252
    2984:	e2 0f       	add	r30, r18
    2986:	f0 e0       	ldi	r31, 0x00	; 0
    2988:	e0 5b       	subi	r30, 0xB0	; 176
    298a:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    298c:	40 81       	ld	r20, Z
    298e:	43 23       	and	r20, r19
    2990:	09 f0       	breq	.+2      	; 0x2994 <__stack+0x2095>
    2992:	78 c2       	rjmp	.+1264   	; 0x2e84 <__stack+0x2585>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2994:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2996:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2998:	5b 98       	cbi	0x0b, 3	; 11
    299a:	eb ef       	ldi	r30, 0xFB	; 251
    299c:	e2 0f       	add	r30, r18
    299e:	f0 e0       	ldi	r31, 0x00	; 0
    29a0:	e0 5b       	subi	r30, 0xB0	; 176
    29a2:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    29a4:	40 81       	ld	r20, Z
    29a6:	43 23       	and	r20, r19
    29a8:	09 f0       	breq	.+2      	; 0x29ac <__stack+0x20ad>
    29aa:	6a c2       	rjmp	.+1236   	; 0x2e80 <__stack+0x2581>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    29ac:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    29ae:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    29b0:	5b 98       	cbi	0x0b, 3	; 11
    29b2:	ea ef       	ldi	r30, 0xFA	; 250
    29b4:	e2 0f       	add	r30, r18
    29b6:	f0 e0       	ldi	r31, 0x00	; 0
    29b8:	e0 5b       	subi	r30, 0xB0	; 176
    29ba:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    29bc:	40 81       	ld	r20, Z
    29be:	43 23       	and	r20, r19
    29c0:	09 f0       	breq	.+2      	; 0x29c4 <__stack+0x20c5>
    29c2:	5c c2       	rjmp	.+1208   	; 0x2e7c <__stack+0x257d>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    29c4:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    29c6:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    29c8:	5b 98       	cbi	0x0b, 3	; 11
    29ca:	e9 ef       	ldi	r30, 0xF9	; 249
    29cc:	e2 0f       	add	r30, r18
    29ce:	f0 e0       	ldi	r31, 0x00	; 0
    29d0:	e0 5b       	subi	r30, 0xB0	; 176
    29d2:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    29d4:	40 81       	ld	r20, Z
    29d6:	43 23       	and	r20, r19
    29d8:	f1 f4       	brne	.+60     	; 0x2a16 <__stack+0x2117>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    29da:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    29dc:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    29de:	5b 98       	cbi	0x0b, 3	; 11
				//toggle the clock pin
				pinWrite(clock_pin, HIGH);
				pinWrite(clock_pin, LOW);
				pos--;
    29e0:	28 50       	subi	r18, 0x08	; 8
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    29e2:	5a 9a       	sbi	0x0b, 2	; 11
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
    29e4:	2f 3f       	cpi	r18, 0xFF	; 255
    29e6:	f1 f0       	breq	.+60     	; 0x2a24 <__stack+0x2125>
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    29e8:	5a 98       	cbi	0x0b, 2	; 11
			pinWrite(latch_pin, LOW);
			for(bit = 0; bit <= FONT_HEIGHT ; bit++){
				pinWrite(data_pin,((*(p+pos)) & (1 << byte)));
    29ea:	e2 2f       	mov	r30, r18
    29ec:	f0 e0       	ldi	r31, 0x00	; 0
    29ee:	e0 5b       	subi	r30, 0xB0	; 176
    29f0:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    29f2:	40 81       	ld	r20, Z
    29f4:	43 23       	and	r20, r19
    29f6:	09 f4       	brne	.+2      	; 0x29fa <__stack+0x20fb>
    29f8:	9d cf       	rjmp	.-198    	; 0x2934 <__stack+0x2035>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    29fa:	59 9a       	sbi	0x0b, 1	; 11
    29fc:	9c cf       	rjmp	.-200    	; 0x2936 <__stack+0x2037>
    29fe:	59 9a       	sbi	0x0b, 1	; 11
    2a00:	23 ce       	rjmp	.-954    	; 0x2648 <__stack+0x1d49>
    2a02:	59 9a       	sbi	0x0b, 1	; 11
    2a04:	15 ce       	rjmp	.-982    	; 0x2630 <__stack+0x1d31>
    2a06:	59 9a       	sbi	0x0b, 1	; 11
    2a08:	07 ce       	rjmp	.-1010   	; 0x2618 <__stack+0x1d19>
    2a0a:	59 9a       	sbi	0x0b, 1	; 11
    2a0c:	f9 cd       	rjmp	.-1038   	; 0x2600 <__stack+0x1d01>
    2a0e:	59 9a       	sbi	0x0b, 1	; 11
    2a10:	eb cd       	rjmp	.-1066   	; 0x25e8 <__stack+0x1ce9>
    2a12:	59 9a       	sbi	0x0b, 1	; 11
    2a14:	dd cd       	rjmp	.-1094   	; 0x25d0 <__stack+0x1cd1>
    2a16:	59 9a       	sbi	0x0b, 1	; 11
    2a18:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2a1a:	5b 98       	cbi	0x0b, 3	; 11
				//toggle the clock pin
				pinWrite(clock_pin, HIGH);
				pinWrite(clock_pin, LOW);
				pos--;
    2a1c:	28 50       	subi	r18, 0x08	; 8
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2a1e:	5a 9a       	sbi	0x0b, 2	; 11
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
    2a20:	2f 3f       	cpi	r18, 0xFF	; 255
    2a22:	11 f7       	brne	.-60     	; 0x29e8 <__stack+0x20e9>
    2a24:	a4 e0       	ldi	r26, 0x04	; 4
    2a26:	b1 e0       	ldi	r27, 0x01	; 1
    2a28:	a7 2e       	mov	r10, r23
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    2a2a:	ed 91       	ld	r30, X+
    2a2c:	ee 23       	and	r30, r30
    2a2e:	01 f1       	breq	.+64     	; 0x2a70 <__stack+0x2171>
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    2a30:	ec 3c       	cpi	r30, 0xCC	; 204
    2a32:	d8 f7       	brcc	.-10     	; 0x2a2a <__stack+0x212b>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2a34:	27 e0       	ldi	r18, 0x07	; 7
    2a36:	e2 9f       	mul	r30, r18
    2a38:	f0 01       	movw	r30, r0
    2a3a:	11 24       	eor	r1, r1
    2a3c:	bf 01       	movw	r22, r30
    2a3e:	6c 5b       	subi	r22, 0xBC	; 188
    2a40:	7e 4f       	sbci	r23, 0xFE	; 254
    2a42:	fb 01       	movw	r30, r22
    2a44:	42 81       	ldd	r20, Z+2	; 0x02
    2a46:	53 81       	ldd	r21, Z+3	; 0x03
    2a48:	fa 01       	movw	r30, r20
    2a4a:	30 81       	ld	r19, Z
    2a4c:	22 24       	eor	r2, r2
    2a4e:	23 94       	inc	r2
    2a50:	31 2c       	mov	r3, r1
    2a52:	fb 01       	movw	r30, r22
    2a54:	06 80       	ldd	r0, Z+6	; 0x06
    2a56:	02 c0       	rjmp	.+4      	; 0x2a5c <__stack+0x215d>
    2a58:	22 0c       	add	r2, r2
    2a5a:	33 1c       	adc	r3, r3
    2a5c:	0a 94       	dec	r0
    2a5e:	e2 f7       	brpl	.-8      	; 0x2a58 <__stack+0x2159>
    2a60:	22 2d       	mov	r18, r2
    2a62:	20 95       	com	r18
    2a64:	23 23       	and	r18, r19
    2a66:	fa 01       	movw	r30, r20
    2a68:	20 83       	st	Z, r18
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    2a6a:	ed 91       	ld	r30, X+
    2a6c:	e1 11       	cpse	r30, r1
    2a6e:	e0 cf       	rjmp	.-64     	; 0x2a30 <__stack+0x2131>
    2a70:	7a 2d       	mov	r23, r10
/* Multiplexing method                                                  */
/************************************************************************/
static inline void MultiPlex(uint8_t *pin)
{
	pinsMultiWrite(plex_pins, LOW);
	pinWrite(plex_pins[*pin], HIGH);
    2a72:	d7 01       	movw	r26, r14
    2a74:	ed 91       	ld	r30, X+
    2a76:	7d 01       	movw	r14, r26
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    2a78:	ec 3c       	cpi	r30, 0xCC	; 204
    2a7a:	08 f4       	brcc	.+2      	; 0x2a7e <__stack+0x217f>
    2a7c:	0b c2       	rjmp	.+1046   	; 0x2e94 <__stack+0x2595>
	delay(delayms);
    2a7e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    2a82:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
/*  delay                                                               */
/************************************************************************/
int delayms = 1;
static inline void delay(int dl)
{
	while(dl >= 0)
    2a86:	37 fd       	sbrc	r19, 7
    2a88:	09 c0       	rjmp	.+18     	; 0x2a9c <__stack+0x219d>
    2a8a:	ef e9       	ldi	r30, 0x9F	; 159
    2a8c:	ff e0       	ldi	r31, 0x0F	; 15
    2a8e:	31 97       	sbiw	r30, 0x01	; 1
    2a90:	f1 f7       	brne	.-4      	; 0x2a8e <__stack+0x218f>
    2a92:	00 c0       	rjmp	.+0      	; 0x2a94 <__stack+0x2195>
    2a94:	00 00       	nop
	{
		_delay_ms(1);
		dl--;
    2a96:	21 50       	subi	r18, 0x01	; 1
    2a98:	31 09       	sbc	r19, r1
    2a9a:	b8 f7       	brcc	.-18     	; 0x2a8a <__stack+0x218b>
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
    2a9c:	a4 e0       	ldi	r26, 0x04	; 4
    2a9e:	b1 e0       	ldi	r27, 0x01	; 1
    2aa0:	a7 2e       	mov	r10, r23
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    2aa2:	ed 91       	ld	r30, X+
    2aa4:	ee 23       	and	r30, r30
    2aa6:	01 f1       	breq	.+64     	; 0x2ae8 <__stack+0x21e9>
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    2aa8:	ec 3c       	cpi	r30, 0xCC	; 204
    2aaa:	d8 f7       	brcc	.-10     	; 0x2aa2 <__stack+0x21a3>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2aac:	27 e0       	ldi	r18, 0x07	; 7
    2aae:	e2 9f       	mul	r30, r18
    2ab0:	f0 01       	movw	r30, r0
    2ab2:	11 24       	eor	r1, r1
    2ab4:	bf 01       	movw	r22, r30
    2ab6:	6c 5b       	subi	r22, 0xBC	; 188
    2ab8:	7e 4f       	sbci	r23, 0xFE	; 254
    2aba:	fb 01       	movw	r30, r22
    2abc:	42 81       	ldd	r20, Z+2	; 0x02
    2abe:	53 81       	ldd	r21, Z+3	; 0x03
    2ac0:	fa 01       	movw	r30, r20
    2ac2:	30 81       	ld	r19, Z
    2ac4:	22 24       	eor	r2, r2
    2ac6:	23 94       	inc	r2
    2ac8:	31 2c       	mov	r3, r1
    2aca:	fb 01       	movw	r30, r22
    2acc:	06 80       	ldd	r0, Z+6	; 0x06
    2ace:	02 c0       	rjmp	.+4      	; 0x2ad4 <__stack+0x21d5>
    2ad0:	22 0c       	add	r2, r2
    2ad2:	33 1c       	adc	r3, r3
    2ad4:	0a 94       	dec	r0
    2ad6:	e2 f7       	brpl	.-8      	; 0x2ad0 <__stack+0x21d1>
    2ad8:	22 2d       	mov	r18, r2
    2ada:	20 95       	com	r18
    2adc:	23 23       	and	r18, r19
    2ade:	fa 01       	movw	r30, r20
    2ae0:	20 83       	st	Z, r18
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    2ae2:	ed 91       	ld	r30, X+
    2ae4:	e1 11       	cpse	r30, r1
    2ae6:	e0 cf       	rjmp	.-64     	; 0x2aa8 <__stack+0x21a9>
    2ae8:	7a 2d       	mov	r23, r10
    2aea:	29 e0       	ldi	r18, 0x09	; 9
    2aec:	30 e0       	ldi	r19, 0x00	; 0
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2aee:	5a 98       	cbi	0x0b, 2	; 11
    2af0:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2af2:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2af4:	5b 98       	cbi	0x0b, 3	; 11
    2af6:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2af8:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2afa:	5b 98       	cbi	0x0b, 3	; 11
    2afc:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2afe:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2b00:	5b 98       	cbi	0x0b, 3	; 11
    2b02:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2b04:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2b06:	5b 98       	cbi	0x0b, 3	; 11
    2b08:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2b0a:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2b0c:	5b 98       	cbi	0x0b, 3	; 11
    2b0e:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2b10:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2b12:	5b 98       	cbi	0x0b, 3	; 11
    2b14:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2b16:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2b18:	5b 98       	cbi	0x0b, 3	; 11
    2b1a:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2b1c:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2b1e:	5b 98       	cbi	0x0b, 3	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2b20:	5a 9a       	sbi	0x0b, 2	; 11
    2b22:	21 50       	subi	r18, 0x01	; 1
    2b24:	31 09       	sbc	r19, r1
/* Clear Display                                                        */
/************************************************************************/
static inline void Clear(){
	int x, y = 0;
	pinsMultiWrite(plex_pins, LOW);
	for(x = 0; x < (SH_REG + 1); x++) {
    2b26:	19 f7       	brne	.-58     	; 0x2aee <__stack+0x21ef>
    2b28:	01 96       	adiw	r24, 0x01	; 1
{
	uint8_t byte, index, bit = 0;
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
    2b2a:	87 30       	cpi	r24, 0x07	; 7
    2b2c:	91 05       	cpc	r25, r1
    2b2e:	09 f0       	breq	.+2      	; 0x2b32 <__stack+0x2233>
    2b30:	f9 ce       	rjmp	.-526    	; 0x2924 <__stack+0x2025>
    2b32:	71 50       	subi	r23, 0x01	; 1
/************************************************************************/
void Rain(const uint8_t *p, uint8_t delay)
{
	uint8_t rt = 0;
	delayms = delay;
	for(rt=0; rt<100; rt++){
    2b34:	09 f0       	breq	.+2      	; 0x2b38 <__stack+0x2239>
    2b36:	f0 ce       	rjmp	.-544    	; 0x2918 <__stack+0x2019>
    2b38:	d8 01       	movw	r26, r16
    2b3a:	eb 2d       	mov	r30, r11
    2b3c:	1d 92       	st	X+, r1
    2b3e:	ea 95       	dec	r30
    2b40:	e9 f7       	brne	.-6      	; 0x2b3c <__stack+0x223d>
    2b42:	e7 e6       	ldi	r30, 0x67	; 103
    2b44:	f1 e0       	ldi	r31, 0x01	; 1
    2b46:	84 91       	lpm	r24, Z
    2b48:	80 93 60 02 	sts	0x0260, r24	; 0x800260 <stringbuffer+0x10>
    2b4c:	e8 e6       	ldi	r30, 0x68	; 104
    2b4e:	f1 e0       	ldi	r31, 0x01	; 1
    2b50:	84 91       	lpm	r24, Z
    2b52:	80 93 61 02 	sts	0x0261, r24	; 0x800261 <stringbuffer+0x11>
    2b56:	e9 e6       	ldi	r30, 0x69	; 105
    2b58:	f1 e0       	ldi	r31, 0x01	; 1
    2b5a:	84 91       	lpm	r24, Z
    2b5c:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <stringbuffer+0x12>
    2b60:	ea e6       	ldi	r30, 0x6A	; 106
    2b62:	f1 e0       	ldi	r31, 0x01	; 1
    2b64:	84 91       	lpm	r24, Z
    2b66:	80 93 63 02 	sts	0x0263, r24	; 0x800263 <stringbuffer+0x13>
    2b6a:	eb e6       	ldi	r30, 0x6B	; 107
    2b6c:	f1 e0       	ldi	r31, 0x01	; 1
    2b6e:	84 91       	lpm	r24, Z
    2b70:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <stringbuffer+0x14>
    2b74:	e0 e3       	ldi	r30, 0x30	; 48
    2b76:	f1 e0       	ldi	r31, 0x01	; 1
    2b78:	84 91       	lpm	r24, Z
    2b7a:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <stringbuffer+0x16>
    2b7e:	e1 e3       	ldi	r30, 0x31	; 49
    2b80:	f1 e0       	ldi	r31, 0x01	; 1
    2b82:	84 91       	lpm	r24, Z
    2b84:	80 93 67 02 	sts	0x0267, r24	; 0x800267 <stringbuffer+0x17>
    2b88:	e2 e3       	ldi	r30, 0x32	; 50
    2b8a:	f1 e0       	ldi	r31, 0x01	; 1
    2b8c:	84 91       	lpm	r24, Z
    2b8e:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <stringbuffer+0x18>
    2b92:	e3 e3       	ldi	r30, 0x33	; 51
    2b94:	f1 e0       	ldi	r31, 0x01	; 1
    2b96:	84 91       	lpm	r24, Z
    2b98:	80 93 69 02 	sts	0x0269, r24	; 0x800269 <stringbuffer+0x19>
    2b9c:	e4 e3       	ldi	r30, 0x34	; 52
    2b9e:	f1 e0       	ldi	r31, 0x01	; 1
    2ba0:	84 91       	lpm	r24, Z
    2ba2:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <stringbuffer+0x1a>
    2ba6:	ed e0       	ldi	r30, 0x0D	; 13
    2ba8:	f1 e0       	ldi	r31, 0x01	; 1
    2baa:	84 91       	lpm	r24, Z
    2bac:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <stringbuffer+0x1c>
    2bb0:	ee e0       	ldi	r30, 0x0E	; 14
    2bb2:	f1 e0       	ldi	r31, 0x01	; 1
    2bb4:	84 91       	lpm	r24, Z
    2bb6:	80 93 6d 02 	sts	0x026D, r24	; 0x80026d <stringbuffer+0x1d>
    2bba:	ef e0       	ldi	r30, 0x0F	; 15
    2bbc:	f1 e0       	ldi	r31, 0x01	; 1
    2bbe:	84 91       	lpm	r24, Z
    2bc0:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <stringbuffer+0x1e>
    2bc4:	e0 e1       	ldi	r30, 0x10	; 16
    2bc6:	f1 e0       	ldi	r31, 0x01	; 1
    2bc8:	84 91       	lpm	r24, Z
    2bca:	80 93 6f 02 	sts	0x026F, r24	; 0x80026f <stringbuffer+0x1f>
    2bce:	e1 e1       	ldi	r30, 0x11	; 17
    2bd0:	f1 e0       	ldi	r31, 0x01	; 1
    2bd2:	84 91       	lpm	r24, Z
    2bd4:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <stringbuffer+0x20>
    2bd8:	e2 e6       	ldi	r30, 0x62	; 98
    2bda:	f1 e0       	ldi	r31, 0x01	; 1
    2bdc:	84 91       	lpm	r24, Z
    2bde:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <stringbuffer+0x22>
    2be2:	e3 e6       	ldi	r30, 0x63	; 99
    2be4:	f1 e0       	ldi	r31, 0x01	; 1
    2be6:	84 91       	lpm	r24, Z
    2be8:	80 93 73 02 	sts	0x0273, r24	; 0x800273 <stringbuffer+0x23>
    2bec:	e4 e6       	ldi	r30, 0x64	; 100
    2bee:	f1 e0       	ldi	r31, 0x01	; 1
    2bf0:	84 91       	lpm	r24, Z
    2bf2:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <stringbuffer+0x24>
    2bf6:	e5 e6       	ldi	r30, 0x65	; 101
    2bf8:	f1 e0       	ldi	r31, 0x01	; 1
    2bfa:	84 91       	lpm	r24, Z
    2bfc:	80 93 75 02 	sts	0x0275, r24	; 0x800275 <stringbuffer+0x25>
    2c00:	e6 e6       	ldi	r30, 0x66	; 102
    2c02:	f1 e0       	ldi	r31, 0x01	; 1
    2c04:	84 91       	lpm	r24, Z
    2c06:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <stringbuffer+0x26>
    2c0a:	e1 e2       	ldi	r30, 0x21	; 33
    2c0c:	f1 e0       	ldi	r31, 0x01	; 1
    2c0e:	84 91       	lpm	r24, Z
    2c10:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <stringbuffer+0x28>
    2c14:	e2 e2       	ldi	r30, 0x22	; 34
    2c16:	f1 e0       	ldi	r31, 0x01	; 1
    2c18:	84 91       	lpm	r24, Z
    2c1a:	80 93 79 02 	sts	0x0279, r24	; 0x800279 <stringbuffer+0x29>
    2c1e:	e3 e2       	ldi	r30, 0x23	; 35
    2c20:	f1 e0       	ldi	r31, 0x01	; 1
    2c22:	84 91       	lpm	r24, Z
    2c24:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <stringbuffer+0x2a>
    2c28:	e4 e2       	ldi	r30, 0x24	; 36
    2c2a:	f1 e0       	ldi	r31, 0x01	; 1
    2c2c:	84 91       	lpm	r24, Z
    2c2e:	80 93 7b 02 	sts	0x027B, r24	; 0x80027b <stringbuffer+0x2b>
    2c32:	e5 e2       	ldi	r30, 0x25	; 37
    2c34:	f1 e0       	ldi	r31, 0x01	; 1
    2c36:	84 91       	lpm	r24, Z
    2c38:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <stringbuffer+0x2c>
    2c3c:	a2 e3       	ldi	r26, 0x32	; 50
    2c3e:	fa 2e       	mov	r15, r26
}*/
static inline void HoldDisplayBuffer(const uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
		DisplayBuffer(data);
    2c40:	80 e5       	ldi	r24, 0x50	; 80
    2c42:	92 e0       	ldi	r25, 0x02	; 2
    2c44:	0e 94 41 01 	call	0x282	; 0x282 <DisplayBuffer>
    2c48:	fa 94       	dec	r15
}
}*/
static inline void HoldDisplayBuffer(const uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
    2c4a:	f1 10       	cpse	r15, r1
    2c4c:	f9 cf       	rjmp	.-14     	; 0x2c40 <__stack+0x2341>
    2c4e:	d8 01       	movw	r26, r16
    2c50:	eb 2d       	mov	r30, r11
    2c52:	1d 92       	st	X+, r1
    2c54:	ea 95       	dec	r30
    2c56:	e9 f7       	brne	.-6      	; 0x2c52 <__stack+0x2353>
    2c58:	e7 e6       	ldi	r30, 0x67	; 103
    2c5a:	f1 e0       	ldi	r31, 0x01	; 1
    2c5c:	84 91       	lpm	r24, Z
    2c5e:	80 93 60 02 	sts	0x0260, r24	; 0x800260 <stringbuffer+0x10>
    2c62:	e8 e6       	ldi	r30, 0x68	; 104
    2c64:	f1 e0       	ldi	r31, 0x01	; 1
    2c66:	84 91       	lpm	r24, Z
    2c68:	80 93 61 02 	sts	0x0261, r24	; 0x800261 <stringbuffer+0x11>
    2c6c:	e9 e6       	ldi	r30, 0x69	; 105
    2c6e:	f1 e0       	ldi	r31, 0x01	; 1
    2c70:	84 91       	lpm	r24, Z
    2c72:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <stringbuffer+0x12>
    2c76:	ea e6       	ldi	r30, 0x6A	; 106
    2c78:	f1 e0       	ldi	r31, 0x01	; 1
    2c7a:	84 91       	lpm	r24, Z
    2c7c:	80 93 63 02 	sts	0x0263, r24	; 0x800263 <stringbuffer+0x13>
    2c80:	eb e6       	ldi	r30, 0x6B	; 107
    2c82:	f1 e0       	ldi	r31, 0x01	; 1
    2c84:	84 91       	lpm	r24, Z
    2c86:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <stringbuffer+0x14>
    2c8a:	e0 e3       	ldi	r30, 0x30	; 48
    2c8c:	f1 e0       	ldi	r31, 0x01	; 1
    2c8e:	84 91       	lpm	r24, Z
    2c90:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <stringbuffer+0x16>
    2c94:	e1 e3       	ldi	r30, 0x31	; 49
    2c96:	f1 e0       	ldi	r31, 0x01	; 1
    2c98:	84 91       	lpm	r24, Z
    2c9a:	80 93 67 02 	sts	0x0267, r24	; 0x800267 <stringbuffer+0x17>
    2c9e:	e2 e3       	ldi	r30, 0x32	; 50
    2ca0:	f1 e0       	ldi	r31, 0x01	; 1
    2ca2:	84 91       	lpm	r24, Z
    2ca4:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <stringbuffer+0x18>
    2ca8:	e3 e3       	ldi	r30, 0x33	; 51
    2caa:	f1 e0       	ldi	r31, 0x01	; 1
    2cac:	84 91       	lpm	r24, Z
    2cae:	80 93 69 02 	sts	0x0269, r24	; 0x800269 <stringbuffer+0x19>
    2cb2:	e4 e3       	ldi	r30, 0x34	; 52
    2cb4:	f1 e0       	ldi	r31, 0x01	; 1
    2cb6:	84 91       	lpm	r24, Z
    2cb8:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <stringbuffer+0x1a>
    2cbc:	ed e0       	ldi	r30, 0x0D	; 13
    2cbe:	f1 e0       	ldi	r31, 0x01	; 1
    2cc0:	84 91       	lpm	r24, Z
    2cc2:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <stringbuffer+0x1c>
    2cc6:	ee e0       	ldi	r30, 0x0E	; 14
    2cc8:	f1 e0       	ldi	r31, 0x01	; 1
    2cca:	84 91       	lpm	r24, Z
    2ccc:	80 93 6d 02 	sts	0x026D, r24	; 0x80026d <stringbuffer+0x1d>
    2cd0:	ef e0       	ldi	r30, 0x0F	; 15
    2cd2:	f1 e0       	ldi	r31, 0x01	; 1
    2cd4:	84 91       	lpm	r24, Z
    2cd6:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <stringbuffer+0x1e>
    2cda:	e0 e1       	ldi	r30, 0x10	; 16
    2cdc:	f1 e0       	ldi	r31, 0x01	; 1
    2cde:	84 91       	lpm	r24, Z
    2ce0:	80 93 6f 02 	sts	0x026F, r24	; 0x80026f <stringbuffer+0x1f>
    2ce4:	e1 e1       	ldi	r30, 0x11	; 17
    2ce6:	f1 e0       	ldi	r31, 0x01	; 1
    2ce8:	84 91       	lpm	r24, Z
    2cea:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <stringbuffer+0x20>
    2cee:	e2 e6       	ldi	r30, 0x62	; 98
    2cf0:	f1 e0       	ldi	r31, 0x01	; 1
    2cf2:	84 91       	lpm	r24, Z
    2cf4:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <stringbuffer+0x22>
    2cf8:	e3 e6       	ldi	r30, 0x63	; 99
    2cfa:	f1 e0       	ldi	r31, 0x01	; 1
    2cfc:	84 91       	lpm	r24, Z
    2cfe:	80 93 73 02 	sts	0x0273, r24	; 0x800273 <stringbuffer+0x23>
    2d02:	e4 e6       	ldi	r30, 0x64	; 100
    2d04:	f1 e0       	ldi	r31, 0x01	; 1
    2d06:	84 91       	lpm	r24, Z
    2d08:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <stringbuffer+0x24>
    2d0c:	e5 e6       	ldi	r30, 0x65	; 101
    2d0e:	f1 e0       	ldi	r31, 0x01	; 1
    2d10:	84 91       	lpm	r24, Z
    2d12:	80 93 75 02 	sts	0x0275, r24	; 0x800275 <stringbuffer+0x25>
    2d16:	e6 e6       	ldi	r30, 0x66	; 102
    2d18:	f1 e0       	ldi	r31, 0x01	; 1
    2d1a:	84 91       	lpm	r24, Z
    2d1c:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <stringbuffer+0x26>
    2d20:	e1 e2       	ldi	r30, 0x21	; 33
    2d22:	f1 e0       	ldi	r31, 0x01	; 1
    2d24:	84 91       	lpm	r24, Z
    2d26:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <stringbuffer+0x28>
    2d2a:	e2 e2       	ldi	r30, 0x22	; 34
    2d2c:	f1 e0       	ldi	r31, 0x01	; 1
    2d2e:	84 91       	lpm	r24, Z
    2d30:	80 93 79 02 	sts	0x0279, r24	; 0x800279 <stringbuffer+0x29>
    2d34:	e3 e2       	ldi	r30, 0x23	; 35
    2d36:	f1 e0       	ldi	r31, 0x01	; 1
    2d38:	84 91       	lpm	r24, Z
    2d3a:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <stringbuffer+0x2a>
    2d3e:	e4 e2       	ldi	r30, 0x24	; 36
    2d40:	f1 e0       	ldi	r31, 0x01	; 1
    2d42:	84 91       	lpm	r24, Z
    2d44:	80 93 7b 02 	sts	0x027B, r24	; 0x80027b <stringbuffer+0x2b>
    2d48:	e5 e2       	ldi	r30, 0x25	; 37
    2d4a:	f1 e0       	ldi	r31, 0x01	; 1
    2d4c:	84 91       	lpm	r24, Z
    2d4e:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <stringbuffer+0x2c>
    2d52:	40 e0       	ldi	r20, 0x00	; 0
    2d54:	80 e0       	ldi	r24, 0x00	; 0
    2d56:	90 e0       	ldi	r25, 0x00	; 0
{
	uint8_t index, begin, end = 0;
	//uint8_t *bf = buffer;
	for(index = 0; index < MT_SIZE; index++)
	{
		for(begin = 0; begin <= index; begin++) (*(bf + begin) = 0x00);
    2d58:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <bf>
    2d5c:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <bf+0x1>
    2d60:	e8 0f       	add	r30, r24
    2d62:	f9 1f       	adc	r31, r25
    2d64:	10 82       	st	Z, r1
    2d66:	01 96       	adiw	r24, 0x01	; 1
    2d68:	48 17       	cp	r20, r24
    2d6a:	b0 f7       	brcc	.-20     	; 0x2d58 <__stack+0x2459>
    2d6c:	54 2f       	mov	r21, r20
		for(end = index; end < MT_SIZE; end++) (*(bf + end) = (*((p+(end)))));
    2d6e:	85 2f       	mov	r24, r21
    2d70:	90 e0       	ldi	r25, 0x00	; 0
    2d72:	fc 01       	movw	r30, r24
    2d74:	e0 5b       	subi	r30, 0xB0	; 176
    2d76:	fd 4f       	sbci	r31, 0xFD	; 253
    2d78:	20 81       	ld	r18, Z
    2d7a:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <bf>
    2d7e:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <bf+0x1>
    2d82:	fb 01       	movw	r30, r22
    2d84:	e8 0f       	add	r30, r24
    2d86:	f9 1f       	adc	r31, r25
    2d88:	20 83       	st	Z, r18
    2d8a:	5f 5f       	subi	r21, 0xFF	; 255
    2d8c:	50 34       	cpi	r21, 0x40	; 64
    2d8e:	79 f7       	brne	.-34     	; 0x2d6e <__stack+0x246f>
    2d90:	fa e0       	ldi	r31, 0x0A	; 10
    2d92:	ff 2e       	mov	r15, r31
    2d94:	5f 2d       	mov	r21, r15
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    2d96:	b4 e0       	ldi	r27, 0x04	; 4
    2d98:	8b 2e       	mov	r8, r27
    2d9a:	b1 e0       	ldi	r27, 0x01	; 1
    2d9c:	9b 2e       	mov	r9, r27
    2d9e:	20 e0       	ldi	r18, 0x00	; 0
    2da0:	30 e0       	ldi	r19, 0x00	; 0
    2da2:	91 e0       	ldi	r25, 0x01	; 1
    2da4:	02 2e       	mov	r0, r18
    2da6:	01 c0       	rjmp	.+2      	; 0x2daa <__stack+0x24ab>
    2da8:	99 0f       	add	r25, r25
    2daa:	0a 94       	dec	r0
    2dac:	ea f7       	brpl	.-6      	; 0x2da8 <__stack+0x24a9>
{
	uint8_t index, begin, end = 0;
	//uint8_t *bf = buffer;
	for(index = 0; index < MT_SIZE; index++)
	{
		for(begin = 0; begin <= index; begin++) (*(bf + begin) = 0x00);
    2dae:	8f e3       	ldi	r24, 0x3F	; 63
    2db0:	5a c0       	rjmp	.+180    	; 0x2e66 <__stack+0x2567>
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2db2:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2db4:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2db6:	5b 98       	cbi	0x0b, 3	; 11
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
			pinWrite(latch_pin, LOW);
			for(bit = 0; bit <= FONT_HEIGHT ; bit++){
				pinWrite(data_pin,((*(p+pos)) & (1 << byte)));
    2db8:	ef ef       	ldi	r30, 0xFF	; 255
    2dba:	e8 0f       	add	r30, r24
    2dbc:	f0 e0       	ldi	r31, 0x00	; 0
    2dbe:	e0 57       	subi	r30, 0x70	; 112
    2dc0:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    2dc2:	60 81       	ld	r22, Z
    2dc4:	69 23       	and	r22, r25
    2dc6:	09 f0       	breq	.+2      	; 0x2dca <__stack+0x24cb>
    2dc8:	e7 c1       	rjmp	.+974    	; 0x3198 <__stack+0x2899>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2dca:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2dcc:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2dce:	5b 98       	cbi	0x0b, 3	; 11
    2dd0:	ee ef       	ldi	r30, 0xFE	; 254
    2dd2:	e8 0f       	add	r30, r24
    2dd4:	f0 e0       	ldi	r31, 0x00	; 0
    2dd6:	e0 57       	subi	r30, 0x70	; 112
    2dd8:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    2dda:	60 81       	ld	r22, Z
    2ddc:	69 23       	and	r22, r25
    2dde:	09 f0       	breq	.+2      	; 0x2de2 <__stack+0x24e3>
    2de0:	d9 c1       	rjmp	.+946    	; 0x3194 <__stack+0x2895>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2de2:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2de4:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2de6:	5b 98       	cbi	0x0b, 3	; 11
    2de8:	ed ef       	ldi	r30, 0xFD	; 253
    2dea:	e8 0f       	add	r30, r24
    2dec:	f0 e0       	ldi	r31, 0x00	; 0
    2dee:	e0 57       	subi	r30, 0x70	; 112
    2df0:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    2df2:	60 81       	ld	r22, Z
    2df4:	69 23       	and	r22, r25
    2df6:	09 f0       	breq	.+2      	; 0x2dfa <__stack+0x24fb>
    2df8:	cb c1       	rjmp	.+918    	; 0x3190 <__stack+0x2891>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2dfa:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2dfc:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2dfe:	5b 98       	cbi	0x0b, 3	; 11
    2e00:	ec ef       	ldi	r30, 0xFC	; 252
    2e02:	e8 0f       	add	r30, r24
    2e04:	f0 e0       	ldi	r31, 0x00	; 0
    2e06:	e0 57       	subi	r30, 0x70	; 112
    2e08:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    2e0a:	60 81       	ld	r22, Z
    2e0c:	69 23       	and	r22, r25
    2e0e:	09 f0       	breq	.+2      	; 0x2e12 <__stack+0x2513>
    2e10:	bd c1       	rjmp	.+890    	; 0x318c <__stack+0x288d>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2e12:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2e14:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2e16:	5b 98       	cbi	0x0b, 3	; 11
    2e18:	eb ef       	ldi	r30, 0xFB	; 251
    2e1a:	e8 0f       	add	r30, r24
    2e1c:	f0 e0       	ldi	r31, 0x00	; 0
    2e1e:	e0 57       	subi	r30, 0x70	; 112
    2e20:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    2e22:	60 81       	ld	r22, Z
    2e24:	69 23       	and	r22, r25
    2e26:	09 f0       	breq	.+2      	; 0x2e2a <__stack+0x252b>
    2e28:	af c1       	rjmp	.+862    	; 0x3188 <__stack+0x2889>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2e2a:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2e2c:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2e2e:	5b 98       	cbi	0x0b, 3	; 11
    2e30:	ea ef       	ldi	r30, 0xFA	; 250
    2e32:	e8 0f       	add	r30, r24
    2e34:	f0 e0       	ldi	r31, 0x00	; 0
    2e36:	e0 57       	subi	r30, 0x70	; 112
    2e38:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    2e3a:	60 81       	ld	r22, Z
    2e3c:	69 23       	and	r22, r25
    2e3e:	09 f0       	breq	.+2      	; 0x2e42 <__stack+0x2543>
    2e40:	a1 c1       	rjmp	.+834    	; 0x3184 <__stack+0x2885>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2e42:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2e44:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2e46:	5b 98       	cbi	0x0b, 3	; 11
    2e48:	e9 ef       	ldi	r30, 0xF9	; 249
    2e4a:	e8 0f       	add	r30, r24
    2e4c:	f0 e0       	ldi	r31, 0x00	; 0
    2e4e:	e0 57       	subi	r30, 0x70	; 112
    2e50:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    2e52:	60 81       	ld	r22, Z
    2e54:	69 23       	and	r22, r25
    2e56:	91 f5       	brne	.+100    	; 0x2ebc <__stack+0x25bd>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2e58:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2e5a:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2e5c:	5b 98       	cbi	0x0b, 3	; 11
				//toggle the clock pin
				pinWrite(clock_pin, HIGH);
				pinWrite(clock_pin, LOW);
				pos--;
    2e5e:	88 50       	subi	r24, 0x08	; 8
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2e60:	5a 9a       	sbi	0x0b, 2	; 11
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
    2e62:	8f 3f       	cpi	r24, 0xFF	; 255
    2e64:	91 f1       	breq	.+100    	; 0x2eca <__stack+0x25cb>
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2e66:	5a 98       	cbi	0x0b, 2	; 11
			pinWrite(latch_pin, LOW);
			for(bit = 0; bit <= FONT_HEIGHT ; bit++){
				pinWrite(data_pin,((*(p+pos)) & (1 << byte)));
    2e68:	e8 2f       	mov	r30, r24
    2e6a:	f0 e0       	ldi	r31, 0x00	; 0
    2e6c:	e0 57       	subi	r30, 0x70	; 112
    2e6e:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    2e70:	60 81       	ld	r22, Z
    2e72:	69 23       	and	r22, r25
    2e74:	09 f4       	brne	.+2      	; 0x2e78 <__stack+0x2579>
    2e76:	9d cf       	rjmp	.-198    	; 0x2db2 <__stack+0x24b3>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2e78:	59 9a       	sbi	0x0b, 1	; 11
    2e7a:	9c cf       	rjmp	.-200    	; 0x2db4 <__stack+0x24b5>
    2e7c:	59 9a       	sbi	0x0b, 1	; 11
    2e7e:	a3 cd       	rjmp	.-1210   	; 0x29c6 <__stack+0x20c7>
    2e80:	59 9a       	sbi	0x0b, 1	; 11
    2e82:	95 cd       	rjmp	.-1238   	; 0x29ae <__stack+0x20af>
    2e84:	59 9a       	sbi	0x0b, 1	; 11
    2e86:	87 cd       	rjmp	.-1266   	; 0x2996 <__stack+0x2097>
    2e88:	59 9a       	sbi	0x0b, 1	; 11
    2e8a:	79 cd       	rjmp	.-1294   	; 0x297e <__stack+0x207f>
    2e8c:	59 9a       	sbi	0x0b, 1	; 11
    2e8e:	6b cd       	rjmp	.-1322   	; 0x2966 <__stack+0x2067>
    2e90:	59 9a       	sbi	0x0b, 1	; 11
    2e92:	5d cd       	rjmp	.-1350   	; 0x294e <__stack+0x204f>
    2e94:	b7 e0       	ldi	r27, 0x07	; 7
    2e96:	eb 9f       	mul	r30, r27
    2e98:	f0 01       	movw	r30, r0
    2e9a:	11 24       	eor	r1, r1
    2e9c:	ec 5b       	subi	r30, 0xBC	; 188
    2e9e:	fe 4f       	sbci	r31, 0xFE	; 254
    2ea0:	a2 81       	ldd	r26, Z+2	; 0x02
    2ea2:	b3 81       	ldd	r27, Z+3	; 0x03
    2ea4:	4c 91       	ld	r20, X
    2ea6:	21 e0       	ldi	r18, 0x01	; 1
    2ea8:	30 e0       	ldi	r19, 0x00	; 0
    2eaa:	06 80       	ldd	r0, Z+6	; 0x06
    2eac:	02 c0       	rjmp	.+4      	; 0x2eb2 <__stack+0x25b3>
    2eae:	22 0f       	add	r18, r18
    2eb0:	33 1f       	adc	r19, r19
    2eb2:	0a 94       	dec	r0
    2eb4:	e2 f7       	brpl	.-8      	; 0x2eae <__stack+0x25af>
    2eb6:	24 2b       	or	r18, r20
    2eb8:	2c 93       	st	X, r18
    2eba:	e1 cd       	rjmp	.-1086   	; 0x2a7e <__stack+0x217f>
    2ebc:	59 9a       	sbi	0x0b, 1	; 11
    2ebe:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2ec0:	5b 98       	cbi	0x0b, 3	; 11
				//toggle the clock pin
				pinWrite(clock_pin, HIGH);
				pinWrite(clock_pin, LOW);
				pos--;
    2ec2:	88 50       	subi	r24, 0x08	; 8
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2ec4:	5a 9a       	sbi	0x0b, 2	; 11
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
    2ec6:	8f 3f       	cpi	r24, 0xFF	; 255
    2ec8:	71 f6       	brne	.-100    	; 0x2e66 <__stack+0x2567>
    2eca:	a4 e0       	ldi	r26, 0x04	; 4
    2ecc:	b1 e0       	ldi	r27, 0x01	; 1
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    2ece:	ed 91       	ld	r30, X+
    2ed0:	ee 23       	and	r30, r30
    2ed2:	09 f1       	breq	.+66     	; 0x2f16 <__stack+0x2617>
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    2ed4:	ec 3c       	cpi	r30, 0xCC	; 204
    2ed6:	d8 f7       	brcc	.-10     	; 0x2ece <__stack+0x25cf>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2ed8:	67 e0       	ldi	r22, 0x07	; 7
    2eda:	e6 9f       	mul	r30, r22
    2edc:	f0 01       	movw	r30, r0
    2ede:	11 24       	eor	r1, r1
    2ee0:	cf 01       	movw	r24, r30
    2ee2:	8c 5b       	subi	r24, 0xBC	; 188
    2ee4:	9e 4f       	sbci	r25, 0xFE	; 254
    2ee6:	2c 01       	movw	r4, r24
    2ee8:	fc 01       	movw	r30, r24
    2eea:	62 81       	ldd	r22, Z+2	; 0x02
    2eec:	73 81       	ldd	r23, Z+3	; 0x03
    2eee:	fb 01       	movw	r30, r22
    2ef0:	90 81       	ld	r25, Z
    2ef2:	ee 24       	eor	r14, r14
    2ef4:	e3 94       	inc	r14
    2ef6:	f1 2c       	mov	r15, r1
    2ef8:	f2 01       	movw	r30, r4
    2efa:	06 80       	ldd	r0, Z+6	; 0x06
    2efc:	02 c0       	rjmp	.+4      	; 0x2f02 <__stack+0x2603>
    2efe:	ee 0c       	add	r14, r14
    2f00:	ff 1c       	adc	r15, r15
    2f02:	0a 94       	dec	r0
    2f04:	e2 f7       	brpl	.-8      	; 0x2efe <__stack+0x25ff>
    2f06:	8e 2d       	mov	r24, r14
    2f08:	80 95       	com	r24
    2f0a:	89 23       	and	r24, r25
    2f0c:	fb 01       	movw	r30, r22
    2f0e:	80 83       	st	Z, r24
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    2f10:	ed 91       	ld	r30, X+
    2f12:	e1 11       	cpse	r30, r1
    2f14:	df cf       	rjmp	.-66     	; 0x2ed4 <__stack+0x25d5>
/* Multiplexing method                                                  */
/************************************************************************/
static inline void MultiPlex(uint8_t *pin)
{
	pinsMultiWrite(plex_pins, LOW);
	pinWrite(plex_pins[*pin], HIGH);
    2f16:	d4 01       	movw	r26, r8
    2f18:	ed 91       	ld	r30, X+
    2f1a:	4d 01       	movw	r8, r26
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    2f1c:	ec 3c       	cpi	r30, 0xCC	; 204
    2f1e:	08 f4       	brcc	.+2      	; 0x2f22 <__stack+0x2623>
    2f20:	3d c1       	rjmp	.+634    	; 0x319c <__stack+0x289d>
	delay(delayms);
    2f22:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    2f26:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
/*  delay                                                               */
/************************************************************************/
int delayms = 1;
static inline void delay(int dl)
{
	while(dl >= 0)
    2f2a:	97 fd       	sbrc	r25, 7
    2f2c:	08 c0       	rjmp	.+16     	; 0x2f3e <__stack+0x263f>
    2f2e:	ef e9       	ldi	r30, 0x9F	; 159
    2f30:	ff e0       	ldi	r31, 0x0F	; 15
    2f32:	31 97       	sbiw	r30, 0x01	; 1
    2f34:	f1 f7       	brne	.-4      	; 0x2f32 <__stack+0x2633>
    2f36:	00 c0       	rjmp	.+0      	; 0x2f38 <__stack+0x2639>
    2f38:	00 00       	nop
	{
		_delay_ms(1);
		dl--;
    2f3a:	01 97       	sbiw	r24, 0x01	; 1
    2f3c:	c0 f7       	brcc	.-16     	; 0x2f2e <__stack+0x262f>
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
    2f3e:	a4 e0       	ldi	r26, 0x04	; 4
    2f40:	b1 e0       	ldi	r27, 0x01	; 1
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    2f42:	ed 91       	ld	r30, X+
    2f44:	ee 23       	and	r30, r30
    2f46:	09 f1       	breq	.+66     	; 0x2f8a <__stack+0x268b>
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    2f48:	ec 3c       	cpi	r30, 0xCC	; 204
    2f4a:	d8 f7       	brcc	.-10     	; 0x2f42 <__stack+0x2643>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2f4c:	67 e0       	ldi	r22, 0x07	; 7
    2f4e:	e6 9f       	mul	r30, r22
    2f50:	f0 01       	movw	r30, r0
    2f52:	11 24       	eor	r1, r1
    2f54:	cf 01       	movw	r24, r30
    2f56:	8c 5b       	subi	r24, 0xBC	; 188
    2f58:	9e 4f       	sbci	r25, 0xFE	; 254
    2f5a:	2c 01       	movw	r4, r24
    2f5c:	fc 01       	movw	r30, r24
    2f5e:	62 81       	ldd	r22, Z+2	; 0x02
    2f60:	73 81       	ldd	r23, Z+3	; 0x03
    2f62:	fb 01       	movw	r30, r22
    2f64:	90 81       	ld	r25, Z
    2f66:	ee 24       	eor	r14, r14
    2f68:	e3 94       	inc	r14
    2f6a:	f1 2c       	mov	r15, r1
    2f6c:	f2 01       	movw	r30, r4
    2f6e:	06 80       	ldd	r0, Z+6	; 0x06
    2f70:	02 c0       	rjmp	.+4      	; 0x2f76 <__stack+0x2677>
    2f72:	ee 0c       	add	r14, r14
    2f74:	ff 1c       	adc	r15, r15
    2f76:	0a 94       	dec	r0
    2f78:	e2 f7       	brpl	.-8      	; 0x2f72 <__stack+0x2673>
    2f7a:	8e 2d       	mov	r24, r14
    2f7c:	80 95       	com	r24
    2f7e:	89 23       	and	r24, r25
    2f80:	fb 01       	movw	r30, r22
    2f82:	80 83       	st	Z, r24
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    2f84:	ed 91       	ld	r30, X+
    2f86:	e1 11       	cpse	r30, r1
    2f88:	df cf       	rjmp	.-66     	; 0x2f48 <__stack+0x2649>
    2f8a:	89 e0       	ldi	r24, 0x09	; 9
    2f8c:	90 e0       	ldi	r25, 0x00	; 0
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2f8e:	5a 98       	cbi	0x0b, 2	; 11
    2f90:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2f92:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2f94:	5b 98       	cbi	0x0b, 3	; 11
    2f96:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2f98:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2f9a:	5b 98       	cbi	0x0b, 3	; 11
    2f9c:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2f9e:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2fa0:	5b 98       	cbi	0x0b, 3	; 11
    2fa2:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2fa4:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2fa6:	5b 98       	cbi	0x0b, 3	; 11
    2fa8:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2faa:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2fac:	5b 98       	cbi	0x0b, 3	; 11
    2fae:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2fb0:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2fb2:	5b 98       	cbi	0x0b, 3	; 11
    2fb4:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2fb6:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2fb8:	5b 98       	cbi	0x0b, 3	; 11
    2fba:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2fbc:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2fbe:	5b 98       	cbi	0x0b, 3	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2fc0:	5a 9a       	sbi	0x0b, 2	; 11
    2fc2:	01 97       	sbiw	r24, 0x01	; 1
/* Clear Display                                                        */
/************************************************************************/
static inline void Clear(){
	int x, y = 0;
	pinsMultiWrite(plex_pins, LOW);
	for(x = 0; x < (SH_REG + 1); x++) {
    2fc4:	21 f7       	brne	.-56     	; 0x2f8e <__stack+0x268f>
    2fc6:	2f 5f       	subi	r18, 0xFF	; 255
    2fc8:	3f 4f       	sbci	r19, 0xFF	; 255
{
	uint8_t byte, index, bit = 0;
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
    2fca:	27 30       	cpi	r18, 0x07	; 7
    2fcc:	31 05       	cpc	r19, r1
    2fce:	09 f0       	breq	.+2      	; 0x2fd2 <__stack+0x26d3>
    2fd0:	e8 ce       	rjmp	.-560    	; 0x2da2 <__stack+0x24a3>
    2fd2:	51 50       	subi	r21, 0x01	; 1
}
}*/
static inline void HoldDisplayBuffer(const uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
    2fd4:	09 f0       	breq	.+2      	; 0x2fd8 <__stack+0x26d9>
    2fd6:	df ce       	rjmp	.-578    	; 0x2d96 <__stack+0x2497>
/************************************************************************/
void DeleteRight(const uint8_t *p, uint8_t time)
{
	uint8_t index, begin, end = 0;
	//uint8_t *bf = buffer;
	for(index = 0; index < MT_SIZE; index++)
    2fd8:	4f 5f       	subi	r20, 0xFF	; 255
    2fda:	40 34       	cpi	r20, 0x40	; 64
    2fdc:	09 f0       	breq	.+2      	; 0x2fe0 <__stack+0x26e1>
    2fde:	ba ce       	rjmp	.-652    	; 0x2d54 <__stack+0x2455>
    2fe0:	a1 ed       	ldi	r26, 0xD1	; 209
    2fe2:	b2 e0       	ldi	r27, 0x02	; 2
    2fe4:	e4 2f       	mov	r30, r20
    2fe6:	1d 92       	st	X+, r1
    2fe8:	ea 95       	dec	r30
    2fea:	e9 f7       	brne	.-6      	; 0x2fe6 <__stack+0x26e7>
    2fec:	a0 e1       	ldi	r26, 0x10	; 16
    2fee:	b2 e0       	ldi	r27, 0x02	; 2
    2ff0:	1d 92       	st	X+, r1
    2ff2:	4a 95       	dec	r20
    2ff4:	e9 f7       	brne	.-6      	; 0x2ff0 <__stack+0x26f1>
    2ff6:	aa e2       	ldi	r26, 0x2A	; 42
    2ff8:	8a 2e       	mov	r8, r26
    2ffa:	a1 e0       	ldi	r26, 0x01	; 1
    2ffc:	9a 2e       	mov	r9, r26
void ScrollLongLeft(const char *ch, uint8_t time)
{
	uint8_t *chbuffer;// = CharBytes(ch++);
	InitializeBuffers();
	int len = 0;
	while(*ch){
    2ffe:	d4 01       	movw	r26, r8
    3000:	8d 91       	ld	r24, X+
    3002:	4d 01       	movw	r8, r26
    3004:	88 23       	and	r24, r24
    3006:	09 f4       	brne	.+2      	; 0x300a <__stack+0x270b>
    3008:	67 c1       	rjmp	.+718    	; 0x32d8 <__stack+0x29d9>
/* returns the index of the first byte of the requested character       */
/************************************************************************/
uint8_t CharStart(const char *p)
{
	/*if(*p == ' ') return 0;
	else*/ return (uint8_t) (( *p - ' '));
    300a:	80 52       	subi	r24, 0x20	; 32
/************************************************************************/
/* return char bytes                                                    */
/************************************************************************/
static inline uint8_t *CharBytes(const char *ch)
{
	unsigned int index = (CharStart(ch) * FONT_WIDTH);
    300c:	b5 e0       	ldi	r27, 0x05	; 5
    300e:	8b 9f       	mul	r24, r27
    3010:	c0 01       	movw	r24, r0
    3012:	11 24       	eor	r1, r1
	int len = 0;
	ClearCharBuffer();
	for(len=0; len<FONT_WIDTH; len++){
		charbuffer[len] = (uint8_t)(pgm_read_byte((font_5x7 + index)));
    3014:	fc 01       	movw	r30, r24
    3016:	e8 59       	subi	r30, 0x98	; 152
    3018:	ff 4f       	sbci	r31, 0xFF	; 255
    301a:	e4 91       	lpm	r30, Z
    301c:	e0 93 11 03 	sts	0x0311, r30	; 0x800311 <charbuffer>
    3020:	fc 01       	movw	r30, r24
    3022:	e7 59       	subi	r30, 0x97	; 151
    3024:	ff 4f       	sbci	r31, 0xFF	; 255
    3026:	e4 91       	lpm	r30, Z
    3028:	e0 93 12 03 	sts	0x0312, r30	; 0x800312 <charbuffer+0x1>
    302c:	fc 01       	movw	r30, r24
    302e:	e6 59       	subi	r30, 0x96	; 150
    3030:	ff 4f       	sbci	r31, 0xFF	; 255
    3032:	e4 91       	lpm	r30, Z
    3034:	e0 93 13 03 	sts	0x0313, r30	; 0x800313 <charbuffer+0x2>
    3038:	fc 01       	movw	r30, r24
    303a:	e5 59       	subi	r30, 0x95	; 149
    303c:	ff 4f       	sbci	r31, 0xFF	; 255
    303e:	e4 91       	lpm	r30, Z
    3040:	e0 93 14 03 	sts	0x0314, r30	; 0x800314 <charbuffer+0x3>
    3044:	fc 01       	movw	r30, r24
    3046:	e4 59       	subi	r30, 0x94	; 148
    3048:	ff 4f       	sbci	r31, 0xFF	; 255
    304a:	84 91       	lpm	r24, Z
    304c:	80 93 15 03 	sts	0x0315, r24	; 0x800315 <charbuffer+0x4>
    3050:	f1 e1       	ldi	r31, 0x11	; 17
    3052:	ef 2e       	mov	r14, r31
    3054:	f3 e0       	ldi	r31, 0x03	; 3
    3056:	ff 2e       	mov	r15, r31
		chbuffer = CharBytes(ch++);
		for(len =0; len<FONT_WIDTH; len++){
			HoldDisplayBuffer(ArrayShiftRightInsert(*(chbuffer+len)), time);
    3058:	f7 01       	movw	r30, r14
    305a:	91 91       	ld	r25, Z+
    305c:	7f 01       	movw	r14, r30
    305e:	80 e4       	ldi	r24, 0x40	; 64
    3060:	e1 ed       	ldi	r30, 0xD1	; 209
    3062:	f2 e0       	ldi	r31, 0x02	; 2
    3064:	a0 e1       	ldi	r26, 0x10	; 16
    3066:	b2 e0       	ldi	r27, 0x02	; 2
    3068:	01 90       	ld	r0, Z+
    306a:	0d 92       	st	X+, r0
    306c:	8a 95       	dec	r24
    306e:	e1 f7       	brne	.-8      	; 0x3068 <__stack+0x2769>
/************************************************************************/
uint8_t *ArrayShiftRightInsert(const uint8_t data)
{
	uint8_t index = MT_SIZE -1;
	FillCurrentArray();
	updatedBufferArray[index--] = data;
    3070:	90 93 10 03 	sts	0x0310, r25	; 0x800310 <updatedBufferArray+0x3f>
	for(; index>=0; index--){
		updatedBufferArray[index] = currentArray[index+1];
    3074:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <__data_end+0x3f>
    3078:	80 93 0f 03 	sts	0x030F, r24	; 0x80030f <updatedBufferArray+0x3e>
/************************************************************************/
uint8_t *ArrayShiftRightInsert(const uint8_t data)
{
	uint8_t index = MT_SIZE -1;
	FillCurrentArray();
	updatedBufferArray[index--] = data;
    307c:	2e e3       	ldi	r18, 0x3E	; 62
	for(; index>=0; index--){
    307e:	21 50       	subi	r18, 0x01	; 1
		updatedBufferArray[index] = currentArray[index+1];
    3080:	82 2f       	mov	r24, r18
    3082:	90 e0       	ldi	r25, 0x00	; 0
    3084:	fc 01       	movw	r30, r24
    3086:	ef 52       	subi	r30, 0x2F	; 47
    3088:	fd 4f       	sbci	r31, 0xFD	; 253
    308a:	dc 01       	movw	r26, r24
    308c:	a0 5f       	subi	r26, 0xF0	; 240
    308e:	bd 4f       	sbci	r27, 0xFD	; 253
    3090:	11 96       	adiw	r26, 0x01	; 1
    3092:	8c 91       	ld	r24, X
    3094:	80 83       	st	Z, r24
		if(index==0) break;
    3096:	21 11       	cpse	r18, r1
    3098:	f2 cf       	rjmp	.-28     	; 0x307e <__stack+0x277f>
    309a:	aa e0       	ldi	r26, 0x0A	; 10
    309c:	aa 2e       	mov	r10, r26
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    309e:	24 e0       	ldi	r18, 0x04	; 4
    30a0:	31 e0       	ldi	r19, 0x01	; 1
    30a2:	80 e0       	ldi	r24, 0x00	; 0
    30a4:	90 e0       	ldi	r25, 0x00	; 0
    30a6:	51 e0       	ldi	r21, 0x01	; 1
    30a8:	08 2e       	mov	r0, r24
    30aa:	01 c0       	rjmp	.+2      	; 0x30ae <__stack+0x27af>
    30ac:	55 0f       	add	r21, r21
    30ae:	0a 94       	dec	r0
    30b0:	ea f7       	brpl	.-6      	; 0x30ac <__stack+0x27ad>
/************************************************************************/
uint8_t *ArrayShiftRightInsert(const uint8_t data)
{
	uint8_t index = MT_SIZE -1;
	FillCurrentArray();
	updatedBufferArray[index--] = data;
    30b2:	4f e3       	ldi	r20, 0x3F	; 63
    30b4:	5c c0       	rjmp	.+184    	; 0x316e <__stack+0x286f>
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    30b6:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    30b8:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    30ba:	5b 98       	cbi	0x0b, 3	; 11
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
			pinWrite(latch_pin, LOW);
			for(bit = 0; bit <= FONT_HEIGHT ; bit++){
				pinWrite(data_pin,((*(p+pos)) & (1 << byte)));
    30bc:	ef ef       	ldi	r30, 0xFF	; 255
    30be:	e4 0f       	add	r30, r20
    30c0:	f0 e0       	ldi	r31, 0x00	; 0
    30c2:	ef 52       	subi	r30, 0x2F	; 47
    30c4:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    30c6:	60 81       	ld	r22, Z
    30c8:	65 23       	and	r22, r21
    30ca:	09 f0       	breq	.+2      	; 0x30ce <__stack+0x27cf>
    30cc:	da c2       	rjmp	.+1460   	; 0x3682 <__stack+0x2d83>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    30ce:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    30d0:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    30d2:	5b 98       	cbi	0x0b, 3	; 11
    30d4:	ee ef       	ldi	r30, 0xFE	; 254
    30d6:	e4 0f       	add	r30, r20
    30d8:	f0 e0       	ldi	r31, 0x00	; 0
    30da:	ef 52       	subi	r30, 0x2F	; 47
    30dc:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    30de:	60 81       	ld	r22, Z
    30e0:	65 23       	and	r22, r21
    30e2:	09 f0       	breq	.+2      	; 0x30e6 <__stack+0x27e7>
    30e4:	cc c2       	rjmp	.+1432   	; 0x367e <__stack+0x2d7f>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    30e6:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    30e8:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    30ea:	5b 98       	cbi	0x0b, 3	; 11
    30ec:	ed ef       	ldi	r30, 0xFD	; 253
    30ee:	e4 0f       	add	r30, r20
    30f0:	f0 e0       	ldi	r31, 0x00	; 0
    30f2:	ef 52       	subi	r30, 0x2F	; 47
    30f4:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    30f6:	60 81       	ld	r22, Z
    30f8:	65 23       	and	r22, r21
    30fa:	09 f0       	breq	.+2      	; 0x30fe <__stack+0x27ff>
    30fc:	be c2       	rjmp	.+1404   	; 0x367a <__stack+0x2d7b>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    30fe:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    3100:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    3102:	5b 98       	cbi	0x0b, 3	; 11
    3104:	ec ef       	ldi	r30, 0xFC	; 252
    3106:	e4 0f       	add	r30, r20
    3108:	f0 e0       	ldi	r31, 0x00	; 0
    310a:	ef 52       	subi	r30, 0x2F	; 47
    310c:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    310e:	60 81       	ld	r22, Z
    3110:	65 23       	and	r22, r21
    3112:	09 f0       	breq	.+2      	; 0x3116 <__stack+0x2817>
    3114:	b0 c2       	rjmp	.+1376   	; 0x3676 <__stack+0x2d77>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    3116:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    3118:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    311a:	5b 98       	cbi	0x0b, 3	; 11
    311c:	eb ef       	ldi	r30, 0xFB	; 251
    311e:	e4 0f       	add	r30, r20
    3120:	f0 e0       	ldi	r31, 0x00	; 0
    3122:	ef 52       	subi	r30, 0x2F	; 47
    3124:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    3126:	60 81       	ld	r22, Z
    3128:	65 23       	and	r22, r21
    312a:	09 f0       	breq	.+2      	; 0x312e <__stack+0x282f>
    312c:	a2 c2       	rjmp	.+1348   	; 0x3672 <__stack+0x2d73>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    312e:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    3130:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    3132:	5b 98       	cbi	0x0b, 3	; 11
    3134:	ea ef       	ldi	r30, 0xFA	; 250
    3136:	e4 0f       	add	r30, r20
    3138:	f0 e0       	ldi	r31, 0x00	; 0
    313a:	ef 52       	subi	r30, 0x2F	; 47
    313c:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    313e:	60 81       	ld	r22, Z
    3140:	65 23       	and	r22, r21
    3142:	09 f0       	breq	.+2      	; 0x3146 <__stack+0x2847>
    3144:	94 c2       	rjmp	.+1320   	; 0x366e <__stack+0x2d6f>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    3146:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    3148:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    314a:	5b 98       	cbi	0x0b, 3	; 11
    314c:	e9 ef       	ldi	r30, 0xF9	; 249
    314e:	e4 0f       	add	r30, r20
    3150:	f0 e0       	ldi	r31, 0x00	; 0
    3152:	ef 52       	subi	r30, 0x2F	; 47
    3154:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    3156:	60 81       	ld	r22, Z
    3158:	65 23       	and	r22, r21
    315a:	09 f0       	breq	.+2      	; 0x315e <__stack+0x285f>
    315c:	5c c1       	rjmp	.+696    	; 0x3416 <__stack+0x2b17>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    315e:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    3160:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    3162:	5b 98       	cbi	0x0b, 3	; 11
				//toggle the clock pin
				pinWrite(clock_pin, HIGH);
				pinWrite(clock_pin, LOW);
				pos--;
    3164:	48 50       	subi	r20, 0x08	; 8
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    3166:	5a 9a       	sbi	0x0b, 2	; 11
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
    3168:	4f 3f       	cpi	r20, 0xFF	; 255
    316a:	09 f4       	brne	.+2      	; 0x316e <__stack+0x286f>
    316c:	5c c1       	rjmp	.+696    	; 0x3426 <__stack+0x2b27>
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    316e:	5a 98       	cbi	0x0b, 2	; 11
			pinWrite(latch_pin, LOW);
			for(bit = 0; bit <= FONT_HEIGHT ; bit++){
				pinWrite(data_pin,((*(p+pos)) & (1 << byte)));
    3170:	e4 2f       	mov	r30, r20
    3172:	f0 e0       	ldi	r31, 0x00	; 0
    3174:	ef 52       	subi	r30, 0x2F	; 47
    3176:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    3178:	60 81       	ld	r22, Z
    317a:	65 23       	and	r22, r21
    317c:	09 f4       	brne	.+2      	; 0x3180 <__stack+0x2881>
    317e:	9b cf       	rjmp	.-202    	; 0x30b6 <__stack+0x27b7>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    3180:	59 9a       	sbi	0x0b, 1	; 11
    3182:	9a cf       	rjmp	.-204    	; 0x30b8 <__stack+0x27b9>
    3184:	59 9a       	sbi	0x0b, 1	; 11
    3186:	5e ce       	rjmp	.-836    	; 0x2e44 <__stack+0x2545>
    3188:	59 9a       	sbi	0x0b, 1	; 11
    318a:	50 ce       	rjmp	.-864    	; 0x2e2c <__stack+0x252d>
    318c:	59 9a       	sbi	0x0b, 1	; 11
    318e:	42 ce       	rjmp	.-892    	; 0x2e14 <__stack+0x2515>
    3190:	59 9a       	sbi	0x0b, 1	; 11
    3192:	34 ce       	rjmp	.-920    	; 0x2dfc <__stack+0x24fd>
    3194:	59 9a       	sbi	0x0b, 1	; 11
    3196:	26 ce       	rjmp	.-948    	; 0x2de4 <__stack+0x24e5>
    3198:	59 9a       	sbi	0x0b, 1	; 11
    319a:	18 ce       	rjmp	.-976    	; 0x2dcc <__stack+0x24cd>
    319c:	b7 e0       	ldi	r27, 0x07	; 7
    319e:	eb 9f       	mul	r30, r27
    31a0:	f0 01       	movw	r30, r0
    31a2:	11 24       	eor	r1, r1
    31a4:	ec 5b       	subi	r30, 0xBC	; 188
    31a6:	fe 4f       	sbci	r31, 0xFE	; 254
    31a8:	a2 81       	ldd	r26, Z+2	; 0x02
    31aa:	b3 81       	ldd	r27, Z+3	; 0x03
    31ac:	6c 91       	ld	r22, X
    31ae:	81 e0       	ldi	r24, 0x01	; 1
    31b0:	90 e0       	ldi	r25, 0x00	; 0
    31b2:	06 80       	ldd	r0, Z+6	; 0x06
    31b4:	02 c0       	rjmp	.+4      	; 0x31ba <__stack+0x28bb>
    31b6:	88 0f       	add	r24, r24
    31b8:	99 1f       	adc	r25, r25
    31ba:	0a 94       	dec	r0
    31bc:	e2 f7       	brpl	.-8      	; 0x31b6 <__stack+0x28b7>
    31be:	86 2b       	or	r24, r22
    31c0:	8c 93       	st	X, r24
    31c2:	af ce       	rjmp	.-674    	; 0x2f22 <__stack+0x2623>
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
    31c4:	a4 e0       	ldi	r26, 0x04	; 4
    31c6:	b1 e0       	ldi	r27, 0x01	; 1
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    31c8:	ed 91       	ld	r30, X+
    31ca:	ee 23       	and	r30, r30
    31cc:	01 f1       	breq	.+64     	; 0x320e <__stack+0x290f>
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    31ce:	ec 3c       	cpi	r30, 0xCC	; 204
    31d0:	d8 f7       	brcc	.-10     	; 0x31c8 <__stack+0x28c9>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    31d2:	47 e0       	ldi	r20, 0x07	; 7
    31d4:	e4 9f       	mul	r30, r20
    31d6:	f0 01       	movw	r30, r0
    31d8:	11 24       	eor	r1, r1
    31da:	bf 01       	movw	r22, r30
    31dc:	6c 5b       	subi	r22, 0xBC	; 188
    31de:	7e 4f       	sbci	r23, 0xFE	; 254
    31e0:	fb 01       	movw	r30, r22
    31e2:	42 81       	ldd	r20, Z+2	; 0x02
    31e4:	53 81       	ldd	r21, Z+3	; 0x03
    31e6:	fa 01       	movw	r30, r20
    31e8:	90 81       	ld	r25, Z
    31ea:	22 24       	eor	r2, r2
    31ec:	23 94       	inc	r2
    31ee:	31 2c       	mov	r3, r1
    31f0:	fb 01       	movw	r30, r22
    31f2:	06 80       	ldd	r0, Z+6	; 0x06
    31f4:	02 c0       	rjmp	.+4      	; 0x31fa <__stack+0x28fb>
    31f6:	22 0c       	add	r2, r2
    31f8:	33 1c       	adc	r3, r3
    31fa:	0a 94       	dec	r0
    31fc:	e2 f7       	brpl	.-8      	; 0x31f6 <__stack+0x28f7>
    31fe:	82 2d       	mov	r24, r2
    3200:	80 95       	com	r24
    3202:	89 23       	and	r24, r25
    3204:	fa 01       	movw	r30, r20
    3206:	80 83       	st	Z, r24
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    3208:	ed 91       	ld	r30, X+
    320a:	e1 11       	cpse	r30, r1
    320c:	e0 cf       	rjmp	.-64     	; 0x31ce <__stack+0x28cf>
/* Multiplexing method                                                  */
/************************************************************************/
static inline void MultiPlex(uint8_t *pin)
{
	pinsMultiWrite(plex_pins, LOW);
	pinWrite(plex_pins[*pin], HIGH);
    320e:	d4 01       	movw	r26, r8
    3210:	ed 91       	ld	r30, X+
    3212:	4d 01       	movw	r8, r26
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    3214:	ec 3c       	cpi	r30, 0xCC	; 204
    3216:	08 f4       	brcc	.+2      	; 0x321a <__stack+0x291b>
    3218:	36 c2       	rjmp	.+1132   	; 0x3686 <__stack+0x2d87>
	delay(delayms);
    321a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    321e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
/*  delay                                                               */
/************************************************************************/
int delayms = 1;
static inline void delay(int dl)
{
	while(dl >= 0)
    3222:	97 fd       	sbrc	r25, 7
    3224:	08 c0       	rjmp	.+16     	; 0x3236 <__stack+0x2937>
    3226:	ef e9       	ldi	r30, 0x9F	; 159
    3228:	ff e0       	ldi	r31, 0x0F	; 15
    322a:	31 97       	sbiw	r30, 0x01	; 1
    322c:	f1 f7       	brne	.-4      	; 0x322a <__stack+0x292b>
    322e:	00 c0       	rjmp	.+0      	; 0x3230 <__stack+0x2931>
    3230:	00 00       	nop
	{
		_delay_ms(1);
		dl--;
    3232:	01 97       	sbiw	r24, 0x01	; 1
    3234:	c0 f7       	brcc	.-16     	; 0x3226 <__stack+0x2927>
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
    3236:	a4 e0       	ldi	r26, 0x04	; 4
    3238:	b1 e0       	ldi	r27, 0x01	; 1
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    323a:	ed 91       	ld	r30, X+
    323c:	ee 23       	and	r30, r30
    323e:	01 f1       	breq	.+64     	; 0x3280 <__stack+0x2981>
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    3240:	ec 3c       	cpi	r30, 0xCC	; 204
    3242:	d8 f7       	brcc	.-10     	; 0x323a <__stack+0x293b>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    3244:	47 e0       	ldi	r20, 0x07	; 7
    3246:	e4 9f       	mul	r30, r20
    3248:	f0 01       	movw	r30, r0
    324a:	11 24       	eor	r1, r1
    324c:	bf 01       	movw	r22, r30
    324e:	6c 5b       	subi	r22, 0xBC	; 188
    3250:	7e 4f       	sbci	r23, 0xFE	; 254
    3252:	fb 01       	movw	r30, r22
    3254:	42 81       	ldd	r20, Z+2	; 0x02
    3256:	53 81       	ldd	r21, Z+3	; 0x03
    3258:	fa 01       	movw	r30, r20
    325a:	90 81       	ld	r25, Z
    325c:	22 24       	eor	r2, r2
    325e:	23 94       	inc	r2
    3260:	31 2c       	mov	r3, r1
    3262:	fb 01       	movw	r30, r22
    3264:	06 80       	ldd	r0, Z+6	; 0x06
    3266:	02 c0       	rjmp	.+4      	; 0x326c <__stack+0x296d>
    3268:	22 0c       	add	r2, r2
    326a:	33 1c       	adc	r3, r3
    326c:	0a 94       	dec	r0
    326e:	e2 f7       	brpl	.-8      	; 0x3268 <__stack+0x2969>
    3270:	82 2d       	mov	r24, r2
    3272:	80 95       	com	r24
    3274:	89 23       	and	r24, r25
    3276:	fa 01       	movw	r30, r20
    3278:	80 83       	st	Z, r24
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    327a:	ed 91       	ld	r30, X+
    327c:	e1 11       	cpse	r30, r1
    327e:	e0 cf       	rjmp	.-64     	; 0x3240 <__stack+0x2941>
    3280:	89 e0       	ldi	r24, 0x09	; 9
    3282:	90 e0       	ldi	r25, 0x00	; 0
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    3284:	5a 98       	cbi	0x0b, 2	; 11
    3286:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    3288:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    328a:	5b 98       	cbi	0x0b, 3	; 11
    328c:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    328e:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    3290:	5b 98       	cbi	0x0b, 3	; 11
    3292:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    3294:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    3296:	5b 98       	cbi	0x0b, 3	; 11
    3298:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    329a:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    329c:	5b 98       	cbi	0x0b, 3	; 11
    329e:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    32a0:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    32a2:	5b 98       	cbi	0x0b, 3	; 11
    32a4:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    32a6:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    32a8:	5b 98       	cbi	0x0b, 3	; 11
    32aa:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    32ac:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    32ae:	5b 98       	cbi	0x0b, 3	; 11
    32b0:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    32b2:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    32b4:	5b 98       	cbi	0x0b, 3	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    32b6:	5a 9a       	sbi	0x0b, 2	; 11
    32b8:	01 97       	sbiw	r24, 0x01	; 1
/* Clear Display                                                        */
/************************************************************************/
static inline void Clear(){
	int x, y = 0;
	pinsMultiWrite(plex_pins, LOW);
	for(x = 0; x < (SH_REG + 1); x++) {
    32ba:	21 f7       	brne	.-56     	; 0x3284 <__stack+0x2985>
    32bc:	2f 5f       	subi	r18, 0xFF	; 255
    32be:	3f 4f       	sbci	r19, 0xFF	; 255
{
	uint8_t byte, index, bit = 0;
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
    32c0:	27 30       	cpi	r18, 0x07	; 7
    32c2:	31 05       	cpc	r19, r1
    32c4:	79 f5       	brne	.+94     	; 0x3324 <__stack+0x2a25>
    32c6:	ea 94       	dec	r14
}
}*/
static inline void HoldDisplayBuffer(const uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
    32c8:	e1 10       	cpse	r14, r1
    32ca:	26 c0       	rjmp	.+76     	; 0x3318 <__stack+0x2a19>
    32cc:	f1 e0       	ldi	r31, 0x01	; 1
    32ce:	cf 1a       	sub	r12, r31
    32d0:	d1 08       	sbc	r13, r1
		for(len =0; len<FONT_WIDTH; len++){
			HoldDisplayBuffer(ArrayShiftRightInsert(*(chbuffer+len)), time);
		}
		HoldDisplayBuffer(ArrayShiftRightInsert(0), time);
	}
	for(len =0; len<MT_SIZE; len++){
    32d2:	11 f4       	brne	.+4      	; 0x32d8 <__stack+0x29d9>
    32d4:	0c 94 9b 02 	jmp	0x536	; 0x536 <main+0x28>
    32d8:	80 e4       	ldi	r24, 0x40	; 64
    32da:	e1 ed       	ldi	r30, 0xD1	; 209
    32dc:	f2 e0       	ldi	r31, 0x02	; 2
    32de:	a0 e1       	ldi	r26, 0x10	; 16
    32e0:	b2 e0       	ldi	r27, 0x02	; 2
    32e2:	01 90       	ld	r0, Z+
    32e4:	0d 92       	st	X+, r0
    32e6:	8a 95       	dec	r24
    32e8:	e1 f7       	brne	.-8      	; 0x32e2 <__stack+0x29e3>
    32ea:	10 92 10 03 	sts	0x0310, r1	; 0x800310 <updatedBufferArray+0x3f>
	for(; index>=0; index--){
		updatedBufferArray[index] = currentArray[index+1];
    32ee:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <__data_end+0x3f>
    32f2:	80 93 0f 03 	sts	0x030F, r24	; 0x80030f <updatedBufferArray+0x3e>
/************************************************************************/
uint8_t *ArrayShiftRightInsert(const uint8_t data)
{
	uint8_t index = MT_SIZE -1;
	FillCurrentArray();
	updatedBufferArray[index--] = data;
    32f6:	2e e3       	ldi	r18, 0x3E	; 62
	for(; index>=0; index--){
    32f8:	21 50       	subi	r18, 0x01	; 1
		updatedBufferArray[index] = currentArray[index+1];
    32fa:	82 2f       	mov	r24, r18
    32fc:	90 e0       	ldi	r25, 0x00	; 0
    32fe:	fc 01       	movw	r30, r24
    3300:	ef 52       	subi	r30, 0x2F	; 47
    3302:	fd 4f       	sbci	r31, 0xFD	; 253
    3304:	dc 01       	movw	r26, r24
    3306:	a0 5f       	subi	r26, 0xF0	; 240
    3308:	bd 4f       	sbci	r27, 0xFD	; 253
    330a:	11 96       	adiw	r26, 0x01	; 1
    330c:	8c 91       	ld	r24, X
    330e:	80 83       	st	Z, r24
		if(index==0) break;
    3310:	21 11       	cpse	r18, r1
    3312:	f2 cf       	rjmp	.-28     	; 0x32f8 <__stack+0x29f9>
    3314:	9a e0       	ldi	r25, 0x0A	; 10
    3316:	e9 2e       	mov	r14, r25
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    3318:	84 e0       	ldi	r24, 0x04	; 4
    331a:	88 2e       	mov	r8, r24
    331c:	81 e0       	ldi	r24, 0x01	; 1
    331e:	98 2e       	mov	r9, r24
    3320:	20 e0       	ldi	r18, 0x00	; 0
    3322:	30 e0       	ldi	r19, 0x00	; 0
    3324:	91 e0       	ldi	r25, 0x01	; 1
    3326:	02 2e       	mov	r0, r18
    3328:	01 c0       	rjmp	.+2      	; 0x332c <__stack+0x2a2d>
    332a:	99 0f       	add	r25, r25
    332c:	0a 94       	dec	r0
    332e:	ea f7       	brpl	.-6      	; 0x332a <__stack+0x2a2b>
/************************************************************************/
uint8_t *ArrayShiftRightInsert(const uint8_t data)
{
	uint8_t index = MT_SIZE -1;
	FillCurrentArray();
	updatedBufferArray[index--] = data;
    3330:	8f e3       	ldi	r24, 0x3F	; 63
    3332:	58 c0       	rjmp	.+176    	; 0x33e4 <__stack+0x2ae5>
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    3334:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    3336:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    3338:	5b 98       	cbi	0x0b, 3	; 11
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
			pinWrite(latch_pin, LOW);
			for(bit = 0; bit <= FONT_HEIGHT ; bit++){
				pinWrite(data_pin,((*(p+pos)) & (1 << byte)));
    333a:	ef ef       	ldi	r30, 0xFF	; 255
    333c:	e8 0f       	add	r30, r24
    333e:	f0 e0       	ldi	r31, 0x00	; 0
    3340:	ef 52       	subi	r30, 0x2F	; 47
    3342:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    3344:	40 81       	ld	r20, Z
    3346:	49 23       	and	r20, r25
    3348:	09 f0       	breq	.+2      	; 0x334c <__stack+0x2a4d>
    334a:	63 c0       	rjmp	.+198    	; 0x3412 <__stack+0x2b13>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    334c:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    334e:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    3350:	5b 98       	cbi	0x0b, 3	; 11
    3352:	ee ef       	ldi	r30, 0xFE	; 254
    3354:	e8 0f       	add	r30, r24
    3356:	f0 e0       	ldi	r31, 0x00	; 0
    3358:	ef 52       	subi	r30, 0x2F	; 47
    335a:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    335c:	40 81       	ld	r20, Z
    335e:	49 23       	and	r20, r25
    3360:	09 f0       	breq	.+2      	; 0x3364 <__stack+0x2a65>
    3362:	55 c0       	rjmp	.+170    	; 0x340e <__stack+0x2b0f>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    3364:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    3366:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    3368:	5b 98       	cbi	0x0b, 3	; 11
    336a:	ed ef       	ldi	r30, 0xFD	; 253
    336c:	e8 0f       	add	r30, r24
    336e:	f0 e0       	ldi	r31, 0x00	; 0
    3370:	ef 52       	subi	r30, 0x2F	; 47
    3372:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    3374:	40 81       	ld	r20, Z
    3376:	49 23       	and	r20, r25
    3378:	09 f0       	breq	.+2      	; 0x337c <__stack+0x2a7d>
    337a:	47 c0       	rjmp	.+142    	; 0x340a <__stack+0x2b0b>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    337c:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    337e:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    3380:	5b 98       	cbi	0x0b, 3	; 11
    3382:	ec ef       	ldi	r30, 0xFC	; 252
    3384:	e8 0f       	add	r30, r24
    3386:	f0 e0       	ldi	r31, 0x00	; 0
    3388:	ef 52       	subi	r30, 0x2F	; 47
    338a:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    338c:	40 81       	ld	r20, Z
    338e:	49 23       	and	r20, r25
    3390:	d1 f5       	brne	.+116    	; 0x3406 <__stack+0x2b07>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    3392:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    3394:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    3396:	5b 98       	cbi	0x0b, 3	; 11
    3398:	eb ef       	ldi	r30, 0xFB	; 251
    339a:	e8 0f       	add	r30, r24
    339c:	f0 e0       	ldi	r31, 0x00	; 0
    339e:	ef 52       	subi	r30, 0x2F	; 47
    33a0:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    33a2:	40 81       	ld	r20, Z
    33a4:	49 23       	and	r20, r25
    33a6:	69 f5       	brne	.+90     	; 0x3402 <__stack+0x2b03>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    33a8:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    33aa:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    33ac:	5b 98       	cbi	0x0b, 3	; 11
    33ae:	ea ef       	ldi	r30, 0xFA	; 250
    33b0:	e8 0f       	add	r30, r24
    33b2:	f0 e0       	ldi	r31, 0x00	; 0
    33b4:	ef 52       	subi	r30, 0x2F	; 47
    33b6:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    33b8:	40 81       	ld	r20, Z
    33ba:	49 23       	and	r20, r25
    33bc:	01 f5       	brne	.+64     	; 0x33fe <__stack+0x2aff>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    33be:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    33c0:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    33c2:	5b 98       	cbi	0x0b, 3	; 11
    33c4:	e9 ef       	ldi	r30, 0xF9	; 249
    33c6:	e8 0f       	add	r30, r24
    33c8:	f0 e0       	ldi	r31, 0x00	; 0
    33ca:	ef 52       	subi	r30, 0x2F	; 47
    33cc:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    33ce:	40 81       	ld	r20, Z
    33d0:	49 23       	and	r20, r25
    33d2:	99 f4       	brne	.+38     	; 0x33fa <__stack+0x2afb>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    33d4:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    33d6:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    33d8:	5b 98       	cbi	0x0b, 3	; 11
				//toggle the clock pin
				pinWrite(clock_pin, HIGH);
				pinWrite(clock_pin, LOW);
				pos--;
    33da:	88 50       	subi	r24, 0x08	; 8
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    33dc:	5a 9a       	sbi	0x0b, 2	; 11
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
    33de:	8f 3f       	cpi	r24, 0xFF	; 255
    33e0:	09 f4       	brne	.+2      	; 0x33e4 <__stack+0x2ae5>
    33e2:	f0 ce       	rjmp	.-544    	; 0x31c4 <__stack+0x28c5>
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    33e4:	5a 98       	cbi	0x0b, 2	; 11
			pinWrite(latch_pin, LOW);
			for(bit = 0; bit <= FONT_HEIGHT ; bit++){
				pinWrite(data_pin,((*(p+pos)) & (1 << byte)));
    33e6:	e8 2f       	mov	r30, r24
    33e8:	f0 e0       	ldi	r31, 0x00	; 0
    33ea:	ef 52       	subi	r30, 0x2F	; 47
    33ec:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    33ee:	40 81       	ld	r20, Z
    33f0:	49 23       	and	r20, r25
    33f2:	09 f4       	brne	.+2      	; 0x33f6 <__stack+0x2af7>
    33f4:	9f cf       	rjmp	.-194    	; 0x3334 <__stack+0x2a35>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    33f6:	59 9a       	sbi	0x0b, 1	; 11
    33f8:	9e cf       	rjmp	.-196    	; 0x3336 <__stack+0x2a37>
    33fa:	59 9a       	sbi	0x0b, 1	; 11
    33fc:	ec cf       	rjmp	.-40     	; 0x33d6 <__stack+0x2ad7>
    33fe:	59 9a       	sbi	0x0b, 1	; 11
    3400:	df cf       	rjmp	.-66     	; 0x33c0 <__stack+0x2ac1>
    3402:	59 9a       	sbi	0x0b, 1	; 11
    3404:	d2 cf       	rjmp	.-92     	; 0x33aa <__stack+0x2aab>
    3406:	59 9a       	sbi	0x0b, 1	; 11
    3408:	c5 cf       	rjmp	.-118    	; 0x3394 <__stack+0x2a95>
    340a:	59 9a       	sbi	0x0b, 1	; 11
    340c:	b8 cf       	rjmp	.-144    	; 0x337e <__stack+0x2a7f>
    340e:	59 9a       	sbi	0x0b, 1	; 11
    3410:	aa cf       	rjmp	.-172    	; 0x3366 <__stack+0x2a67>
    3412:	59 9a       	sbi	0x0b, 1	; 11
    3414:	9c cf       	rjmp	.-200    	; 0x334e <__stack+0x2a4f>
    3416:	59 9a       	sbi	0x0b, 1	; 11
    3418:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    341a:	5b 98       	cbi	0x0b, 3	; 11
				//toggle the clock pin
				pinWrite(clock_pin, HIGH);
				pinWrite(clock_pin, LOW);
				pos--;
    341c:	48 50       	subi	r20, 0x08	; 8
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    341e:	5a 9a       	sbi	0x0b, 2	; 11
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
    3420:	4f 3f       	cpi	r20, 0xFF	; 255
    3422:	09 f0       	breq	.+2      	; 0x3426 <__stack+0x2b27>
    3424:	a4 ce       	rjmp	.-696    	; 0x316e <__stack+0x286f>
    3426:	a4 e0       	ldi	r26, 0x04	; 4
    3428:	b1 e0       	ldi	r27, 0x01	; 1
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    342a:	ed 91       	ld	r30, X+
    342c:	ee 23       	and	r30, r30
    342e:	09 f1       	breq	.+66     	; 0x3472 <__stack+0x2b73>
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    3430:	ec 3c       	cpi	r30, 0xCC	; 204
    3432:	d8 f7       	brcc	.-10     	; 0x342a <__stack+0x2b2b>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    3434:	47 e0       	ldi	r20, 0x07	; 7
    3436:	e4 9f       	mul	r30, r20
    3438:	f0 01       	movw	r30, r0
    343a:	11 24       	eor	r1, r1
    343c:	bf 01       	movw	r22, r30
    343e:	6c 5b       	subi	r22, 0xBC	; 188
    3440:	7e 4f       	sbci	r23, 0xFE	; 254
    3442:	2b 01       	movw	r4, r22
    3444:	fb 01       	movw	r30, r22
    3446:	62 81       	ldd	r22, Z+2	; 0x02
    3448:	73 81       	ldd	r23, Z+3	; 0x03
    344a:	fb 01       	movw	r30, r22
    344c:	50 81       	ld	r21, Z
    344e:	22 24       	eor	r2, r2
    3450:	23 94       	inc	r2
    3452:	31 2c       	mov	r3, r1
    3454:	f2 01       	movw	r30, r4
    3456:	06 80       	ldd	r0, Z+6	; 0x06
    3458:	02 c0       	rjmp	.+4      	; 0x345e <__stack+0x2b5f>
    345a:	22 0c       	add	r2, r2
    345c:	33 1c       	adc	r3, r3
    345e:	0a 94       	dec	r0
    3460:	e2 f7       	brpl	.-8      	; 0x345a <__stack+0x2b5b>
    3462:	42 2d       	mov	r20, r2
    3464:	40 95       	com	r20
    3466:	45 23       	and	r20, r21
    3468:	fb 01       	movw	r30, r22
    346a:	40 83       	st	Z, r20
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    346c:	ed 91       	ld	r30, X+
    346e:	e1 11       	cpse	r30, r1
    3470:	df cf       	rjmp	.-66     	; 0x3430 <__stack+0x2b31>
/* Multiplexing method                                                  */
/************************************************************************/
static inline void MultiPlex(uint8_t *pin)
{
	pinsMultiWrite(plex_pins, LOW);
	pinWrite(plex_pins[*pin], HIGH);
    3472:	d9 01       	movw	r26, r18
    3474:	ed 91       	ld	r30, X+
    3476:	9d 01       	movw	r18, r26
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    3478:	ec 3c       	cpi	r30, 0xCC	; 204
    347a:	08 f4       	brcc	.+2      	; 0x347e <__stack+0x2b7f>
    347c:	18 c1       	rjmp	.+560    	; 0x36ae <__stack+0x2daf>
	delay(delayms);
    347e:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    3482:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
/*  delay                                                               */
/************************************************************************/
int delayms = 1;
static inline void delay(int dl)
{
	while(dl >= 0)
    3486:	57 fd       	sbrc	r21, 7
    3488:	09 c0       	rjmp	.+18     	; 0x349c <__stack+0x2b9d>
    348a:	ef e9       	ldi	r30, 0x9F	; 159
    348c:	ff e0       	ldi	r31, 0x0F	; 15
    348e:	31 97       	sbiw	r30, 0x01	; 1
    3490:	f1 f7       	brne	.-4      	; 0x348e <__stack+0x2b8f>
    3492:	00 c0       	rjmp	.+0      	; 0x3494 <__stack+0x2b95>
    3494:	00 00       	nop
	{
		_delay_ms(1);
		dl--;
    3496:	41 50       	subi	r20, 0x01	; 1
    3498:	51 09       	sbc	r21, r1
    349a:	b8 f7       	brcc	.-18     	; 0x348a <__stack+0x2b8b>
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
    349c:	a4 e0       	ldi	r26, 0x04	; 4
    349e:	b1 e0       	ldi	r27, 0x01	; 1
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    34a0:	ed 91       	ld	r30, X+
    34a2:	ee 23       	and	r30, r30
    34a4:	09 f1       	breq	.+66     	; 0x34e8 <__stack+0x2be9>
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    34a6:	ec 3c       	cpi	r30, 0xCC	; 204
    34a8:	d8 f7       	brcc	.-10     	; 0x34a0 <__stack+0x2ba1>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    34aa:	47 e0       	ldi	r20, 0x07	; 7
    34ac:	e4 9f       	mul	r30, r20
    34ae:	f0 01       	movw	r30, r0
    34b0:	11 24       	eor	r1, r1
    34b2:	bf 01       	movw	r22, r30
    34b4:	6c 5b       	subi	r22, 0xBC	; 188
    34b6:	7e 4f       	sbci	r23, 0xFE	; 254
    34b8:	2b 01       	movw	r4, r22
    34ba:	fb 01       	movw	r30, r22
    34bc:	62 81       	ldd	r22, Z+2	; 0x02
    34be:	73 81       	ldd	r23, Z+3	; 0x03
    34c0:	fb 01       	movw	r30, r22
    34c2:	50 81       	ld	r21, Z
    34c4:	22 24       	eor	r2, r2
    34c6:	23 94       	inc	r2
    34c8:	31 2c       	mov	r3, r1
    34ca:	f2 01       	movw	r30, r4
    34cc:	06 80       	ldd	r0, Z+6	; 0x06
    34ce:	02 c0       	rjmp	.+4      	; 0x34d4 <__stack+0x2bd5>
    34d0:	22 0c       	add	r2, r2
    34d2:	33 1c       	adc	r3, r3
    34d4:	0a 94       	dec	r0
    34d6:	e2 f7       	brpl	.-8      	; 0x34d0 <__stack+0x2bd1>
    34d8:	42 2d       	mov	r20, r2
    34da:	40 95       	com	r20
    34dc:	45 23       	and	r20, r21
    34de:	fb 01       	movw	r30, r22
    34e0:	40 83       	st	Z, r20
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    34e2:	ed 91       	ld	r30, X+
    34e4:	e1 11       	cpse	r30, r1
    34e6:	df cf       	rjmp	.-66     	; 0x34a6 <__stack+0x2ba7>
    34e8:	49 e0       	ldi	r20, 0x09	; 9
    34ea:	50 e0       	ldi	r21, 0x00	; 0
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    34ec:	5a 98       	cbi	0x0b, 2	; 11
    34ee:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    34f0:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    34f2:	5b 98       	cbi	0x0b, 3	; 11
    34f4:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    34f6:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    34f8:	5b 98       	cbi	0x0b, 3	; 11
    34fa:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    34fc:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    34fe:	5b 98       	cbi	0x0b, 3	; 11
    3500:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    3502:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    3504:	5b 98       	cbi	0x0b, 3	; 11
    3506:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    3508:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    350a:	5b 98       	cbi	0x0b, 3	; 11
    350c:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    350e:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    3510:	5b 98       	cbi	0x0b, 3	; 11
    3512:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    3514:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    3516:	5b 98       	cbi	0x0b, 3	; 11
    3518:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    351a:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    351c:	5b 98       	cbi	0x0b, 3	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    351e:	5a 9a       	sbi	0x0b, 2	; 11
    3520:	41 50       	subi	r20, 0x01	; 1
    3522:	51 09       	sbc	r21, r1
/* Clear Display                                                        */
/************************************************************************/
static inline void Clear(){
	int x, y = 0;
	pinsMultiWrite(plex_pins, LOW);
	for(x = 0; x < (SH_REG + 1); x++) {
    3524:	19 f7       	brne	.-58     	; 0x34ec <__stack+0x2bed>
    3526:	01 96       	adiw	r24, 0x01	; 1
{
	uint8_t byte, index, bit = 0;
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
    3528:	87 30       	cpi	r24, 0x07	; 7
    352a:	91 05       	cpc	r25, r1
    352c:	09 f0       	breq	.+2      	; 0x3530 <__stack+0x2c31>
    352e:	bb cd       	rjmp	.-1162   	; 0x30a6 <__stack+0x27a7>
    3530:	aa 94       	dec	r10
}
}*/
static inline void HoldDisplayBuffer(const uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
    3532:	a1 10       	cpse	r10, r1
    3534:	b4 cd       	rjmp	.-1176   	; 0x309e <__stack+0x279f>
	uint8_t *chbuffer;// = CharBytes(ch++);
	InitializeBuffers();
	int len = 0;
	while(*ch){
		chbuffer = CharBytes(ch++);
		for(len =0; len<FONT_WIDTH; len++){
    3536:	f6 e1       	ldi	r31, 0x16	; 22
    3538:	2f 2e       	mov	r2, r31
    353a:	f3 e0       	ldi	r31, 0x03	; 3
    353c:	3f 2e       	mov	r3, r31
    353e:	2e 14       	cp	r2, r14
    3540:	3f 04       	cpc	r3, r15
    3542:	09 f0       	breq	.+2      	; 0x3546 <__stack+0x2c47>
    3544:	89 cd       	rjmp	.-1262   	; 0x3058 <__stack+0x2759>
    3546:	80 e4       	ldi	r24, 0x40	; 64
    3548:	e1 ed       	ldi	r30, 0xD1	; 209
    354a:	f2 e0       	ldi	r31, 0x02	; 2
    354c:	a0 e1       	ldi	r26, 0x10	; 16
    354e:	b2 e0       	ldi	r27, 0x02	; 2
    3550:	01 90       	ld	r0, Z+
    3552:	0d 92       	st	X+, r0
    3554:	8a 95       	dec	r24
    3556:	e1 f7       	brne	.-8      	; 0x3550 <__stack+0x2c51>
    3558:	10 92 10 03 	sts	0x0310, r1	; 0x800310 <updatedBufferArray+0x3f>
	for(; index>=0; index--){
		updatedBufferArray[index] = currentArray[index+1];
    355c:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <__data_end+0x3f>
    3560:	80 93 0f 03 	sts	0x030F, r24	; 0x80030f <updatedBufferArray+0x3e>
/************************************************************************/
uint8_t *ArrayShiftRightInsert(const uint8_t data)
{
	uint8_t index = MT_SIZE -1;
	FillCurrentArray();
	updatedBufferArray[index--] = data;
    3564:	8e e3       	ldi	r24, 0x3E	; 62
	for(; index>=0; index--){
    3566:	81 50       	subi	r24, 0x01	; 1
		updatedBufferArray[index] = currentArray[index+1];
    3568:	28 2f       	mov	r18, r24
    356a:	30 e0       	ldi	r19, 0x00	; 0
    356c:	f9 01       	movw	r30, r18
    356e:	ef 52       	subi	r30, 0x2F	; 47
    3570:	fd 4f       	sbci	r31, 0xFD	; 253
    3572:	d9 01       	movw	r26, r18
    3574:	a0 5f       	subi	r26, 0xF0	; 240
    3576:	bd 4f       	sbci	r27, 0xFD	; 253
    3578:	11 96       	adiw	r26, 0x01	; 1
    357a:	9c 91       	ld	r25, X
    357c:	90 83       	st	Z, r25
		if(index==0) break;
    357e:	81 11       	cpse	r24, r1
    3580:	f2 cf       	rjmp	.-28     	; 0x3566 <__stack+0x2c67>
    3582:	7a e0       	ldi	r23, 0x0A	; 10
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    3584:	a4 e0       	ldi	r26, 0x04	; 4
    3586:	ea 2e       	mov	r14, r26
    3588:	a1 e0       	ldi	r26, 0x01	; 1
    358a:	fa 2e       	mov	r15, r26
    358c:	80 e0       	ldi	r24, 0x00	; 0
    358e:	90 e0       	ldi	r25, 0x00	; 0
    3590:	31 e0       	ldi	r19, 0x01	; 1
    3592:	08 2e       	mov	r0, r24
    3594:	01 c0       	rjmp	.+2      	; 0x3598 <__stack+0x2c99>
    3596:	33 0f       	add	r19, r19
    3598:	0a 94       	dec	r0
    359a:	ea f7       	brpl	.-6      	; 0x3596 <__stack+0x2c97>
/************************************************************************/
uint8_t *ArrayShiftRightInsert(const uint8_t data)
{
	uint8_t index = MT_SIZE -1;
	FillCurrentArray();
	updatedBufferArray[index--] = data;
    359c:	2f e3       	ldi	r18, 0x3F	; 63
    359e:	5c c0       	rjmp	.+184    	; 0x3658 <__stack+0x2d59>
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    35a0:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    35a2:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    35a4:	5b 98       	cbi	0x0b, 3	; 11
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
			pinWrite(latch_pin, LOW);
			for(bit = 0; bit <= FONT_HEIGHT ; bit++){
				pinWrite(data_pin,((*(p+pos)) & (1 << byte)));
    35a6:	ef ef       	ldi	r30, 0xFF	; 255
    35a8:	e2 0f       	add	r30, r18
    35aa:	f0 e0       	ldi	r31, 0x00	; 0
    35ac:	ef 52       	subi	r30, 0x2F	; 47
    35ae:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    35b0:	40 81       	ld	r20, Z
    35b2:	43 23       	and	r20, r19
    35b4:	09 f0       	breq	.+2      	; 0x35b8 <__stack+0x2cb9>
    35b6:	2c c1       	rjmp	.+600    	; 0x3810 <__stack+0x2f11>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    35b8:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    35ba:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    35bc:	5b 98       	cbi	0x0b, 3	; 11
    35be:	ee ef       	ldi	r30, 0xFE	; 254
    35c0:	e2 0f       	add	r30, r18
    35c2:	f0 e0       	ldi	r31, 0x00	; 0
    35c4:	ef 52       	subi	r30, 0x2F	; 47
    35c6:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    35c8:	40 81       	ld	r20, Z
    35ca:	43 23       	and	r20, r19
    35cc:	09 f0       	breq	.+2      	; 0x35d0 <__stack+0x2cd1>
    35ce:	1e c1       	rjmp	.+572    	; 0x380c <__stack+0x2f0d>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    35d0:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    35d2:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    35d4:	5b 98       	cbi	0x0b, 3	; 11
    35d6:	ed ef       	ldi	r30, 0xFD	; 253
    35d8:	e2 0f       	add	r30, r18
    35da:	f0 e0       	ldi	r31, 0x00	; 0
    35dc:	ef 52       	subi	r30, 0x2F	; 47
    35de:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    35e0:	40 81       	ld	r20, Z
    35e2:	43 23       	and	r20, r19
    35e4:	09 f0       	breq	.+2      	; 0x35e8 <__stack+0x2ce9>
    35e6:	10 c1       	rjmp	.+544    	; 0x3808 <__stack+0x2f09>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    35e8:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    35ea:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    35ec:	5b 98       	cbi	0x0b, 3	; 11
    35ee:	ec ef       	ldi	r30, 0xFC	; 252
    35f0:	e2 0f       	add	r30, r18
    35f2:	f0 e0       	ldi	r31, 0x00	; 0
    35f4:	ef 52       	subi	r30, 0x2F	; 47
    35f6:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    35f8:	40 81       	ld	r20, Z
    35fa:	43 23       	and	r20, r19
    35fc:	09 f0       	breq	.+2      	; 0x3600 <__stack+0x2d01>
    35fe:	02 c1       	rjmp	.+516    	; 0x3804 <__stack+0x2f05>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    3600:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    3602:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    3604:	5b 98       	cbi	0x0b, 3	; 11
    3606:	eb ef       	ldi	r30, 0xFB	; 251
    3608:	e2 0f       	add	r30, r18
    360a:	f0 e0       	ldi	r31, 0x00	; 0
    360c:	ef 52       	subi	r30, 0x2F	; 47
    360e:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    3610:	40 81       	ld	r20, Z
    3612:	43 23       	and	r20, r19
    3614:	09 f0       	breq	.+2      	; 0x3618 <__stack+0x2d19>
    3616:	f4 c0       	rjmp	.+488    	; 0x3800 <__stack+0x2f01>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    3618:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    361a:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    361c:	5b 98       	cbi	0x0b, 3	; 11
    361e:	ea ef       	ldi	r30, 0xFA	; 250
    3620:	e2 0f       	add	r30, r18
    3622:	f0 e0       	ldi	r31, 0x00	; 0
    3624:	ef 52       	subi	r30, 0x2F	; 47
    3626:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    3628:	40 81       	ld	r20, Z
    362a:	43 23       	and	r20, r19
    362c:	09 f0       	breq	.+2      	; 0x3630 <__stack+0x2d31>
    362e:	e6 c0       	rjmp	.+460    	; 0x37fc <__stack+0x2efd>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    3630:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    3632:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    3634:	5b 98       	cbi	0x0b, 3	; 11
    3636:	e9 ef       	ldi	r30, 0xF9	; 249
    3638:	e2 0f       	add	r30, r18
    363a:	f0 e0       	ldi	r31, 0x00	; 0
    363c:	ef 52       	subi	r30, 0x2F	; 47
    363e:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    3640:	40 81       	ld	r20, Z
    3642:	43 23       	and	r20, r19
    3644:	09 f0       	breq	.+2      	; 0x3648 <__stack+0x2d49>
    3646:	47 c0       	rjmp	.+142    	; 0x36d6 <__stack+0x2dd7>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    3648:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    364a:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    364c:	5b 98       	cbi	0x0b, 3	; 11
				//toggle the clock pin
				pinWrite(clock_pin, HIGH);
				pinWrite(clock_pin, LOW);
				pos--;
    364e:	28 50       	subi	r18, 0x08	; 8
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    3650:	5a 9a       	sbi	0x0b, 2	; 11
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
    3652:	2f 3f       	cpi	r18, 0xFF	; 255
    3654:	09 f4       	brne	.+2      	; 0x3658 <__stack+0x2d59>
    3656:	47 c0       	rjmp	.+142    	; 0x36e6 <__stack+0x2de7>
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    3658:	5a 98       	cbi	0x0b, 2	; 11
			pinWrite(latch_pin, LOW);
			for(bit = 0; bit <= FONT_HEIGHT ; bit++){
				pinWrite(data_pin,((*(p+pos)) & (1 << byte)));
    365a:	e2 2f       	mov	r30, r18
    365c:	f0 e0       	ldi	r31, 0x00	; 0
    365e:	ef 52       	subi	r30, 0x2F	; 47
    3660:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    3662:	40 81       	ld	r20, Z
    3664:	43 23       	and	r20, r19
    3666:	09 f4       	brne	.+2      	; 0x366a <__stack+0x2d6b>
    3668:	9b cf       	rjmp	.-202    	; 0x35a0 <__stack+0x2ca1>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    366a:	59 9a       	sbi	0x0b, 1	; 11
    366c:	9a cf       	rjmp	.-204    	; 0x35a2 <__stack+0x2ca3>
    366e:	59 9a       	sbi	0x0b, 1	; 11
    3670:	6b cd       	rjmp	.-1322   	; 0x3148 <__stack+0x2849>
    3672:	59 9a       	sbi	0x0b, 1	; 11
    3674:	5d cd       	rjmp	.-1350   	; 0x3130 <__stack+0x2831>
    3676:	59 9a       	sbi	0x0b, 1	; 11
    3678:	4f cd       	rjmp	.-1378   	; 0x3118 <__stack+0x2819>
    367a:	59 9a       	sbi	0x0b, 1	; 11
    367c:	41 cd       	rjmp	.-1406   	; 0x3100 <__stack+0x2801>
    367e:	59 9a       	sbi	0x0b, 1	; 11
    3680:	33 cd       	rjmp	.-1434   	; 0x30e8 <__stack+0x27e9>
    3682:	59 9a       	sbi	0x0b, 1	; 11
    3684:	25 cd       	rjmp	.-1462   	; 0x30d0 <__stack+0x27d1>
    3686:	b7 e0       	ldi	r27, 0x07	; 7
    3688:	eb 9f       	mul	r30, r27
    368a:	f0 01       	movw	r30, r0
    368c:	11 24       	eor	r1, r1
    368e:	ec 5b       	subi	r30, 0xBC	; 188
    3690:	fe 4f       	sbci	r31, 0xFE	; 254
    3692:	a2 81       	ldd	r26, Z+2	; 0x02
    3694:	b3 81       	ldd	r27, Z+3	; 0x03
    3696:	4c 91       	ld	r20, X
    3698:	81 e0       	ldi	r24, 0x01	; 1
    369a:	90 e0       	ldi	r25, 0x00	; 0
    369c:	06 80       	ldd	r0, Z+6	; 0x06
    369e:	02 c0       	rjmp	.+4      	; 0x36a4 <__stack+0x2da5>
    36a0:	88 0f       	add	r24, r24
    36a2:	99 1f       	adc	r25, r25
    36a4:	0a 94       	dec	r0
    36a6:	e2 f7       	brpl	.-8      	; 0x36a0 <__stack+0x2da1>
    36a8:	84 2b       	or	r24, r20
    36aa:	8c 93       	st	X, r24
    36ac:	b6 cd       	rjmp	.-1172   	; 0x321a <__stack+0x291b>
    36ae:	b7 e0       	ldi	r27, 0x07	; 7
    36b0:	eb 9f       	mul	r30, r27
    36b2:	f0 01       	movw	r30, r0
    36b4:	11 24       	eor	r1, r1
    36b6:	ec 5b       	subi	r30, 0xBC	; 188
    36b8:	fe 4f       	sbci	r31, 0xFE	; 254
    36ba:	a2 81       	ldd	r26, Z+2	; 0x02
    36bc:	b3 81       	ldd	r27, Z+3	; 0x03
    36be:	6c 91       	ld	r22, X
    36c0:	41 e0       	ldi	r20, 0x01	; 1
    36c2:	50 e0       	ldi	r21, 0x00	; 0
    36c4:	06 80       	ldd	r0, Z+6	; 0x06
    36c6:	02 c0       	rjmp	.+4      	; 0x36cc <__stack+0x2dcd>
    36c8:	44 0f       	add	r20, r20
    36ca:	55 1f       	adc	r21, r21
    36cc:	0a 94       	dec	r0
    36ce:	e2 f7       	brpl	.-8      	; 0x36c8 <__stack+0x2dc9>
    36d0:	46 2b       	or	r20, r22
    36d2:	4c 93       	st	X, r20
    36d4:	d4 ce       	rjmp	.-600    	; 0x347e <__stack+0x2b7f>
    36d6:	59 9a       	sbi	0x0b, 1	; 11
    36d8:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    36da:	5b 98       	cbi	0x0b, 3	; 11
				//toggle the clock pin
				pinWrite(clock_pin, HIGH);
				pinWrite(clock_pin, LOW);
				pos--;
    36dc:	28 50       	subi	r18, 0x08	; 8
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    36de:	5a 9a       	sbi	0x0b, 2	; 11
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
    36e0:	2f 3f       	cpi	r18, 0xFF	; 255
    36e2:	09 f0       	breq	.+2      	; 0x36e6 <__stack+0x2de7>
    36e4:	b9 cf       	rjmp	.-142    	; 0x3658 <__stack+0x2d59>
    36e6:	a4 e0       	ldi	r26, 0x04	; 4
    36e8:	b1 e0       	ldi	r27, 0x01	; 1
    36ea:	a7 2e       	mov	r10, r23
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    36ec:	ed 91       	ld	r30, X+
    36ee:	ee 23       	and	r30, r30
    36f0:	01 f1       	breq	.+64     	; 0x3732 <__stack+0x2e33>
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    36f2:	ec 3c       	cpi	r30, 0xCC	; 204
    36f4:	d8 f7       	brcc	.-10     	; 0x36ec <__stack+0x2ded>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    36f6:	27 e0       	ldi	r18, 0x07	; 7
    36f8:	e2 9f       	mul	r30, r18
    36fa:	f0 01       	movw	r30, r0
    36fc:	11 24       	eor	r1, r1
    36fe:	bf 01       	movw	r22, r30
    3700:	6c 5b       	subi	r22, 0xBC	; 188
    3702:	7e 4f       	sbci	r23, 0xFE	; 254
    3704:	fb 01       	movw	r30, r22
    3706:	42 81       	ldd	r20, Z+2	; 0x02
    3708:	53 81       	ldd	r21, Z+3	; 0x03
    370a:	fa 01       	movw	r30, r20
    370c:	30 81       	ld	r19, Z
    370e:	22 24       	eor	r2, r2
    3710:	23 94       	inc	r2
    3712:	31 2c       	mov	r3, r1
    3714:	fb 01       	movw	r30, r22
    3716:	06 80       	ldd	r0, Z+6	; 0x06
    3718:	02 c0       	rjmp	.+4      	; 0x371e <__stack+0x2e1f>
    371a:	22 0c       	add	r2, r2
    371c:	33 1c       	adc	r3, r3
    371e:	0a 94       	dec	r0
    3720:	e2 f7       	brpl	.-8      	; 0x371a <__stack+0x2e1b>
    3722:	22 2d       	mov	r18, r2
    3724:	20 95       	com	r18
    3726:	23 23       	and	r18, r19
    3728:	fa 01       	movw	r30, r20
    372a:	20 83       	st	Z, r18
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    372c:	ed 91       	ld	r30, X+
    372e:	e1 11       	cpse	r30, r1
    3730:	e0 cf       	rjmp	.-64     	; 0x36f2 <__stack+0x2df3>
    3732:	7a 2d       	mov	r23, r10
/* Multiplexing method                                                  */
/************************************************************************/
static inline void MultiPlex(uint8_t *pin)
{
	pinsMultiWrite(plex_pins, LOW);
	pinWrite(plex_pins[*pin], HIGH);
    3734:	d7 01       	movw	r26, r14
    3736:	ed 91       	ld	r30, X+
    3738:	7d 01       	movw	r14, r26
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    373a:	ec 3c       	cpi	r30, 0xCC	; 204
    373c:	08 f4       	brcc	.+2      	; 0x3740 <__stack+0x2e41>
    373e:	6a c0       	rjmp	.+212    	; 0x3814 <__stack+0x2f15>
	delay(delayms);
    3740:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    3744:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
/*  delay                                                               */
/************************************************************************/
int delayms = 1;
static inline void delay(int dl)
{
	while(dl >= 0)
    3748:	37 fd       	sbrc	r19, 7
    374a:	09 c0       	rjmp	.+18     	; 0x375e <__stack+0x2e5f>
    374c:	ef e9       	ldi	r30, 0x9F	; 159
    374e:	ff e0       	ldi	r31, 0x0F	; 15
    3750:	31 97       	sbiw	r30, 0x01	; 1
    3752:	f1 f7       	brne	.-4      	; 0x3750 <__stack+0x2e51>
    3754:	00 c0       	rjmp	.+0      	; 0x3756 <__stack+0x2e57>
    3756:	00 00       	nop
	{
		_delay_ms(1);
		dl--;
    3758:	21 50       	subi	r18, 0x01	; 1
    375a:	31 09       	sbc	r19, r1
    375c:	b8 f7       	brcc	.-18     	; 0x374c <__stack+0x2e4d>
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
		pos = pos_sz;
		for(index=0; index< SH_REG; index++){
    375e:	a4 e0       	ldi	r26, 0x04	; 4
    3760:	b1 e0       	ldi	r27, 0x01	; 1
    3762:	a7 2e       	mov	r10, r23
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    3764:	ed 91       	ld	r30, X+
    3766:	ee 23       	and	r30, r30
    3768:	01 f1       	breq	.+64     	; 0x37aa <__stack+0x2eab>
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    376a:	ec 3c       	cpi	r30, 0xCC	; 204
    376c:	d8 f7       	brcc	.-10     	; 0x3764 <__stack+0x2e65>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    376e:	27 e0       	ldi	r18, 0x07	; 7
    3770:	e2 9f       	mul	r30, r18
    3772:	f0 01       	movw	r30, r0
    3774:	11 24       	eor	r1, r1
    3776:	bf 01       	movw	r22, r30
    3778:	6c 5b       	subi	r22, 0xBC	; 188
    377a:	7e 4f       	sbci	r23, 0xFE	; 254
    377c:	fb 01       	movw	r30, r22
    377e:	42 81       	ldd	r20, Z+2	; 0x02
    3780:	53 81       	ldd	r21, Z+3	; 0x03
    3782:	fa 01       	movw	r30, r20
    3784:	30 81       	ld	r19, Z
    3786:	22 24       	eor	r2, r2
    3788:	23 94       	inc	r2
    378a:	31 2c       	mov	r3, r1
    378c:	fb 01       	movw	r30, r22
    378e:	06 80       	ldd	r0, Z+6	; 0x06
    3790:	02 c0       	rjmp	.+4      	; 0x3796 <__stack+0x2e97>
    3792:	22 0c       	add	r2, r2
    3794:	33 1c       	adc	r3, r3
    3796:	0a 94       	dec	r0
    3798:	e2 f7       	brpl	.-8      	; 0x3792 <__stack+0x2e93>
    379a:	22 2d       	mov	r18, r2
    379c:	20 95       	com	r18
    379e:	23 23       	and	r18, r19
    37a0:	fa 01       	movw	r30, r20
    37a2:	20 83       	st	Z, r18
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    37a4:	ed 91       	ld	r30, X+
    37a6:	e1 11       	cpse	r30, r1
    37a8:	e0 cf       	rjmp	.-64     	; 0x376a <__stack+0x2e6b>
    37aa:	7a 2d       	mov	r23, r10
    37ac:	29 e0       	ldi	r18, 0x09	; 9
    37ae:	30 e0       	ldi	r19, 0x00	; 0
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    37b0:	5a 98       	cbi	0x0b, 2	; 11
    37b2:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    37b4:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    37b6:	5b 98       	cbi	0x0b, 3	; 11
    37b8:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    37ba:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    37bc:	5b 98       	cbi	0x0b, 3	; 11
    37be:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    37c0:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    37c2:	5b 98       	cbi	0x0b, 3	; 11
    37c4:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    37c6:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    37c8:	5b 98       	cbi	0x0b, 3	; 11
    37ca:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    37cc:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    37ce:	5b 98       	cbi	0x0b, 3	; 11
    37d0:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    37d2:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    37d4:	5b 98       	cbi	0x0b, 3	; 11
    37d6:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    37d8:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    37da:	5b 98       	cbi	0x0b, 3	; 11
    37dc:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    37de:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    37e0:	5b 98       	cbi	0x0b, 3	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    37e2:	5a 9a       	sbi	0x0b, 2	; 11
    37e4:	21 50       	subi	r18, 0x01	; 1
    37e6:	31 09       	sbc	r19, r1
/* Clear Display                                                        */
/************************************************************************/
static inline void Clear(){
	int x, y = 0;
	pinsMultiWrite(plex_pins, LOW);
	for(x = 0; x < (SH_REG + 1); x++) {
    37e8:	19 f7       	brne	.-58     	; 0x37b0 <__stack+0x2eb1>
    37ea:	01 96       	adiw	r24, 0x01	; 1
{
	uint8_t byte, index, bit = 0;
	uint8_t pos = MT_SIZE - 1;
	uint8_t pos_sz = pos;
	//output byte
	for(byte=0; byte<FONT_HEIGHT; byte++){
    37ec:	87 30       	cpi	r24, 0x07	; 7
    37ee:	91 05       	cpc	r25, r1
    37f0:	09 f0       	breq	.+2      	; 0x37f4 <__stack+0x2ef5>
    37f2:	ce ce       	rjmp	.-612    	; 0x3590 <__stack+0x2c91>
    37f4:	71 50       	subi	r23, 0x01	; 1
}
}*/
static inline void HoldDisplayBuffer(const uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
    37f6:	09 f0       	breq	.+2      	; 0x37fa <__stack+0x2efb>
    37f8:	c5 ce       	rjmp	.-630    	; 0x3584 <__stack+0x2c85>
    37fa:	01 cc       	rjmp	.-2046   	; 0x2ffe <__stack+0x26ff>
    37fc:	59 9a       	sbi	0x0b, 1	; 11
    37fe:	19 cf       	rjmp	.-462    	; 0x3632 <__stack+0x2d33>
    3800:	59 9a       	sbi	0x0b, 1	; 11
    3802:	0b cf       	rjmp	.-490    	; 0x361a <__stack+0x2d1b>
    3804:	59 9a       	sbi	0x0b, 1	; 11
    3806:	fd ce       	rjmp	.-518    	; 0x3602 <__stack+0x2d03>
    3808:	59 9a       	sbi	0x0b, 1	; 11
    380a:	ef ce       	rjmp	.-546    	; 0x35ea <__stack+0x2ceb>
    380c:	59 9a       	sbi	0x0b, 1	; 11
    380e:	e1 ce       	rjmp	.-574    	; 0x35d2 <__stack+0x2cd3>
    3810:	59 9a       	sbi	0x0b, 1	; 11
    3812:	d3 ce       	rjmp	.-602    	; 0x35ba <__stack+0x2cbb>
    3814:	b7 e0       	ldi	r27, 0x07	; 7
    3816:	eb 9f       	mul	r30, r27
    3818:	f0 01       	movw	r30, r0
    381a:	11 24       	eor	r1, r1
    381c:	ec 5b       	subi	r30, 0xBC	; 188
    381e:	fe 4f       	sbci	r31, 0xFE	; 254
    3820:	a2 81       	ldd	r26, Z+2	; 0x02
    3822:	b3 81       	ldd	r27, Z+3	; 0x03
    3824:	4c 91       	ld	r20, X
    3826:	21 e0       	ldi	r18, 0x01	; 1
    3828:	30 e0       	ldi	r19, 0x00	; 0
    382a:	06 80       	ldd	r0, Z+6	; 0x06
    382c:	02 c0       	rjmp	.+4      	; 0x3832 <__stack+0x2f33>
    382e:	22 0f       	add	r18, r18
    3830:	33 1f       	adc	r19, r19
    3832:	0a 94       	dec	r0
    3834:	e2 f7       	brpl	.-8      	; 0x382e <__stack+0x2f2f>
    3836:	24 2b       	or	r18, r20
    3838:	2c 93       	st	X, r18
    383a:	82 cf       	rjmp	.-252    	; 0x3740 <__stack+0x2e41>

0000383c <_exit>:
    383c:	f8 94       	cli

0000383e <__stop_program>:
    383e:	ff cf       	rjmp	.-2      	; 0x383e <__stop_program>
