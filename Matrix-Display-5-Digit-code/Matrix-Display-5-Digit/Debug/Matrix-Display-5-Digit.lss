
Matrix-Display-5-Digit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000118  00800100  00003f6c  00004000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003f6c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000069  00800218  00800218  00004118  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00004118  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004148  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00004188  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000b093  00000000  00000000  00004248  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009a3  00000000  00000000  0000f2db  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005b7e  00000000  00000000  0000fc7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000048c  00000000  00000000  000157fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000602  00000000  00000000  00015c88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00024235  00000000  00000000  0001628a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00005bb0  00000000  00000000  0003a4bf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 22 01 	jmp	0x244	; 0x244 <__ctors_end>
       4:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
       8:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
       c:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      10:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      14:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      18:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      1c:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      20:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      24:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      28:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      2c:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      30:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      34:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      38:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      3c:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      40:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      44:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      48:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      4c:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      50:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      54:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      58:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      5c:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      60:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      64:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 00       	nop
      6c:	00 00       	nop
      6e:	00 5f       	subi	r16, 0xF0	; 240
      70:	00 00       	nop
      72:	00 07       	cpc	r16, r16
      74:	00 07       	cpc	r16, r16
      76:	00 14       	cp	r0, r0
      78:	7f 14       	cp	r7, r15
      7a:	7f 14       	cp	r7, r15
      7c:	24 2a       	or	r2, r20
      7e:	7f 2a       	or	r7, r31
      80:	12 23       	and	r17, r18
      82:	13 08       	sbc	r1, r3
      84:	64 62       	ori	r22, 0x24	; 36
      86:	36 49       	sbci	r19, 0x96	; 150
      88:	56 20       	and	r5, r6
      8a:	50 00       	.word	0x0050	; ????
      8c:	08 07       	cpc	r16, r24
      8e:	03 00       	.word	0x0003	; ????
      90:	00 1c       	adc	r0, r0
      92:	22 41       	sbci	r18, 0x12	; 18
      94:	00 00       	nop
      96:	41 22       	and	r4, r17
      98:	1c 00       	.word	0x001c	; ????
      9a:	2a 1c       	adc	r2, r10
      9c:	7f 1c       	adc	r7, r15
      9e:	2a 08       	sbc	r2, r10
      a0:	08 3e       	cpi	r16, 0xE8	; 232
      a2:	08 08       	sbc	r0, r8
      a4:	00 80       	ld	r0, Z
      a6:	70 30       	cpi	r23, 0x00	; 0
      a8:	00 08       	sbc	r0, r0
      aa:	08 08       	sbc	r0, r8
      ac:	08 08       	sbc	r0, r8
      ae:	00 00       	nop
      b0:	60 60       	ori	r22, 0x00	; 0
      b2:	00 20       	and	r0, r0
      b4:	10 08       	sbc	r1, r0
      b6:	04 02       	muls	r16, r20
      b8:	3e 51       	subi	r19, 0x1E	; 30
      ba:	49 45       	sbci	r20, 0x59	; 89
      bc:	3e 00       	.word	0x003e	; ????
      be:	42 7f       	andi	r20, 0xF2	; 242
      c0:	40 00       	.word	0x0040	; ????
      c2:	72 49       	sbci	r23, 0x92	; 146
      c4:	49 49       	sbci	r20, 0x99	; 153
      c6:	46 21       	and	r20, r6
      c8:	41 49       	sbci	r20, 0x91	; 145
      ca:	4d 33       	cpi	r20, 0x3D	; 61
      cc:	18 14       	cp	r1, r8
      ce:	12 7f       	andi	r17, 0xF2	; 242
      d0:	10 27       	eor	r17, r16
      d2:	45 45       	sbci	r20, 0x55	; 85
      d4:	45 39       	cpi	r20, 0x95	; 149
      d6:	3c 4a       	sbci	r19, 0xAC	; 172
      d8:	49 49       	sbci	r20, 0x99	; 153
      da:	31 41       	sbci	r19, 0x11	; 17
      dc:	21 11       	cpse	r18, r1
      de:	09 07       	cpc	r16, r25
      e0:	36 49       	sbci	r19, 0x96	; 150
      e2:	49 49       	sbci	r20, 0x99	; 153
      e4:	36 46       	sbci	r19, 0x66	; 102
      e6:	49 49       	sbci	r20, 0x99	; 153
      e8:	29 1e       	adc	r2, r25
      ea:	00 00       	nop
      ec:	14 00       	.word	0x0014	; ????
      ee:	00 00       	nop
      f0:	40 34       	cpi	r20, 0x40	; 64
      f2:	00 00       	nop
      f4:	00 08       	sbc	r0, r0
      f6:	14 22       	and	r1, r20
      f8:	41 14       	cp	r4, r1
      fa:	14 14       	cp	r1, r4
      fc:	14 14       	cp	r1, r4
      fe:	00 41       	sbci	r16, 0x10	; 16
     100:	22 14       	cp	r2, r2
     102:	08 02       	muls	r16, r24
     104:	01 59       	subi	r16, 0x91	; 145
     106:	09 06       	cpc	r0, r25
     108:	3e 41       	sbci	r19, 0x1E	; 30
     10a:	5d 59       	subi	r21, 0x9D	; 157
     10c:	4e 7c       	andi	r20, 0xCE	; 206
     10e:	12 11       	cpse	r17, r2
     110:	12 7c       	andi	r17, 0xC2	; 194
     112:	7f 49       	sbci	r23, 0x9F	; 159
     114:	49 49       	sbci	r20, 0x99	; 153
     116:	36 3e       	cpi	r19, 0xE6	; 230
     118:	41 41       	sbci	r20, 0x11	; 17
     11a:	41 22       	and	r4, r17
     11c:	7f 41       	sbci	r23, 0x1F	; 31
     11e:	41 41       	sbci	r20, 0x11	; 17
     120:	3e 7f       	andi	r19, 0xFE	; 254
     122:	49 49       	sbci	r20, 0x99	; 153
     124:	49 41       	sbci	r20, 0x19	; 25
     126:	7f 09       	sbc	r23, r15
     128:	09 09       	sbc	r16, r9
     12a:	01 3e       	cpi	r16, 0xE1	; 225
     12c:	41 41       	sbci	r20, 0x11	; 17
     12e:	51 73       	andi	r21, 0x31	; 49
     130:	7f 08       	sbc	r7, r15
     132:	08 08       	sbc	r0, r8
     134:	7f 00       	.word	0x007f	; ????
     136:	41 7f       	andi	r20, 0xF1	; 241
     138:	41 00       	.word	0x0041	; ????
     13a:	20 40       	sbci	r18, 0x00	; 0
     13c:	41 3f       	cpi	r20, 0xF1	; 241
     13e:	01 7f       	andi	r16, 0xF1	; 241
     140:	08 14       	cp	r0, r8
     142:	22 41       	sbci	r18, 0x12	; 18
     144:	7f 40       	sbci	r23, 0x0F	; 15
     146:	40 40       	sbci	r20, 0x00	; 0
     148:	40 7f       	andi	r20, 0xF0	; 240
     14a:	02 1c       	adc	r0, r2
     14c:	02 7f       	andi	r16, 0xF2	; 242
     14e:	7f 04       	cpc	r7, r15
     150:	08 10       	cpse	r0, r8
     152:	7f 3e       	cpi	r23, 0xEF	; 239
     154:	41 41       	sbci	r20, 0x11	; 17
     156:	41 3e       	cpi	r20, 0xE1	; 225
     158:	7f 09       	sbc	r23, r15
     15a:	09 09       	sbc	r16, r9
     15c:	06 3e       	cpi	r16, 0xE6	; 230
     15e:	41 51       	subi	r20, 0x11	; 17
     160:	21 5e       	subi	r18, 0xE1	; 225
     162:	7f 09       	sbc	r23, r15
     164:	19 29       	or	r17, r9
     166:	46 26       	eor	r4, r22
     168:	49 49       	sbci	r20, 0x99	; 153
     16a:	49 32       	cpi	r20, 0x29	; 41
     16c:	03 01       	movw	r0, r6
     16e:	7f 01       	movw	r14, r30
     170:	03 3f       	cpi	r16, 0xF3	; 243
     172:	40 40       	sbci	r20, 0x00	; 0
     174:	40 3f       	cpi	r20, 0xF0	; 240
     176:	1f 20       	and	r1, r15
     178:	40 20       	and	r4, r0
     17a:	1f 3f       	cpi	r17, 0xFF	; 255
     17c:	40 38       	cpi	r20, 0x80	; 128
     17e:	40 3f       	cpi	r20, 0xF0	; 240
     180:	63 14       	cp	r6, r3
     182:	08 14       	cp	r0, r8
     184:	63 03       	mulsu	r22, r19
     186:	04 78       	andi	r16, 0x84	; 132
     188:	04 03       	mulsu	r16, r20
     18a:	61 59       	subi	r22, 0x91	; 145
     18c:	49 4d       	sbci	r20, 0xD9	; 217
     18e:	43 00       	.word	0x0043	; ????
     190:	7f 41       	sbci	r23, 0x1F	; 31
     192:	41 41       	sbci	r20, 0x11	; 17
     194:	02 04       	cpc	r0, r2
     196:	08 10       	cpse	r0, r8
     198:	20 00       	.word	0x0020	; ????
     19a:	41 41       	sbci	r20, 0x11	; 17
     19c:	41 7f       	andi	r20, 0xF1	; 241
     19e:	04 02       	muls	r16, r20
     1a0:	01 02       	muls	r16, r17
     1a2:	04 40       	sbci	r16, 0x04	; 4
     1a4:	40 40       	sbci	r20, 0x00	; 0
     1a6:	40 40       	sbci	r20, 0x00	; 0
     1a8:	00 03       	mulsu	r16, r16
     1aa:	07 08       	sbc	r0, r7
     1ac:	00 20       	and	r0, r0
     1ae:	54 54       	subi	r21, 0x44	; 68
     1b0:	78 40       	sbci	r23, 0x08	; 8
     1b2:	7f 28       	or	r7, r15
     1b4:	44 44       	sbci	r20, 0x44	; 68
     1b6:	38 38       	cpi	r19, 0x88	; 136
     1b8:	44 44       	sbci	r20, 0x44	; 68
     1ba:	44 28       	or	r4, r4
     1bc:	38 44       	sbci	r19, 0x48	; 72
     1be:	44 28       	or	r4, r4
     1c0:	7f 38       	cpi	r23, 0x8F	; 143
     1c2:	54 54       	subi	r21, 0x44	; 68
     1c4:	54 18       	sub	r5, r4
     1c6:	00 08       	sbc	r0, r0
     1c8:	7e 09       	sbc	r23, r14
     1ca:	02 18       	sub	r0, r2
     1cc:	a4 a4       	ldd	r10, Z+44	; 0x2c
     1ce:	9c 78       	andi	r25, 0x8C	; 140
     1d0:	7f 08       	sbc	r7, r15
     1d2:	04 04       	cpc	r0, r4
     1d4:	78 00       	.word	0x0078	; ????
     1d6:	44 7d       	andi	r20, 0xD4	; 212
     1d8:	40 00       	.word	0x0040	; ????
     1da:	20 40       	sbci	r18, 0x00	; 0
     1dc:	40 3d       	cpi	r20, 0xD0	; 208
     1de:	00 7f       	andi	r16, 0xF0	; 240
     1e0:	10 28       	or	r1, r0
     1e2:	44 00       	.word	0x0044	; ????
     1e4:	00 41       	sbci	r16, 0x10	; 16
     1e6:	7f 40       	sbci	r23, 0x0F	; 15
     1e8:	00 7c       	andi	r16, 0xC0	; 192
     1ea:	04 78       	andi	r16, 0x84	; 132
     1ec:	04 78       	andi	r16, 0x84	; 132
     1ee:	7c 08       	sbc	r7, r12
     1f0:	04 04       	cpc	r0, r4
     1f2:	78 38       	cpi	r23, 0x88	; 136
     1f4:	44 44       	sbci	r20, 0x44	; 68
     1f6:	44 38       	cpi	r20, 0x84	; 132
     1f8:	fc 18       	sub	r15, r12
     1fa:	24 24       	eor	r2, r4
     1fc:	18 18       	sub	r1, r8
     1fe:	24 24       	eor	r2, r4
     200:	18 fc       	.word	0xfc18	; ????
     202:	7c 08       	sbc	r7, r12
     204:	04 04       	cpc	r0, r4
     206:	08 48       	sbci	r16, 0x88	; 136
     208:	54 54       	subi	r21, 0x44	; 68
     20a:	54 24       	eor	r5, r4
     20c:	04 04       	cpc	r0, r4
     20e:	3f 44       	sbci	r19, 0x4F	; 79
     210:	24 3c       	cpi	r18, 0xC4	; 196
     212:	40 40       	sbci	r20, 0x00	; 0
     214:	20 7c       	andi	r18, 0xC0	; 192
     216:	1c 20       	and	r1, r12
     218:	40 20       	and	r4, r0
     21a:	1c 3c       	cpi	r17, 0xCC	; 204
     21c:	40 30       	cpi	r20, 0x00	; 0
     21e:	40 3c       	cpi	r20, 0xC0	; 192
     220:	44 28       	or	r4, r4
     222:	10 28       	or	r1, r0
     224:	44 4c       	sbci	r20, 0xC4	; 196
     226:	90 90 90 7c 	lds	r9, 0x7C90	; 0x807c90 <__bss_end+0x7a0f>
     22a:	44 64       	ori	r20, 0x44	; 68
     22c:	54 4c       	sbci	r21, 0xC4	; 196
     22e:	44 00       	.word	0x0044	; ????
     230:	08 36       	cpi	r16, 0x68	; 104
     232:	41 00       	.word	0x0041	; ????
     234:	00 00       	nop
     236:	77 00       	.word	0x0077	; ????
     238:	00 00       	nop
     23a:	41 36       	cpi	r20, 0x61	; 97
     23c:	08 00       	.word	0x0008	; ????
     23e:	02 01       	movw	r0, r4
     240:	02 04       	cpc	r0, r2
     242:	02 00       	.word	0x0002	; ????

00000244 <__ctors_end>:
     244:	11 24       	eor	r1, r1
     246:	1f be       	out	0x3f, r1	; 63
     248:	cf ef       	ldi	r28, 0xFF	; 255
     24a:	d8 e0       	ldi	r29, 0x08	; 8
     24c:	de bf       	out	0x3e, r29	; 62
     24e:	cd bf       	out	0x3d, r28	; 61

00000250 <__do_copy_data>:
     250:	12 e0       	ldi	r17, 0x02	; 2
     252:	a0 e0       	ldi	r26, 0x00	; 0
     254:	b1 e0       	ldi	r27, 0x01	; 1
     256:	ec e6       	ldi	r30, 0x6C	; 108
     258:	ff e3       	ldi	r31, 0x3F	; 63
     25a:	02 c0       	rjmp	.+4      	; 0x260 <__do_copy_data+0x10>
     25c:	05 90       	lpm	r0, Z+
     25e:	0d 92       	st	X+, r0
     260:	a8 31       	cpi	r26, 0x18	; 24
     262:	b1 07       	cpc	r27, r17
     264:	d9 f7       	brne	.-10     	; 0x25c <__do_copy_data+0xc>

00000266 <__do_clear_bss>:
     266:	22 e0       	ldi	r18, 0x02	; 2
     268:	a8 e1       	ldi	r26, 0x18	; 24
     26a:	b2 e0       	ldi	r27, 0x02	; 2
     26c:	01 c0       	rjmp	.+2      	; 0x270 <.do_clear_bss_start>

0000026e <.do_clear_bss_loop>:
     26e:	1d 92       	st	X+, r1

00000270 <.do_clear_bss_start>:
     270:	a1 38       	cpi	r26, 0x81	; 129
     272:	b2 07       	cpc	r27, r18
     274:	e1 f7       	brne	.-8      	; 0x26e <.do_clear_bss_loop>
     276:	0e 94 c8 06 	call	0xd90	; 0xd90 <main>
     27a:	0c 94 b4 1f 	jmp	0x3f68	; 0x3f68 <_exit>

0000027e <__bad_interrupt>:
     27e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000282 <DisplayBuffer>:
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     282:	cf 92       	push	r12
     284:	df 92       	push	r13
     286:	ef 92       	push	r14
     288:	ff 92       	push	r15
     28a:	0f 93       	push	r16
     28c:	1f 93       	push	r17
     28e:	cf 93       	push	r28
     290:	df 93       	push	r29
     292:	dc 01       	movw	r26, r24
     294:	84 e0       	ldi	r24, 0x04	; 4
     296:	e8 2e       	mov	r14, r24
     298:	81 e0       	ldi	r24, 0x01	; 1
     29a:	f8 2e       	mov	r15, r24
     29c:	40 e0       	ldi	r20, 0x00	; 0
     29e:	50 e0       	ldi	r21, 0x00	; 0
     2a0:	21 e0       	ldi	r18, 0x01	; 1
     2a2:	30 e0       	ldi	r19, 0x00	; 0
     2a4:	b9 01       	movw	r22, r18
     2a6:	04 2e       	mov	r0, r20
     2a8:	01 c0       	rjmp	.+2      	; 0x2ac <DisplayBuffer+0x2a>
     2aa:	66 0f       	add	r22, r22
     2ac:	0a 94       	dec	r0
     2ae:	ea f7       	brpl	.-6      	; 0x2aa <DisplayBuffer+0x28>
     2b0:	86 2f       	mov	r24, r22
     2b2:	58 96       	adiw	r26, 0x18	; 24
     2b4:	9c 91       	ld	r25, X
     2b6:	58 97       	sbiw	r26, 0x18	; 24
     2b8:	69 23       	and	r22, r25
     2ba:	09 f0       	breq	.+2      	; 0x2be <DisplayBuffer+0x3c>
     2bc:	06 c1       	rjmp	.+524    	; 0x4ca <__EEPROM_REGION_LENGTH__+0xca>
     2be:	5d 98       	cbi	0x0b, 5	; 11
     2c0:	97 e1       	ldi	r25, 0x17	; 23
     2c2:	5a 98       	cbi	0x0b, 2	; 11
     2c4:	fd 01       	movw	r30, r26
     2c6:	e9 0f       	add	r30, r25
     2c8:	f1 1d       	adc	r31, r1
     2ca:	60 81       	ld	r22, Z
     2cc:	68 23       	and	r22, r24
     2ce:	09 f0       	breq	.+2      	; 0x2d2 <DisplayBuffer+0x50>
     2d0:	fa c0       	rjmp	.+500    	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
     2d2:	59 98       	cbi	0x0b, 1	; 11
     2d4:	5b 9a       	sbi	0x0b, 3	; 11
     2d6:	5b 98       	cbi	0x0b, 3	; 11
     2d8:	6f ef       	ldi	r22, 0xFF	; 255
     2da:	69 0f       	add	r22, r25
     2dc:	fd 01       	movw	r30, r26
     2de:	e6 0f       	add	r30, r22
     2e0:	f1 1d       	adc	r31, r1
     2e2:	60 81       	ld	r22, Z
     2e4:	68 23       	and	r22, r24
     2e6:	09 f0       	breq	.+2      	; 0x2ea <DisplayBuffer+0x68>
     2e8:	ec c0       	rjmp	.+472    	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
     2ea:	59 98       	cbi	0x0b, 1	; 11
     2ec:	5b 9a       	sbi	0x0b, 3	; 11
     2ee:	5b 98       	cbi	0x0b, 3	; 11
     2f0:	6e ef       	ldi	r22, 0xFE	; 254
     2f2:	69 0f       	add	r22, r25
     2f4:	fd 01       	movw	r30, r26
     2f6:	e6 0f       	add	r30, r22
     2f8:	f1 1d       	adc	r31, r1
     2fa:	60 81       	ld	r22, Z
     2fc:	68 23       	and	r22, r24
     2fe:	09 f0       	breq	.+2      	; 0x302 <DisplayBuffer+0x80>
     300:	de c0       	rjmp	.+444    	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
     302:	59 98       	cbi	0x0b, 1	; 11
     304:	5b 9a       	sbi	0x0b, 3	; 11
     306:	5b 98       	cbi	0x0b, 3	; 11
     308:	6d ef       	ldi	r22, 0xFD	; 253
     30a:	69 0f       	add	r22, r25
     30c:	fd 01       	movw	r30, r26
     30e:	e6 0f       	add	r30, r22
     310:	f1 1d       	adc	r31, r1
     312:	60 81       	ld	r22, Z
     314:	68 23       	and	r22, r24
     316:	09 f0       	breq	.+2      	; 0x31a <DisplayBuffer+0x98>
     318:	d0 c0       	rjmp	.+416    	; 0x4ba <__EEPROM_REGION_LENGTH__+0xba>
     31a:	59 98       	cbi	0x0b, 1	; 11
     31c:	5b 9a       	sbi	0x0b, 3	; 11
     31e:	5b 98       	cbi	0x0b, 3	; 11
     320:	6c ef       	ldi	r22, 0xFC	; 252
     322:	69 0f       	add	r22, r25
     324:	fd 01       	movw	r30, r26
     326:	e6 0f       	add	r30, r22
     328:	f1 1d       	adc	r31, r1
     32a:	60 81       	ld	r22, Z
     32c:	68 23       	and	r22, r24
     32e:	09 f0       	breq	.+2      	; 0x332 <DisplayBuffer+0xb0>
     330:	c2 c0       	rjmp	.+388    	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
     332:	59 98       	cbi	0x0b, 1	; 11
     334:	5b 9a       	sbi	0x0b, 3	; 11
     336:	5b 98       	cbi	0x0b, 3	; 11
     338:	6b ef       	ldi	r22, 0xFB	; 251
     33a:	69 0f       	add	r22, r25
     33c:	fd 01       	movw	r30, r26
     33e:	e6 0f       	add	r30, r22
     340:	f1 1d       	adc	r31, r1
     342:	60 81       	ld	r22, Z
     344:	68 23       	and	r22, r24
     346:	09 f0       	breq	.+2      	; 0x34a <DisplayBuffer+0xc8>
     348:	b4 c0       	rjmp	.+360    	; 0x4b2 <__EEPROM_REGION_LENGTH__+0xb2>
     34a:	59 98       	cbi	0x0b, 1	; 11
     34c:	5b 9a       	sbi	0x0b, 3	; 11
     34e:	5b 98       	cbi	0x0b, 3	; 11
     350:	6a ef       	ldi	r22, 0xFA	; 250
     352:	69 0f       	add	r22, r25
     354:	fd 01       	movw	r30, r26
     356:	e6 0f       	add	r30, r22
     358:	f1 1d       	adc	r31, r1
     35a:	60 81       	ld	r22, Z
     35c:	68 23       	and	r22, r24
     35e:	09 f0       	breq	.+2      	; 0x362 <DisplayBuffer+0xe0>
     360:	a6 c0       	rjmp	.+332    	; 0x4ae <__EEPROM_REGION_LENGTH__+0xae>
     362:	59 98       	cbi	0x0b, 1	; 11
     364:	5b 9a       	sbi	0x0b, 3	; 11
     366:	5b 98       	cbi	0x0b, 3	; 11
     368:	69 ef       	ldi	r22, 0xF9	; 249
     36a:	69 0f       	add	r22, r25
     36c:	fd 01       	movw	r30, r26
     36e:	e6 0f       	add	r30, r22
     370:	f1 1d       	adc	r31, r1
     372:	60 81       	ld	r22, Z
     374:	68 23       	and	r22, r24
     376:	09 f0       	breq	.+2      	; 0x37a <DisplayBuffer+0xf8>
     378:	98 c0       	rjmp	.+304    	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
     37a:	59 98       	cbi	0x0b, 1	; 11
     37c:	5b 9a       	sbi	0x0b, 3	; 11
     37e:	5b 98       	cbi	0x0b, 3	; 11
     380:	98 50       	subi	r25, 0x08	; 8
     382:	5a 9a       	sbi	0x0b, 2	; 11
     384:	9f 3f       	cpi	r25, 0xFF	; 255
     386:	09 f0       	breq	.+2      	; 0x38a <DisplayBuffer+0x108>
     388:	9c cf       	rjmp	.-200    	; 0x2c2 <DisplayBuffer+0x40>
     38a:	c4 e0       	ldi	r28, 0x04	; 4
     38c:	d1 e0       	ldi	r29, 0x01	; 1
     38e:	e9 91       	ld	r30, Y+
     390:	ee 23       	and	r30, r30
     392:	f9 f0       	breq	.+62     	; 0x3d2 <DisplayBuffer+0x150>
     394:	ec 3c       	cpi	r30, 0xCC	; 204
     396:	d8 f7       	brcc	.-10     	; 0x38e <DisplayBuffer+0x10c>
     398:	67 e0       	ldi	r22, 0x07	; 7
     39a:	e6 9f       	mul	r30, r22
     39c:	f0 01       	movw	r30, r0
     39e:	11 24       	eor	r1, r1
     3a0:	cf 01       	movw	r24, r30
     3a2:	84 5b       	subi	r24, 0xB4	; 180
     3a4:	9e 4f       	sbci	r25, 0xFE	; 254
     3a6:	6c 01       	movw	r12, r24
     3a8:	fc 01       	movw	r30, r24
     3aa:	02 81       	ldd	r16, Z+2	; 0x02
     3ac:	13 81       	ldd	r17, Z+3	; 0x03
     3ae:	f8 01       	movw	r30, r16
     3b0:	70 81       	ld	r23, Z
     3b2:	c9 01       	movw	r24, r18
     3b4:	f6 01       	movw	r30, r12
     3b6:	06 80       	ldd	r0, Z+6	; 0x06
     3b8:	02 c0       	rjmp	.+4      	; 0x3be <DisplayBuffer+0x13c>
     3ba:	88 0f       	add	r24, r24
     3bc:	99 1f       	adc	r25, r25
     3be:	0a 94       	dec	r0
     3c0:	e2 f7       	brpl	.-8      	; 0x3ba <DisplayBuffer+0x138>
     3c2:	68 2f       	mov	r22, r24
     3c4:	60 95       	com	r22
     3c6:	67 23       	and	r22, r23
     3c8:	f8 01       	movw	r30, r16
     3ca:	60 83       	st	Z, r22
     3cc:	e9 91       	ld	r30, Y+
     3ce:	e1 11       	cpse	r30, r1
     3d0:	e1 cf       	rjmp	.-62     	; 0x394 <DisplayBuffer+0x112>
     3d2:	e7 01       	movw	r28, r14
     3d4:	e9 91       	ld	r30, Y+
     3d6:	7e 01       	movw	r14, r28
     3d8:	ec 3c       	cpi	r30, 0xCC	; 204
     3da:	08 f4       	brcc	.+2      	; 0x3de <DisplayBuffer+0x15c>
     3dc:	78 c0       	rjmp	.+240    	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
     3de:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     3e2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     3e6:	97 fd       	sbrc	r25, 7
     3e8:	08 c0       	rjmp	.+16     	; 0x3fa <DisplayBuffer+0x178>
     3ea:	ef e9       	ldi	r30, 0x9F	; 159
     3ec:	ff e0       	ldi	r31, 0x0F	; 15
     3ee:	31 97       	sbiw	r30, 0x01	; 1
     3f0:	f1 f7       	brne	.-4      	; 0x3ee <DisplayBuffer+0x16c>
     3f2:	00 c0       	rjmp	.+0      	; 0x3f4 <DisplayBuffer+0x172>
     3f4:	00 00       	nop
     3f6:	01 97       	sbiw	r24, 0x01	; 1
     3f8:	c0 f7       	brcc	.-16     	; 0x3ea <DisplayBuffer+0x168>
     3fa:	c4 e0       	ldi	r28, 0x04	; 4
     3fc:	d1 e0       	ldi	r29, 0x01	; 1
     3fe:	e9 91       	ld	r30, Y+
     400:	ee 23       	and	r30, r30
     402:	f9 f0       	breq	.+62     	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
     404:	ec 3c       	cpi	r30, 0xCC	; 204
     406:	d8 f7       	brcc	.-10     	; 0x3fe <DisplayBuffer+0x17c>
     408:	67 e0       	ldi	r22, 0x07	; 7
     40a:	e6 9f       	mul	r30, r22
     40c:	f0 01       	movw	r30, r0
     40e:	11 24       	eor	r1, r1
     410:	cf 01       	movw	r24, r30
     412:	84 5b       	subi	r24, 0xB4	; 180
     414:	9e 4f       	sbci	r25, 0xFE	; 254
     416:	6c 01       	movw	r12, r24
     418:	fc 01       	movw	r30, r24
     41a:	02 81       	ldd	r16, Z+2	; 0x02
     41c:	13 81       	ldd	r17, Z+3	; 0x03
     41e:	f8 01       	movw	r30, r16
     420:	70 81       	ld	r23, Z
     422:	c9 01       	movw	r24, r18
     424:	f6 01       	movw	r30, r12
     426:	06 80       	ldd	r0, Z+6	; 0x06
     428:	02 c0       	rjmp	.+4      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
     42a:	88 0f       	add	r24, r24
     42c:	99 1f       	adc	r25, r25
     42e:	0a 94       	dec	r0
     430:	e2 f7       	brpl	.-8      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
     432:	68 2f       	mov	r22, r24
     434:	60 95       	com	r22
     436:	67 23       	and	r22, r23
     438:	f8 01       	movw	r30, r16
     43a:	60 83       	st	Z, r22
     43c:	e9 91       	ld	r30, Y+
     43e:	e1 11       	cpse	r30, r1
     440:	e1 cf       	rjmp	.-62     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
     442:	5d 98       	cbi	0x0b, 5	; 11
     444:	84 e0       	ldi	r24, 0x04	; 4
     446:	90 e0       	ldi	r25, 0x00	; 0
     448:	5a 98       	cbi	0x0b, 2	; 11
     44a:	59 98       	cbi	0x0b, 1	; 11
     44c:	5b 9a       	sbi	0x0b, 3	; 11
     44e:	5b 98       	cbi	0x0b, 3	; 11
     450:	59 98       	cbi	0x0b, 1	; 11
     452:	5b 9a       	sbi	0x0b, 3	; 11
     454:	5b 98       	cbi	0x0b, 3	; 11
     456:	59 98       	cbi	0x0b, 1	; 11
     458:	5b 9a       	sbi	0x0b, 3	; 11
     45a:	5b 98       	cbi	0x0b, 3	; 11
     45c:	59 98       	cbi	0x0b, 1	; 11
     45e:	5b 9a       	sbi	0x0b, 3	; 11
     460:	5b 98       	cbi	0x0b, 3	; 11
     462:	59 98       	cbi	0x0b, 1	; 11
     464:	5b 9a       	sbi	0x0b, 3	; 11
     466:	5b 98       	cbi	0x0b, 3	; 11
     468:	59 98       	cbi	0x0b, 1	; 11
     46a:	5b 9a       	sbi	0x0b, 3	; 11
     46c:	5b 98       	cbi	0x0b, 3	; 11
     46e:	59 98       	cbi	0x0b, 1	; 11
     470:	5b 9a       	sbi	0x0b, 3	; 11
     472:	5b 98       	cbi	0x0b, 3	; 11
     474:	59 98       	cbi	0x0b, 1	; 11
     476:	5b 9a       	sbi	0x0b, 3	; 11
     478:	5b 98       	cbi	0x0b, 3	; 11
     47a:	5a 9a       	sbi	0x0b, 2	; 11
     47c:	01 97       	sbiw	r24, 0x01	; 1
     47e:	21 f7       	brne	.-56     	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
     480:	4f 5f       	subi	r20, 0xFF	; 255
     482:	5f 4f       	sbci	r21, 0xFF	; 255
     484:	47 30       	cpi	r20, 0x07	; 7
     486:	51 05       	cpc	r21, r1
     488:	09 f0       	breq	.+2      	; 0x48c <__EEPROM_REGION_LENGTH__+0x8c>
     48a:	0c cf       	rjmp	.-488    	; 0x2a4 <DisplayBuffer+0x22>
     48c:	81 e0       	ldi	r24, 0x01	; 1
     48e:	90 e0       	ldi	r25, 0x00	; 0
     490:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     494:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     498:	df 91       	pop	r29
     49a:	cf 91       	pop	r28
     49c:	1f 91       	pop	r17
     49e:	0f 91       	pop	r16
     4a0:	ff 90       	pop	r15
     4a2:	ef 90       	pop	r14
     4a4:	df 90       	pop	r13
     4a6:	cf 90       	pop	r12
     4a8:	08 95       	ret
     4aa:	59 9a       	sbi	0x0b, 1	; 11
     4ac:	67 cf       	rjmp	.-306    	; 0x37c <DisplayBuffer+0xfa>
     4ae:	59 9a       	sbi	0x0b, 1	; 11
     4b0:	59 cf       	rjmp	.-334    	; 0x364 <DisplayBuffer+0xe2>
     4b2:	59 9a       	sbi	0x0b, 1	; 11
     4b4:	4b cf       	rjmp	.-362    	; 0x34c <DisplayBuffer+0xca>
     4b6:	59 9a       	sbi	0x0b, 1	; 11
     4b8:	3d cf       	rjmp	.-390    	; 0x334 <DisplayBuffer+0xb2>
     4ba:	59 9a       	sbi	0x0b, 1	; 11
     4bc:	2f cf       	rjmp	.-418    	; 0x31c <DisplayBuffer+0x9a>
     4be:	59 9a       	sbi	0x0b, 1	; 11
     4c0:	21 cf       	rjmp	.-446    	; 0x304 <DisplayBuffer+0x82>
     4c2:	59 9a       	sbi	0x0b, 1	; 11
     4c4:	13 cf       	rjmp	.-474    	; 0x2ec <DisplayBuffer+0x6a>
     4c6:	59 9a       	sbi	0x0b, 1	; 11
     4c8:	05 cf       	rjmp	.-502    	; 0x2d4 <DisplayBuffer+0x52>
     4ca:	5d 9a       	sbi	0x0b, 5	; 11
     4cc:	f9 ce       	rjmp	.-526    	; 0x2c0 <DisplayBuffer+0x3e>
     4ce:	d7 e0       	ldi	r29, 0x07	; 7
     4d0:	ed 9f       	mul	r30, r29
     4d2:	f0 01       	movw	r30, r0
     4d4:	11 24       	eor	r1, r1
     4d6:	e4 5b       	subi	r30, 0xB4	; 180
     4d8:	fe 4f       	sbci	r31, 0xFE	; 254
     4da:	c2 81       	ldd	r28, Z+2	; 0x02
     4dc:	d3 81       	ldd	r29, Z+3	; 0x03
     4de:	18 81       	ld	r17, Y
     4e0:	c9 01       	movw	r24, r18
     4e2:	06 80       	ldd	r0, Z+6	; 0x06
     4e4:	02 c0       	rjmp	.+4      	; 0x4ea <__EEPROM_REGION_LENGTH__+0xea>
     4e6:	88 0f       	add	r24, r24
     4e8:	99 1f       	adc	r25, r25
     4ea:	0a 94       	dec	r0
     4ec:	e2 f7       	brpl	.-8      	; 0x4e6 <__EEPROM_REGION_LENGTH__+0xe6>
     4ee:	81 2b       	or	r24, r17
     4f0:	88 83       	st	Y, r24
     4f2:	75 cf       	rjmp	.-278    	; 0x3de <DisplayBuffer+0x15c>

000004f4 <ScrollLongLeft.constprop.3>:
     4f4:	4f 92       	push	r4
     4f6:	5f 92       	push	r5
     4f8:	6f 92       	push	r6
     4fa:	7f 92       	push	r7
     4fc:	8f 92       	push	r8
     4fe:	9f 92       	push	r9
     500:	af 92       	push	r10
     502:	bf 92       	push	r11
     504:	cf 92       	push	r12
     506:	df 92       	push	r13
     508:	ef 92       	push	r14
     50a:	ff 92       	push	r15
     50c:	0f 93       	push	r16
     50e:	1f 93       	push	r17
     510:	cf 93       	push	r28
     512:	df 93       	push	r29
     514:	29 e1       	ldi	r18, 0x19	; 25
     516:	e3 e6       	ldi	r30, 0x63	; 99
     518:	f2 e0       	ldi	r31, 0x02	; 2
     51a:	df 01       	movw	r26, r30
     51c:	c2 2f       	mov	r28, r18
     51e:	1d 92       	st	X+, r1
     520:	ca 95       	dec	r28
     522:	e9 f7       	brne	.-6      	; 0x51e <ScrollLongLeft.constprop.3+0x2a>
     524:	e8 e1       	ldi	r30, 0x18	; 24
     526:	f2 e0       	ldi	r31, 0x02	; 2
     528:	df 01       	movw	r26, r30
     52a:	1d 92       	st	X+, r1
     52c:	2a 95       	dec	r18
     52e:	e9 f7       	brne	.-6      	; 0x52a <ScrollLongLeft.constprop.3+0x36>
     530:	3c 01       	movw	r6, r24
     532:	f1 e8       	ldi	r31, 0x81	; 129
     534:	8f 2e       	mov	r8, r31
     536:	f2 e0       	ldi	r31, 0x02	; 2
     538:	9f 2e       	mov	r9, r31
     53a:	21 e0       	ldi	r18, 0x01	; 1
     53c:	30 e0       	ldi	r19, 0x00	; 0
     53e:	aa 24       	eor	r10, r10
     540:	a3 94       	inc	r10
     542:	b1 2c       	mov	r11, r1
     544:	81 e0       	ldi	r24, 0x01	; 1
     546:	90 e0       	ldi	r25, 0x00	; 0
     548:	d3 01       	movw	r26, r6
     54a:	4d 91       	ld	r20, X+
     54c:	3d 01       	movw	r6, r26
     54e:	44 23       	and	r20, r20
     550:	09 f4       	brne	.+2      	; 0x554 <ScrollLongLeft.constprop.3+0x60>
     552:	57 c2       	rjmp	.+1198   	; 0xa02 <__stack+0x103>
     554:	40 52       	subi	r20, 0x20	; 32
     556:	b5 e0       	ldi	r27, 0x05	; 5
     558:	4b 9f       	mul	r20, r27
     55a:	a0 01       	movw	r20, r0
     55c:	11 24       	eor	r1, r1
     55e:	fa 01       	movw	r30, r20
     560:	e8 59       	subi	r30, 0x98	; 152
     562:	ff 4f       	sbci	r31, 0xFF	; 255
     564:	e4 91       	lpm	r30, Z
     566:	e0 93 7c 02 	sts	0x027C, r30	; 0x80027c <charbuffer>
     56a:	fa 01       	movw	r30, r20
     56c:	e7 59       	subi	r30, 0x97	; 151
     56e:	ff 4f       	sbci	r31, 0xFF	; 255
     570:	e4 91       	lpm	r30, Z
     572:	e0 93 7d 02 	sts	0x027D, r30	; 0x80027d <charbuffer+0x1>
     576:	fa 01       	movw	r30, r20
     578:	e6 59       	subi	r30, 0x96	; 150
     57a:	ff 4f       	sbci	r31, 0xFF	; 255
     57c:	e4 91       	lpm	r30, Z
     57e:	e0 93 7e 02 	sts	0x027E, r30	; 0x80027e <charbuffer+0x2>
     582:	fa 01       	movw	r30, r20
     584:	e5 59       	subi	r30, 0x95	; 149
     586:	ff 4f       	sbci	r31, 0xFF	; 255
     588:	e4 91       	lpm	r30, Z
     58a:	e0 93 7f 02 	sts	0x027F, r30	; 0x80027f <charbuffer+0x3>
     58e:	fa 01       	movw	r30, r20
     590:	e4 59       	subi	r30, 0x94	; 148
     592:	ff 4f       	sbci	r31, 0xFF	; 255
     594:	44 91       	lpm	r20, Z
     596:	40 93 80 02 	sts	0x0280, r20	; 0x800280 <charbuffer+0x4>
     59a:	6c e7       	ldi	r22, 0x7C	; 124
     59c:	72 e0       	ldi	r23, 0x02	; 2
     59e:	eb 01       	movw	r28, r22
     5a0:	59 91       	ld	r21, Y+
     5a2:	be 01       	movw	r22, r28
     5a4:	49 e1       	ldi	r20, 0x19	; 25
     5a6:	e3 e6       	ldi	r30, 0x63	; 99
     5a8:	f2 e0       	ldi	r31, 0x02	; 2
     5aa:	a8 e1       	ldi	r26, 0x18	; 24
     5ac:	b2 e0       	ldi	r27, 0x02	; 2
     5ae:	01 90       	ld	r0, Z+
     5b0:	0d 92       	st	X+, r0
     5b2:	4a 95       	dec	r20
     5b4:	e1 f7       	brne	.-8      	; 0x5ae <ScrollLongLeft.constprop.3+0xba>
     5b6:	50 93 7b 02 	sts	0x027B, r21	; 0x80027b <updatedBufferArray+0x18>
     5ba:	40 91 30 02 	lds	r20, 0x0230	; 0x800230 <__data_end+0x18>
     5be:	40 93 7a 02 	sts	0x027A, r20	; 0x80027a <updatedBufferArray+0x17>
     5c2:	e7 e1       	ldi	r30, 0x17	; 23
     5c4:	e1 50       	subi	r30, 0x01	; 1
     5c6:	4e 2f       	mov	r20, r30
     5c8:	50 e0       	ldi	r21, 0x00	; 0
     5ca:	da 01       	movw	r26, r20
     5cc:	ad 59       	subi	r26, 0x9D	; 157
     5ce:	bd 4f       	sbci	r27, 0xFD	; 253
     5d0:	ea 01       	movw	r28, r20
     5d2:	c8 5e       	subi	r28, 0xE8	; 232
     5d4:	dd 4f       	sbci	r29, 0xFD	; 253
     5d6:	49 81       	ldd	r20, Y+1	; 0x01
     5d8:	4c 93       	st	X, r20
     5da:	e1 11       	cpse	r30, r1
     5dc:	f3 cf       	rjmp	.-26     	; 0x5c4 <ScrollLongLeft.constprop.3+0xd0>
     5de:	1a e0       	ldi	r17, 0x0A	; 10
     5e0:	e4 e0       	ldi	r30, 0x04	; 4
     5e2:	4e 2e       	mov	r4, r30
     5e4:	e1 e0       	ldi	r30, 0x01	; 1
     5e6:	5e 2e       	mov	r5, r30
     5e8:	40 e0       	ldi	r20, 0x00	; 0
     5ea:	50 e0       	ldi	r21, 0x00	; 0
     5ec:	f9 01       	movw	r30, r18
     5ee:	04 2e       	mov	r0, r20
     5f0:	01 c0       	rjmp	.+2      	; 0x5f4 <ScrollLongLeft.constprop.3+0x100>
     5f2:	ee 0f       	add	r30, r30
     5f4:	0a 94       	dec	r0
     5f6:	ea f7       	brpl	.-6      	; 0x5f2 <ScrollLongLeft.constprop.3+0xfe>
     5f8:	fe 2f       	mov	r31, r30
     5fa:	a0 91 7b 02 	lds	r26, 0x027B	; 0x80027b <updatedBufferArray+0x18>
     5fe:	ea 23       	and	r30, r26
     600:	09 f0       	breq	.+2      	; 0x604 <ScrollLongLeft.constprop.3+0x110>
     602:	3d c3       	rjmp	.+1658   	; 0xc7e <__stack+0x37f>
     604:	5d 98       	cbi	0x0b, 5	; 11
     606:	e7 e1       	ldi	r30, 0x17	; 23
     608:	5a 98       	cbi	0x0b, 2	; 11
     60a:	ae 2f       	mov	r26, r30
     60c:	b0 e0       	ldi	r27, 0x00	; 0
     60e:	ad 59       	subi	r26, 0x9D	; 157
     610:	bd 4f       	sbci	r27, 0xFD	; 253
     612:	ac 91       	ld	r26, X
     614:	af 23       	and	r26, r31
     616:	09 f0       	breq	.+2      	; 0x61a <ScrollLongLeft.constprop.3+0x126>
     618:	30 c3       	rjmp	.+1632   	; 0xc7a <__stack+0x37b>
     61a:	59 98       	cbi	0x0b, 1	; 11
     61c:	5b 9a       	sbi	0x0b, 3	; 11
     61e:	5b 98       	cbi	0x0b, 3	; 11
     620:	af ef       	ldi	r26, 0xFF	; 255
     622:	ae 0f       	add	r26, r30
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	ad 59       	subi	r26, 0x9D	; 157
     628:	bd 4f       	sbci	r27, 0xFD	; 253
     62a:	ac 91       	ld	r26, X
     62c:	af 23       	and	r26, r31
     62e:	09 f0       	breq	.+2      	; 0x632 <ScrollLongLeft.constprop.3+0x13e>
     630:	22 c3       	rjmp	.+1604   	; 0xc76 <__stack+0x377>
     632:	59 98       	cbi	0x0b, 1	; 11
     634:	5b 9a       	sbi	0x0b, 3	; 11
     636:	5b 98       	cbi	0x0b, 3	; 11
     638:	ae ef       	ldi	r26, 0xFE	; 254
     63a:	ae 0f       	add	r26, r30
     63c:	b0 e0       	ldi	r27, 0x00	; 0
     63e:	ad 59       	subi	r26, 0x9D	; 157
     640:	bd 4f       	sbci	r27, 0xFD	; 253
     642:	ac 91       	ld	r26, X
     644:	af 23       	and	r26, r31
     646:	09 f0       	breq	.+2      	; 0x64a <ScrollLongLeft.constprop.3+0x156>
     648:	14 c3       	rjmp	.+1576   	; 0xc72 <__stack+0x373>
     64a:	59 98       	cbi	0x0b, 1	; 11
     64c:	5b 9a       	sbi	0x0b, 3	; 11
     64e:	5b 98       	cbi	0x0b, 3	; 11
     650:	ad ef       	ldi	r26, 0xFD	; 253
     652:	ae 0f       	add	r26, r30
     654:	b0 e0       	ldi	r27, 0x00	; 0
     656:	ad 59       	subi	r26, 0x9D	; 157
     658:	bd 4f       	sbci	r27, 0xFD	; 253
     65a:	ac 91       	ld	r26, X
     65c:	af 23       	and	r26, r31
     65e:	09 f0       	breq	.+2      	; 0x662 <ScrollLongLeft.constprop.3+0x16e>
     660:	06 c3       	rjmp	.+1548   	; 0xc6e <__stack+0x36f>
     662:	59 98       	cbi	0x0b, 1	; 11
     664:	5b 9a       	sbi	0x0b, 3	; 11
     666:	5b 98       	cbi	0x0b, 3	; 11
     668:	ac ef       	ldi	r26, 0xFC	; 252
     66a:	ae 0f       	add	r26, r30
     66c:	b0 e0       	ldi	r27, 0x00	; 0
     66e:	ad 59       	subi	r26, 0x9D	; 157
     670:	bd 4f       	sbci	r27, 0xFD	; 253
     672:	ac 91       	ld	r26, X
     674:	af 23       	and	r26, r31
     676:	09 f0       	breq	.+2      	; 0x67a <ScrollLongLeft.constprop.3+0x186>
     678:	f8 c2       	rjmp	.+1520   	; 0xc6a <__stack+0x36b>
     67a:	59 98       	cbi	0x0b, 1	; 11
     67c:	5b 9a       	sbi	0x0b, 3	; 11
     67e:	5b 98       	cbi	0x0b, 3	; 11
     680:	ab ef       	ldi	r26, 0xFB	; 251
     682:	ae 0f       	add	r26, r30
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	ad 59       	subi	r26, 0x9D	; 157
     688:	bd 4f       	sbci	r27, 0xFD	; 253
     68a:	ac 91       	ld	r26, X
     68c:	af 23       	and	r26, r31
     68e:	09 f0       	breq	.+2      	; 0x692 <ScrollLongLeft.constprop.3+0x19e>
     690:	ea c2       	rjmp	.+1492   	; 0xc66 <__stack+0x367>
     692:	59 98       	cbi	0x0b, 1	; 11
     694:	5b 9a       	sbi	0x0b, 3	; 11
     696:	5b 98       	cbi	0x0b, 3	; 11
     698:	aa ef       	ldi	r26, 0xFA	; 250
     69a:	ae 0f       	add	r26, r30
     69c:	b0 e0       	ldi	r27, 0x00	; 0
     69e:	ad 59       	subi	r26, 0x9D	; 157
     6a0:	bd 4f       	sbci	r27, 0xFD	; 253
     6a2:	ac 91       	ld	r26, X
     6a4:	af 23       	and	r26, r31
     6a6:	09 f0       	breq	.+2      	; 0x6aa <ScrollLongLeft.constprop.3+0x1b6>
     6a8:	dc c2       	rjmp	.+1464   	; 0xc62 <__stack+0x363>
     6aa:	59 98       	cbi	0x0b, 1	; 11
     6ac:	5b 9a       	sbi	0x0b, 3	; 11
     6ae:	5b 98       	cbi	0x0b, 3	; 11
     6b0:	a9 ef       	ldi	r26, 0xF9	; 249
     6b2:	ae 0f       	add	r26, r30
     6b4:	b0 e0       	ldi	r27, 0x00	; 0
     6b6:	ad 59       	subi	r26, 0x9D	; 157
     6b8:	bd 4f       	sbci	r27, 0xFD	; 253
     6ba:	ac 91       	ld	r26, X
     6bc:	af 23       	and	r26, r31
     6be:	09 f0       	breq	.+2      	; 0x6c2 <ScrollLongLeft.constprop.3+0x1ce>
     6c0:	ce c2       	rjmp	.+1436   	; 0xc5e <__stack+0x35f>
     6c2:	59 98       	cbi	0x0b, 1	; 11
     6c4:	5b 9a       	sbi	0x0b, 3	; 11
     6c6:	5b 98       	cbi	0x0b, 3	; 11
     6c8:	e8 50       	subi	r30, 0x08	; 8
     6ca:	5a 9a       	sbi	0x0b, 2	; 11
     6cc:	ef 3f       	cpi	r30, 0xFF	; 255
     6ce:	09 f0       	breq	.+2      	; 0x6d2 <ScrollLongLeft.constprop.3+0x1de>
     6d0:	9b cf       	rjmp	.-202    	; 0x608 <ScrollLongLeft.constprop.3+0x114>
     6d2:	a4 e0       	ldi	r26, 0x04	; 4
     6d4:	b1 e0       	ldi	r27, 0x01	; 1
     6d6:	ed 91       	ld	r30, X+
     6d8:	ee 23       	and	r30, r30
     6da:	c9 f0       	breq	.+50     	; 0x70e <ScrollLongLeft.constprop.3+0x21a>
     6dc:	ec 3c       	cpi	r30, 0xCC	; 204
     6de:	d8 f7       	brcc	.-10     	; 0x6d6 <ScrollLongLeft.constprop.3+0x1e2>
     6e0:	d7 e0       	ldi	r29, 0x07	; 7
     6e2:	ed 9f       	mul	r30, r29
     6e4:	f0 01       	movw	r30, r0
     6e6:	11 24       	eor	r1, r1
     6e8:	e4 5b       	subi	r30, 0xB4	; 180
     6ea:	fe 4f       	sbci	r31, 0xFE	; 254
     6ec:	c2 81       	ldd	r28, Z+2	; 0x02
     6ee:	d3 81       	ldd	r29, Z+3	; 0x03
     6f0:	c8 80       	ld	r12, Y
     6f2:	79 01       	movw	r14, r18
     6f4:	06 80       	ldd	r0, Z+6	; 0x06
     6f6:	02 c0       	rjmp	.+4      	; 0x6fc <ScrollLongLeft.constprop.3+0x208>
     6f8:	ee 0c       	add	r14, r14
     6fa:	ff 1c       	adc	r15, r15
     6fc:	0a 94       	dec	r0
     6fe:	e2 f7       	brpl	.-8      	; 0x6f8 <ScrollLongLeft.constprop.3+0x204>
     700:	f7 01       	movw	r30, r14
     702:	e0 95       	com	r30
     704:	ec 21       	and	r30, r12
     706:	e8 83       	st	Y, r30
     708:	ed 91       	ld	r30, X+
     70a:	e1 11       	cpse	r30, r1
     70c:	e7 cf       	rjmp	.-50     	; 0x6dc <ScrollLongLeft.constprop.3+0x1e8>
     70e:	d2 01       	movw	r26, r4
     710:	ed 91       	ld	r30, X+
     712:	2d 01       	movw	r4, r26
     714:	ec 3c       	cpi	r30, 0xCC	; 204
     716:	08 f4       	brcc	.+2      	; 0x71a <ScrollLongLeft.constprop.3+0x226>
     718:	b4 c2       	rjmp	.+1384   	; 0xc82 <__stack+0x383>
     71a:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     71e:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     722:	f7 fd       	sbrc	r31, 7
     724:	08 c0       	rjmp	.+16     	; 0x736 <ScrollLongLeft.constprop.3+0x242>
     726:	af e9       	ldi	r26, 0x9F	; 159
     728:	bf e0       	ldi	r27, 0x0F	; 15
     72a:	11 97       	sbiw	r26, 0x01	; 1
     72c:	f1 f7       	brne	.-4      	; 0x72a <ScrollLongLeft.constprop.3+0x236>
     72e:	00 c0       	rjmp	.+0      	; 0x730 <ScrollLongLeft.constprop.3+0x23c>
     730:	00 00       	nop
     732:	31 97       	sbiw	r30, 0x01	; 1
     734:	c0 f7       	brcc	.-16     	; 0x726 <ScrollLongLeft.constprop.3+0x232>
     736:	a4 e0       	ldi	r26, 0x04	; 4
     738:	b1 e0       	ldi	r27, 0x01	; 1
     73a:	ed 91       	ld	r30, X+
     73c:	ee 23       	and	r30, r30
     73e:	c9 f0       	breq	.+50     	; 0x772 <ScrollLongLeft.constprop.3+0x27e>
     740:	ec 3c       	cpi	r30, 0xCC	; 204
     742:	d8 f7       	brcc	.-10     	; 0x73a <ScrollLongLeft.constprop.3+0x246>
     744:	c7 e0       	ldi	r28, 0x07	; 7
     746:	ec 9f       	mul	r30, r28
     748:	f0 01       	movw	r30, r0
     74a:	11 24       	eor	r1, r1
     74c:	e4 5b       	subi	r30, 0xB4	; 180
     74e:	fe 4f       	sbci	r31, 0xFE	; 254
     750:	c2 81       	ldd	r28, Z+2	; 0x02
     752:	d3 81       	ldd	r29, Z+3	; 0x03
     754:	c8 80       	ld	r12, Y
     756:	79 01       	movw	r14, r18
     758:	06 80       	ldd	r0, Z+6	; 0x06
     75a:	02 c0       	rjmp	.+4      	; 0x760 <ScrollLongLeft.constprop.3+0x26c>
     75c:	ee 0c       	add	r14, r14
     75e:	ff 1c       	adc	r15, r15
     760:	0a 94       	dec	r0
     762:	e2 f7       	brpl	.-8      	; 0x75c <ScrollLongLeft.constprop.3+0x268>
     764:	f7 01       	movw	r30, r14
     766:	e0 95       	com	r30
     768:	ec 21       	and	r30, r12
     76a:	e8 83       	st	Y, r30
     76c:	ed 91       	ld	r30, X+
     76e:	e1 11       	cpse	r30, r1
     770:	e7 cf       	rjmp	.-50     	; 0x740 <ScrollLongLeft.constprop.3+0x24c>
     772:	5d 98       	cbi	0x0b, 5	; 11
     774:	e4 e0       	ldi	r30, 0x04	; 4
     776:	f0 e0       	ldi	r31, 0x00	; 0
     778:	5a 98       	cbi	0x0b, 2	; 11
     77a:	59 98       	cbi	0x0b, 1	; 11
     77c:	5b 9a       	sbi	0x0b, 3	; 11
     77e:	5b 98       	cbi	0x0b, 3	; 11
     780:	59 98       	cbi	0x0b, 1	; 11
     782:	5b 9a       	sbi	0x0b, 3	; 11
     784:	5b 98       	cbi	0x0b, 3	; 11
     786:	59 98       	cbi	0x0b, 1	; 11
     788:	5b 9a       	sbi	0x0b, 3	; 11
     78a:	5b 98       	cbi	0x0b, 3	; 11
     78c:	59 98       	cbi	0x0b, 1	; 11
     78e:	5b 9a       	sbi	0x0b, 3	; 11
     790:	5b 98       	cbi	0x0b, 3	; 11
     792:	59 98       	cbi	0x0b, 1	; 11
     794:	5b 9a       	sbi	0x0b, 3	; 11
     796:	5b 98       	cbi	0x0b, 3	; 11
     798:	59 98       	cbi	0x0b, 1	; 11
     79a:	5b 9a       	sbi	0x0b, 3	; 11
     79c:	5b 98       	cbi	0x0b, 3	; 11
     79e:	59 98       	cbi	0x0b, 1	; 11
     7a0:	5b 9a       	sbi	0x0b, 3	; 11
     7a2:	5b 98       	cbi	0x0b, 3	; 11
     7a4:	59 98       	cbi	0x0b, 1	; 11
     7a6:	5b 9a       	sbi	0x0b, 3	; 11
     7a8:	5b 98       	cbi	0x0b, 3	; 11
     7aa:	5a 9a       	sbi	0x0b, 2	; 11
     7ac:	31 97       	sbiw	r30, 0x01	; 1
     7ae:	21 f7       	brne	.-56     	; 0x778 <ScrollLongLeft.constprop.3+0x284>
     7b0:	4f 5f       	subi	r20, 0xFF	; 255
     7b2:	5f 4f       	sbci	r21, 0xFF	; 255
     7b4:	47 30       	cpi	r20, 0x07	; 7
     7b6:	51 05       	cpc	r21, r1
     7b8:	09 f0       	breq	.+2      	; 0x7bc <ScrollLongLeft.constprop.3+0x2c8>
     7ba:	18 cf       	rjmp	.-464    	; 0x5ec <ScrollLongLeft.constprop.3+0xf8>
     7bc:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     7c0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     7c4:	11 50       	subi	r17, 0x01	; 1
     7c6:	09 f0       	breq	.+2      	; 0x7ca <ScrollLongLeft.constprop.3+0x2d6>
     7c8:	0b cf       	rjmp	.-490    	; 0x5e0 <ScrollLongLeft.constprop.3+0xec>
     7ca:	86 16       	cp	r8, r22
     7cc:	97 06       	cpc	r9, r23
     7ce:	09 f0       	breq	.+2      	; 0x7d2 <ScrollLongLeft.constprop.3+0x2de>
     7d0:	e6 ce       	rjmp	.-564    	; 0x59e <ScrollLongLeft.constprop.3+0xaa>
     7d2:	49 e1       	ldi	r20, 0x19	; 25
     7d4:	e3 e6       	ldi	r30, 0x63	; 99
     7d6:	f2 e0       	ldi	r31, 0x02	; 2
     7d8:	a8 e1       	ldi	r26, 0x18	; 24
     7da:	b2 e0       	ldi	r27, 0x02	; 2
     7dc:	01 90       	ld	r0, Z+
     7de:	0d 92       	st	X+, r0
     7e0:	4a 95       	dec	r20
     7e2:	e1 f7       	brne	.-8      	; 0x7dc <ScrollLongLeft.constprop.3+0x2e8>
     7e4:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <updatedBufferArray+0x18>
     7e8:	40 91 30 02 	lds	r20, 0x0230	; 0x800230 <__data_end+0x18>
     7ec:	40 93 7a 02 	sts	0x027A, r20	; 0x80027a <updatedBufferArray+0x17>
     7f0:	47 e1       	ldi	r20, 0x17	; 23
     7f2:	41 50       	subi	r20, 0x01	; 1
     7f4:	64 2f       	mov	r22, r20
     7f6:	70 e0       	ldi	r23, 0x00	; 0
     7f8:	fb 01       	movw	r30, r22
     7fa:	ed 59       	subi	r30, 0x9D	; 157
     7fc:	fd 4f       	sbci	r31, 0xFD	; 253
     7fe:	db 01       	movw	r26, r22
     800:	a8 5e       	subi	r26, 0xE8	; 232
     802:	bd 4f       	sbci	r27, 0xFD	; 253
     804:	11 96       	adiw	r26, 0x01	; 1
     806:	5c 91       	ld	r21, X
     808:	50 83       	st	Z, r21
     80a:	41 11       	cpse	r20, r1
     80c:	f2 cf       	rjmp	.-28     	; 0x7f2 <ScrollLongLeft.constprop.3+0x2fe>
     80e:	7a e0       	ldi	r23, 0x0A	; 10
     810:	f7 2e       	mov	r15, r23
     812:	64 e0       	ldi	r22, 0x04	; 4
     814:	71 e0       	ldi	r23, 0x01	; 1
     816:	40 e0       	ldi	r20, 0x00	; 0
     818:	50 e0       	ldi	r21, 0x00	; 0
     81a:	f9 01       	movw	r30, r18
     81c:	04 2e       	mov	r0, r20
     81e:	01 c0       	rjmp	.+2      	; 0x822 <__DATA_REGION_LENGTH__+0x22>
     820:	ee 0f       	add	r30, r30
     822:	0a 94       	dec	r0
     824:	ea f7       	brpl	.-6      	; 0x820 <__DATA_REGION_LENGTH__+0x20>
     826:	fe 2f       	mov	r31, r30
     828:	a0 91 7b 02 	lds	r26, 0x027B	; 0x80027b <updatedBufferArray+0x18>
     82c:	ea 23       	and	r30, r26
     82e:	09 f0       	breq	.+2      	; 0x832 <__DATA_REGION_LENGTH__+0x32>
     830:	4c c2       	rjmp	.+1176   	; 0xcca <__stack+0x3cb>
     832:	5d 98       	cbi	0x0b, 5	; 11
     834:	e7 e1       	ldi	r30, 0x17	; 23
     836:	5a 98       	cbi	0x0b, 2	; 11
     838:	ae 2f       	mov	r26, r30
     83a:	b0 e0       	ldi	r27, 0x00	; 0
     83c:	ad 59       	subi	r26, 0x9D	; 157
     83e:	bd 4f       	sbci	r27, 0xFD	; 253
     840:	ac 91       	ld	r26, X
     842:	af 23       	and	r26, r31
     844:	09 f0       	breq	.+2      	; 0x848 <__DATA_REGION_LENGTH__+0x48>
     846:	3f c2       	rjmp	.+1150   	; 0xcc6 <__stack+0x3c7>
     848:	59 98       	cbi	0x0b, 1	; 11
     84a:	5b 9a       	sbi	0x0b, 3	; 11
     84c:	5b 98       	cbi	0x0b, 3	; 11
     84e:	af ef       	ldi	r26, 0xFF	; 255
     850:	ae 0f       	add	r26, r30
     852:	b0 e0       	ldi	r27, 0x00	; 0
     854:	ad 59       	subi	r26, 0x9D	; 157
     856:	bd 4f       	sbci	r27, 0xFD	; 253
     858:	ac 91       	ld	r26, X
     85a:	af 23       	and	r26, r31
     85c:	09 f0       	breq	.+2      	; 0x860 <__DATA_REGION_LENGTH__+0x60>
     85e:	31 c2       	rjmp	.+1122   	; 0xcc2 <__stack+0x3c3>
     860:	59 98       	cbi	0x0b, 1	; 11
     862:	5b 9a       	sbi	0x0b, 3	; 11
     864:	5b 98       	cbi	0x0b, 3	; 11
     866:	ae ef       	ldi	r26, 0xFE	; 254
     868:	ae 0f       	add	r26, r30
     86a:	b0 e0       	ldi	r27, 0x00	; 0
     86c:	ad 59       	subi	r26, 0x9D	; 157
     86e:	bd 4f       	sbci	r27, 0xFD	; 253
     870:	ac 91       	ld	r26, X
     872:	af 23       	and	r26, r31
     874:	09 f0       	breq	.+2      	; 0x878 <__DATA_REGION_LENGTH__+0x78>
     876:	23 c2       	rjmp	.+1094   	; 0xcbe <__stack+0x3bf>
     878:	59 98       	cbi	0x0b, 1	; 11
     87a:	5b 9a       	sbi	0x0b, 3	; 11
     87c:	5b 98       	cbi	0x0b, 3	; 11
     87e:	ad ef       	ldi	r26, 0xFD	; 253
     880:	ae 0f       	add	r26, r30
     882:	b0 e0       	ldi	r27, 0x00	; 0
     884:	ad 59       	subi	r26, 0x9D	; 157
     886:	bd 4f       	sbci	r27, 0xFD	; 253
     888:	ac 91       	ld	r26, X
     88a:	af 23       	and	r26, r31
     88c:	09 f0       	breq	.+2      	; 0x890 <__DATA_REGION_LENGTH__+0x90>
     88e:	15 c2       	rjmp	.+1066   	; 0xcba <__stack+0x3bb>
     890:	59 98       	cbi	0x0b, 1	; 11
     892:	5b 9a       	sbi	0x0b, 3	; 11
     894:	5b 98       	cbi	0x0b, 3	; 11
     896:	ac ef       	ldi	r26, 0xFC	; 252
     898:	ae 0f       	add	r26, r30
     89a:	b0 e0       	ldi	r27, 0x00	; 0
     89c:	ad 59       	subi	r26, 0x9D	; 157
     89e:	bd 4f       	sbci	r27, 0xFD	; 253
     8a0:	ac 91       	ld	r26, X
     8a2:	af 23       	and	r26, r31
     8a4:	09 f0       	breq	.+2      	; 0x8a8 <__DATA_REGION_LENGTH__+0xa8>
     8a6:	07 c2       	rjmp	.+1038   	; 0xcb6 <__stack+0x3b7>
     8a8:	59 98       	cbi	0x0b, 1	; 11
     8aa:	5b 9a       	sbi	0x0b, 3	; 11
     8ac:	5b 98       	cbi	0x0b, 3	; 11
     8ae:	ab ef       	ldi	r26, 0xFB	; 251
     8b0:	ae 0f       	add	r26, r30
     8b2:	b0 e0       	ldi	r27, 0x00	; 0
     8b4:	ad 59       	subi	r26, 0x9D	; 157
     8b6:	bd 4f       	sbci	r27, 0xFD	; 253
     8b8:	ac 91       	ld	r26, X
     8ba:	af 23       	and	r26, r31
     8bc:	09 f0       	breq	.+2      	; 0x8c0 <__DATA_REGION_LENGTH__+0xc0>
     8be:	f9 c1       	rjmp	.+1010   	; 0xcb2 <__stack+0x3b3>
     8c0:	59 98       	cbi	0x0b, 1	; 11
     8c2:	5b 9a       	sbi	0x0b, 3	; 11
     8c4:	5b 98       	cbi	0x0b, 3	; 11
     8c6:	aa ef       	ldi	r26, 0xFA	; 250
     8c8:	ae 0f       	add	r26, r30
     8ca:	b0 e0       	ldi	r27, 0x00	; 0
     8cc:	ad 59       	subi	r26, 0x9D	; 157
     8ce:	bd 4f       	sbci	r27, 0xFD	; 253
     8d0:	ac 91       	ld	r26, X
     8d2:	af 23       	and	r26, r31
     8d4:	09 f0       	breq	.+2      	; 0x8d8 <__DATA_REGION_LENGTH__+0xd8>
     8d6:	eb c1       	rjmp	.+982    	; 0xcae <__stack+0x3af>
     8d8:	59 98       	cbi	0x0b, 1	; 11
     8da:	5b 9a       	sbi	0x0b, 3	; 11
     8dc:	5b 98       	cbi	0x0b, 3	; 11
     8de:	a9 ef       	ldi	r26, 0xF9	; 249
     8e0:	ae 0f       	add	r26, r30
     8e2:	b0 e0       	ldi	r27, 0x00	; 0
     8e4:	ad 59       	subi	r26, 0x9D	; 157
     8e6:	bd 4f       	sbci	r27, 0xFD	; 253
     8e8:	ac 91       	ld	r26, X
     8ea:	af 23       	and	r26, r31
     8ec:	09 f0       	breq	.+2      	; 0x8f0 <__DATA_REGION_LENGTH__+0xf0>
     8ee:	dd c1       	rjmp	.+954    	; 0xcaa <__stack+0x3ab>
     8f0:	59 98       	cbi	0x0b, 1	; 11
     8f2:	5b 9a       	sbi	0x0b, 3	; 11
     8f4:	5b 98       	cbi	0x0b, 3	; 11
     8f6:	e8 50       	subi	r30, 0x08	; 8
     8f8:	5a 9a       	sbi	0x0b, 2	; 11
     8fa:	ef 3f       	cpi	r30, 0xFF	; 255
     8fc:	09 f0       	breq	.+2      	; 0x900 <__stack+0x1>
     8fe:	9b cf       	rjmp	.-202    	; 0x836 <__DATA_REGION_LENGTH__+0x36>
     900:	a4 e0       	ldi	r26, 0x04	; 4
     902:	b1 e0       	ldi	r27, 0x01	; 1
     904:	ed 91       	ld	r30, X+
     906:	ee 23       	and	r30, r30
     908:	c9 f0       	breq	.+50     	; 0x93c <__stack+0x3d>
     90a:	ec 3c       	cpi	r30, 0xCC	; 204
     90c:	d8 f7       	brcc	.-10     	; 0x904 <__stack+0x5>
     90e:	07 e0       	ldi	r16, 0x07	; 7
     910:	e0 9f       	mul	r30, r16
     912:	f0 01       	movw	r30, r0
     914:	11 24       	eor	r1, r1
     916:	e4 5b       	subi	r30, 0xB4	; 180
     918:	fe 4f       	sbci	r31, 0xFE	; 254
     91a:	c2 81       	ldd	r28, Z+2	; 0x02
     91c:	d3 81       	ldd	r29, Z+3	; 0x03
     91e:	e8 80       	ld	r14, Y
     920:	69 01       	movw	r12, r18
     922:	06 80       	ldd	r0, Z+6	; 0x06
     924:	02 c0       	rjmp	.+4      	; 0x92a <__stack+0x2b>
     926:	cc 0c       	add	r12, r12
     928:	dd 1c       	adc	r13, r13
     92a:	0a 94       	dec	r0
     92c:	e2 f7       	brpl	.-8      	; 0x926 <__stack+0x27>
     92e:	f6 01       	movw	r30, r12
     930:	e0 95       	com	r30
     932:	ee 21       	and	r30, r14
     934:	e8 83       	st	Y, r30
     936:	ed 91       	ld	r30, X+
     938:	e1 11       	cpse	r30, r1
     93a:	e7 cf       	rjmp	.-50     	; 0x90a <__stack+0xb>
     93c:	db 01       	movw	r26, r22
     93e:	ed 91       	ld	r30, X+
     940:	bd 01       	movw	r22, r26
     942:	ec 3c       	cpi	r30, 0xCC	; 204
     944:	08 f4       	brcc	.+2      	; 0x948 <__stack+0x49>
     946:	c3 c1       	rjmp	.+902    	; 0xcce <__stack+0x3cf>
     948:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     94c:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     950:	f7 fd       	sbrc	r31, 7
     952:	08 c0       	rjmp	.+16     	; 0x964 <__stack+0x65>
     954:	af e9       	ldi	r26, 0x9F	; 159
     956:	bf e0       	ldi	r27, 0x0F	; 15
     958:	11 97       	sbiw	r26, 0x01	; 1
     95a:	f1 f7       	brne	.-4      	; 0x958 <__stack+0x59>
     95c:	00 c0       	rjmp	.+0      	; 0x95e <__stack+0x5f>
     95e:	00 00       	nop
     960:	31 97       	sbiw	r30, 0x01	; 1
     962:	c0 f7       	brcc	.-16     	; 0x954 <__stack+0x55>
     964:	a4 e0       	ldi	r26, 0x04	; 4
     966:	b1 e0       	ldi	r27, 0x01	; 1
     968:	ed 91       	ld	r30, X+
     96a:	ee 23       	and	r30, r30
     96c:	c9 f0       	breq	.+50     	; 0x9a0 <__stack+0xa1>
     96e:	ec 3c       	cpi	r30, 0xCC	; 204
     970:	d8 f7       	brcc	.-10     	; 0x968 <__stack+0x69>
     972:	c7 e0       	ldi	r28, 0x07	; 7
     974:	ec 9f       	mul	r30, r28
     976:	f0 01       	movw	r30, r0
     978:	11 24       	eor	r1, r1
     97a:	e4 5b       	subi	r30, 0xB4	; 180
     97c:	fe 4f       	sbci	r31, 0xFE	; 254
     97e:	c2 81       	ldd	r28, Z+2	; 0x02
     980:	d3 81       	ldd	r29, Z+3	; 0x03
     982:	e8 80       	ld	r14, Y
     984:	69 01       	movw	r12, r18
     986:	06 80       	ldd	r0, Z+6	; 0x06
     988:	02 c0       	rjmp	.+4      	; 0x98e <__stack+0x8f>
     98a:	cc 0c       	add	r12, r12
     98c:	dd 1c       	adc	r13, r13
     98e:	0a 94       	dec	r0
     990:	e2 f7       	brpl	.-8      	; 0x98a <__stack+0x8b>
     992:	f6 01       	movw	r30, r12
     994:	e0 95       	com	r30
     996:	ee 21       	and	r30, r14
     998:	e8 83       	st	Y, r30
     99a:	ed 91       	ld	r30, X+
     99c:	e1 11       	cpse	r30, r1
     99e:	e7 cf       	rjmp	.-50     	; 0x96e <__stack+0x6f>
     9a0:	5d 98       	cbi	0x0b, 5	; 11
     9a2:	e4 e0       	ldi	r30, 0x04	; 4
     9a4:	f0 e0       	ldi	r31, 0x00	; 0
     9a6:	5a 98       	cbi	0x0b, 2	; 11
     9a8:	59 98       	cbi	0x0b, 1	; 11
     9aa:	5b 9a       	sbi	0x0b, 3	; 11
     9ac:	5b 98       	cbi	0x0b, 3	; 11
     9ae:	59 98       	cbi	0x0b, 1	; 11
     9b0:	5b 9a       	sbi	0x0b, 3	; 11
     9b2:	5b 98       	cbi	0x0b, 3	; 11
     9b4:	59 98       	cbi	0x0b, 1	; 11
     9b6:	5b 9a       	sbi	0x0b, 3	; 11
     9b8:	5b 98       	cbi	0x0b, 3	; 11
     9ba:	59 98       	cbi	0x0b, 1	; 11
     9bc:	5b 9a       	sbi	0x0b, 3	; 11
     9be:	5b 98       	cbi	0x0b, 3	; 11
     9c0:	59 98       	cbi	0x0b, 1	; 11
     9c2:	5b 9a       	sbi	0x0b, 3	; 11
     9c4:	5b 98       	cbi	0x0b, 3	; 11
     9c6:	59 98       	cbi	0x0b, 1	; 11
     9c8:	5b 9a       	sbi	0x0b, 3	; 11
     9ca:	5b 98       	cbi	0x0b, 3	; 11
     9cc:	59 98       	cbi	0x0b, 1	; 11
     9ce:	5b 9a       	sbi	0x0b, 3	; 11
     9d0:	5b 98       	cbi	0x0b, 3	; 11
     9d2:	59 98       	cbi	0x0b, 1	; 11
     9d4:	5b 9a       	sbi	0x0b, 3	; 11
     9d6:	5b 98       	cbi	0x0b, 3	; 11
     9d8:	5a 9a       	sbi	0x0b, 2	; 11
     9da:	31 97       	sbiw	r30, 0x01	; 1
     9dc:	21 f7       	brne	.-56     	; 0x9a6 <__stack+0xa7>
     9de:	4f 5f       	subi	r20, 0xFF	; 255
     9e0:	5f 4f       	sbci	r21, 0xFF	; 255
     9e2:	47 30       	cpi	r20, 0x07	; 7
     9e4:	51 05       	cpc	r21, r1
     9e6:	09 f0       	breq	.+2      	; 0x9ea <__stack+0xeb>
     9e8:	18 cf       	rjmp	.-464    	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
     9ea:	b0 92 01 01 	sts	0x0101, r11	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     9ee:	a0 92 00 01 	sts	0x0100, r10	; 0x800100 <__DATA_REGION_ORIGIN__>
     9f2:	fa 94       	dec	r15
     9f4:	f1 10       	cpse	r15, r1
     9f6:	0d cf       	rjmp	.-486    	; 0x812 <__DATA_REGION_LENGTH__+0x12>
     9f8:	d3 01       	movw	r26, r6
     9fa:	4d 91       	ld	r20, X+
     9fc:	3d 01       	movw	r6, r26
     9fe:	41 11       	cpse	r20, r1
     a00:	a9 cd       	rjmp	.-1198   	; 0x554 <ScrollLongLeft.constprop.3+0x60>
     a02:	29 e1       	ldi	r18, 0x19	; 25
     a04:	30 e0       	ldi	r19, 0x00	; 0
     a06:	81 e0       	ldi	r24, 0x01	; 1
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	41 e0       	ldi	r20, 0x01	; 1
     a0c:	50 e0       	ldi	r21, 0x00	; 0
     a0e:	69 e1       	ldi	r22, 0x19	; 25
     a10:	e3 e6       	ldi	r30, 0x63	; 99
     a12:	f2 e0       	ldi	r31, 0x02	; 2
     a14:	a8 e1       	ldi	r26, 0x18	; 24
     a16:	b2 e0       	ldi	r27, 0x02	; 2
     a18:	01 90       	ld	r0, Z+
     a1a:	0d 92       	st	X+, r0
     a1c:	6a 95       	dec	r22
     a1e:	e1 f7       	brne	.-8      	; 0xa18 <__stack+0x119>
     a20:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <updatedBufferArray+0x18>
     a24:	60 91 30 02 	lds	r22, 0x0230	; 0x800230 <__data_end+0x18>
     a28:	60 93 7a 02 	sts	0x027A, r22	; 0x80027a <updatedBufferArray+0x17>
     a2c:	e7 e1       	ldi	r30, 0x17	; 23
     a2e:	e1 50       	subi	r30, 0x01	; 1
     a30:	6e 2f       	mov	r22, r30
     a32:	70 e0       	ldi	r23, 0x00	; 0
     a34:	db 01       	movw	r26, r22
     a36:	ad 59       	subi	r26, 0x9D	; 157
     a38:	bd 4f       	sbci	r27, 0xFD	; 253
     a3a:	eb 01       	movw	r28, r22
     a3c:	c8 5e       	subi	r28, 0xE8	; 232
     a3e:	dd 4f       	sbci	r29, 0xFD	; 253
     a40:	69 81       	ldd	r22, Y+1	; 0x01
     a42:	6c 93       	st	X, r22
     a44:	e1 11       	cpse	r30, r1
     a46:	f3 cf       	rjmp	.-26     	; 0xa2e <__stack+0x12f>
     a48:	1a e0       	ldi	r17, 0x0A	; 10
     a4a:	64 e0       	ldi	r22, 0x04	; 4
     a4c:	e6 2e       	mov	r14, r22
     a4e:	61 e0       	ldi	r22, 0x01	; 1
     a50:	f6 2e       	mov	r15, r22
     a52:	60 e0       	ldi	r22, 0x00	; 0
     a54:	70 e0       	ldi	r23, 0x00	; 0
     a56:	fc 01       	movw	r30, r24
     a58:	06 2e       	mov	r0, r22
     a5a:	01 c0       	rjmp	.+2      	; 0xa5e <__stack+0x15f>
     a5c:	ee 0f       	add	r30, r30
     a5e:	0a 94       	dec	r0
     a60:	ea f7       	brpl	.-6      	; 0xa5c <__stack+0x15d>
     a62:	fe 2f       	mov	r31, r30
     a64:	c0 91 7b 02 	lds	r28, 0x027B	; 0x80027b <updatedBufferArray+0x18>
     a68:	ec 23       	and	r30, r28
     a6a:	09 f0       	breq	.+2      	; 0xa6e <__stack+0x16f>
     a6c:	54 c1       	rjmp	.+680    	; 0xd16 <__stack+0x417>
     a6e:	5d 98       	cbi	0x0b, 5	; 11
     a70:	e7 e1       	ldi	r30, 0x17	; 23
     a72:	5a 98       	cbi	0x0b, 2	; 11
     a74:	ce 2f       	mov	r28, r30
     a76:	d0 e0       	ldi	r29, 0x00	; 0
     a78:	cd 59       	subi	r28, 0x9D	; 157
     a7a:	dd 4f       	sbci	r29, 0xFD	; 253
     a7c:	c8 81       	ld	r28, Y
     a7e:	cf 23       	and	r28, r31
     a80:	09 f0       	breq	.+2      	; 0xa84 <__stack+0x185>
     a82:	47 c1       	rjmp	.+654    	; 0xd12 <__stack+0x413>
     a84:	59 98       	cbi	0x0b, 1	; 11
     a86:	5b 9a       	sbi	0x0b, 3	; 11
     a88:	5b 98       	cbi	0x0b, 3	; 11
     a8a:	cf ef       	ldi	r28, 0xFF	; 255
     a8c:	ce 0f       	add	r28, r30
     a8e:	d0 e0       	ldi	r29, 0x00	; 0
     a90:	cd 59       	subi	r28, 0x9D	; 157
     a92:	dd 4f       	sbci	r29, 0xFD	; 253
     a94:	c8 81       	ld	r28, Y
     a96:	cf 23       	and	r28, r31
     a98:	09 f0       	breq	.+2      	; 0xa9c <__stack+0x19d>
     a9a:	39 c1       	rjmp	.+626    	; 0xd0e <__stack+0x40f>
     a9c:	59 98       	cbi	0x0b, 1	; 11
     a9e:	5b 9a       	sbi	0x0b, 3	; 11
     aa0:	5b 98       	cbi	0x0b, 3	; 11
     aa2:	ce ef       	ldi	r28, 0xFE	; 254
     aa4:	ce 0f       	add	r28, r30
     aa6:	d0 e0       	ldi	r29, 0x00	; 0
     aa8:	cd 59       	subi	r28, 0x9D	; 157
     aaa:	dd 4f       	sbci	r29, 0xFD	; 253
     aac:	c8 81       	ld	r28, Y
     aae:	cf 23       	and	r28, r31
     ab0:	09 f0       	breq	.+2      	; 0xab4 <__stack+0x1b5>
     ab2:	2b c1       	rjmp	.+598    	; 0xd0a <__stack+0x40b>
     ab4:	59 98       	cbi	0x0b, 1	; 11
     ab6:	5b 9a       	sbi	0x0b, 3	; 11
     ab8:	5b 98       	cbi	0x0b, 3	; 11
     aba:	cd ef       	ldi	r28, 0xFD	; 253
     abc:	ce 0f       	add	r28, r30
     abe:	d0 e0       	ldi	r29, 0x00	; 0
     ac0:	cd 59       	subi	r28, 0x9D	; 157
     ac2:	dd 4f       	sbci	r29, 0xFD	; 253
     ac4:	c8 81       	ld	r28, Y
     ac6:	cf 23       	and	r28, r31
     ac8:	09 f0       	breq	.+2      	; 0xacc <__stack+0x1cd>
     aca:	1d c1       	rjmp	.+570    	; 0xd06 <__stack+0x407>
     acc:	59 98       	cbi	0x0b, 1	; 11
     ace:	5b 9a       	sbi	0x0b, 3	; 11
     ad0:	5b 98       	cbi	0x0b, 3	; 11
     ad2:	cc ef       	ldi	r28, 0xFC	; 252
     ad4:	ce 0f       	add	r28, r30
     ad6:	d0 e0       	ldi	r29, 0x00	; 0
     ad8:	cd 59       	subi	r28, 0x9D	; 157
     ada:	dd 4f       	sbci	r29, 0xFD	; 253
     adc:	c8 81       	ld	r28, Y
     ade:	cf 23       	and	r28, r31
     ae0:	09 f0       	breq	.+2      	; 0xae4 <__stack+0x1e5>
     ae2:	0f c1       	rjmp	.+542    	; 0xd02 <__stack+0x403>
     ae4:	59 98       	cbi	0x0b, 1	; 11
     ae6:	5b 9a       	sbi	0x0b, 3	; 11
     ae8:	5b 98       	cbi	0x0b, 3	; 11
     aea:	cb ef       	ldi	r28, 0xFB	; 251
     aec:	ce 0f       	add	r28, r30
     aee:	d0 e0       	ldi	r29, 0x00	; 0
     af0:	cd 59       	subi	r28, 0x9D	; 157
     af2:	dd 4f       	sbci	r29, 0xFD	; 253
     af4:	c8 81       	ld	r28, Y
     af6:	cf 23       	and	r28, r31
     af8:	09 f0       	breq	.+2      	; 0xafc <__stack+0x1fd>
     afa:	01 c1       	rjmp	.+514    	; 0xcfe <__stack+0x3ff>
     afc:	59 98       	cbi	0x0b, 1	; 11
     afe:	5b 9a       	sbi	0x0b, 3	; 11
     b00:	5b 98       	cbi	0x0b, 3	; 11
     b02:	ca ef       	ldi	r28, 0xFA	; 250
     b04:	ce 0f       	add	r28, r30
     b06:	d0 e0       	ldi	r29, 0x00	; 0
     b08:	cd 59       	subi	r28, 0x9D	; 157
     b0a:	dd 4f       	sbci	r29, 0xFD	; 253
     b0c:	c8 81       	ld	r28, Y
     b0e:	cf 23       	and	r28, r31
     b10:	09 f0       	breq	.+2      	; 0xb14 <__stack+0x215>
     b12:	f3 c0       	rjmp	.+486    	; 0xcfa <__stack+0x3fb>
     b14:	59 98       	cbi	0x0b, 1	; 11
     b16:	5b 9a       	sbi	0x0b, 3	; 11
     b18:	5b 98       	cbi	0x0b, 3	; 11
     b1a:	c9 ef       	ldi	r28, 0xF9	; 249
     b1c:	ce 0f       	add	r28, r30
     b1e:	d0 e0       	ldi	r29, 0x00	; 0
     b20:	cd 59       	subi	r28, 0x9D	; 157
     b22:	dd 4f       	sbci	r29, 0xFD	; 253
     b24:	c8 81       	ld	r28, Y
     b26:	cf 23       	and	r28, r31
     b28:	09 f0       	breq	.+2      	; 0xb2c <__stack+0x22d>
     b2a:	e5 c0       	rjmp	.+458    	; 0xcf6 <__stack+0x3f7>
     b2c:	59 98       	cbi	0x0b, 1	; 11
     b2e:	5b 9a       	sbi	0x0b, 3	; 11
     b30:	5b 98       	cbi	0x0b, 3	; 11
     b32:	e8 50       	subi	r30, 0x08	; 8
     b34:	5a 9a       	sbi	0x0b, 2	; 11
     b36:	ef 3f       	cpi	r30, 0xFF	; 255
     b38:	09 f0       	breq	.+2      	; 0xb3c <__stack+0x23d>
     b3a:	9b cf       	rjmp	.-202    	; 0xa72 <__stack+0x173>
     b3c:	c4 e0       	ldi	r28, 0x04	; 4
     b3e:	d1 e0       	ldi	r29, 0x01	; 1
     b40:	e9 91       	ld	r30, Y+
     b42:	ee 23       	and	r30, r30
     b44:	c9 f0       	breq	.+50     	; 0xb78 <__stack+0x279>
     b46:	ec 3c       	cpi	r30, 0xCC	; 204
     b48:	d8 f7       	brcc	.-10     	; 0xb40 <__stack+0x241>
     b4a:	b7 e0       	ldi	r27, 0x07	; 7
     b4c:	eb 9f       	mul	r30, r27
     b4e:	f0 01       	movw	r30, r0
     b50:	11 24       	eor	r1, r1
     b52:	e4 5b       	subi	r30, 0xB4	; 180
     b54:	fe 4f       	sbci	r31, 0xFE	; 254
     b56:	a2 81       	ldd	r26, Z+2	; 0x02
     b58:	b3 81       	ldd	r27, Z+3	; 0x03
     b5a:	0c 91       	ld	r16, X
     b5c:	6c 01       	movw	r12, r24
     b5e:	06 80       	ldd	r0, Z+6	; 0x06
     b60:	02 c0       	rjmp	.+4      	; 0xb66 <__stack+0x267>
     b62:	cc 0c       	add	r12, r12
     b64:	dd 1c       	adc	r13, r13
     b66:	0a 94       	dec	r0
     b68:	e2 f7       	brpl	.-8      	; 0xb62 <__stack+0x263>
     b6a:	f6 01       	movw	r30, r12
     b6c:	e0 95       	com	r30
     b6e:	e0 23       	and	r30, r16
     b70:	ec 93       	st	X, r30
     b72:	e9 91       	ld	r30, Y+
     b74:	e1 11       	cpse	r30, r1
     b76:	e7 cf       	rjmp	.-50     	; 0xb46 <__stack+0x247>
     b78:	d7 01       	movw	r26, r14
     b7a:	ed 91       	ld	r30, X+
     b7c:	7d 01       	movw	r14, r26
     b7e:	ec 3c       	cpi	r30, 0xCC	; 204
     b80:	08 f4       	brcc	.+2      	; 0xb84 <__stack+0x285>
     b82:	cb c0       	rjmp	.+406    	; 0xd1a <__stack+0x41b>
     b84:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     b88:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     b8c:	f7 fd       	sbrc	r31, 7
     b8e:	08 c0       	rjmp	.+16     	; 0xba0 <__stack+0x2a1>
     b90:	af e9       	ldi	r26, 0x9F	; 159
     b92:	bf e0       	ldi	r27, 0x0F	; 15
     b94:	11 97       	sbiw	r26, 0x01	; 1
     b96:	f1 f7       	brne	.-4      	; 0xb94 <__stack+0x295>
     b98:	00 c0       	rjmp	.+0      	; 0xb9a <__stack+0x29b>
     b9a:	00 00       	nop
     b9c:	31 97       	sbiw	r30, 0x01	; 1
     b9e:	c0 f7       	brcc	.-16     	; 0xb90 <__stack+0x291>
     ba0:	c4 e0       	ldi	r28, 0x04	; 4
     ba2:	d1 e0       	ldi	r29, 0x01	; 1
     ba4:	e9 91       	ld	r30, Y+
     ba6:	ee 23       	and	r30, r30
     ba8:	c9 f0       	breq	.+50     	; 0xbdc <__stack+0x2dd>
     baa:	ec 3c       	cpi	r30, 0xCC	; 204
     bac:	d8 f7       	brcc	.-10     	; 0xba4 <__stack+0x2a5>
     bae:	07 e0       	ldi	r16, 0x07	; 7
     bb0:	e0 9f       	mul	r30, r16
     bb2:	f0 01       	movw	r30, r0
     bb4:	11 24       	eor	r1, r1
     bb6:	e4 5b       	subi	r30, 0xB4	; 180
     bb8:	fe 4f       	sbci	r31, 0xFE	; 254
     bba:	a2 81       	ldd	r26, Z+2	; 0x02
     bbc:	b3 81       	ldd	r27, Z+3	; 0x03
     bbe:	0c 91       	ld	r16, X
     bc0:	6c 01       	movw	r12, r24
     bc2:	06 80       	ldd	r0, Z+6	; 0x06
     bc4:	02 c0       	rjmp	.+4      	; 0xbca <__stack+0x2cb>
     bc6:	cc 0c       	add	r12, r12
     bc8:	dd 1c       	adc	r13, r13
     bca:	0a 94       	dec	r0
     bcc:	e2 f7       	brpl	.-8      	; 0xbc6 <__stack+0x2c7>
     bce:	f6 01       	movw	r30, r12
     bd0:	e0 95       	com	r30
     bd2:	e0 23       	and	r30, r16
     bd4:	ec 93       	st	X, r30
     bd6:	e9 91       	ld	r30, Y+
     bd8:	e1 11       	cpse	r30, r1
     bda:	e7 cf       	rjmp	.-50     	; 0xbaa <__stack+0x2ab>
     bdc:	5d 98       	cbi	0x0b, 5	; 11
     bde:	e4 e0       	ldi	r30, 0x04	; 4
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	5a 98       	cbi	0x0b, 2	; 11
     be4:	59 98       	cbi	0x0b, 1	; 11
     be6:	5b 9a       	sbi	0x0b, 3	; 11
     be8:	5b 98       	cbi	0x0b, 3	; 11
     bea:	59 98       	cbi	0x0b, 1	; 11
     bec:	5b 9a       	sbi	0x0b, 3	; 11
     bee:	5b 98       	cbi	0x0b, 3	; 11
     bf0:	59 98       	cbi	0x0b, 1	; 11
     bf2:	5b 9a       	sbi	0x0b, 3	; 11
     bf4:	5b 98       	cbi	0x0b, 3	; 11
     bf6:	59 98       	cbi	0x0b, 1	; 11
     bf8:	5b 9a       	sbi	0x0b, 3	; 11
     bfa:	5b 98       	cbi	0x0b, 3	; 11
     bfc:	59 98       	cbi	0x0b, 1	; 11
     bfe:	5b 9a       	sbi	0x0b, 3	; 11
     c00:	5b 98       	cbi	0x0b, 3	; 11
     c02:	59 98       	cbi	0x0b, 1	; 11
     c04:	5b 9a       	sbi	0x0b, 3	; 11
     c06:	5b 98       	cbi	0x0b, 3	; 11
     c08:	59 98       	cbi	0x0b, 1	; 11
     c0a:	5b 9a       	sbi	0x0b, 3	; 11
     c0c:	5b 98       	cbi	0x0b, 3	; 11
     c0e:	59 98       	cbi	0x0b, 1	; 11
     c10:	5b 9a       	sbi	0x0b, 3	; 11
     c12:	5b 98       	cbi	0x0b, 3	; 11
     c14:	5a 9a       	sbi	0x0b, 2	; 11
     c16:	31 97       	sbiw	r30, 0x01	; 1
     c18:	21 f7       	brne	.-56     	; 0xbe2 <__stack+0x2e3>
     c1a:	6f 5f       	subi	r22, 0xFF	; 255
     c1c:	7f 4f       	sbci	r23, 0xFF	; 255
     c1e:	67 30       	cpi	r22, 0x07	; 7
     c20:	71 05       	cpc	r23, r1
     c22:	09 f0       	breq	.+2      	; 0xc26 <__stack+0x327>
     c24:	18 cf       	rjmp	.-464    	; 0xa56 <__stack+0x157>
     c26:	50 93 01 01 	sts	0x0101, r21	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     c2a:	40 93 00 01 	sts	0x0100, r20	; 0x800100 <__DATA_REGION_ORIGIN__>
     c2e:	11 50       	subi	r17, 0x01	; 1
     c30:	09 f0       	breq	.+2      	; 0xc34 <__stack+0x335>
     c32:	0b cf       	rjmp	.-490    	; 0xa4a <__stack+0x14b>
     c34:	21 50       	subi	r18, 0x01	; 1
     c36:	31 09       	sbc	r19, r1
     c38:	09 f0       	breq	.+2      	; 0xc3c <__stack+0x33d>
     c3a:	e9 ce       	rjmp	.-558    	; 0xa0e <__stack+0x10f>
     c3c:	df 91       	pop	r29
     c3e:	cf 91       	pop	r28
     c40:	1f 91       	pop	r17
     c42:	0f 91       	pop	r16
     c44:	ff 90       	pop	r15
     c46:	ef 90       	pop	r14
     c48:	df 90       	pop	r13
     c4a:	cf 90       	pop	r12
     c4c:	bf 90       	pop	r11
     c4e:	af 90       	pop	r10
     c50:	9f 90       	pop	r9
     c52:	8f 90       	pop	r8
     c54:	7f 90       	pop	r7
     c56:	6f 90       	pop	r6
     c58:	5f 90       	pop	r5
     c5a:	4f 90       	pop	r4
     c5c:	08 95       	ret
     c5e:	59 9a       	sbi	0x0b, 1	; 11
     c60:	31 cd       	rjmp	.-1438   	; 0x6c4 <ScrollLongLeft.constprop.3+0x1d0>
     c62:	59 9a       	sbi	0x0b, 1	; 11
     c64:	23 cd       	rjmp	.-1466   	; 0x6ac <ScrollLongLeft.constprop.3+0x1b8>
     c66:	59 9a       	sbi	0x0b, 1	; 11
     c68:	15 cd       	rjmp	.-1494   	; 0x694 <ScrollLongLeft.constprop.3+0x1a0>
     c6a:	59 9a       	sbi	0x0b, 1	; 11
     c6c:	07 cd       	rjmp	.-1522   	; 0x67c <ScrollLongLeft.constprop.3+0x188>
     c6e:	59 9a       	sbi	0x0b, 1	; 11
     c70:	f9 cc       	rjmp	.-1550   	; 0x664 <ScrollLongLeft.constprop.3+0x170>
     c72:	59 9a       	sbi	0x0b, 1	; 11
     c74:	eb cc       	rjmp	.-1578   	; 0x64c <ScrollLongLeft.constprop.3+0x158>
     c76:	59 9a       	sbi	0x0b, 1	; 11
     c78:	dd cc       	rjmp	.-1606   	; 0x634 <ScrollLongLeft.constprop.3+0x140>
     c7a:	59 9a       	sbi	0x0b, 1	; 11
     c7c:	cf cc       	rjmp	.-1634   	; 0x61c <ScrollLongLeft.constprop.3+0x128>
     c7e:	5d 9a       	sbi	0x0b, 5	; 11
     c80:	c2 cc       	rjmp	.-1660   	; 0x606 <ScrollLongLeft.constprop.3+0x112>
     c82:	b7 e0       	ldi	r27, 0x07	; 7
     c84:	eb 9f       	mul	r30, r27
     c86:	f0 01       	movw	r30, r0
     c88:	11 24       	eor	r1, r1
     c8a:	e4 5b       	subi	r30, 0xB4	; 180
     c8c:	fe 4f       	sbci	r31, 0xFE	; 254
     c8e:	a2 81       	ldd	r26, Z+2	; 0x02
     c90:	b3 81       	ldd	r27, Z+3	; 0x03
     c92:	fc 90       	ld	r15, X
     c94:	e9 01       	movw	r28, r18
     c96:	06 80       	ldd	r0, Z+6	; 0x06
     c98:	02 c0       	rjmp	.+4      	; 0xc9e <__stack+0x39f>
     c9a:	cc 0f       	add	r28, r28
     c9c:	dd 1f       	adc	r29, r29
     c9e:	0a 94       	dec	r0
     ca0:	e2 f7       	brpl	.-8      	; 0xc9a <__stack+0x39b>
     ca2:	fe 01       	movw	r30, r28
     ca4:	ef 29       	or	r30, r15
     ca6:	ec 93       	st	X, r30
     ca8:	38 cd       	rjmp	.-1424   	; 0x71a <ScrollLongLeft.constprop.3+0x226>
     caa:	59 9a       	sbi	0x0b, 1	; 11
     cac:	22 ce       	rjmp	.-956    	; 0x8f2 <__DATA_REGION_LENGTH__+0xf2>
     cae:	59 9a       	sbi	0x0b, 1	; 11
     cb0:	14 ce       	rjmp	.-984    	; 0x8da <__DATA_REGION_LENGTH__+0xda>
     cb2:	59 9a       	sbi	0x0b, 1	; 11
     cb4:	06 ce       	rjmp	.-1012   	; 0x8c2 <__DATA_REGION_LENGTH__+0xc2>
     cb6:	59 9a       	sbi	0x0b, 1	; 11
     cb8:	f8 cd       	rjmp	.-1040   	; 0x8aa <__DATA_REGION_LENGTH__+0xaa>
     cba:	59 9a       	sbi	0x0b, 1	; 11
     cbc:	ea cd       	rjmp	.-1068   	; 0x892 <__DATA_REGION_LENGTH__+0x92>
     cbe:	59 9a       	sbi	0x0b, 1	; 11
     cc0:	dc cd       	rjmp	.-1096   	; 0x87a <__DATA_REGION_LENGTH__+0x7a>
     cc2:	59 9a       	sbi	0x0b, 1	; 11
     cc4:	ce cd       	rjmp	.-1124   	; 0x862 <__DATA_REGION_LENGTH__+0x62>
     cc6:	59 9a       	sbi	0x0b, 1	; 11
     cc8:	c0 cd       	rjmp	.-1152   	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
     cca:	5d 9a       	sbi	0x0b, 5	; 11
     ccc:	b3 cd       	rjmp	.-1178   	; 0x834 <__DATA_REGION_LENGTH__+0x34>
     cce:	b7 e0       	ldi	r27, 0x07	; 7
     cd0:	eb 9f       	mul	r30, r27
     cd2:	f0 01       	movw	r30, r0
     cd4:	11 24       	eor	r1, r1
     cd6:	e4 5b       	subi	r30, 0xB4	; 180
     cd8:	fe 4f       	sbci	r31, 0xFE	; 254
     cda:	a2 81       	ldd	r26, Z+2	; 0x02
     cdc:	b3 81       	ldd	r27, Z+3	; 0x03
     cde:	1c 91       	ld	r17, X
     ce0:	e9 01       	movw	r28, r18
     ce2:	06 80       	ldd	r0, Z+6	; 0x06
     ce4:	02 c0       	rjmp	.+4      	; 0xcea <__stack+0x3eb>
     ce6:	cc 0f       	add	r28, r28
     ce8:	dd 1f       	adc	r29, r29
     cea:	0a 94       	dec	r0
     cec:	e2 f7       	brpl	.-8      	; 0xce6 <__stack+0x3e7>
     cee:	fe 01       	movw	r30, r28
     cf0:	e1 2b       	or	r30, r17
     cf2:	ec 93       	st	X, r30
     cf4:	29 ce       	rjmp	.-942    	; 0x948 <__stack+0x49>
     cf6:	59 9a       	sbi	0x0b, 1	; 11
     cf8:	1a cf       	rjmp	.-460    	; 0xb2e <__stack+0x22f>
     cfa:	59 9a       	sbi	0x0b, 1	; 11
     cfc:	0c cf       	rjmp	.-488    	; 0xb16 <__stack+0x217>
     cfe:	59 9a       	sbi	0x0b, 1	; 11
     d00:	fe ce       	rjmp	.-516    	; 0xafe <__stack+0x1ff>
     d02:	59 9a       	sbi	0x0b, 1	; 11
     d04:	f0 ce       	rjmp	.-544    	; 0xae6 <__stack+0x1e7>
     d06:	59 9a       	sbi	0x0b, 1	; 11
     d08:	e2 ce       	rjmp	.-572    	; 0xace <__stack+0x1cf>
     d0a:	59 9a       	sbi	0x0b, 1	; 11
     d0c:	d4 ce       	rjmp	.-600    	; 0xab6 <__stack+0x1b7>
     d0e:	59 9a       	sbi	0x0b, 1	; 11
     d10:	c6 ce       	rjmp	.-628    	; 0xa9e <__stack+0x19f>
     d12:	59 9a       	sbi	0x0b, 1	; 11
     d14:	b8 ce       	rjmp	.-656    	; 0xa86 <__stack+0x187>
     d16:	5d 9a       	sbi	0x0b, 5	; 11
     d18:	ab ce       	rjmp	.-682    	; 0xa70 <__stack+0x171>
     d1a:	b7 e0       	ldi	r27, 0x07	; 7
     d1c:	eb 9f       	mul	r30, r27
     d1e:	f0 01       	movw	r30, r0
     d20:	11 24       	eor	r1, r1
     d22:	e4 5b       	subi	r30, 0xB4	; 180
     d24:	fe 4f       	sbci	r31, 0xFE	; 254
     d26:	c2 81       	ldd	r28, Z+2	; 0x02
     d28:	d3 81       	ldd	r29, Z+3	; 0x03
     d2a:	08 81       	ld	r16, Y
     d2c:	6c 01       	movw	r12, r24
     d2e:	06 80       	ldd	r0, Z+6	; 0x06
     d30:	02 c0       	rjmp	.+4      	; 0xd36 <__stack+0x437>
     d32:	cc 0c       	add	r12, r12
     d34:	dd 1c       	adc	r13, r13
     d36:	0a 94       	dec	r0
     d38:	e2 f7       	brpl	.-8      	; 0xd32 <__stack+0x433>
     d3a:	f6 01       	movw	r30, r12
     d3c:	e0 2b       	or	r30, r16
     d3e:	e8 83       	st	Y, r30
     d40:	21 cf       	rjmp	.-446    	; 0xb84 <__stack+0x285>

00000d42 <init>:
     d42:	cf 93       	push	r28
     d44:	df 93       	push	r29
     d46:	51 9a       	sbi	0x0a, 1	; 10
     d48:	52 9a       	sbi	0x0a, 2	; 10
     d4a:	53 9a       	sbi	0x0a, 3	; 10
     d4c:	55 9a       	sbi	0x0a, 5	; 10
     d4e:	a4 e0       	ldi	r26, 0x04	; 4
     d50:	b1 e0       	ldi	r27, 0x01	; 1
     d52:	41 e0       	ldi	r20, 0x01	; 1
     d54:	50 e0       	ldi	r21, 0x00	; 0
     d56:	ed 91       	ld	r30, X+
     d58:	ee 23       	and	r30, r30
     d5a:	b9 f0       	breq	.+46     	; 0xd8a <init+0x48>
     d5c:	ec 3c       	cpi	r30, 0xCC	; 204
     d5e:	d8 f7       	brcc	.-10     	; 0xd56 <init+0x14>
     d60:	87 e0       	ldi	r24, 0x07	; 7
     d62:	e8 9f       	mul	r30, r24
     d64:	f0 01       	movw	r30, r0
     d66:	11 24       	eor	r1, r1
     d68:	e4 5b       	subi	r30, 0xB4	; 180
     d6a:	fe 4f       	sbci	r31, 0xFE	; 254
     d6c:	c0 81       	ld	r28, Z
     d6e:	d1 81       	ldd	r29, Z+1	; 0x01
     d70:	28 81       	ld	r18, Y
     d72:	ca 01       	movw	r24, r20
     d74:	06 80       	ldd	r0, Z+6	; 0x06
     d76:	02 c0       	rjmp	.+4      	; 0xd7c <init+0x3a>
     d78:	88 0f       	add	r24, r24
     d7a:	99 1f       	adc	r25, r25
     d7c:	0a 94       	dec	r0
     d7e:	e2 f7       	brpl	.-8      	; 0xd78 <init+0x36>
     d80:	82 2b       	or	r24, r18
     d82:	88 83       	st	Y, r24
     d84:	ed 91       	ld	r30, X+
     d86:	e1 11       	cpse	r30, r1
     d88:	e9 cf       	rjmp	.-46     	; 0xd5c <init+0x1a>
     d8a:	df 91       	pop	r29
     d8c:	cf 91       	pop	r28
     d8e:	08 95       	ret

00000d90 <main>:
}
/************************************************************************/
/* main function                                                        */
/************************************************************************/
int main(void)
{
     d90:	cf 93       	push	r28
     d92:	df 93       	push	r29
     d94:	00 d0       	rcall	.+0      	; 0xd96 <main+0x6>
     d96:	00 d0       	rcall	.+0      	; 0xd98 <main+0x8>
     d98:	cd b7       	in	r28, 0x3d	; 61
     d9a:	de b7       	in	r29, 0x3e	; 62
	init();
     d9c:	0e 94 a1 06 	call	0xd42	; 0xd42 <init>
     da0:	71 e3       	ldi	r23, 0x31	; 49
     da2:	27 2e       	mov	r2, r23
     da4:	72 e0       	ldi	r23, 0x02	; 2
     da6:	37 2e       	mov	r3, r23
     da8:	e9 e1       	ldi	r30, 0x19	; 25
     daa:	7e 2e       	mov	r7, r30
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     dac:	88 24       	eor	r8, r8
     dae:	83 94       	inc	r8
     db0:	91 2c       	mov	r9, r1
     db2:	ee 24       	eor	r14, r14
     db4:	e3 94       	inc	r14
     db6:	f1 2c       	mov	r15, r1
/************************************************************************/
void ScrollRight(const uint8_t *p, uint8_t time)
{
	uint8_t index, begin, end = 0;
	//*bf = buffer;
	for(index = 0; index < 25; index++)
     db8:	81 01       	movw	r16, r2
}
/************************************************************************/
/* main function                                                        */
/************************************************************************/
int main(void)
{
     dba:	a4 e0       	ldi	r26, 0x04	; 4
     dbc:	b1 e0       	ldi	r27, 0x01	; 1
     dbe:	1d c0       	rjmp	.+58     	; 0xdfa <main+0x6a>
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
     dc0:	ec 3c       	cpi	r30, 0xCC	; 204
     dc2:	d8 f4       	brcc	.+54     	; 0xdfa <main+0x6a>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     dc4:	27 e0       	ldi	r18, 0x07	; 7
     dc6:	e2 9f       	mul	r30, r18
     dc8:	f0 01       	movw	r30, r0
     dca:	11 24       	eor	r1, r1
     dcc:	af 01       	movw	r20, r30
     dce:	44 5b       	subi	r20, 0xB4	; 180
     dd0:	5e 4f       	sbci	r21, 0xFE	; 254
     dd2:	fa 01       	movw	r30, r20
     dd4:	22 81       	ldd	r18, Z+2	; 0x02
     dd6:	33 81       	ldd	r19, Z+3	; 0x03
     dd8:	f9 01       	movw	r30, r18
     dda:	80 81       	ld	r24, Z
     ddc:	44 24       	eor	r4, r4
     dde:	43 94       	inc	r4
     de0:	51 2c       	mov	r5, r1
     de2:	fa 01       	movw	r30, r20
     de4:	06 80       	ldd	r0, Z+6	; 0x06
     de6:	02 c0       	rjmp	.+4      	; 0xdec <main+0x5c>
     de8:	44 0c       	add	r4, r4
     dea:	55 1c       	adc	r5, r5
     dec:	0a 94       	dec	r0
     dee:	e2 f7       	brpl	.-8      	; 0xde8 <main+0x58>
     df0:	a2 01       	movw	r20, r4
     df2:	40 95       	com	r20
     df4:	84 23       	and	r24, r20
     df6:	f9 01       	movw	r30, r18
     df8:	80 83       	st	Z, r24
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
     dfa:	ed 91       	ld	r30, X+
     dfc:	e1 11       	cpse	r30, r1
     dfe:	e0 cf       	rjmp	.-64     	; 0xdc0 <main+0x30>
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     e00:	5d 98       	cbi	0x0b, 5	; 11
     e02:	84 e0       	ldi	r24, 0x04	; 4
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	5a 98       	cbi	0x0b, 2	; 11
     e08:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     e0a:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     e0c:	5b 98       	cbi	0x0b, 3	; 11
     e0e:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     e10:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     e12:	5b 98       	cbi	0x0b, 3	; 11
     e14:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     e16:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     e18:	5b 98       	cbi	0x0b, 3	; 11
     e1a:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     e1c:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     e1e:	5b 98       	cbi	0x0b, 3	; 11
     e20:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     e22:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     e24:	5b 98       	cbi	0x0b, 3	; 11
     e26:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     e28:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     e2a:	5b 98       	cbi	0x0b, 3	; 11
     e2c:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     e2e:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     e30:	5b 98       	cbi	0x0b, 3	; 11
     e32:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     e34:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     e36:	5b 98       	cbi	0x0b, 3	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     e38:	5a 9a       	sbi	0x0b, 2	; 11
     e3a:	01 97       	sbiw	r24, 0x01	; 1
/************************************************************************/
static inline void Clear(){
	int x, y = 0;
	pinsMultiWrite(plex_pins, LOW);
	pinWrite(end_pin, LOW);
	for(x = 0; x < 4; x++) {
     e3c:	21 f7       	brne	.-56     	; 0xe06 <main+0x76>
 
static void Animate()
{
	Clear();
	//scroll long left
	ScrollLongLeft("MAKE, HACK n CODE", 10);
     e3e:	80 e2       	ldi	r24, 0x20	; 32
     e40:	91 e0       	ldi	r25, 0x01	; 1
     e42:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <ScrollLongLeft.constprop.3>
     e46:	d1 01       	movw	r26, r2
     e48:	e7 2d       	mov	r30, r7
     e4a:	1d 92       	st	X+, r1
     e4c:	ea 95       	dec	r30
     e4e:	e9 f7       	brne	.-6      	; 0xe4a <main+0xba>
     e50:	4c e1       	ldi	r20, 0x1C	; 28
     e52:	c4 2e       	mov	r12, r20
     e54:	41 e0       	ldi	r20, 0x01	; 1
     e56:	d4 2e       	mov	r13, r20
     e58:	d6 01       	movw	r26, r12
     e5a:	20 e0       	ldi	r18, 0x00	; 0
     e5c:	8d e4       	ldi	r24, 0x4D	; 77
/* returns the index of the first byte of the requested character       */
/************************************************************************/
uint8_t CharStart(const char *p)
{
	/*if(*p == ' ') return 0;
	else*/ return (uint8_t) (( *p - ' '));
     e5e:	80 52       	subi	r24, 0x20	; 32
	unsigned int index = 0;
	uint8_t len = 0;
	uint8_t x = 0;
	ClearStringBuffer();
	while(*ch){
		index = CharStart(ch++) * 5;
     e60:	f5 e0       	ldi	r31, 0x05	; 5
     e62:	8f 9f       	mul	r24, r31
     e64:	c0 01       	movw	r24, r0
     e66:	11 24       	eor	r1, r1
		for(len = 0; len < 5; len++){
			stringbuffer[x] = (uint8_t)(pgm_read_byte((font_5x7 + index)));
     e68:	fc 01       	movw	r30, r24
     e6a:	e8 59       	subi	r30, 0x98	; 152
     e6c:	ff 4f       	sbci	r31, 0xFF	; 255
     e6e:	34 91       	lpm	r19, Z
     e70:	e2 2f       	mov	r30, r18
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	ef 5c       	subi	r30, 0xCF	; 207
     e76:	fd 4f       	sbci	r31, 0xFD	; 253
     e78:	30 83       	st	Z, r19
     e7a:	fc 01       	movw	r30, r24
     e7c:	e7 59       	subi	r30, 0x97	; 151
     e7e:	ff 4f       	sbci	r31, 0xFF	; 255
     e80:	34 91       	lpm	r19, Z
     e82:	e1 e0       	ldi	r30, 0x01	; 1
     e84:	e2 0f       	add	r30, r18
     e86:	f0 e0       	ldi	r31, 0x00	; 0
     e88:	ef 5c       	subi	r30, 0xCF	; 207
     e8a:	fd 4f       	sbci	r31, 0xFD	; 253
     e8c:	30 83       	st	Z, r19
     e8e:	fc 01       	movw	r30, r24
     e90:	e6 59       	subi	r30, 0x96	; 150
     e92:	ff 4f       	sbci	r31, 0xFF	; 255
     e94:	34 91       	lpm	r19, Z
     e96:	e2 e0       	ldi	r30, 0x02	; 2
     e98:	e2 0f       	add	r30, r18
     e9a:	f0 e0       	ldi	r31, 0x00	; 0
     e9c:	ef 5c       	subi	r30, 0xCF	; 207
     e9e:	fd 4f       	sbci	r31, 0xFD	; 253
     ea0:	30 83       	st	Z, r19
     ea2:	fc 01       	movw	r30, r24
     ea4:	e5 59       	subi	r30, 0x95	; 149
     ea6:	ff 4f       	sbci	r31, 0xFF	; 255
     ea8:	34 91       	lpm	r19, Z
     eaa:	e3 e0       	ldi	r30, 0x03	; 3
     eac:	e2 0f       	add	r30, r18
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	ef 5c       	subi	r30, 0xCF	; 207
     eb2:	fd 4f       	sbci	r31, 0xFD	; 253
     eb4:	30 83       	st	Z, r19
     eb6:	fc 01       	movw	r30, r24
     eb8:	e4 59       	subi	r30, 0x94	; 148
     eba:	ff 4f       	sbci	r31, 0xFF	; 255
     ebc:	34 91       	lpm	r19, Z
     ebe:	84 e0       	ldi	r24, 0x04	; 4
     ec0:	82 0f       	add	r24, r18
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	8f 5c       	subi	r24, 0xCF	; 207
     ec6:	9d 4f       	sbci	r25, 0xFD	; 253
     ec8:	fc 01       	movw	r30, r24
     eca:	30 83       	st	Z, r19
			index++; x++;
		}
		stringbuffer[x] = 0;
     ecc:	e5 e0       	ldi	r30, 0x05	; 5
     ece:	e2 0f       	add	r30, r18
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	ef 5c       	subi	r30, 0xCF	; 207
     ed4:	fd 4f       	sbci	r31, 0xFD	; 253
     ed6:	10 82       	st	Z, r1
		x++;
     ed8:	2a 5f       	subi	r18, 0xFA	; 250
{
	unsigned int index = 0;
	uint8_t len = 0;
	uint8_t x = 0;
	ClearStringBuffer();
	while(*ch){
     eda:	8d 91       	ld	r24, X+
     edc:	81 11       	cpse	r24, r1
     ede:	bf cf       	rjmp	.-130    	; 0xe5e <main+0xce>
     ee0:	34 e0       	ldi	r19, 0x04	; 4
     ee2:	b3 2e       	mov	r11, r19
     ee4:	2a e0       	ldi	r18, 0x0A	; 10
     ee6:	a2 2e       	mov	r10, r18
}*/
static inline void HoldDisplayBuffer(const uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
		DisplayBuffer(data);
     ee8:	81 e3       	ldi	r24, 0x31	; 49
     eea:	92 e0       	ldi	r25, 0x02	; 2
     eec:	0e 94 41 01 	call	0x282	; 0x282 <DisplayBuffer>
     ef0:	aa 94       	dec	r10
	}
}*/
static inline void HoldDisplayBuffer(const uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
     ef2:	a1 10       	cpse	r10, r1
     ef4:	f9 cf       	rjmp	.-14     	; 0xee8 <main+0x158>
     ef6:	a4 e0       	ldi	r26, 0x04	; 4
     ef8:	b1 e0       	ldi	r27, 0x01	; 1
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
     efa:	ed 91       	ld	r30, X+
     efc:	ee 23       	and	r30, r30
     efe:	01 f1       	breq	.+64     	; 0xf40 <main+0x1b0>
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
     f00:	ec 3c       	cpi	r30, 0xCC	; 204
     f02:	d8 f7       	brcc	.-10     	; 0xefa <main+0x16a>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     f04:	27 e0       	ldi	r18, 0x07	; 7
     f06:	e2 9f       	mul	r30, r18
     f08:	f0 01       	movw	r30, r0
     f0a:	11 24       	eor	r1, r1
     f0c:	af 01       	movw	r20, r30
     f0e:	44 5b       	subi	r20, 0xB4	; 180
     f10:	5e 4f       	sbci	r21, 0xFE	; 254
     f12:	fa 01       	movw	r30, r20
     f14:	22 81       	ldd	r18, Z+2	; 0x02
     f16:	33 81       	ldd	r19, Z+3	; 0x03
     f18:	f9 01       	movw	r30, r18
     f1a:	80 81       	ld	r24, Z
     f1c:	44 24       	eor	r4, r4
     f1e:	43 94       	inc	r4
     f20:	51 2c       	mov	r5, r1
     f22:	fa 01       	movw	r30, r20
     f24:	06 80       	ldd	r0, Z+6	; 0x06
     f26:	02 c0       	rjmp	.+4      	; 0xf2c <main+0x19c>
     f28:	44 0c       	add	r4, r4
     f2a:	55 1c       	adc	r5, r5
     f2c:	0a 94       	dec	r0
     f2e:	e2 f7       	brpl	.-8      	; 0xf28 <main+0x198>
     f30:	a2 01       	movw	r20, r4
     f32:	40 95       	com	r20
     f34:	84 23       	and	r24, r20
     f36:	f9 01       	movw	r30, r18
     f38:	80 83       	st	Z, r24
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
     f3a:	ed 91       	ld	r30, X+
     f3c:	e1 11       	cpse	r30, r1
     f3e:	e0 cf       	rjmp	.-64     	; 0xf00 <main+0x170>
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     f40:	5d 98       	cbi	0x0b, 5	; 11
     f42:	84 e0       	ldi	r24, 0x04	; 4
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	5a 98       	cbi	0x0b, 2	; 11
     f48:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     f4a:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     f4c:	5b 98       	cbi	0x0b, 3	; 11
     f4e:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     f50:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     f52:	5b 98       	cbi	0x0b, 3	; 11
     f54:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     f56:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     f58:	5b 98       	cbi	0x0b, 3	; 11
     f5a:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     f5c:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     f5e:	5b 98       	cbi	0x0b, 3	; 11
     f60:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     f62:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     f64:	5b 98       	cbi	0x0b, 3	; 11
     f66:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     f68:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     f6a:	5b 98       	cbi	0x0b, 3	; 11
     f6c:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     f6e:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     f70:	5b 98       	cbi	0x0b, 3	; 11
     f72:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     f74:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
     f76:	5b 98       	cbi	0x0b, 3	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
     f78:	5a 9a       	sbi	0x0b, 2	; 11
     f7a:	01 97       	sbiw	r24, 0x01	; 1
/************************************************************************/
static inline void Clear(){
	int x, y = 0;
	pinsMultiWrite(plex_pins, LOW);
	pinWrite(end_pin, LOW);
	for(x = 0; x < 4; x++) {
     f7c:	21 f7       	brne	.-56     	; 0xf46 <main+0x1b6>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f7e:	ff ef       	ldi	r31, 0xFF	; 255
     f80:	29 e6       	ldi	r18, 0x69	; 105
     f82:	38 e1       	ldi	r19, 0x18	; 24
     f84:	f1 50       	subi	r31, 0x01	; 1
     f86:	20 40       	sbci	r18, 0x00	; 0
     f88:	30 40       	sbci	r19, 0x00	; 0
     f8a:	e1 f7       	brne	.-8      	; 0xf84 <main+0x1f4>
     f8c:	00 c0       	rjmp	.+0      	; 0xf8e <main+0x1fe>
     f8e:	00 00       	nop
     f90:	ba 94       	dec	r11
/************************************************************************/
/* blinker                                                         */
/************************************************************************/
void Blinker(const uint8_t *p, uint8_t time, uint8_t times)
{
	while(times-- > 0)
     f92:	b1 10       	cpse	r11, r1
     f94:	a7 cf       	rjmp	.-178    	; 0xee4 <main+0x154>
     f96:	d1 01       	movw	r26, r2
     f98:	e7 2d       	mov	r30, r7
     f9a:	1d 92       	st	X+, r1
     f9c:	ea 95       	dec	r30
     f9e:	e9 f7       	brne	.-6      	; 0xf9a <main+0x20a>
     fa0:	20 e0       	ldi	r18, 0x00	; 0
     fa2:	8d e4       	ldi	r24, 0x4D	; 77
/* returns the index of the first byte of the requested character       */
/************************************************************************/
uint8_t CharStart(const char *p)
{
	/*if(*p == ' ') return 0;
	else*/ return (uint8_t) (( *p - ' '));
     fa4:	80 52       	subi	r24, 0x20	; 32
	unsigned int index = 0;
	uint8_t len = 0;
	uint8_t x = 0;
	ClearStringBuffer();
	while(*ch){
		index = CharStart(ch++) * 5;
     fa6:	f5 e0       	ldi	r31, 0x05	; 5
     fa8:	8f 9f       	mul	r24, r31
     faa:	c0 01       	movw	r24, r0
     fac:	11 24       	eor	r1, r1
		for(len = 0; len < 5; len++){
			stringbuffer[x] = (uint8_t)(pgm_read_byte((font_5x7 + index)));
     fae:	fc 01       	movw	r30, r24
     fb0:	e8 59       	subi	r30, 0x98	; 152
     fb2:	ff 4f       	sbci	r31, 0xFF	; 255
     fb4:	34 91       	lpm	r19, Z
     fb6:	e2 2f       	mov	r30, r18
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	ef 5c       	subi	r30, 0xCF	; 207
     fbc:	fd 4f       	sbci	r31, 0xFD	; 253
     fbe:	30 83       	st	Z, r19
     fc0:	fc 01       	movw	r30, r24
     fc2:	e7 59       	subi	r30, 0x97	; 151
     fc4:	ff 4f       	sbci	r31, 0xFF	; 255
     fc6:	34 91       	lpm	r19, Z
     fc8:	e1 e0       	ldi	r30, 0x01	; 1
     fca:	e2 0f       	add	r30, r18
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	ef 5c       	subi	r30, 0xCF	; 207
     fd0:	fd 4f       	sbci	r31, 0xFD	; 253
     fd2:	30 83       	st	Z, r19
     fd4:	fc 01       	movw	r30, r24
     fd6:	e6 59       	subi	r30, 0x96	; 150
     fd8:	ff 4f       	sbci	r31, 0xFF	; 255
     fda:	34 91       	lpm	r19, Z
     fdc:	e2 e0       	ldi	r30, 0x02	; 2
     fde:	e2 0f       	add	r30, r18
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	ef 5c       	subi	r30, 0xCF	; 207
     fe4:	fd 4f       	sbci	r31, 0xFD	; 253
     fe6:	30 83       	st	Z, r19
     fe8:	fc 01       	movw	r30, r24
     fea:	e5 59       	subi	r30, 0x95	; 149
     fec:	ff 4f       	sbci	r31, 0xFF	; 255
     fee:	34 91       	lpm	r19, Z
     ff0:	e3 e0       	ldi	r30, 0x03	; 3
     ff2:	e2 0f       	add	r30, r18
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	ef 5c       	subi	r30, 0xCF	; 207
     ff8:	fd 4f       	sbci	r31, 0xFD	; 253
     ffa:	30 83       	st	Z, r19
     ffc:	fc 01       	movw	r30, r24
     ffe:	e4 59       	subi	r30, 0x94	; 148
    1000:	ff 4f       	sbci	r31, 0xFF	; 255
    1002:	e4 91       	lpm	r30, Z
    1004:	a4 e0       	ldi	r26, 0x04	; 4
    1006:	a2 0f       	add	r26, r18
    1008:	b0 e0       	ldi	r27, 0x00	; 0
    100a:	af 5c       	subi	r26, 0xCF	; 207
    100c:	bd 4f       	sbci	r27, 0xFD	; 253
    100e:	ec 93       	st	X, r30
			index++; x++;
		}
		stringbuffer[x] = 0;
    1010:	e5 e0       	ldi	r30, 0x05	; 5
    1012:	e2 0f       	add	r30, r18
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	ef 5c       	subi	r30, 0xCF	; 207
    1018:	fd 4f       	sbci	r31, 0xFD	; 253
    101a:	10 82       	st	Z, r1
		x++;
    101c:	2a 5f       	subi	r18, 0xFA	; 250
{
	unsigned int index = 0;
	uint8_t len = 0;
	uint8_t x = 0;
	ClearStringBuffer();
	while(*ch){
    101e:	d6 01       	movw	r26, r12
    1020:	8d 91       	ld	r24, X+
    1022:	6d 01       	movw	r12, r26
    1024:	81 11       	cpse	r24, r1
    1026:	be cf       	rjmp	.-132    	; 0xfa4 <main+0x214>
    1028:	40 e0       	ldi	r20, 0x00	; 0
    102a:	50 e0       	ldi	r21, 0x00	; 0
    102c:	1a 83       	std	Y+2, r17	; 0x02
    102e:	09 83       	std	Y+1, r16	; 0x01
    1030:	64 2f       	mov	r22, r20
    1032:	80 e0       	ldi	r24, 0x00	; 0
    1034:	90 e0       	ldi	r25, 0x00	; 0
{
	uint8_t index, begin, end = 0;
	//*bf = buffer;
	for(index = 0; index < 25; index++)
	{
		for(begin = 0; begin <= index; begin++) (*(bf + begin) = 0x00);
    1036:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <bf>
    103a:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <bf+0x1>
    103e:	e8 0f       	add	r30, r24
    1040:	f9 1f       	adc	r31, r25
    1042:	10 82       	st	Z, r1
    1044:	01 96       	adiw	r24, 0x01	; 1
    1046:	68 17       	cp	r22, r24
    1048:	b0 f7       	brcc	.-20     	; 0x1036 <main+0x2a6>
		for(end = index; end < 25; end++) (*(bf + end) = (*((p+(end-index)))));
    104a:	86 2f       	mov	r24, r22
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	fc 01       	movw	r30, r24
    1050:	e4 1b       	sub	r30, r20
    1052:	f5 0b       	sbc	r31, r21
    1054:	ef 5c       	subi	r30, 0xCF	; 207
    1056:	fd 4f       	sbci	r31, 0xFD	; 253
    1058:	20 81       	ld	r18, Z
    105a:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <bf>
    105e:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <bf+0x1>
    1062:	e8 0f       	add	r30, r24
    1064:	f9 1f       	adc	r31, r25
    1066:	20 83       	st	Z, r18
    1068:	6f 5f       	subi	r22, 0xFF	; 255
    106a:	69 31       	cpi	r22, 0x19	; 25
    106c:	71 f7       	brne	.-36     	; 0x104a <main+0x2ba>
    106e:	1a e0       	ldi	r17, 0x0A	; 10
    1070:	c1 2e       	mov	r12, r17
/************************************************************************/
/* blinker                                                         */
/************************************************************************/
void Blinker(const uint8_t *p, uint8_t time, uint8_t times)
{
	while(times-- > 0)
    1072:	64 e0       	ldi	r22, 0x04	; 4
    1074:	a6 2e       	mov	r10, r22
    1076:	61 e0       	ldi	r22, 0x01	; 1
    1078:	b6 2e       	mov	r11, r22
    107a:	20 e0       	ldi	r18, 0x00	; 0
    107c:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t byte, index, bit = 0;
	uint8_t pos = 24;
	//output byte
	for(byte=0; byte<7; byte++){
		pos = 24;
		pinWrite(end_pin,((*(p+pos)) & (1 << byte)));
    107e:	81 e0       	ldi	r24, 0x01	; 1
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	02 2e       	mov	r0, r18
    1084:	01 c0       	rjmp	.+2      	; 0x1088 <main+0x2f8>
    1086:	88 0f       	add	r24, r24
    1088:	0a 94       	dec	r0
    108a:	ea f7       	brpl	.-6      	; 0x1086 <main+0x2f6>
    108c:	98 2f       	mov	r25, r24
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    108e:	60 91 62 02 	lds	r22, 0x0262	; 0x800262 <buffer+0x18>
    1092:	86 23       	and	r24, r22
    1094:	11 f0       	breq	.+4      	; 0x109a <main+0x30a>
    1096:	0c 94 06 1d 	jmp	0x3a0c	; 0x3a0c <main+0x2c7c>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    109a:	5d 98       	cbi	0x0b, 5	; 11
/************************************************************************/
/* blinker                                                         */
/************************************************************************/
void Blinker(const uint8_t *p, uint8_t time, uint8_t times)
{
	while(times-- > 0)
    109c:	87 e1       	ldi	r24, 0x17	; 23
    109e:	5a 98       	cbi	0x0b, 2	; 11
		pinWrite(end_pin,((*(p+pos)) & (1 << byte)));
		pos--;
		for(index=0; index<3; index++){
			pinWrite(latch_pin, LOW);
			for(bit = 0; bit < 8 ; bit++){
				pinWrite(data_pin,((*(p+pos)) & (1 << byte)));
    10a0:	e8 2f       	mov	r30, r24
    10a2:	f0 e0       	ldi	r31, 0x00	; 0
    10a4:	e6 5b       	subi	r30, 0xB6	; 182
    10a6:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    10a8:	60 81       	ld	r22, Z
    10aa:	69 23       	and	r22, r25
    10ac:	11 f0       	breq	.+4      	; 0x10b2 <main+0x322>
    10ae:	0c 94 03 1d 	jmp	0x3a06	; 0x3a06 <main+0x2c76>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    10b2:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    10b4:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    10b6:	5b 98       	cbi	0x0b, 3	; 11
    10b8:	ef ef       	ldi	r30, 0xFF	; 255
    10ba:	e8 0f       	add	r30, r24
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	e6 5b       	subi	r30, 0xB6	; 182
    10c0:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    10c2:	60 81       	ld	r22, Z
    10c4:	69 23       	and	r22, r25
    10c6:	11 f0       	breq	.+4      	; 0x10cc <main+0x33c>
    10c8:	0c 94 00 1d 	jmp	0x3a00	; 0x3a00 <main+0x2c70>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    10cc:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    10ce:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    10d0:	5b 98       	cbi	0x0b, 3	; 11
    10d2:	ee ef       	ldi	r30, 0xFE	; 254
    10d4:	e8 0f       	add	r30, r24
    10d6:	f0 e0       	ldi	r31, 0x00	; 0
    10d8:	e6 5b       	subi	r30, 0xB6	; 182
    10da:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    10dc:	60 81       	ld	r22, Z
    10de:	69 23       	and	r22, r25
    10e0:	11 f0       	breq	.+4      	; 0x10e6 <main+0x356>
    10e2:	0c 94 fd 1c 	jmp	0x39fa	; 0x39fa <main+0x2c6a>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    10e6:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    10e8:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    10ea:	5b 98       	cbi	0x0b, 3	; 11
    10ec:	ed ef       	ldi	r30, 0xFD	; 253
    10ee:	e8 0f       	add	r30, r24
    10f0:	f0 e0       	ldi	r31, 0x00	; 0
    10f2:	e6 5b       	subi	r30, 0xB6	; 182
    10f4:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    10f6:	60 81       	ld	r22, Z
    10f8:	69 23       	and	r22, r25
    10fa:	11 f0       	breq	.+4      	; 0x1100 <main+0x370>
    10fc:	0c 94 fa 1c 	jmp	0x39f4	; 0x39f4 <main+0x2c64>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1100:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1102:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1104:	5b 98       	cbi	0x0b, 3	; 11
    1106:	ec ef       	ldi	r30, 0xFC	; 252
    1108:	e8 0f       	add	r30, r24
    110a:	f0 e0       	ldi	r31, 0x00	; 0
    110c:	e6 5b       	subi	r30, 0xB6	; 182
    110e:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    1110:	60 81       	ld	r22, Z
    1112:	69 23       	and	r22, r25
    1114:	11 f0       	breq	.+4      	; 0x111a <main+0x38a>
    1116:	0c 94 f7 1c 	jmp	0x39ee	; 0x39ee <main+0x2c5e>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    111a:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    111c:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    111e:	5b 98       	cbi	0x0b, 3	; 11
    1120:	eb ef       	ldi	r30, 0xFB	; 251
    1122:	e8 0f       	add	r30, r24
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	e6 5b       	subi	r30, 0xB6	; 182
    1128:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    112a:	60 81       	ld	r22, Z
    112c:	69 23       	and	r22, r25
    112e:	11 f0       	breq	.+4      	; 0x1134 <main+0x3a4>
    1130:	0c 94 f4 1c 	jmp	0x39e8	; 0x39e8 <main+0x2c58>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1134:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1136:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1138:	5b 98       	cbi	0x0b, 3	; 11
    113a:	ea ef       	ldi	r30, 0xFA	; 250
    113c:	e8 0f       	add	r30, r24
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	e6 5b       	subi	r30, 0xB6	; 182
    1142:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    1144:	60 81       	ld	r22, Z
    1146:	69 23       	and	r22, r25
    1148:	11 f0       	breq	.+4      	; 0x114e <main+0x3be>
    114a:	0c 94 f1 1c 	jmp	0x39e2	; 0x39e2 <main+0x2c52>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    114e:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1150:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1152:	5b 98       	cbi	0x0b, 3	; 11
    1154:	e9 ef       	ldi	r30, 0xF9	; 249
    1156:	e8 0f       	add	r30, r24
    1158:	f0 e0       	ldi	r31, 0x00	; 0
    115a:	e6 5b       	subi	r30, 0xB6	; 182
    115c:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    115e:	60 81       	ld	r22, Z
    1160:	69 23       	and	r22, r25
    1162:	11 f0       	breq	.+4      	; 0x1168 <main+0x3d8>
    1164:	0c 94 ee 1c 	jmp	0x39dc	; 0x39dc <main+0x2c4c>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1168:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    116a:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    116c:	5b 98       	cbi	0x0b, 3	; 11
				//toggle the clock pin
				pinWrite(clock_pin, HIGH);
				pinWrite(clock_pin, LOW);
				pos--;
    116e:	88 50       	subi	r24, 0x08	; 8
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1170:	5a 9a       	sbi	0x0b, 2	; 11
	//output byte
	for(byte=0; byte<7; byte++){
		pos = 24;
		pinWrite(end_pin,((*(p+pos)) & (1 << byte)));
		pos--;
		for(index=0; index<3; index++){
    1172:	8f 3f       	cpi	r24, 0xFF	; 255
    1174:	09 f0       	breq	.+2      	; 0x1178 <main+0x3e8>
    1176:	93 cf       	rjmp	.-218    	; 0x109e <main+0x30e>
    1178:	a4 e0       	ldi	r26, 0x04	; 4
    117a:	b1 e0       	ldi	r27, 0x01	; 1
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    117c:	ed 91       	ld	r30, X+
    117e:	ee 23       	and	r30, r30
    1180:	01 f1       	breq	.+64     	; 0x11c2 <main+0x432>
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    1182:	ec 3c       	cpi	r30, 0xCC	; 204
    1184:	d8 f7       	brcc	.-10     	; 0x117c <main+0x3ec>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1186:	07 e0       	ldi	r16, 0x07	; 7
    1188:	e0 9f       	mul	r30, r16
    118a:	f0 01       	movw	r30, r0
    118c:	11 24       	eor	r1, r1
    118e:	8f 01       	movw	r16, r30
    1190:	04 5b       	subi	r16, 0xB4	; 180
    1192:	1e 4f       	sbci	r17, 0xFE	; 254
    1194:	f8 01       	movw	r30, r16
    1196:	62 81       	ldd	r22, Z+2	; 0x02
    1198:	73 81       	ldd	r23, Z+3	; 0x03
    119a:	fb 01       	movw	r30, r22
    119c:	90 81       	ld	r25, Z
    119e:	44 24       	eor	r4, r4
    11a0:	43 94       	inc	r4
    11a2:	51 2c       	mov	r5, r1
    11a4:	f8 01       	movw	r30, r16
    11a6:	06 80       	ldd	r0, Z+6	; 0x06
    11a8:	02 c0       	rjmp	.+4      	; 0x11ae <main+0x41e>
    11aa:	44 0c       	add	r4, r4
    11ac:	55 1c       	adc	r5, r5
    11ae:	0a 94       	dec	r0
    11b0:	e2 f7       	brpl	.-8      	; 0x11aa <main+0x41a>
    11b2:	84 2d       	mov	r24, r4
    11b4:	80 95       	com	r24
    11b6:	89 23       	and	r24, r25
    11b8:	fb 01       	movw	r30, r22
    11ba:	80 83       	st	Z, r24
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    11bc:	ed 91       	ld	r30, X+
    11be:	e1 11       	cpse	r30, r1
    11c0:	e0 cf       	rjmp	.-64     	; 0x1182 <main+0x3f2>
/* Multiplexing method                                                  */
/************************************************************************/
static inline void MultiPlex(uint8_t *pin)
{
	pinsMultiWrite(plex_pins, LOW);
	pinWrite(plex_pins[*pin], HIGH);
    11c2:	d5 01       	movw	r26, r10
    11c4:	ed 91       	ld	r30, X+
    11c6:	5d 01       	movw	r10, r26
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    11c8:	ec 3c       	cpi	r30, 0xCC	; 204
    11ca:	10 f4       	brcc	.+4      	; 0x11d0 <main+0x440>
    11cc:	0c 94 09 1d 	jmp	0x3a12	; 0x3a12 <main+0x2c82>
	delay(delayms);
    11d0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    11d4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
/*  delay                                                               */
/************************************************************************/
int delayms = 1;
static inline void delay(int dl)
{
	while(dl >= 0)
    11d8:	97 fd       	sbrc	r25, 7
    11da:	08 c0       	rjmp	.+16     	; 0x11ec <main+0x45c>
    11dc:	ef e9       	ldi	r30, 0x9F	; 159
    11de:	ff e0       	ldi	r31, 0x0F	; 15
    11e0:	31 97       	sbiw	r30, 0x01	; 1
    11e2:	f1 f7       	brne	.-4      	; 0x11e0 <main+0x450>
    11e4:	00 c0       	rjmp	.+0      	; 0x11e6 <main+0x456>
    11e6:	00 00       	nop
	{
		_delay_ms(1);
		dl--;
    11e8:	01 97       	sbiw	r24, 0x01	; 1
    11ea:	c0 f7       	brcc	.-16     	; 0x11dc <main+0x44c>
	//output byte
	for(byte=0; byte<7; byte++){
		pos = 24;
		pinWrite(end_pin,((*(p+pos)) & (1 << byte)));
		pos--;
		for(index=0; index<3; index++){
    11ec:	a4 e0       	ldi	r26, 0x04	; 4
    11ee:	b1 e0       	ldi	r27, 0x01	; 1
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    11f0:	ed 91       	ld	r30, X+
    11f2:	ee 23       	and	r30, r30
    11f4:	01 f1       	breq	.+64     	; 0x1236 <main+0x4a6>
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    11f6:	ec 3c       	cpi	r30, 0xCC	; 204
    11f8:	d8 f7       	brcc	.-10     	; 0x11f0 <main+0x460>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    11fa:	07 e0       	ldi	r16, 0x07	; 7
    11fc:	e0 9f       	mul	r30, r16
    11fe:	f0 01       	movw	r30, r0
    1200:	11 24       	eor	r1, r1
    1202:	8f 01       	movw	r16, r30
    1204:	04 5b       	subi	r16, 0xB4	; 180
    1206:	1e 4f       	sbci	r17, 0xFE	; 254
    1208:	f8 01       	movw	r30, r16
    120a:	62 81       	ldd	r22, Z+2	; 0x02
    120c:	73 81       	ldd	r23, Z+3	; 0x03
    120e:	fb 01       	movw	r30, r22
    1210:	90 81       	ld	r25, Z
    1212:	44 24       	eor	r4, r4
    1214:	43 94       	inc	r4
    1216:	51 2c       	mov	r5, r1
    1218:	f8 01       	movw	r30, r16
    121a:	06 80       	ldd	r0, Z+6	; 0x06
    121c:	02 c0       	rjmp	.+4      	; 0x1222 <main+0x492>
    121e:	44 0c       	add	r4, r4
    1220:	55 1c       	adc	r5, r5
    1222:	0a 94       	dec	r0
    1224:	e2 f7       	brpl	.-8      	; 0x121e <main+0x48e>
    1226:	84 2d       	mov	r24, r4
    1228:	80 95       	com	r24
    122a:	89 23       	and	r24, r25
    122c:	fb 01       	movw	r30, r22
    122e:	80 83       	st	Z, r24
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    1230:	ed 91       	ld	r30, X+
    1232:	e1 11       	cpse	r30, r1
    1234:	e0 cf       	rjmp	.-64     	; 0x11f6 <main+0x466>
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1236:	5d 98       	cbi	0x0b, 5	; 11
    1238:	84 e0       	ldi	r24, 0x04	; 4
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	5a 98       	cbi	0x0b, 2	; 11
    123e:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1240:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1242:	5b 98       	cbi	0x0b, 3	; 11
    1244:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1246:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1248:	5b 98       	cbi	0x0b, 3	; 11
    124a:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    124c:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    124e:	5b 98       	cbi	0x0b, 3	; 11
    1250:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1252:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1254:	5b 98       	cbi	0x0b, 3	; 11
    1256:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1258:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    125a:	5b 98       	cbi	0x0b, 3	; 11
    125c:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    125e:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1260:	5b 98       	cbi	0x0b, 3	; 11
    1262:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1264:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1266:	5b 98       	cbi	0x0b, 3	; 11
    1268:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    126a:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    126c:	5b 98       	cbi	0x0b, 3	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    126e:	5a 9a       	sbi	0x0b, 2	; 11
    1270:	01 97       	sbiw	r24, 0x01	; 1
/************************************************************************/
static inline void Clear(){
	int x, y = 0;
	pinsMultiWrite(plex_pins, LOW);
	pinWrite(end_pin, LOW);
	for(x = 0; x < 4; x++) {
    1272:	21 f7       	brne	.-56     	; 0x123c <main+0x4ac>
    1274:	2f 5f       	subi	r18, 0xFF	; 255
    1276:	3f 4f       	sbci	r19, 0xFF	; 255
static inline void DisplayBuffer(const uint8_t *p)
{
	uint8_t byte, index, bit = 0;
	uint8_t pos = 24;
	//output byte
	for(byte=0; byte<7; byte++){
    1278:	27 30       	cpi	r18, 0x07	; 7
    127a:	31 05       	cpc	r19, r1
    127c:	09 f0       	breq	.+2      	; 0x1280 <main+0x4f0>
    127e:	ff ce       	rjmp	.-514    	; 0x107e <main+0x2ee>
			pinWrite(latch_pin, HIGH);
		}
		MultiPlex(&byte);
		Clear();
	}
	delayms = 1;
    1280:	f0 92 01 01 	sts	0x0101, r15	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1284:	e0 92 00 01 	sts	0x0100, r14	; 0x800100 <__DATA_REGION_ORIGIN__>
    1288:	ca 94       	dec	r12
	}
}*/
static inline void HoldDisplayBuffer(const uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
    128a:	c1 10       	cpse	r12, r1
    128c:	f2 ce       	rjmp	.-540    	; 0x1072 <main+0x2e2>
    128e:	4f 5f       	subi	r20, 0xFF	; 255
    1290:	5f 4f       	sbci	r21, 0xFF	; 255
/************************************************************************/
void ScrollRight(const uint8_t *p, uint8_t time)
{
	uint8_t index, begin, end = 0;
	//*bf = buffer;
	for(index = 0; index < 25; index++)
    1292:	49 31       	cpi	r20, 0x19	; 25
    1294:	51 05       	cpc	r21, r1
    1296:	09 f0       	breq	.+2      	; 0x129a <main+0x50a>
    1298:	cb ce       	rjmp	.-618    	; 0x1030 <main+0x2a0>
    129a:	09 81       	ldd	r16, Y+1	; 0x01
    129c:	1a 81       	ldd	r17, Y+2	; 0x02
    129e:	d1 01       	movw	r26, r2
    12a0:	e7 2d       	mov	r30, r7
    12a2:	1d 92       	st	X+, r1
    12a4:	ea 95       	dec	r30
    12a6:	e9 f7       	brne	.-6      	; 0x12a2 <main+0x512>
    12a8:	47 e1       	ldi	r20, 0x17	; 23
    12aa:	51 e0       	ldi	r21, 0x01	; 1
    12ac:	5a 83       	std	Y+2, r21	; 0x02
    12ae:	49 83       	std	Y+1, r20	; 0x01
    12b0:	da 01       	movw	r26, r20
    12b2:	40 e0       	ldi	r20, 0x00	; 0
    12b4:	88 e4       	ldi	r24, 0x48	; 72
/* returns the index of the first byte of the requested character       */
/************************************************************************/
uint8_t CharStart(const char *p)
{
	/*if(*p == ' ') return 0;
	else*/ return (uint8_t) (( *p - ' '));
    12b6:	80 52       	subi	r24, 0x20	; 32
	unsigned int index = 0;
	uint8_t len = 0;
	uint8_t x = 0;
	ClearStringBuffer();
	while(*ch){
		index = CharStart(ch++) * 5;
    12b8:	55 e0       	ldi	r21, 0x05	; 5
    12ba:	85 9f       	mul	r24, r21
    12bc:	c0 01       	movw	r24, r0
    12be:	11 24       	eor	r1, r1
		for(len = 0; len < 5; len++){
			stringbuffer[x] = (uint8_t)(pgm_read_byte((font_5x7 + index)));
    12c0:	fc 01       	movw	r30, r24
    12c2:	e8 59       	subi	r30, 0x98	; 152
    12c4:	ff 4f       	sbci	r31, 0xFF	; 255
    12c6:	54 91       	lpm	r21, Z
    12c8:	64 2f       	mov	r22, r20
    12ca:	70 e0       	ldi	r23, 0x00	; 0
    12cc:	6f 5c       	subi	r22, 0xCF	; 207
    12ce:	7d 4f       	sbci	r23, 0xFD	; 253
    12d0:	fb 01       	movw	r30, r22
    12d2:	50 83       	st	Z, r21
    12d4:	fc 01       	movw	r30, r24
    12d6:	e7 59       	subi	r30, 0x97	; 151
    12d8:	ff 4f       	sbci	r31, 0xFF	; 255
    12da:	54 91       	lpm	r21, Z
    12dc:	61 e0       	ldi	r22, 0x01	; 1
    12de:	64 0f       	add	r22, r20
    12e0:	70 e0       	ldi	r23, 0x00	; 0
    12e2:	6f 5c       	subi	r22, 0xCF	; 207
    12e4:	7d 4f       	sbci	r23, 0xFD	; 253
    12e6:	fb 01       	movw	r30, r22
    12e8:	50 83       	st	Z, r21
    12ea:	fc 01       	movw	r30, r24
    12ec:	e6 59       	subi	r30, 0x96	; 150
    12ee:	ff 4f       	sbci	r31, 0xFF	; 255
    12f0:	54 91       	lpm	r21, Z
    12f2:	62 e0       	ldi	r22, 0x02	; 2
    12f4:	64 0f       	add	r22, r20
    12f6:	70 e0       	ldi	r23, 0x00	; 0
    12f8:	6f 5c       	subi	r22, 0xCF	; 207
    12fa:	7d 4f       	sbci	r23, 0xFD	; 253
    12fc:	fb 01       	movw	r30, r22
    12fe:	50 83       	st	Z, r21
    1300:	fc 01       	movw	r30, r24
    1302:	e5 59       	subi	r30, 0x95	; 149
    1304:	ff 4f       	sbci	r31, 0xFF	; 255
    1306:	54 91       	lpm	r21, Z
    1308:	63 e0       	ldi	r22, 0x03	; 3
    130a:	64 0f       	add	r22, r20
    130c:	70 e0       	ldi	r23, 0x00	; 0
    130e:	6f 5c       	subi	r22, 0xCF	; 207
    1310:	7d 4f       	sbci	r23, 0xFD	; 253
    1312:	fb 01       	movw	r30, r22
    1314:	50 83       	st	Z, r21
    1316:	fc 01       	movw	r30, r24
    1318:	e4 59       	subi	r30, 0x94	; 148
    131a:	ff 4f       	sbci	r31, 0xFF	; 255
    131c:	84 91       	lpm	r24, Z
    131e:	e4 e0       	ldi	r30, 0x04	; 4
    1320:	e4 0f       	add	r30, r20
    1322:	f0 e0       	ldi	r31, 0x00	; 0
    1324:	ef 5c       	subi	r30, 0xCF	; 207
    1326:	fd 4f       	sbci	r31, 0xFD	; 253
    1328:	80 83       	st	Z, r24
			index++; x++;
		}
		stringbuffer[x] = 0;
    132a:	e5 e0       	ldi	r30, 0x05	; 5
    132c:	e4 0f       	add	r30, r20
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	ef 5c       	subi	r30, 0xCF	; 207
    1332:	fd 4f       	sbci	r31, 0xFD	; 253
    1334:	10 82       	st	Z, r1
		x++;
    1336:	4a 5f       	subi	r20, 0xFA	; 250
{
	unsigned int index = 0;
	uint8_t len = 0;
	uint8_t x = 0;
	ClearStringBuffer();
	while(*ch){
    1338:	8d 91       	ld	r24, X+
    133a:	81 11       	cpse	r24, r1
    133c:	bc cf       	rjmp	.-136    	; 0x12b6 <main+0x526>
    133e:	62 2f       	mov	r22, r18
    1340:	b1 e3       	ldi	r27, 0x31	; 49
    1342:	2b 2e       	mov	r2, r27
    1344:	b2 e0       	ldi	r27, 0x02	; 2
    1346:	3b 2e       	mov	r3, r27
    1348:	f1 01       	movw	r30, r2
		for(index = 0; index < 25; index++)
		{
			if(dir)
			*(bf + index) = (*((p+index)) >> (7-step));
			else
			*(bf + index) = (*((p+index)) << (7-step));
    134a:	cf 01       	movw	r24, r30
    134c:	81 53       	subi	r24, 0x31	; 49
    134e:	92 40       	sbci	r25, 0x02	; 2
    1350:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <bf>
    1354:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <bf+0x1>
    1358:	a8 0f       	add	r26, r24
    135a:	b9 1f       	adc	r27, r25
    135c:	81 91       	ld	r24, Z+
    135e:	06 2e       	mov	r0, r22
    1360:	01 c0       	rjmp	.+2      	; 0x1364 <main+0x5d4>
    1362:	88 0f       	add	r24, r24
    1364:	0a 94       	dec	r0
    1366:	ea f7       	brpl	.-6      	; 0x1362 <main+0x5d2>
    1368:	8c 93       	st	X, r24
{
	//uint8_t *bf = buffer;
	uint8_t index, step = 0;
	for(step = 0; step < 7; step++)
	{
		for(index = 0; index < 25; index++)
    136a:	5a e4       	ldi	r21, 0x4A	; 74
    136c:	45 2e       	mov	r4, r21
    136e:	52 e0       	ldi	r21, 0x02	; 2
    1370:	55 2e       	mov	r5, r21
    1372:	4e 16       	cp	r4, r30
    1374:	5f 06       	cpc	r5, r31
    1376:	49 f7       	brne	.-46     	; 0x134a <main+0x5ba>
			if(dir)
			*(bf + index) = (*((p+index)) >> (7-step));
			else
			*(bf + index) = (*((p+index)) << (7-step));
		}
		HoldDisplayBuffer(bf, time);
    1378:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <bf>
    137c:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <bf+0x1>
    1380:	4a e0       	ldi	r20, 0x0A	; 10
    1382:	a4 2e       	mov	r10, r20
/************************************************************************/
void ScrollRight(const uint8_t *p, uint8_t time)
{
	uint8_t index, begin, end = 0;
	//*bf = buffer;
	for(index = 0; index < 25; index++)
    1384:	94 e0       	ldi	r25, 0x04	; 4
    1386:	c9 2e       	mov	r12, r25
    1388:	91 e0       	ldi	r25, 0x01	; 1
    138a:	d9 2e       	mov	r13, r25
    138c:	40 e0       	ldi	r20, 0x00	; 0
    138e:	50 e0       	ldi	r21, 0x00	; 0
	uint8_t byte, index, bit = 0;
	uint8_t pos = 24;
	//output byte
	for(byte=0; byte<7; byte++){
		pos = 24;
		pinWrite(end_pin,((*(p+pos)) & (1 << byte)));
    1390:	81 e0       	ldi	r24, 0x01	; 1
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	04 2e       	mov	r0, r20
    1396:	01 c0       	rjmp	.+2      	; 0x139a <main+0x60a>
    1398:	88 0f       	add	r24, r24
    139a:	0a 94       	dec	r0
    139c:	ea f7       	brpl	.-6      	; 0x1398 <main+0x608>
    139e:	98 2f       	mov	r25, r24
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    13a0:	58 96       	adiw	r26, 0x18	; 24
    13a2:	6c 91       	ld	r22, X
    13a4:	58 97       	sbiw	r26, 0x18	; 24
    13a6:	86 23       	and	r24, r22
    13a8:	11 f0       	breq	.+4      	; 0x13ae <main+0x61e>
    13aa:	0c 94 36 1d 	jmp	0x3a6c	; 0x3a6c <main+0x2cdc>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    13ae:	5d 98       	cbi	0x0b, 5	; 11
/************************************************************************/
void ScrollRight(const uint8_t *p, uint8_t time)
{
	uint8_t index, begin, end = 0;
	//*bf = buffer;
	for(index = 0; index < 25; index++)
    13b0:	87 e1       	ldi	r24, 0x17	; 23
    13b2:	5a 98       	cbi	0x0b, 2	; 11
		pinWrite(end_pin,((*(p+pos)) & (1 << byte)));
		pos--;
		for(index=0; index<3; index++){
			pinWrite(latch_pin, LOW);
			for(bit = 0; bit < 8 ; bit++){
				pinWrite(data_pin,((*(p+pos)) & (1 << byte)));
    13b4:	fd 01       	movw	r30, r26
    13b6:	e8 0f       	add	r30, r24
    13b8:	f1 1d       	adc	r31, r1
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    13ba:	60 81       	ld	r22, Z
    13bc:	69 23       	and	r22, r25
    13be:	11 f0       	breq	.+4      	; 0x13c4 <main+0x634>
    13c0:	0c 94 33 1d 	jmp	0x3a66	; 0x3a66 <main+0x2cd6>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    13c4:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    13c6:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    13c8:	5b 98       	cbi	0x0b, 3	; 11
    13ca:	6f ef       	ldi	r22, 0xFF	; 255
    13cc:	68 0f       	add	r22, r24
    13ce:	fd 01       	movw	r30, r26
    13d0:	e6 0f       	add	r30, r22
    13d2:	f1 1d       	adc	r31, r1
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    13d4:	60 81       	ld	r22, Z
    13d6:	69 23       	and	r22, r25
    13d8:	11 f0       	breq	.+4      	; 0x13de <main+0x64e>
    13da:	0c 94 30 1d 	jmp	0x3a60	; 0x3a60 <main+0x2cd0>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    13de:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    13e0:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    13e2:	5b 98       	cbi	0x0b, 3	; 11
    13e4:	6e ef       	ldi	r22, 0xFE	; 254
    13e6:	68 0f       	add	r22, r24
    13e8:	fd 01       	movw	r30, r26
    13ea:	e6 0f       	add	r30, r22
    13ec:	f1 1d       	adc	r31, r1
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    13ee:	60 81       	ld	r22, Z
    13f0:	69 23       	and	r22, r25
    13f2:	11 f0       	breq	.+4      	; 0x13f8 <main+0x668>
    13f4:	0c 94 2d 1d 	jmp	0x3a5a	; 0x3a5a <main+0x2cca>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    13f8:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    13fa:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    13fc:	5b 98       	cbi	0x0b, 3	; 11
    13fe:	6d ef       	ldi	r22, 0xFD	; 253
    1400:	68 0f       	add	r22, r24
    1402:	fd 01       	movw	r30, r26
    1404:	e6 0f       	add	r30, r22
    1406:	f1 1d       	adc	r31, r1
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    1408:	60 81       	ld	r22, Z
    140a:	69 23       	and	r22, r25
    140c:	11 f0       	breq	.+4      	; 0x1412 <main+0x682>
    140e:	0c 94 2a 1d 	jmp	0x3a54	; 0x3a54 <main+0x2cc4>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1412:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1414:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1416:	5b 98       	cbi	0x0b, 3	; 11
    1418:	6c ef       	ldi	r22, 0xFC	; 252
    141a:	68 0f       	add	r22, r24
    141c:	fd 01       	movw	r30, r26
    141e:	e6 0f       	add	r30, r22
    1420:	f1 1d       	adc	r31, r1
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    1422:	60 81       	ld	r22, Z
    1424:	69 23       	and	r22, r25
    1426:	11 f0       	breq	.+4      	; 0x142c <main+0x69c>
    1428:	0c 94 27 1d 	jmp	0x3a4e	; 0x3a4e <main+0x2cbe>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    142c:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    142e:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1430:	5b 98       	cbi	0x0b, 3	; 11
    1432:	6b ef       	ldi	r22, 0xFB	; 251
    1434:	68 0f       	add	r22, r24
    1436:	fd 01       	movw	r30, r26
    1438:	e6 0f       	add	r30, r22
    143a:	f1 1d       	adc	r31, r1
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    143c:	60 81       	ld	r22, Z
    143e:	69 23       	and	r22, r25
    1440:	11 f0       	breq	.+4      	; 0x1446 <main+0x6b6>
    1442:	0c 94 24 1d 	jmp	0x3a48	; 0x3a48 <main+0x2cb8>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1446:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1448:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    144a:	5b 98       	cbi	0x0b, 3	; 11
    144c:	6a ef       	ldi	r22, 0xFA	; 250
    144e:	68 0f       	add	r22, r24
    1450:	fd 01       	movw	r30, r26
    1452:	e6 0f       	add	r30, r22
    1454:	f1 1d       	adc	r31, r1
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    1456:	60 81       	ld	r22, Z
    1458:	69 23       	and	r22, r25
    145a:	11 f0       	breq	.+4      	; 0x1460 <main+0x6d0>
    145c:	0c 94 21 1d 	jmp	0x3a42	; 0x3a42 <main+0x2cb2>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1460:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1462:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1464:	5b 98       	cbi	0x0b, 3	; 11
    1466:	69 ef       	ldi	r22, 0xF9	; 249
    1468:	68 0f       	add	r22, r24
    146a:	fd 01       	movw	r30, r26
    146c:	e6 0f       	add	r30, r22
    146e:	f1 1d       	adc	r31, r1
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    1470:	60 81       	ld	r22, Z
    1472:	69 23       	and	r22, r25
    1474:	11 f0       	breq	.+4      	; 0x147a <main+0x6ea>
    1476:	0c 94 1e 1d 	jmp	0x3a3c	; 0x3a3c <main+0x2cac>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    147a:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    147c:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    147e:	5b 98       	cbi	0x0b, 3	; 11
				//toggle the clock pin
				pinWrite(clock_pin, HIGH);
				pinWrite(clock_pin, LOW);
				pos--;
    1480:	88 50       	subi	r24, 0x08	; 8
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1482:	5a 9a       	sbi	0x0b, 2	; 11
	//output byte
	for(byte=0; byte<7; byte++){
		pos = 24;
		pinWrite(end_pin,((*(p+pos)) & (1 << byte)));
		pos--;
		for(index=0; index<3; index++){
    1484:	8f 3f       	cpi	r24, 0xFF	; 255
    1486:	09 f0       	breq	.+2      	; 0x148a <main+0x6fa>
    1488:	94 cf       	rjmp	.-216    	; 0x13b2 <main+0x622>
    148a:	84 e0       	ldi	r24, 0x04	; 4
    148c:	91 e0       	ldi	r25, 0x01	; 1
    148e:	2d 01       	movw	r4, r26
    1490:	6a 2c       	mov	r6, r10
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    1492:	dc 01       	movw	r26, r24
    1494:	ed 91       	ld	r30, X+
    1496:	cd 01       	movw	r24, r26
    1498:	ee 23       	and	r30, r30
    149a:	f1 f0       	breq	.+60     	; 0x14d8 <main+0x748>
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    149c:	ec 3c       	cpi	r30, 0xCC	; 204
    149e:	c8 f7       	brcc	.-14     	; 0x1492 <main+0x702>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    14a0:	67 e0       	ldi	r22, 0x07	; 7
    14a2:	e6 9f       	mul	r30, r22
    14a4:	f0 01       	movw	r30, r0
    14a6:	11 24       	eor	r1, r1
    14a8:	e4 5b       	subi	r30, 0xB4	; 180
    14aa:	fe 4f       	sbci	r31, 0xFE	; 254
    14ac:	a2 80       	ldd	r10, Z+2	; 0x02
    14ae:	b3 80       	ldd	r11, Z+3	; 0x03
    14b0:	d5 01       	movw	r26, r10
    14b2:	7c 91       	ld	r23, X
    14b4:	a1 e0       	ldi	r26, 0x01	; 1
    14b6:	b0 e0       	ldi	r27, 0x00	; 0
    14b8:	06 80       	ldd	r0, Z+6	; 0x06
    14ba:	02 c0       	rjmp	.+4      	; 0x14c0 <main+0x730>
    14bc:	aa 0f       	add	r26, r26
    14be:	bb 1f       	adc	r27, r27
    14c0:	0a 94       	dec	r0
    14c2:	e2 f7       	brpl	.-8      	; 0x14bc <main+0x72c>
    14c4:	6a 2f       	mov	r22, r26
    14c6:	60 95       	com	r22
    14c8:	67 23       	and	r22, r23
    14ca:	f5 01       	movw	r30, r10
    14cc:	60 83       	st	Z, r22
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    14ce:	dc 01       	movw	r26, r24
    14d0:	ed 91       	ld	r30, X+
    14d2:	cd 01       	movw	r24, r26
    14d4:	e1 11       	cpse	r30, r1
    14d6:	e2 cf       	rjmp	.-60     	; 0x149c <main+0x70c>
    14d8:	d2 01       	movw	r26, r4
    14da:	a6 2c       	mov	r10, r6
/* Multiplexing method                                                  */
/************************************************************************/
static inline void MultiPlex(uint8_t *pin)
{
	pinsMultiWrite(plex_pins, LOW);
	pinWrite(plex_pins[*pin], HIGH);
    14dc:	f6 01       	movw	r30, r12
    14de:	91 91       	ld	r25, Z+
    14e0:	6f 01       	movw	r12, r30
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    14e2:	9c 3c       	cpi	r25, 0xCC	; 204
    14e4:	10 f4       	brcc	.+4      	; 0x14ea <main+0x75a>
    14e6:	0c 94 39 1d 	jmp	0x3a72	; 0x3a72 <main+0x2ce2>
	delay(delayms);
    14ea:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    14ee:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
/*  delay                                                               */
/************************************************************************/
int delayms = 1;
static inline void delay(int dl)
{
	while(dl >= 0)
    14f2:	97 fd       	sbrc	r25, 7
    14f4:	08 c0       	rjmp	.+16     	; 0x1506 <main+0x776>
    14f6:	ef e9       	ldi	r30, 0x9F	; 159
    14f8:	ff e0       	ldi	r31, 0x0F	; 15
    14fa:	31 97       	sbiw	r30, 0x01	; 1
    14fc:	f1 f7       	brne	.-4      	; 0x14fa <main+0x76a>
    14fe:	00 c0       	rjmp	.+0      	; 0x1500 <main+0x770>
    1500:	00 00       	nop
	{
		_delay_ms(1);
		dl--;
    1502:	01 97       	sbiw	r24, 0x01	; 1
    1504:	c0 f7       	brcc	.-16     	; 0x14f6 <main+0x766>
	//output byte
	for(byte=0; byte<7; byte++){
		pos = 24;
		pinWrite(end_pin,((*(p+pos)) & (1 << byte)));
		pos--;
		for(index=0; index<3; index++){
    1506:	84 e0       	ldi	r24, 0x04	; 4
    1508:	91 e0       	ldi	r25, 0x01	; 1
    150a:	2d 01       	movw	r4, r26
    150c:	6a 2c       	mov	r6, r10
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    150e:	dc 01       	movw	r26, r24
    1510:	ed 91       	ld	r30, X+
    1512:	cd 01       	movw	r24, r26
    1514:	ee 23       	and	r30, r30
    1516:	f1 f0       	breq	.+60     	; 0x1554 <main+0x7c4>
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    1518:	ec 3c       	cpi	r30, 0xCC	; 204
    151a:	c8 f7       	brcc	.-14     	; 0x150e <main+0x77e>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    151c:	67 e0       	ldi	r22, 0x07	; 7
    151e:	e6 9f       	mul	r30, r22
    1520:	f0 01       	movw	r30, r0
    1522:	11 24       	eor	r1, r1
    1524:	e4 5b       	subi	r30, 0xB4	; 180
    1526:	fe 4f       	sbci	r31, 0xFE	; 254
    1528:	a2 80       	ldd	r10, Z+2	; 0x02
    152a:	b3 80       	ldd	r11, Z+3	; 0x03
    152c:	d5 01       	movw	r26, r10
    152e:	7c 91       	ld	r23, X
    1530:	a1 e0       	ldi	r26, 0x01	; 1
    1532:	b0 e0       	ldi	r27, 0x00	; 0
    1534:	06 80       	ldd	r0, Z+6	; 0x06
    1536:	02 c0       	rjmp	.+4      	; 0x153c <main+0x7ac>
    1538:	aa 0f       	add	r26, r26
    153a:	bb 1f       	adc	r27, r27
    153c:	0a 94       	dec	r0
    153e:	e2 f7       	brpl	.-8      	; 0x1538 <main+0x7a8>
    1540:	6a 2f       	mov	r22, r26
    1542:	60 95       	com	r22
    1544:	67 23       	and	r22, r23
    1546:	f5 01       	movw	r30, r10
    1548:	60 83       	st	Z, r22
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    154a:	dc 01       	movw	r26, r24
    154c:	ed 91       	ld	r30, X+
    154e:	cd 01       	movw	r24, r26
    1550:	e1 11       	cpse	r30, r1
    1552:	e2 cf       	rjmp	.-60     	; 0x1518 <main+0x788>
    1554:	d2 01       	movw	r26, r4
    1556:	a6 2c       	mov	r10, r6
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1558:	5d 98       	cbi	0x0b, 5	; 11
    155a:	84 e0       	ldi	r24, 0x04	; 4
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	5a 98       	cbi	0x0b, 2	; 11
    1560:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1562:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1564:	5b 98       	cbi	0x0b, 3	; 11
    1566:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1568:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    156a:	5b 98       	cbi	0x0b, 3	; 11
    156c:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    156e:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1570:	5b 98       	cbi	0x0b, 3	; 11
    1572:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1574:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1576:	5b 98       	cbi	0x0b, 3	; 11
    1578:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    157a:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    157c:	5b 98       	cbi	0x0b, 3	; 11
    157e:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1580:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1582:	5b 98       	cbi	0x0b, 3	; 11
    1584:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1586:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1588:	5b 98       	cbi	0x0b, 3	; 11
    158a:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    158c:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    158e:	5b 98       	cbi	0x0b, 3	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1590:	5a 9a       	sbi	0x0b, 2	; 11
    1592:	01 97       	sbiw	r24, 0x01	; 1
/************************************************************************/
static inline void Clear(){
	int x, y = 0;
	pinsMultiWrite(plex_pins, LOW);
	pinWrite(end_pin, LOW);
	for(x = 0; x < 4; x++) {
    1594:	21 f7       	brne	.-56     	; 0x155e <main+0x7ce>
    1596:	4f 5f       	subi	r20, 0xFF	; 255
    1598:	5f 4f       	sbci	r21, 0xFF	; 255
static inline void DisplayBuffer(const uint8_t *p)
{
	uint8_t byte, index, bit = 0;
	uint8_t pos = 24;
	//output byte
	for(byte=0; byte<7; byte++){
    159a:	47 30       	cpi	r20, 0x07	; 7
    159c:	51 05       	cpc	r21, r1
    159e:	09 f0       	breq	.+2      	; 0x15a2 <main+0x812>
    15a0:	f7 ce       	rjmp	.-530    	; 0x1390 <main+0x600>
			pinWrite(latch_pin, HIGH);
		}
		MultiPlex(&byte);
		Clear();
	}
	delayms = 1;
    15a2:	f0 92 01 01 	sts	0x0101, r15	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    15a6:	e0 92 00 01 	sts	0x0100, r14	; 0x800100 <__DATA_REGION_ORIGIN__>
    15aa:	aa 94       	dec	r10
	}
}*/
static inline void HoldDisplayBuffer(const uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
    15ac:	a1 10       	cpse	r10, r1
    15ae:	ea ce       	rjmp	.-556    	; 0x1384 <main+0x5f4>
    15b0:	21 50       	subi	r18, 0x01	; 1
    15b2:	31 09       	sbc	r19, r1
enum direction{ up, down};
void Drop(const uint8_t *p, uint8_t time, uint8_t dir )
{
	//uint8_t *bf = buffer;
	uint8_t index, step = 0;
	for(step = 0; step < 7; step++)
    15b4:	09 f0       	breq	.+2      	; 0x15b8 <main+0x828>
    15b6:	c3 ce       	rjmp	.-634    	; 0x133e <main+0x5ae>
    15b8:	8a e0       	ldi	r24, 0x0A	; 10
    15ba:	d8 2e       	mov	r13, r24
}*/
static inline void HoldDisplayBuffer(const uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
		DisplayBuffer(data);
    15bc:	81 e3       	ldi	r24, 0x31	; 49
    15be:	92 e0       	ldi	r25, 0x02	; 2
    15c0:	0e 94 41 01 	call	0x282	; 0x282 <DisplayBuffer>
    15c4:	da 94       	dec	r13
	}
}*/
static inline void HoldDisplayBuffer(const uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
    15c6:	d1 10       	cpse	r13, r1
    15c8:	f9 cf       	rjmp	.-14     	; 0x15bc <main+0x82c>
    15ca:	f8 01       	movw	r30, r16
    15cc:	47 2c       	mov	r4, r7
    15ce:	11 92       	st	Z+, r1
    15d0:	4a 94       	dec	r4
    15d2:	e9 f7       	brne	.-6      	; 0x15ce <main+0x83e>
    15d4:	a7 e1       	ldi	r26, 0x17	; 23
    15d6:	b1 e0       	ldi	r27, 0x01	; 1
    15d8:	20 e0       	ldi	r18, 0x00	; 0
    15da:	88 e4       	ldi	r24, 0x48	; 72
/* returns the index of the first byte of the requested character       */
/************************************************************************/
uint8_t CharStart(const char *p)
{
	/*if(*p == ' ') return 0;
	else*/ return (uint8_t) (( *p - ' '));
    15dc:	80 52       	subi	r24, 0x20	; 32
	unsigned int index = 0;
	uint8_t len = 0;
	uint8_t x = 0;
	ClearStringBuffer();
	while(*ch){
		index = CharStart(ch++) * 5;
    15de:	35 e0       	ldi	r19, 0x05	; 5
    15e0:	83 9f       	mul	r24, r19
    15e2:	c0 01       	movw	r24, r0
    15e4:	11 24       	eor	r1, r1
		for(len = 0; len < 5; len++){
			stringbuffer[x] = (uint8_t)(pgm_read_byte((font_5x7 + index)));
    15e6:	fc 01       	movw	r30, r24
    15e8:	e8 59       	subi	r30, 0x98	; 152
    15ea:	ff 4f       	sbci	r31, 0xFF	; 255
    15ec:	34 91       	lpm	r19, Z
    15ee:	e2 2f       	mov	r30, r18
    15f0:	f0 e0       	ldi	r31, 0x00	; 0
    15f2:	ef 5c       	subi	r30, 0xCF	; 207
    15f4:	fd 4f       	sbci	r31, 0xFD	; 253
    15f6:	30 83       	st	Z, r19
    15f8:	fc 01       	movw	r30, r24
    15fa:	e7 59       	subi	r30, 0x97	; 151
    15fc:	ff 4f       	sbci	r31, 0xFF	; 255
    15fe:	34 91       	lpm	r19, Z
    1600:	e1 e0       	ldi	r30, 0x01	; 1
    1602:	e2 0f       	add	r30, r18
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	ef 5c       	subi	r30, 0xCF	; 207
    1608:	fd 4f       	sbci	r31, 0xFD	; 253
    160a:	30 83       	st	Z, r19
    160c:	fc 01       	movw	r30, r24
    160e:	e6 59       	subi	r30, 0x96	; 150
    1610:	ff 4f       	sbci	r31, 0xFF	; 255
    1612:	34 91       	lpm	r19, Z
    1614:	e2 e0       	ldi	r30, 0x02	; 2
    1616:	e2 0f       	add	r30, r18
    1618:	f0 e0       	ldi	r31, 0x00	; 0
    161a:	ef 5c       	subi	r30, 0xCF	; 207
    161c:	fd 4f       	sbci	r31, 0xFD	; 253
    161e:	30 83       	st	Z, r19
    1620:	fc 01       	movw	r30, r24
    1622:	e5 59       	subi	r30, 0x95	; 149
    1624:	ff 4f       	sbci	r31, 0xFF	; 255
    1626:	34 91       	lpm	r19, Z
    1628:	e3 e0       	ldi	r30, 0x03	; 3
    162a:	e2 0f       	add	r30, r18
    162c:	f0 e0       	ldi	r31, 0x00	; 0
    162e:	ef 5c       	subi	r30, 0xCF	; 207
    1630:	fd 4f       	sbci	r31, 0xFD	; 253
    1632:	30 83       	st	Z, r19
    1634:	fc 01       	movw	r30, r24
    1636:	e4 59       	subi	r30, 0x94	; 148
    1638:	ff 4f       	sbci	r31, 0xFF	; 255
    163a:	84 91       	lpm	r24, Z
    163c:	e4 e0       	ldi	r30, 0x04	; 4
    163e:	e2 0f       	add	r30, r18
    1640:	f0 e0       	ldi	r31, 0x00	; 0
    1642:	ef 5c       	subi	r30, 0xCF	; 207
    1644:	fd 4f       	sbci	r31, 0xFD	; 253
    1646:	80 83       	st	Z, r24
			index++; x++;
		}
		stringbuffer[x] = 0;
    1648:	e5 e0       	ldi	r30, 0x05	; 5
    164a:	e2 0f       	add	r30, r18
    164c:	f0 e0       	ldi	r31, 0x00	; 0
    164e:	ef 5c       	subi	r30, 0xCF	; 207
    1650:	fd 4f       	sbci	r31, 0xFD	; 253
    1652:	10 82       	st	Z, r1
		x++;
    1654:	2a 5f       	subi	r18, 0xFA	; 250
{
	unsigned int index = 0;
	uint8_t len = 0;
	uint8_t x = 0;
	ClearStringBuffer();
	while(*ch){
    1656:	8d 91       	ld	r24, X+
    1658:	81 11       	cpse	r24, r1
    165a:	c0 cf       	rjmp	.-128    	; 0x15dc <main+0x84c>
    165c:	a2 e3       	ldi	r26, 0x32	; 50
    165e:	da 2e       	mov	r13, r26
    1660:	64 e0       	ldi	r22, 0x04	; 4
    1662:	a6 2e       	mov	r10, r22
    1664:	61 e0       	ldi	r22, 0x01	; 1
    1666:	b6 2e       	mov	r11, r22
    1668:	80 e0       	ldi	r24, 0x00	; 0
    166a:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t byte, index, bit = 0;
	uint8_t pos = 24;
	//output byte
	for(byte=0; byte<7; byte++){
		pos = 24;
		pinWrite(end_pin,((*(p+pos)) & (1 << byte)));
    166c:	21 e0       	ldi	r18, 0x01	; 1
    166e:	30 e0       	ldi	r19, 0x00	; 0
    1670:	08 2e       	mov	r0, r24
    1672:	01 c0       	rjmp	.+2      	; 0x1676 <main+0x8e6>
    1674:	22 0f       	add	r18, r18
    1676:	0a 94       	dec	r0
    1678:	ea f7       	brpl	.-6      	; 0x1674 <main+0x8e4>
    167a:	32 2f       	mov	r19, r18
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    167c:	40 91 49 02 	lds	r20, 0x0249	; 0x800249 <stringbuffer+0x18>
    1680:	24 23       	and	r18, r20
    1682:	11 f0       	breq	.+4      	; 0x1688 <main+0x8f8>
    1684:	0c 94 6c 1d 	jmp	0x3ad8	; 0x3ad8 <main+0x2d48>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1688:	5d 98       	cbi	0x0b, 5	; 11
	}
}*/
static inline void HoldDisplayBuffer(const uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
    168a:	27 e1       	ldi	r18, 0x17	; 23
    168c:	5a 98       	cbi	0x0b, 2	; 11
		pinWrite(end_pin,((*(p+pos)) & (1 << byte)));
		pos--;
		for(index=0; index<3; index++){
			pinWrite(latch_pin, LOW);
			for(bit = 0; bit < 8 ; bit++){
				pinWrite(data_pin,((*(p+pos)) & (1 << byte)));
    168e:	e2 2f       	mov	r30, r18
    1690:	f0 e0       	ldi	r31, 0x00	; 0
    1692:	ef 5c       	subi	r30, 0xCF	; 207
    1694:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    1696:	40 81       	ld	r20, Z
    1698:	43 23       	and	r20, r19
    169a:	11 f0       	breq	.+4      	; 0x16a0 <main+0x910>
    169c:	0c 94 69 1d 	jmp	0x3ad2	; 0x3ad2 <main+0x2d42>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    16a0:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    16a2:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    16a4:	5b 98       	cbi	0x0b, 3	; 11
    16a6:	ef ef       	ldi	r30, 0xFF	; 255
    16a8:	e2 0f       	add	r30, r18
    16aa:	f0 e0       	ldi	r31, 0x00	; 0
    16ac:	ef 5c       	subi	r30, 0xCF	; 207
    16ae:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    16b0:	40 81       	ld	r20, Z
    16b2:	43 23       	and	r20, r19
    16b4:	11 f0       	breq	.+4      	; 0x16ba <main+0x92a>
    16b6:	0c 94 66 1d 	jmp	0x3acc	; 0x3acc <main+0x2d3c>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    16ba:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    16bc:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    16be:	5b 98       	cbi	0x0b, 3	; 11
    16c0:	ee ef       	ldi	r30, 0xFE	; 254
    16c2:	e2 0f       	add	r30, r18
    16c4:	f0 e0       	ldi	r31, 0x00	; 0
    16c6:	ef 5c       	subi	r30, 0xCF	; 207
    16c8:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    16ca:	40 81       	ld	r20, Z
    16cc:	43 23       	and	r20, r19
    16ce:	11 f0       	breq	.+4      	; 0x16d4 <main+0x944>
    16d0:	0c 94 63 1d 	jmp	0x3ac6	; 0x3ac6 <main+0x2d36>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    16d4:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    16d6:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    16d8:	5b 98       	cbi	0x0b, 3	; 11
    16da:	ed ef       	ldi	r30, 0xFD	; 253
    16dc:	e2 0f       	add	r30, r18
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	ef 5c       	subi	r30, 0xCF	; 207
    16e2:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    16e4:	40 81       	ld	r20, Z
    16e6:	43 23       	and	r20, r19
    16e8:	11 f0       	breq	.+4      	; 0x16ee <main+0x95e>
    16ea:	0c 94 60 1d 	jmp	0x3ac0	; 0x3ac0 <main+0x2d30>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    16ee:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    16f0:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    16f2:	5b 98       	cbi	0x0b, 3	; 11
    16f4:	ec ef       	ldi	r30, 0xFC	; 252
    16f6:	e2 0f       	add	r30, r18
    16f8:	f0 e0       	ldi	r31, 0x00	; 0
    16fa:	ef 5c       	subi	r30, 0xCF	; 207
    16fc:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    16fe:	40 81       	ld	r20, Z
    1700:	43 23       	and	r20, r19
    1702:	11 f0       	breq	.+4      	; 0x1708 <main+0x978>
    1704:	0c 94 5d 1d 	jmp	0x3aba	; 0x3aba <main+0x2d2a>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1708:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    170a:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    170c:	5b 98       	cbi	0x0b, 3	; 11
    170e:	eb ef       	ldi	r30, 0xFB	; 251
    1710:	e2 0f       	add	r30, r18
    1712:	f0 e0       	ldi	r31, 0x00	; 0
    1714:	ef 5c       	subi	r30, 0xCF	; 207
    1716:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    1718:	40 81       	ld	r20, Z
    171a:	43 23       	and	r20, r19
    171c:	11 f0       	breq	.+4      	; 0x1722 <main+0x992>
    171e:	0c 94 5a 1d 	jmp	0x3ab4	; 0x3ab4 <main+0x2d24>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1722:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1724:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1726:	5b 98       	cbi	0x0b, 3	; 11
    1728:	ea ef       	ldi	r30, 0xFA	; 250
    172a:	e2 0f       	add	r30, r18
    172c:	f0 e0       	ldi	r31, 0x00	; 0
    172e:	ef 5c       	subi	r30, 0xCF	; 207
    1730:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    1732:	40 81       	ld	r20, Z
    1734:	43 23       	and	r20, r19
    1736:	11 f0       	breq	.+4      	; 0x173c <main+0x9ac>
    1738:	0c 94 57 1d 	jmp	0x3aae	; 0x3aae <main+0x2d1e>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    173c:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    173e:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1740:	5b 98       	cbi	0x0b, 3	; 11
    1742:	e9 ef       	ldi	r30, 0xF9	; 249
    1744:	e2 0f       	add	r30, r18
    1746:	f0 e0       	ldi	r31, 0x00	; 0
    1748:	ef 5c       	subi	r30, 0xCF	; 207
    174a:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    174c:	40 81       	ld	r20, Z
    174e:	43 23       	and	r20, r19
    1750:	11 f0       	breq	.+4      	; 0x1756 <main+0x9c6>
    1752:	0c 94 54 1d 	jmp	0x3aa8	; 0x3aa8 <main+0x2d18>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1756:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1758:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    175a:	5b 98       	cbi	0x0b, 3	; 11
				//toggle the clock pin
				pinWrite(clock_pin, HIGH);
				pinWrite(clock_pin, LOW);
				pos--;
    175c:	28 50       	subi	r18, 0x08	; 8
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    175e:	5a 9a       	sbi	0x0b, 2	; 11
	//output byte
	for(byte=0; byte<7; byte++){
		pos = 24;
		pinWrite(end_pin,((*(p+pos)) & (1 << byte)));
		pos--;
		for(index=0; index<3; index++){
    1760:	2f 3f       	cpi	r18, 0xFF	; 255
    1762:	09 f0       	breq	.+2      	; 0x1766 <main+0x9d6>
    1764:	93 cf       	rjmp	.-218    	; 0x168c <main+0x8fc>
    1766:	a4 e0       	ldi	r26, 0x04	; 4
    1768:	b1 e0       	ldi	r27, 0x01	; 1
    176a:	6d 2c       	mov	r6, r13
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    176c:	ed 91       	ld	r30, X+
    176e:	ee 23       	and	r30, r30
    1770:	01 f1       	breq	.+64     	; 0x17b2 <main+0xa22>
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    1772:	ec 3c       	cpi	r30, 0xCC	; 204
    1774:	d8 f7       	brcc	.-10     	; 0x176c <main+0x9dc>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1776:	47 e0       	ldi	r20, 0x07	; 7
    1778:	e4 9f       	mul	r30, r20
    177a:	f0 01       	movw	r30, r0
    177c:	11 24       	eor	r1, r1
    177e:	bf 01       	movw	r22, r30
    1780:	64 5b       	subi	r22, 0xB4	; 180
    1782:	7e 4f       	sbci	r23, 0xFE	; 254
    1784:	fb 01       	movw	r30, r22
    1786:	42 81       	ldd	r20, Z+2	; 0x02
    1788:	53 81       	ldd	r21, Z+3	; 0x03
    178a:	fa 01       	movw	r30, r20
    178c:	30 81       	ld	r19, Z
    178e:	44 24       	eor	r4, r4
    1790:	43 94       	inc	r4
    1792:	51 2c       	mov	r5, r1
    1794:	fb 01       	movw	r30, r22
    1796:	06 80       	ldd	r0, Z+6	; 0x06
    1798:	02 c0       	rjmp	.+4      	; 0x179e <main+0xa0e>
    179a:	44 0c       	add	r4, r4
    179c:	55 1c       	adc	r5, r5
    179e:	0a 94       	dec	r0
    17a0:	e2 f7       	brpl	.-8      	; 0x179a <main+0xa0a>
    17a2:	24 2d       	mov	r18, r4
    17a4:	20 95       	com	r18
    17a6:	23 23       	and	r18, r19
    17a8:	fa 01       	movw	r30, r20
    17aa:	20 83       	st	Z, r18
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    17ac:	ed 91       	ld	r30, X+
    17ae:	e1 11       	cpse	r30, r1
    17b0:	e0 cf       	rjmp	.-64     	; 0x1772 <main+0x9e2>
    17b2:	d6 2c       	mov	r13, r6
/* Multiplexing method                                                  */
/************************************************************************/
static inline void MultiPlex(uint8_t *pin)
{
	pinsMultiWrite(plex_pins, LOW);
	pinWrite(plex_pins[*pin], HIGH);
    17b4:	d5 01       	movw	r26, r10
    17b6:	ed 91       	ld	r30, X+
    17b8:	5d 01       	movw	r10, r26
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    17ba:	ec 3c       	cpi	r30, 0xCC	; 204
    17bc:	10 f4       	brcc	.+4      	; 0x17c2 <main+0xa32>
    17be:	0c 94 6f 1d 	jmp	0x3ade	; 0x3ade <main+0x2d4e>
	delay(delayms);
    17c2:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    17c6:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
/*  delay                                                               */
/************************************************************************/
int delayms = 1;
static inline void delay(int dl)
{
	while(dl >= 0)
    17ca:	37 fd       	sbrc	r19, 7
    17cc:	09 c0       	rjmp	.+18     	; 0x17e0 <main+0xa50>
    17ce:	ef e9       	ldi	r30, 0x9F	; 159
    17d0:	ff e0       	ldi	r31, 0x0F	; 15
    17d2:	31 97       	sbiw	r30, 0x01	; 1
    17d4:	f1 f7       	brne	.-4      	; 0x17d2 <main+0xa42>
    17d6:	00 c0       	rjmp	.+0      	; 0x17d8 <main+0xa48>
    17d8:	00 00       	nop
	{
		_delay_ms(1);
		dl--;
    17da:	21 50       	subi	r18, 0x01	; 1
    17dc:	31 09       	sbc	r19, r1
    17de:	b8 f7       	brcc	.-18     	; 0x17ce <main+0xa3e>
	//output byte
	for(byte=0; byte<7; byte++){
		pos = 24;
		pinWrite(end_pin,((*(p+pos)) & (1 << byte)));
		pos--;
		for(index=0; index<3; index++){
    17e0:	a4 e0       	ldi	r26, 0x04	; 4
    17e2:	b1 e0       	ldi	r27, 0x01	; 1
    17e4:	6d 2c       	mov	r6, r13
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    17e6:	ed 91       	ld	r30, X+
    17e8:	ee 23       	and	r30, r30
    17ea:	01 f1       	breq	.+64     	; 0x182c <main+0xa9c>
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    17ec:	ec 3c       	cpi	r30, 0xCC	; 204
    17ee:	d8 f7       	brcc	.-10     	; 0x17e6 <main+0xa56>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    17f0:	27 e0       	ldi	r18, 0x07	; 7
    17f2:	e2 9f       	mul	r30, r18
    17f4:	f0 01       	movw	r30, r0
    17f6:	11 24       	eor	r1, r1
    17f8:	bf 01       	movw	r22, r30
    17fa:	64 5b       	subi	r22, 0xB4	; 180
    17fc:	7e 4f       	sbci	r23, 0xFE	; 254
    17fe:	fb 01       	movw	r30, r22
    1800:	42 81       	ldd	r20, Z+2	; 0x02
    1802:	53 81       	ldd	r21, Z+3	; 0x03
    1804:	fa 01       	movw	r30, r20
    1806:	30 81       	ld	r19, Z
    1808:	44 24       	eor	r4, r4
    180a:	43 94       	inc	r4
    180c:	51 2c       	mov	r5, r1
    180e:	fb 01       	movw	r30, r22
    1810:	06 80       	ldd	r0, Z+6	; 0x06
    1812:	02 c0       	rjmp	.+4      	; 0x1818 <main+0xa88>
    1814:	44 0c       	add	r4, r4
    1816:	55 1c       	adc	r5, r5
    1818:	0a 94       	dec	r0
    181a:	e2 f7       	brpl	.-8      	; 0x1814 <main+0xa84>
    181c:	24 2d       	mov	r18, r4
    181e:	20 95       	com	r18
    1820:	23 23       	and	r18, r19
    1822:	fa 01       	movw	r30, r20
    1824:	20 83       	st	Z, r18
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    1826:	ed 91       	ld	r30, X+
    1828:	e1 11       	cpse	r30, r1
    182a:	e0 cf       	rjmp	.-64     	; 0x17ec <main+0xa5c>
    182c:	d6 2c       	mov	r13, r6
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    182e:	5d 98       	cbi	0x0b, 5	; 11
    1830:	24 e0       	ldi	r18, 0x04	; 4
    1832:	30 e0       	ldi	r19, 0x00	; 0
    1834:	5a 98       	cbi	0x0b, 2	; 11
    1836:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1838:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    183a:	5b 98       	cbi	0x0b, 3	; 11
    183c:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    183e:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1840:	5b 98       	cbi	0x0b, 3	; 11
    1842:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1844:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1846:	5b 98       	cbi	0x0b, 3	; 11
    1848:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    184a:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    184c:	5b 98       	cbi	0x0b, 3	; 11
    184e:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1850:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1852:	5b 98       	cbi	0x0b, 3	; 11
    1854:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1856:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1858:	5b 98       	cbi	0x0b, 3	; 11
    185a:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    185c:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    185e:	5b 98       	cbi	0x0b, 3	; 11
    1860:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1862:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1864:	5b 98       	cbi	0x0b, 3	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1866:	5a 9a       	sbi	0x0b, 2	; 11
    1868:	21 50       	subi	r18, 0x01	; 1
    186a:	31 09       	sbc	r19, r1
/************************************************************************/
static inline void Clear(){
	int x, y = 0;
	pinsMultiWrite(plex_pins, LOW);
	pinWrite(end_pin, LOW);
	for(x = 0; x < 4; x++) {
    186c:	19 f7       	brne	.-58     	; 0x1834 <main+0xaa4>
    186e:	01 96       	adiw	r24, 0x01	; 1
static inline void DisplayBuffer(const uint8_t *p)
{
	uint8_t byte, index, bit = 0;
	uint8_t pos = 24;
	//output byte
	for(byte=0; byte<7; byte++){
    1870:	87 30       	cpi	r24, 0x07	; 7
    1872:	91 05       	cpc	r25, r1
    1874:	09 f0       	breq	.+2      	; 0x1878 <main+0xae8>
    1876:	fa ce       	rjmp	.-524    	; 0x166c <main+0x8dc>
			pinWrite(latch_pin, HIGH);
		}
		MultiPlex(&byte);
		Clear();
	}
	delayms = 1;
    1878:	90 92 01 01 	sts	0x0101, r9	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    187c:	80 92 00 01 	sts	0x0100, r8	; 0x800100 <__DATA_REGION_ORIGIN__>
    1880:	da 94       	dec	r13
	}
}*/
static inline void HoldDisplayBuffer(const uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
    1882:	d1 10       	cpse	r13, r1
    1884:	ed ce       	rjmp	.-550    	; 0x1660 <main+0x8d0>
    1886:	d8 01       	movw	r26, r16
    1888:	e7 2d       	mov	r30, r7
    188a:	1d 92       	st	X+, r1
    188c:	ea 95       	dec	r30
    188e:	e9 f7       	brne	.-6      	; 0x188a <main+0xafa>
    1890:	20 e0       	ldi	r18, 0x00	; 0
    1892:	88 e4       	ldi	r24, 0x48	; 72
    1894:	a9 81       	ldd	r26, Y+1	; 0x01
    1896:	ba 81       	ldd	r27, Y+2	; 0x02
/* returns the index of the first byte of the requested character       */
/************************************************************************/
uint8_t CharStart(const char *p)
{
	/*if(*p == ' ') return 0;
	else*/ return (uint8_t) (( *p - ' '));
    1898:	80 52       	subi	r24, 0x20	; 32
	unsigned int index = 0;
	uint8_t len = 0;
	uint8_t x = 0;
	ClearStringBuffer();
	while(*ch){
		index = CharStart(ch++) * 5;
    189a:	f5 e0       	ldi	r31, 0x05	; 5
    189c:	8f 9f       	mul	r24, r31
    189e:	c0 01       	movw	r24, r0
    18a0:	11 24       	eor	r1, r1
		for(len = 0; len < 5; len++){
			stringbuffer[x] = (uint8_t)(pgm_read_byte((font_5x7 + index)));
    18a2:	fc 01       	movw	r30, r24
    18a4:	e8 59       	subi	r30, 0x98	; 152
    18a6:	ff 4f       	sbci	r31, 0xFF	; 255
    18a8:	34 91       	lpm	r19, Z
    18aa:	e2 2f       	mov	r30, r18
    18ac:	f0 e0       	ldi	r31, 0x00	; 0
    18ae:	ef 5c       	subi	r30, 0xCF	; 207
    18b0:	fd 4f       	sbci	r31, 0xFD	; 253
    18b2:	30 83       	st	Z, r19
    18b4:	fc 01       	movw	r30, r24
    18b6:	e7 59       	subi	r30, 0x97	; 151
    18b8:	ff 4f       	sbci	r31, 0xFF	; 255
    18ba:	34 91       	lpm	r19, Z
    18bc:	e1 e0       	ldi	r30, 0x01	; 1
    18be:	e2 0f       	add	r30, r18
    18c0:	f0 e0       	ldi	r31, 0x00	; 0
    18c2:	ef 5c       	subi	r30, 0xCF	; 207
    18c4:	fd 4f       	sbci	r31, 0xFD	; 253
    18c6:	30 83       	st	Z, r19
    18c8:	fc 01       	movw	r30, r24
    18ca:	e6 59       	subi	r30, 0x96	; 150
    18cc:	ff 4f       	sbci	r31, 0xFF	; 255
    18ce:	34 91       	lpm	r19, Z
    18d0:	e2 e0       	ldi	r30, 0x02	; 2
    18d2:	e2 0f       	add	r30, r18
    18d4:	f0 e0       	ldi	r31, 0x00	; 0
    18d6:	ef 5c       	subi	r30, 0xCF	; 207
    18d8:	fd 4f       	sbci	r31, 0xFD	; 253
    18da:	30 83       	st	Z, r19
    18dc:	fc 01       	movw	r30, r24
    18de:	e5 59       	subi	r30, 0x95	; 149
    18e0:	ff 4f       	sbci	r31, 0xFF	; 255
    18e2:	34 91       	lpm	r19, Z
    18e4:	e3 e0       	ldi	r30, 0x03	; 3
    18e6:	e2 0f       	add	r30, r18
    18e8:	f0 e0       	ldi	r31, 0x00	; 0
    18ea:	ef 5c       	subi	r30, 0xCF	; 207
    18ec:	fd 4f       	sbci	r31, 0xFD	; 253
    18ee:	30 83       	st	Z, r19
    18f0:	fc 01       	movw	r30, r24
    18f2:	e4 59       	subi	r30, 0x94	; 148
    18f4:	ff 4f       	sbci	r31, 0xFF	; 255
    18f6:	84 91       	lpm	r24, Z
    18f8:	e4 e0       	ldi	r30, 0x04	; 4
    18fa:	e2 0f       	add	r30, r18
    18fc:	f0 e0       	ldi	r31, 0x00	; 0
    18fe:	ef 5c       	subi	r30, 0xCF	; 207
    1900:	fd 4f       	sbci	r31, 0xFD	; 253
    1902:	80 83       	st	Z, r24
			index++; x++;
		}
		stringbuffer[x] = 0;
    1904:	e5 e0       	ldi	r30, 0x05	; 5
    1906:	e2 0f       	add	r30, r18
    1908:	f0 e0       	ldi	r31, 0x00	; 0
    190a:	ef 5c       	subi	r30, 0xCF	; 207
    190c:	fd 4f       	sbci	r31, 0xFD	; 253
    190e:	10 82       	st	Z, r1
		x++;
    1910:	2a 5f       	subi	r18, 0xFA	; 250
{
	unsigned int index = 0;
	uint8_t len = 0;
	uint8_t x = 0;
	ClearStringBuffer();
	while(*ch){
    1912:	8d 91       	ld	r24, X+
    1914:	ba 83       	std	Y+2, r27	; 0x02
    1916:	a9 83       	std	Y+1, r26	; 0x01
    1918:	81 11       	cpse	r24, r1
    191a:	be cf       	rjmp	.-132    	; 0x1898 <main+0xb08>
    191c:	c1 2c       	mov	r12, r1
    191e:	d1 2c       	mov	r13, r1
    1920:	2c 2d       	mov	r18, r12
    1922:	a1 e3       	ldi	r26, 0x31	; 49
    1924:	b2 e0       	ldi	r27, 0x02	; 2
	for(step = 0; step < 8; step++)
	{
		for(index = 0; index < 25; index++)
		{
			if(!dir)
			*(bf + index) = (*((p+index)) >> (step));
    1926:	cd 01       	movw	r24, r26
    1928:	81 53       	subi	r24, 0x31	; 49
    192a:	92 40       	sbci	r25, 0x02	; 2
    192c:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <bf>
    1930:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <bf+0x1>
    1934:	e8 0f       	add	r30, r24
    1936:	f9 1f       	adc	r31, r25
    1938:	8d 91       	ld	r24, X+
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	02 2e       	mov	r0, r18
    193e:	02 c0       	rjmp	.+4      	; 0x1944 <main+0xbb4>
    1940:	95 95       	asr	r25
    1942:	87 95       	ror	r24
    1944:	0a 94       	dec	r0
    1946:	e2 f7       	brpl	.-8      	; 0x1940 <main+0xbb0>
    1948:	80 83       	st	Z, r24
{
	//uint8_t *bf = buffer;
	uint8_t index, step = 0;
	for(step = 0; step < 8; step++)
	{
		for(index = 0; index < 25; index++)
    194a:	ea e4       	ldi	r30, 0x4A	; 74
    194c:	f2 e0       	ldi	r31, 0x02	; 2
    194e:	ea 17       	cp	r30, r26
    1950:	fb 07       	cpc	r31, r27
    1952:	49 f7       	brne	.-46     	; 0x1926 <main+0xb96>
			if(!dir)
			*(bf + index) = (*((p+index)) >> (step));
			else
			*(bf + index) = (*((p+index)) << (step));
		}
		HoldDisplayBuffer(bf, time);
    1954:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <bf>
    1958:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <bf+0x1>
    195c:	5a e0       	ldi	r21, 0x0A	; 10
    195e:	a5 2e       	mov	r10, r21
    1960:	1a 83       	std	Y+2, r17	; 0x02
    1962:	09 83       	std	Y+1, r16	; 0x01
    1964:	1a 2d       	mov	r17, r10
	}
}*/
static inline void HoldDisplayBuffer(const uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
    1966:	44 e0       	ldi	r20, 0x04	; 4
    1968:	a4 2e       	mov	r10, r20
    196a:	41 e0       	ldi	r20, 0x01	; 1
    196c:	b4 2e       	mov	r11, r20
    196e:	20 e0       	ldi	r18, 0x00	; 0
    1970:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t byte, index, bit = 0;
	uint8_t pos = 24;
	//output byte
	for(byte=0; byte<7; byte++){
		pos = 24;
		pinWrite(end_pin,((*(p+pos)) & (1 << byte)));
    1972:	81 e0       	ldi	r24, 0x01	; 1
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	02 2e       	mov	r0, r18
    1978:	01 c0       	rjmp	.+2      	; 0x197c <main+0xbec>
    197a:	88 0f       	add	r24, r24
    197c:	0a 94       	dec	r0
    197e:	ea f7       	brpl	.-6      	; 0x197a <main+0xbea>
    1980:	98 2f       	mov	r25, r24
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    1982:	58 96       	adiw	r26, 0x18	; 24
    1984:	4c 91       	ld	r20, X
    1986:	58 97       	sbiw	r26, 0x18	; 24
    1988:	84 23       	and	r24, r20
    198a:	11 f0       	breq	.+4      	; 0x1990 <main+0xc00>
    198c:	0c 94 9c 1d 	jmp	0x3b38	; 0x3b38 <main+0x2da8>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1990:	5d 98       	cbi	0x0b, 5	; 11
	}
}*/
static inline void HoldDisplayBuffer(const uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
    1992:	87 e1       	ldi	r24, 0x17	; 23
    1994:	5a 98       	cbi	0x0b, 2	; 11
		pinWrite(end_pin,((*(p+pos)) & (1 << byte)));
		pos--;
		for(index=0; index<3; index++){
			pinWrite(latch_pin, LOW);
			for(bit = 0; bit < 8 ; bit++){
				pinWrite(data_pin,((*(p+pos)) & (1 << byte)));
    1996:	fd 01       	movw	r30, r26
    1998:	e8 0f       	add	r30, r24
    199a:	f1 1d       	adc	r31, r1
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    199c:	40 81       	ld	r20, Z
    199e:	49 23       	and	r20, r25
    19a0:	11 f0       	breq	.+4      	; 0x19a6 <main+0xc16>
    19a2:	0c 94 99 1d 	jmp	0x3b32	; 0x3b32 <main+0x2da2>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    19a6:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    19a8:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    19aa:	5b 98       	cbi	0x0b, 3	; 11
    19ac:	4f ef       	ldi	r20, 0xFF	; 255
    19ae:	48 0f       	add	r20, r24
    19b0:	fd 01       	movw	r30, r26
    19b2:	e4 0f       	add	r30, r20
    19b4:	f1 1d       	adc	r31, r1
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    19b6:	40 81       	ld	r20, Z
    19b8:	49 23       	and	r20, r25
    19ba:	11 f0       	breq	.+4      	; 0x19c0 <main+0xc30>
    19bc:	0c 94 96 1d 	jmp	0x3b2c	; 0x3b2c <main+0x2d9c>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    19c0:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    19c2:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    19c4:	5b 98       	cbi	0x0b, 3	; 11
    19c6:	4e ef       	ldi	r20, 0xFE	; 254
    19c8:	48 0f       	add	r20, r24
    19ca:	fd 01       	movw	r30, r26
    19cc:	e4 0f       	add	r30, r20
    19ce:	f1 1d       	adc	r31, r1
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    19d0:	40 81       	ld	r20, Z
    19d2:	49 23       	and	r20, r25
    19d4:	11 f0       	breq	.+4      	; 0x19da <main+0xc4a>
    19d6:	0c 94 93 1d 	jmp	0x3b26	; 0x3b26 <main+0x2d96>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    19da:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    19dc:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    19de:	5b 98       	cbi	0x0b, 3	; 11
    19e0:	4d ef       	ldi	r20, 0xFD	; 253
    19e2:	48 0f       	add	r20, r24
    19e4:	fd 01       	movw	r30, r26
    19e6:	e4 0f       	add	r30, r20
    19e8:	f1 1d       	adc	r31, r1
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    19ea:	40 81       	ld	r20, Z
    19ec:	49 23       	and	r20, r25
    19ee:	11 f0       	breq	.+4      	; 0x19f4 <main+0xc64>
    19f0:	0c 94 90 1d 	jmp	0x3b20	; 0x3b20 <main+0x2d90>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    19f4:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    19f6:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    19f8:	5b 98       	cbi	0x0b, 3	; 11
    19fa:	4c ef       	ldi	r20, 0xFC	; 252
    19fc:	48 0f       	add	r20, r24
    19fe:	fd 01       	movw	r30, r26
    1a00:	e4 0f       	add	r30, r20
    1a02:	f1 1d       	adc	r31, r1
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    1a04:	40 81       	ld	r20, Z
    1a06:	49 23       	and	r20, r25
    1a08:	11 f0       	breq	.+4      	; 0x1a0e <main+0xc7e>
    1a0a:	0c 94 8d 1d 	jmp	0x3b1a	; 0x3b1a <main+0x2d8a>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1a0e:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1a10:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1a12:	5b 98       	cbi	0x0b, 3	; 11
    1a14:	4b ef       	ldi	r20, 0xFB	; 251
    1a16:	48 0f       	add	r20, r24
    1a18:	fd 01       	movw	r30, r26
    1a1a:	e4 0f       	add	r30, r20
    1a1c:	f1 1d       	adc	r31, r1
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    1a1e:	40 81       	ld	r20, Z
    1a20:	49 23       	and	r20, r25
    1a22:	11 f0       	breq	.+4      	; 0x1a28 <main+0xc98>
    1a24:	0c 94 8a 1d 	jmp	0x3b14	; 0x3b14 <main+0x2d84>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1a28:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1a2a:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1a2c:	5b 98       	cbi	0x0b, 3	; 11
    1a2e:	4a ef       	ldi	r20, 0xFA	; 250
    1a30:	48 0f       	add	r20, r24
    1a32:	fd 01       	movw	r30, r26
    1a34:	e4 0f       	add	r30, r20
    1a36:	f1 1d       	adc	r31, r1
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    1a38:	40 81       	ld	r20, Z
    1a3a:	49 23       	and	r20, r25
    1a3c:	11 f0       	breq	.+4      	; 0x1a42 <main+0xcb2>
    1a3e:	0c 94 87 1d 	jmp	0x3b0e	; 0x3b0e <main+0x2d7e>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1a42:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1a44:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1a46:	5b 98       	cbi	0x0b, 3	; 11
    1a48:	49 ef       	ldi	r20, 0xF9	; 249
    1a4a:	48 0f       	add	r20, r24
    1a4c:	fd 01       	movw	r30, r26
    1a4e:	e4 0f       	add	r30, r20
    1a50:	f1 1d       	adc	r31, r1
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    1a52:	40 81       	ld	r20, Z
    1a54:	49 23       	and	r20, r25
    1a56:	11 f0       	breq	.+4      	; 0x1a5c <main+0xccc>
    1a58:	0c 94 84 1d 	jmp	0x3b08	; 0x3b08 <main+0x2d78>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1a5c:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1a5e:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1a60:	5b 98       	cbi	0x0b, 3	; 11
				//toggle the clock pin
				pinWrite(clock_pin, HIGH);
				pinWrite(clock_pin, LOW);
				pos--;
    1a62:	88 50       	subi	r24, 0x08	; 8
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1a64:	5a 9a       	sbi	0x0b, 2	; 11
	//output byte
	for(byte=0; byte<7; byte++){
		pos = 24;
		pinWrite(end_pin,((*(p+pos)) & (1 << byte)));
		pos--;
		for(index=0; index<3; index++){
    1a66:	8f 3f       	cpi	r24, 0xFF	; 255
    1a68:	09 f0       	breq	.+2      	; 0x1a6c <main+0xcdc>
    1a6a:	94 cf       	rjmp	.-216    	; 0x1994 <main+0xc04>
    1a6c:	84 e0       	ldi	r24, 0x04	; 4
    1a6e:	91 e0       	ldi	r25, 0x01	; 1
    1a70:	2d 01       	movw	r4, r26
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    1a72:	dc 01       	movw	r26, r24
    1a74:	ed 91       	ld	r30, X+
    1a76:	cd 01       	movw	r24, r26
    1a78:	ee 23       	and	r30, r30
    1a7a:	f1 f0       	breq	.+60     	; 0x1ab8 <main+0xd28>
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    1a7c:	ec 3c       	cpi	r30, 0xCC	; 204
    1a7e:	c8 f7       	brcc	.-14     	; 0x1a72 <main+0xce2>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1a80:	07 e0       	ldi	r16, 0x07	; 7
    1a82:	e0 9f       	mul	r30, r16
    1a84:	f0 01       	movw	r30, r0
    1a86:	11 24       	eor	r1, r1
    1a88:	e4 5b       	subi	r30, 0xB4	; 180
    1a8a:	fe 4f       	sbci	r31, 0xFE	; 254
    1a8c:	62 81       	ldd	r22, Z+2	; 0x02
    1a8e:	73 81       	ldd	r23, Z+3	; 0x03
    1a90:	db 01       	movw	r26, r22
    1a92:	5c 91       	ld	r21, X
    1a94:	a1 e0       	ldi	r26, 0x01	; 1
    1a96:	b0 e0       	ldi	r27, 0x00	; 0
    1a98:	06 80       	ldd	r0, Z+6	; 0x06
    1a9a:	02 c0       	rjmp	.+4      	; 0x1aa0 <main+0xd10>
    1a9c:	aa 0f       	add	r26, r26
    1a9e:	bb 1f       	adc	r27, r27
    1aa0:	0a 94       	dec	r0
    1aa2:	e2 f7       	brpl	.-8      	; 0x1a9c <main+0xd0c>
    1aa4:	4a 2f       	mov	r20, r26
    1aa6:	40 95       	com	r20
    1aa8:	45 23       	and	r20, r21
    1aaa:	fb 01       	movw	r30, r22
    1aac:	40 83       	st	Z, r20
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    1aae:	dc 01       	movw	r26, r24
    1ab0:	ed 91       	ld	r30, X+
    1ab2:	cd 01       	movw	r24, r26
    1ab4:	e1 11       	cpse	r30, r1
    1ab6:	e2 cf       	rjmp	.-60     	; 0x1a7c <main+0xcec>
    1ab8:	d2 01       	movw	r26, r4
/* Multiplexing method                                                  */
/************************************************************************/
static inline void MultiPlex(uint8_t *pin)
{
	pinsMultiWrite(plex_pins, LOW);
	pinWrite(plex_pins[*pin], HIGH);
    1aba:	f5 01       	movw	r30, r10
    1abc:	91 91       	ld	r25, Z+
    1abe:	5f 01       	movw	r10, r30
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    1ac0:	9c 3c       	cpi	r25, 0xCC	; 204
    1ac2:	10 f4       	brcc	.+4      	; 0x1ac8 <main+0xd38>
    1ac4:	0c 94 9f 1d 	jmp	0x3b3e	; 0x3b3e <main+0x2dae>
	delay(delayms);
    1ac8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1acc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
/*  delay                                                               */
/************************************************************************/
int delayms = 1;
static inline void delay(int dl)
{
	while(dl >= 0)
    1ad0:	97 fd       	sbrc	r25, 7
    1ad2:	08 c0       	rjmp	.+16     	; 0x1ae4 <main+0xd54>
    1ad4:	ef e9       	ldi	r30, 0x9F	; 159
    1ad6:	ff e0       	ldi	r31, 0x0F	; 15
    1ad8:	31 97       	sbiw	r30, 0x01	; 1
    1ada:	f1 f7       	brne	.-4      	; 0x1ad8 <main+0xd48>
    1adc:	00 c0       	rjmp	.+0      	; 0x1ade <main+0xd4e>
    1ade:	00 00       	nop
	{
		_delay_ms(1);
		dl--;
    1ae0:	01 97       	sbiw	r24, 0x01	; 1
    1ae2:	c0 f7       	brcc	.-16     	; 0x1ad4 <main+0xd44>
	//output byte
	for(byte=0; byte<7; byte++){
		pos = 24;
		pinWrite(end_pin,((*(p+pos)) & (1 << byte)));
		pos--;
		for(index=0; index<3; index++){
    1ae4:	84 e0       	ldi	r24, 0x04	; 4
    1ae6:	91 e0       	ldi	r25, 0x01	; 1
    1ae8:	2d 01       	movw	r4, r26
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    1aea:	dc 01       	movw	r26, r24
    1aec:	ed 91       	ld	r30, X+
    1aee:	cd 01       	movw	r24, r26
    1af0:	ee 23       	and	r30, r30
    1af2:	f1 f0       	breq	.+60     	; 0x1b30 <main+0xda0>
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    1af4:	ec 3c       	cpi	r30, 0xCC	; 204
    1af6:	c8 f7       	brcc	.-14     	; 0x1aea <main+0xd5a>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1af8:	07 e0       	ldi	r16, 0x07	; 7
    1afa:	e0 9f       	mul	r30, r16
    1afc:	f0 01       	movw	r30, r0
    1afe:	11 24       	eor	r1, r1
    1b00:	e4 5b       	subi	r30, 0xB4	; 180
    1b02:	fe 4f       	sbci	r31, 0xFE	; 254
    1b04:	62 81       	ldd	r22, Z+2	; 0x02
    1b06:	73 81       	ldd	r23, Z+3	; 0x03
    1b08:	db 01       	movw	r26, r22
    1b0a:	5c 91       	ld	r21, X
    1b0c:	a1 e0       	ldi	r26, 0x01	; 1
    1b0e:	b0 e0       	ldi	r27, 0x00	; 0
    1b10:	06 80       	ldd	r0, Z+6	; 0x06
    1b12:	02 c0       	rjmp	.+4      	; 0x1b18 <main+0xd88>
    1b14:	aa 0f       	add	r26, r26
    1b16:	bb 1f       	adc	r27, r27
    1b18:	0a 94       	dec	r0
    1b1a:	e2 f7       	brpl	.-8      	; 0x1b14 <main+0xd84>
    1b1c:	4a 2f       	mov	r20, r26
    1b1e:	40 95       	com	r20
    1b20:	45 23       	and	r20, r21
    1b22:	fb 01       	movw	r30, r22
    1b24:	40 83       	st	Z, r20
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    1b26:	dc 01       	movw	r26, r24
    1b28:	ed 91       	ld	r30, X+
    1b2a:	cd 01       	movw	r24, r26
    1b2c:	e1 11       	cpse	r30, r1
    1b2e:	e2 cf       	rjmp	.-60     	; 0x1af4 <main+0xd64>
    1b30:	d2 01       	movw	r26, r4
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1b32:	5d 98       	cbi	0x0b, 5	; 11
    1b34:	84 e0       	ldi	r24, 0x04	; 4
    1b36:	90 e0       	ldi	r25, 0x00	; 0
    1b38:	5a 98       	cbi	0x0b, 2	; 11
    1b3a:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1b3c:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1b3e:	5b 98       	cbi	0x0b, 3	; 11
    1b40:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1b42:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1b44:	5b 98       	cbi	0x0b, 3	; 11
    1b46:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1b48:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1b4a:	5b 98       	cbi	0x0b, 3	; 11
    1b4c:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1b4e:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1b50:	5b 98       	cbi	0x0b, 3	; 11
    1b52:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1b54:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1b56:	5b 98       	cbi	0x0b, 3	; 11
    1b58:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1b5a:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1b5c:	5b 98       	cbi	0x0b, 3	; 11
    1b5e:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1b60:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1b62:	5b 98       	cbi	0x0b, 3	; 11
    1b64:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1b66:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1b68:	5b 98       	cbi	0x0b, 3	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1b6a:	5a 9a       	sbi	0x0b, 2	; 11
    1b6c:	01 97       	sbiw	r24, 0x01	; 1
/************************************************************************/
static inline void Clear(){
	int x, y = 0;
	pinsMultiWrite(plex_pins, LOW);
	pinWrite(end_pin, LOW);
	for(x = 0; x < 4; x++) {
    1b6e:	21 f7       	brne	.-56     	; 0x1b38 <main+0xda8>
    1b70:	2f 5f       	subi	r18, 0xFF	; 255
    1b72:	3f 4f       	sbci	r19, 0xFF	; 255
static inline void DisplayBuffer(const uint8_t *p)
{
	uint8_t byte, index, bit = 0;
	uint8_t pos = 24;
	//output byte
	for(byte=0; byte<7; byte++){
    1b74:	27 30       	cpi	r18, 0x07	; 7
    1b76:	31 05       	cpc	r19, r1
    1b78:	09 f0       	breq	.+2      	; 0x1b7c <main+0xdec>
    1b7a:	fb ce       	rjmp	.-522    	; 0x1972 <main+0xbe2>
			pinWrite(latch_pin, HIGH);
		}
		MultiPlex(&byte);
		Clear();
	}
	delayms = 1;
    1b7c:	f0 92 01 01 	sts	0x0101, r15	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1b80:	e0 92 00 01 	sts	0x0100, r14	; 0x800100 <__DATA_REGION_ORIGIN__>
    1b84:	11 50       	subi	r17, 0x01	; 1
	}
}*/
static inline void HoldDisplayBuffer(const uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
    1b86:	09 f0       	breq	.+2      	; 0x1b8a <main+0xdfa>
    1b88:	ee ce       	rjmp	.-548    	; 0x1966 <main+0xbd6>
    1b8a:	09 81       	ldd	r16, Y+1	; 0x01
    1b8c:	1a 81       	ldd	r17, Y+2	; 0x02
    1b8e:	bf ef       	ldi	r27, 0xFF	; 255
    1b90:	cb 1a       	sub	r12, r27
    1b92:	db 0a       	sbc	r13, r27
/************************************************************************/
void Fall(const uint8_t *p, uint8_t time, uint8_t dir )
{
	//uint8_t *bf = buffer;
	uint8_t index, step = 0;
	for(step = 0; step < 8; step++)
    1b94:	e8 e0       	ldi	r30, 0x08	; 8
    1b96:	ce 16       	cp	r12, r30
    1b98:	d1 04       	cpc	r13, r1
    1b9a:	09 f0       	breq	.+2      	; 0x1b9e <main+0xe0e>
    1b9c:	c1 ce       	rjmp	.-638    	; 0x1920 <main+0xb90>
			else
			*(bf + index) = (*((p+index)) << (step));
		}
		HoldDisplayBuffer(bf, time);
	}
	HoldDisplayBuffer(bf,50);
    1b9e:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <bf>
    1ba2:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <bf+0x1>
    1ba6:	32 e3       	ldi	r19, 0x32	; 50
    1ba8:	b3 2e       	mov	r11, r19
    1baa:	84 e0       	ldi	r24, 0x04	; 4
    1bac:	91 e0       	ldi	r25, 0x01	; 1
    1bae:	c1 2c       	mov	r12, r1
    1bb0:	d1 2c       	mov	r13, r1
	uint8_t byte, index, bit = 0;
	uint8_t pos = 24;
	//output byte
	for(byte=0; byte<7; byte++){
		pos = 24;
		pinWrite(end_pin,((*(p+pos)) & (1 << byte)));
    1bb2:	21 e0       	ldi	r18, 0x01	; 1
    1bb4:	30 e0       	ldi	r19, 0x00	; 0
    1bb6:	0c 2c       	mov	r0, r12
    1bb8:	01 c0       	rjmp	.+2      	; 0x1bbc <main+0xe2c>
    1bba:	22 0f       	add	r18, r18
    1bbc:	0a 94       	dec	r0
    1bbe:	ea f7       	brpl	.-6      	; 0x1bba <main+0xe2a>
    1bc0:	32 2f       	mov	r19, r18
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    1bc2:	58 96       	adiw	r26, 0x18	; 24
    1bc4:	4c 91       	ld	r20, X
    1bc6:	58 97       	sbiw	r26, 0x18	; 24
    1bc8:	24 23       	and	r18, r20
    1bca:	11 f0       	breq	.+4      	; 0x1bd0 <main+0xe40>
    1bcc:	0c 94 d2 1d 	jmp	0x3ba4	; 0x3ba4 <main+0x2e14>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1bd0:	5d 98       	cbi	0x0b, 5	; 11
    1bd2:	27 e1       	ldi	r18, 0x17	; 23
    1bd4:	5a 98       	cbi	0x0b, 2	; 11
		pos--;
		for(index=0; index<3; index++){
			pinWrite(latch_pin, LOW);
			for(bit = 0; bit < 8 ; bit++){
				pinWrite(data_pin,((*(p+pos)) & (1 << byte)));
    1bd6:	fd 01       	movw	r30, r26
    1bd8:	e2 0f       	add	r30, r18
    1bda:	f1 1d       	adc	r31, r1
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    1bdc:	40 81       	ld	r20, Z
    1bde:	43 23       	and	r20, r19
    1be0:	11 f0       	breq	.+4      	; 0x1be6 <main+0xe56>
    1be2:	0c 94 cf 1d 	jmp	0x3b9e	; 0x3b9e <main+0x2e0e>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1be6:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1be8:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1bea:	5b 98       	cbi	0x0b, 3	; 11
    1bec:	4f ef       	ldi	r20, 0xFF	; 255
    1bee:	42 0f       	add	r20, r18
    1bf0:	fd 01       	movw	r30, r26
    1bf2:	e4 0f       	add	r30, r20
    1bf4:	f1 1d       	adc	r31, r1
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    1bf6:	40 81       	ld	r20, Z
    1bf8:	43 23       	and	r20, r19
    1bfa:	11 f0       	breq	.+4      	; 0x1c00 <main+0xe70>
    1bfc:	0c 94 cc 1d 	jmp	0x3b98	; 0x3b98 <main+0x2e08>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1c00:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1c02:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1c04:	5b 98       	cbi	0x0b, 3	; 11
    1c06:	4e ef       	ldi	r20, 0xFE	; 254
    1c08:	42 0f       	add	r20, r18
    1c0a:	fd 01       	movw	r30, r26
    1c0c:	e4 0f       	add	r30, r20
    1c0e:	f1 1d       	adc	r31, r1
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    1c10:	40 81       	ld	r20, Z
    1c12:	43 23       	and	r20, r19
    1c14:	11 f0       	breq	.+4      	; 0x1c1a <main+0xe8a>
    1c16:	0c 94 c9 1d 	jmp	0x3b92	; 0x3b92 <main+0x2e02>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1c1a:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1c1c:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1c1e:	5b 98       	cbi	0x0b, 3	; 11
    1c20:	4d ef       	ldi	r20, 0xFD	; 253
    1c22:	42 0f       	add	r20, r18
    1c24:	fd 01       	movw	r30, r26
    1c26:	e4 0f       	add	r30, r20
    1c28:	f1 1d       	adc	r31, r1
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    1c2a:	40 81       	ld	r20, Z
    1c2c:	43 23       	and	r20, r19
    1c2e:	11 f0       	breq	.+4      	; 0x1c34 <main+0xea4>
    1c30:	0c 94 c6 1d 	jmp	0x3b8c	; 0x3b8c <main+0x2dfc>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1c34:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1c36:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1c38:	5b 98       	cbi	0x0b, 3	; 11
    1c3a:	4c ef       	ldi	r20, 0xFC	; 252
    1c3c:	42 0f       	add	r20, r18
    1c3e:	fd 01       	movw	r30, r26
    1c40:	e4 0f       	add	r30, r20
    1c42:	f1 1d       	adc	r31, r1
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    1c44:	40 81       	ld	r20, Z
    1c46:	43 23       	and	r20, r19
    1c48:	11 f0       	breq	.+4      	; 0x1c4e <main+0xebe>
    1c4a:	0c 94 c3 1d 	jmp	0x3b86	; 0x3b86 <main+0x2df6>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1c4e:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1c50:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1c52:	5b 98       	cbi	0x0b, 3	; 11
    1c54:	4b ef       	ldi	r20, 0xFB	; 251
    1c56:	42 0f       	add	r20, r18
    1c58:	fd 01       	movw	r30, r26
    1c5a:	e4 0f       	add	r30, r20
    1c5c:	f1 1d       	adc	r31, r1
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    1c5e:	40 81       	ld	r20, Z
    1c60:	43 23       	and	r20, r19
    1c62:	11 f0       	breq	.+4      	; 0x1c68 <main+0xed8>
    1c64:	0c 94 c0 1d 	jmp	0x3b80	; 0x3b80 <main+0x2df0>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1c68:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1c6a:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1c6c:	5b 98       	cbi	0x0b, 3	; 11
    1c6e:	4a ef       	ldi	r20, 0xFA	; 250
    1c70:	42 0f       	add	r20, r18
    1c72:	fd 01       	movw	r30, r26
    1c74:	e4 0f       	add	r30, r20
    1c76:	f1 1d       	adc	r31, r1
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    1c78:	40 81       	ld	r20, Z
    1c7a:	43 23       	and	r20, r19
    1c7c:	11 f0       	breq	.+4      	; 0x1c82 <main+0xef2>
    1c7e:	0c 94 bd 1d 	jmp	0x3b7a	; 0x3b7a <main+0x2dea>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1c82:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1c84:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1c86:	5b 98       	cbi	0x0b, 3	; 11
    1c88:	49 ef       	ldi	r20, 0xF9	; 249
    1c8a:	42 0f       	add	r20, r18
    1c8c:	fd 01       	movw	r30, r26
    1c8e:	e4 0f       	add	r30, r20
    1c90:	f1 1d       	adc	r31, r1
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    1c92:	40 81       	ld	r20, Z
    1c94:	43 23       	and	r20, r19
    1c96:	11 f0       	breq	.+4      	; 0x1c9c <main+0xf0c>
    1c98:	0c 94 ba 1d 	jmp	0x3b74	; 0x3b74 <main+0x2de4>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1c9c:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1c9e:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1ca0:	5b 98       	cbi	0x0b, 3	; 11
				//toggle the clock pin
				pinWrite(clock_pin, HIGH);
				pinWrite(clock_pin, LOW);
				pos--;
    1ca2:	28 50       	subi	r18, 0x08	; 8
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1ca4:	5a 9a       	sbi	0x0b, 2	; 11
	//output byte
	for(byte=0; byte<7; byte++){
		pos = 24;
		pinWrite(end_pin,((*(p+pos)) & (1 << byte)));
		pos--;
		for(index=0; index<3; index++){
    1ca6:	2f 3f       	cpi	r18, 0xFF	; 255
    1ca8:	09 f0       	breq	.+2      	; 0x1cac <main+0xf1c>
    1caa:	94 cf       	rjmp	.-216    	; 0x1bd4 <main+0xe44>
    1cac:	24 e0       	ldi	r18, 0x04	; 4
    1cae:	31 e0       	ldi	r19, 0x01	; 1
    1cb0:	2d 01       	movw	r4, r26
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    1cb2:	d9 01       	movw	r26, r18
    1cb4:	ed 91       	ld	r30, X+
    1cb6:	9d 01       	movw	r18, r26
    1cb8:	ee 23       	and	r30, r30
    1cba:	f1 f0       	breq	.+60     	; 0x1cf8 <main+0xf68>
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    1cbc:	ec 3c       	cpi	r30, 0xCC	; 204
    1cbe:	c8 f7       	brcc	.-14     	; 0x1cb2 <main+0xf22>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1cc0:	47 e0       	ldi	r20, 0x07	; 7
    1cc2:	e4 9f       	mul	r30, r20
    1cc4:	f0 01       	movw	r30, r0
    1cc6:	11 24       	eor	r1, r1
    1cc8:	e4 5b       	subi	r30, 0xB4	; 180
    1cca:	fe 4f       	sbci	r31, 0xFE	; 254
    1ccc:	62 81       	ldd	r22, Z+2	; 0x02
    1cce:	73 81       	ldd	r23, Z+3	; 0x03
    1cd0:	db 01       	movw	r26, r22
    1cd2:	5c 91       	ld	r21, X
    1cd4:	a1 e0       	ldi	r26, 0x01	; 1
    1cd6:	b0 e0       	ldi	r27, 0x00	; 0
    1cd8:	06 80       	ldd	r0, Z+6	; 0x06
    1cda:	02 c0       	rjmp	.+4      	; 0x1ce0 <main+0xf50>
    1cdc:	aa 0f       	add	r26, r26
    1cde:	bb 1f       	adc	r27, r27
    1ce0:	0a 94       	dec	r0
    1ce2:	e2 f7       	brpl	.-8      	; 0x1cdc <main+0xf4c>
    1ce4:	4a 2f       	mov	r20, r26
    1ce6:	40 95       	com	r20
    1ce8:	45 23       	and	r20, r21
    1cea:	fb 01       	movw	r30, r22
    1cec:	40 83       	st	Z, r20
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    1cee:	d9 01       	movw	r26, r18
    1cf0:	ed 91       	ld	r30, X+
    1cf2:	9d 01       	movw	r18, r26
    1cf4:	e1 11       	cpse	r30, r1
    1cf6:	e2 cf       	rjmp	.-60     	; 0x1cbc <main+0xf2c>
    1cf8:	d2 01       	movw	r26, r4
/* Multiplexing method                                                  */
/************************************************************************/
static inline void MultiPlex(uint8_t *pin)
{
	pinsMultiWrite(plex_pins, LOW);
	pinWrite(plex_pins[*pin], HIGH);
    1cfa:	fc 01       	movw	r30, r24
    1cfc:	31 91       	ld	r19, Z+
    1cfe:	cf 01       	movw	r24, r30
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    1d00:	3c 3c       	cpi	r19, 0xCC	; 204
    1d02:	10 f4       	brcc	.+4      	; 0x1d08 <main+0xf78>
    1d04:	0c 94 d5 1d 	jmp	0x3baa	; 0x3baa <main+0x2e1a>
	delay(delayms);
    1d08:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1d0c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
/*  delay                                                               */
/************************************************************************/
int delayms = 1;
static inline void delay(int dl)
{
	while(dl >= 0)
    1d10:	37 fd       	sbrc	r19, 7
    1d12:	09 c0       	rjmp	.+18     	; 0x1d26 <main+0xf96>
    1d14:	ef e9       	ldi	r30, 0x9F	; 159
    1d16:	ff e0       	ldi	r31, 0x0F	; 15
    1d18:	31 97       	sbiw	r30, 0x01	; 1
    1d1a:	f1 f7       	brne	.-4      	; 0x1d18 <main+0xf88>
    1d1c:	00 c0       	rjmp	.+0      	; 0x1d1e <main+0xf8e>
    1d1e:	00 00       	nop
	{
		_delay_ms(1);
		dl--;
    1d20:	21 50       	subi	r18, 0x01	; 1
    1d22:	31 09       	sbc	r19, r1
    1d24:	b8 f7       	brcc	.-18     	; 0x1d14 <main+0xf84>
	//output byte
	for(byte=0; byte<7; byte++){
		pos = 24;
		pinWrite(end_pin,((*(p+pos)) & (1 << byte)));
		pos--;
		for(index=0; index<3; index++){
    1d26:	24 e0       	ldi	r18, 0x04	; 4
    1d28:	31 e0       	ldi	r19, 0x01	; 1
    1d2a:	2d 01       	movw	r4, r26
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    1d2c:	d9 01       	movw	r26, r18
    1d2e:	ed 91       	ld	r30, X+
    1d30:	9d 01       	movw	r18, r26
    1d32:	ee 23       	and	r30, r30
    1d34:	f1 f0       	breq	.+60     	; 0x1d72 <main+0xfe2>
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    1d36:	ec 3c       	cpi	r30, 0xCC	; 204
    1d38:	c8 f7       	brcc	.-14     	; 0x1d2c <main+0xf9c>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1d3a:	47 e0       	ldi	r20, 0x07	; 7
    1d3c:	e4 9f       	mul	r30, r20
    1d3e:	f0 01       	movw	r30, r0
    1d40:	11 24       	eor	r1, r1
    1d42:	e4 5b       	subi	r30, 0xB4	; 180
    1d44:	fe 4f       	sbci	r31, 0xFE	; 254
    1d46:	62 81       	ldd	r22, Z+2	; 0x02
    1d48:	73 81       	ldd	r23, Z+3	; 0x03
    1d4a:	db 01       	movw	r26, r22
    1d4c:	5c 91       	ld	r21, X
    1d4e:	a1 e0       	ldi	r26, 0x01	; 1
    1d50:	b0 e0       	ldi	r27, 0x00	; 0
    1d52:	06 80       	ldd	r0, Z+6	; 0x06
    1d54:	02 c0       	rjmp	.+4      	; 0x1d5a <main+0xfca>
    1d56:	aa 0f       	add	r26, r26
    1d58:	bb 1f       	adc	r27, r27
    1d5a:	0a 94       	dec	r0
    1d5c:	e2 f7       	brpl	.-8      	; 0x1d56 <main+0xfc6>
    1d5e:	4a 2f       	mov	r20, r26
    1d60:	40 95       	com	r20
    1d62:	45 23       	and	r20, r21
    1d64:	fb 01       	movw	r30, r22
    1d66:	40 83       	st	Z, r20
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    1d68:	d9 01       	movw	r26, r18
    1d6a:	ed 91       	ld	r30, X+
    1d6c:	9d 01       	movw	r18, r26
    1d6e:	e1 11       	cpse	r30, r1
    1d70:	e2 cf       	rjmp	.-60     	; 0x1d36 <main+0xfa6>
    1d72:	d2 01       	movw	r26, r4
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1d74:	5d 98       	cbi	0x0b, 5	; 11
    1d76:	24 e0       	ldi	r18, 0x04	; 4
    1d78:	30 e0       	ldi	r19, 0x00	; 0
    1d7a:	5a 98       	cbi	0x0b, 2	; 11
    1d7c:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1d7e:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1d80:	5b 98       	cbi	0x0b, 3	; 11
    1d82:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1d84:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1d86:	5b 98       	cbi	0x0b, 3	; 11
    1d88:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1d8a:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1d8c:	5b 98       	cbi	0x0b, 3	; 11
    1d8e:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1d90:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1d92:	5b 98       	cbi	0x0b, 3	; 11
    1d94:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1d96:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1d98:	5b 98       	cbi	0x0b, 3	; 11
    1d9a:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1d9c:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1d9e:	5b 98       	cbi	0x0b, 3	; 11
    1da0:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1da2:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1da4:	5b 98       	cbi	0x0b, 3	; 11
    1da6:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1da8:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1daa:	5b 98       	cbi	0x0b, 3	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1dac:	5a 9a       	sbi	0x0b, 2	; 11
    1dae:	21 50       	subi	r18, 0x01	; 1
    1db0:	31 09       	sbc	r19, r1
/************************************************************************/
static inline void Clear(){
	int x, y = 0;
	pinsMultiWrite(plex_pins, LOW);
	pinWrite(end_pin, LOW);
	for(x = 0; x < 4; x++) {
    1db2:	19 f7       	brne	.-58     	; 0x1d7a <main+0xfea>
    1db4:	ef ef       	ldi	r30, 0xFF	; 255
    1db6:	ce 1a       	sub	r12, r30
    1db8:	de 0a       	sbc	r13, r30
static inline void DisplayBuffer(const uint8_t *p)
{
	uint8_t byte, index, bit = 0;
	uint8_t pos = 24;
	//output byte
	for(byte=0; byte<7; byte++){
    1dba:	f7 e0       	ldi	r31, 0x07	; 7
    1dbc:	cf 16       	cp	r12, r31
    1dbe:	d1 04       	cpc	r13, r1
    1dc0:	09 f0       	breq	.+2      	; 0x1dc4 <main+0x1034>
    1dc2:	f7 ce       	rjmp	.-530    	; 0x1bb2 <main+0xe22>
			pinWrite(latch_pin, HIGH);
		}
		MultiPlex(&byte);
		Clear();
	}
	delayms = 1;
    1dc4:	90 92 01 01 	sts	0x0101, r9	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1dc8:	80 92 00 01 	sts	0x0100, r8	; 0x800100 <__DATA_REGION_ORIGIN__>
    1dcc:	ba 94       	dec	r11
	}
}*/
static inline void HoldDisplayBuffer(const uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
    1dce:	b1 10       	cpse	r11, r1
    1dd0:	ec ce       	rjmp	.-552    	; 0x1baa <main+0xe1a>
    1dd2:	d8 01       	movw	r26, r16
    1dd4:	e7 2d       	mov	r30, r7
    1dd6:	1d 92       	st	X+, r1
    1dd8:	ea 95       	dec	r30
    1dda:	e9 f7       	brne	.-6      	; 0x1dd6 <main+0x1046>
    1ddc:	2e e2       	ldi	r18, 0x2E	; 46
    1dde:	42 2e       	mov	r4, r18
    1de0:	21 e0       	ldi	r18, 0x01	; 1
    1de2:	52 2e       	mov	r5, r18
    1de4:	d2 01       	movw	r26, r4
    1de6:	20 e0       	ldi	r18, 0x00	; 0
    1de8:	83 e4       	ldi	r24, 0x43	; 67
/* returns the index of the first byte of the requested character       */
/************************************************************************/
uint8_t CharStart(const char *p)
{
	/*if(*p == ' ') return 0;
	else*/ return (uint8_t) (( *p - ' '));
    1dea:	80 52       	subi	r24, 0x20	; 32
	unsigned int index = 0;
	uint8_t len = 0;
	uint8_t x = 0;
	ClearStringBuffer();
	while(*ch){
		index = CharStart(ch++) * 5;
    1dec:	f5 e0       	ldi	r31, 0x05	; 5
    1dee:	8f 9f       	mul	r24, r31
    1df0:	c0 01       	movw	r24, r0
    1df2:	11 24       	eor	r1, r1
		for(len = 0; len < 5; len++){
			stringbuffer[x] = (uint8_t)(pgm_read_byte((font_5x7 + index)));
    1df4:	fc 01       	movw	r30, r24
    1df6:	e8 59       	subi	r30, 0x98	; 152
    1df8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dfa:	34 91       	lpm	r19, Z
    1dfc:	e2 2f       	mov	r30, r18
    1dfe:	f0 e0       	ldi	r31, 0x00	; 0
    1e00:	ef 5c       	subi	r30, 0xCF	; 207
    1e02:	fd 4f       	sbci	r31, 0xFD	; 253
    1e04:	30 83       	st	Z, r19
    1e06:	fc 01       	movw	r30, r24
    1e08:	e7 59       	subi	r30, 0x97	; 151
    1e0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e0c:	34 91       	lpm	r19, Z
    1e0e:	e1 e0       	ldi	r30, 0x01	; 1
    1e10:	e2 0f       	add	r30, r18
    1e12:	f0 e0       	ldi	r31, 0x00	; 0
    1e14:	ef 5c       	subi	r30, 0xCF	; 207
    1e16:	fd 4f       	sbci	r31, 0xFD	; 253
    1e18:	30 83       	st	Z, r19
    1e1a:	fc 01       	movw	r30, r24
    1e1c:	e6 59       	subi	r30, 0x96	; 150
    1e1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e20:	34 91       	lpm	r19, Z
    1e22:	e2 e0       	ldi	r30, 0x02	; 2
    1e24:	e2 0f       	add	r30, r18
    1e26:	f0 e0       	ldi	r31, 0x00	; 0
    1e28:	ef 5c       	subi	r30, 0xCF	; 207
    1e2a:	fd 4f       	sbci	r31, 0xFD	; 253
    1e2c:	30 83       	st	Z, r19
    1e2e:	fc 01       	movw	r30, r24
    1e30:	e5 59       	subi	r30, 0x95	; 149
    1e32:	ff 4f       	sbci	r31, 0xFF	; 255
    1e34:	34 91       	lpm	r19, Z
    1e36:	e3 e0       	ldi	r30, 0x03	; 3
    1e38:	e2 0f       	add	r30, r18
    1e3a:	f0 e0       	ldi	r31, 0x00	; 0
    1e3c:	ef 5c       	subi	r30, 0xCF	; 207
    1e3e:	fd 4f       	sbci	r31, 0xFD	; 253
    1e40:	30 83       	st	Z, r19
    1e42:	fc 01       	movw	r30, r24
    1e44:	e4 59       	subi	r30, 0x94	; 148
    1e46:	ff 4f       	sbci	r31, 0xFF	; 255
    1e48:	84 91       	lpm	r24, Z
    1e4a:	e4 e0       	ldi	r30, 0x04	; 4
    1e4c:	e2 0f       	add	r30, r18
    1e4e:	f0 e0       	ldi	r31, 0x00	; 0
    1e50:	ef 5c       	subi	r30, 0xCF	; 207
    1e52:	fd 4f       	sbci	r31, 0xFD	; 253
    1e54:	80 83       	st	Z, r24
			index++; x++;
		}
		stringbuffer[x] = 0;
    1e56:	e5 e0       	ldi	r30, 0x05	; 5
    1e58:	e2 0f       	add	r30, r18
    1e5a:	f0 e0       	ldi	r31, 0x00	; 0
    1e5c:	ef 5c       	subi	r30, 0xCF	; 207
    1e5e:	fd 4f       	sbci	r31, 0xFD	; 253
    1e60:	10 82       	st	Z, r1
		x++;
    1e62:	2a 5f       	subi	r18, 0xFA	; 250
{
	unsigned int index = 0;
	uint8_t len = 0;
	uint8_t x = 0;
	ClearStringBuffer();
	while(*ch){
    1e64:	8d 91       	ld	r24, X+
    1e66:	81 11       	cpse	r24, r1
    1e68:	c0 cf       	rjmp	.-128    	; 0x1dea <main+0x105a>
    1e6a:	2c 2d       	mov	r18, r12
    1e6c:	e1 e3       	ldi	r30, 0x31	; 49
    1e6e:	f2 e0       	ldi	r31, 0x02	; 2
	for(step = 0; step < 7; step++)
	{
		for(index = 0; index < 25; index++)
		{
			if(dir)
			*(bf + index) = (*((p+index)) >> (7-step));
    1e70:	cf 01       	movw	r24, r30
    1e72:	81 53       	subi	r24, 0x31	; 49
    1e74:	92 40       	sbci	r25, 0x02	; 2
    1e76:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <bf>
    1e7a:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <bf+0x1>
    1e7e:	a8 0f       	add	r26, r24
    1e80:	b9 1f       	adc	r27, r25
    1e82:	81 91       	ld	r24, Z+
    1e84:	90 e0       	ldi	r25, 0x00	; 0
    1e86:	02 2e       	mov	r0, r18
    1e88:	02 c0       	rjmp	.+4      	; 0x1e8e <main+0x10fe>
    1e8a:	95 95       	asr	r25
    1e8c:	87 95       	ror	r24
    1e8e:	0a 94       	dec	r0
    1e90:	e2 f7       	brpl	.-8      	; 0x1e8a <main+0x10fa>
    1e92:	8c 93       	st	X, r24
{
	//uint8_t *bf = buffer;
	uint8_t index, step = 0;
	for(step = 0; step < 7; step++)
	{
		for(index = 0; index < 25; index++)
    1e94:	9a e4       	ldi	r25, 0x4A	; 74
    1e96:	a9 2e       	mov	r10, r25
    1e98:	92 e0       	ldi	r25, 0x02	; 2
    1e9a:	b9 2e       	mov	r11, r25
    1e9c:	ae 16       	cp	r10, r30
    1e9e:	bf 06       	cpc	r11, r31
    1ea0:	39 f7       	brne	.-50     	; 0x1e70 <main+0x10e0>
			if(dir)
			*(bf + index) = (*((p+index)) >> (7-step));
			else
			*(bf + index) = (*((p+index)) << (7-step));
		}
		HoldDisplayBuffer(bf, time);
    1ea2:	a0 90 02 01 	lds	r10, 0x0102	; 0x800102 <bf>
    1ea6:	b0 90 03 01 	lds	r11, 0x0103	; 0x800103 <bf+0x1>
    1eaa:	8a e0       	ldi	r24, 0x0A	; 10
    1eac:	68 2e       	mov	r6, r24
}*/
static inline void HoldDisplayBuffer(const uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
		DisplayBuffer(data);
    1eae:	c5 01       	movw	r24, r10
    1eb0:	0e 94 41 01 	call	0x282	; 0x282 <DisplayBuffer>
    1eb4:	6a 94       	dec	r6
	}
}*/
static inline void HoldDisplayBuffer(const uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
    1eb6:	61 10       	cpse	r6, r1
    1eb8:	fa cf       	rjmp	.-12     	; 0x1eae <main+0x111e>
    1eba:	21 e0       	ldi	r18, 0x01	; 1
    1ebc:	c2 1a       	sub	r12, r18
    1ebe:	d1 08       	sbc	r13, r1
enum direction{ up, down};
void Drop(const uint8_t *p, uint8_t time, uint8_t dir )
{
	//uint8_t *bf = buffer;
	uint8_t index, step = 0;
	for(step = 0; step < 7; step++)
    1ec0:	a1 f6       	brne	.-88     	; 0x1e6a <main+0x10da>
    1ec2:	4a e0       	ldi	r20, 0x0A	; 10
			if(dir)
			*(bf + index) = (*((p+index)) >> (7-step));
			else
			*(bf + index) = (*((p+index)) << (7-step));
		}
		HoldDisplayBuffer(bf, time);
    1ec4:	b4 e0       	ldi	r27, 0x04	; 4
    1ec6:	cb 2e       	mov	r12, r27
    1ec8:	b1 e0       	ldi	r27, 0x01	; 1
    1eca:	db 2e       	mov	r13, r27
    1ecc:	60 e0       	ldi	r22, 0x00	; 0
    1ece:	70 e0       	ldi	r23, 0x00	; 0
	uint8_t byte, index, bit = 0;
	uint8_t pos = 24;
	//output byte
	for(byte=0; byte<7; byte++){
		pos = 24;
		pinWrite(end_pin,((*(p+pos)) & (1 << byte)));
    1ed0:	81 e0       	ldi	r24, 0x01	; 1
    1ed2:	90 e0       	ldi	r25, 0x00	; 0
    1ed4:	06 2e       	mov	r0, r22
    1ed6:	01 c0       	rjmp	.+2      	; 0x1eda <main+0x114a>
    1ed8:	88 0f       	add	r24, r24
    1eda:	0a 94       	dec	r0
    1edc:	ea f7       	brpl	.-6      	; 0x1ed8 <main+0x1148>
    1ede:	98 2f       	mov	r25, r24
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    1ee0:	20 91 49 02 	lds	r18, 0x0249	; 0x800249 <stringbuffer+0x18>
    1ee4:	82 23       	and	r24, r18
    1ee6:	11 f0       	breq	.+4      	; 0x1eec <main+0x115c>
    1ee8:	0c 94 08 1e 	jmp	0x3c10	; 0x3c10 <main+0x2e80>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1eec:	5d 98       	cbi	0x0b, 5	; 11
			if(dir)
			*(bf + index) = (*((p+index)) >> (7-step));
			else
			*(bf + index) = (*((p+index)) << (7-step));
		}
		HoldDisplayBuffer(bf, time);
    1eee:	87 e1       	ldi	r24, 0x17	; 23
    1ef0:	5a 98       	cbi	0x0b, 2	; 11
		pinWrite(end_pin,((*(p+pos)) & (1 << byte)));
		pos--;
		for(index=0; index<3; index++){
			pinWrite(latch_pin, LOW);
			for(bit = 0; bit < 8 ; bit++){
				pinWrite(data_pin,((*(p+pos)) & (1 << byte)));
    1ef2:	e8 2f       	mov	r30, r24
    1ef4:	f0 e0       	ldi	r31, 0x00	; 0
    1ef6:	ef 5c       	subi	r30, 0xCF	; 207
    1ef8:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    1efa:	20 81       	ld	r18, Z
    1efc:	29 23       	and	r18, r25
    1efe:	11 f0       	breq	.+4      	; 0x1f04 <main+0x1174>
    1f00:	0c 94 05 1e 	jmp	0x3c0a	; 0x3c0a <main+0x2e7a>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1f04:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1f06:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1f08:	5b 98       	cbi	0x0b, 3	; 11
    1f0a:	ef ef       	ldi	r30, 0xFF	; 255
    1f0c:	e8 0f       	add	r30, r24
    1f0e:	f0 e0       	ldi	r31, 0x00	; 0
    1f10:	ef 5c       	subi	r30, 0xCF	; 207
    1f12:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    1f14:	20 81       	ld	r18, Z
    1f16:	29 23       	and	r18, r25
    1f18:	11 f0       	breq	.+4      	; 0x1f1e <main+0x118e>
    1f1a:	0c 94 02 1e 	jmp	0x3c04	; 0x3c04 <main+0x2e74>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1f1e:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1f20:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1f22:	5b 98       	cbi	0x0b, 3	; 11
    1f24:	ee ef       	ldi	r30, 0xFE	; 254
    1f26:	e8 0f       	add	r30, r24
    1f28:	f0 e0       	ldi	r31, 0x00	; 0
    1f2a:	ef 5c       	subi	r30, 0xCF	; 207
    1f2c:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    1f2e:	20 81       	ld	r18, Z
    1f30:	29 23       	and	r18, r25
    1f32:	11 f0       	breq	.+4      	; 0x1f38 <main+0x11a8>
    1f34:	0c 94 ff 1d 	jmp	0x3bfe	; 0x3bfe <main+0x2e6e>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1f38:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1f3a:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1f3c:	5b 98       	cbi	0x0b, 3	; 11
    1f3e:	ed ef       	ldi	r30, 0xFD	; 253
    1f40:	e8 0f       	add	r30, r24
    1f42:	f0 e0       	ldi	r31, 0x00	; 0
    1f44:	ef 5c       	subi	r30, 0xCF	; 207
    1f46:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    1f48:	20 81       	ld	r18, Z
    1f4a:	29 23       	and	r18, r25
    1f4c:	11 f0       	breq	.+4      	; 0x1f52 <main+0x11c2>
    1f4e:	0c 94 fc 1d 	jmp	0x3bf8	; 0x3bf8 <main+0x2e68>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1f52:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1f54:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1f56:	5b 98       	cbi	0x0b, 3	; 11
    1f58:	ec ef       	ldi	r30, 0xFC	; 252
    1f5a:	e8 0f       	add	r30, r24
    1f5c:	f0 e0       	ldi	r31, 0x00	; 0
    1f5e:	ef 5c       	subi	r30, 0xCF	; 207
    1f60:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    1f62:	20 81       	ld	r18, Z
    1f64:	29 23       	and	r18, r25
    1f66:	11 f0       	breq	.+4      	; 0x1f6c <main+0x11dc>
    1f68:	0c 94 f9 1d 	jmp	0x3bf2	; 0x3bf2 <main+0x2e62>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1f6c:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1f6e:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1f70:	5b 98       	cbi	0x0b, 3	; 11
    1f72:	eb ef       	ldi	r30, 0xFB	; 251
    1f74:	e8 0f       	add	r30, r24
    1f76:	f0 e0       	ldi	r31, 0x00	; 0
    1f78:	ef 5c       	subi	r30, 0xCF	; 207
    1f7a:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    1f7c:	20 81       	ld	r18, Z
    1f7e:	29 23       	and	r18, r25
    1f80:	11 f0       	breq	.+4      	; 0x1f86 <main+0x11f6>
    1f82:	0c 94 f6 1d 	jmp	0x3bec	; 0x3bec <main+0x2e5c>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1f86:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1f88:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1f8a:	5b 98       	cbi	0x0b, 3	; 11
    1f8c:	ea ef       	ldi	r30, 0xFA	; 250
    1f8e:	e8 0f       	add	r30, r24
    1f90:	f0 e0       	ldi	r31, 0x00	; 0
    1f92:	ef 5c       	subi	r30, 0xCF	; 207
    1f94:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    1f96:	20 81       	ld	r18, Z
    1f98:	29 23       	and	r18, r25
    1f9a:	11 f0       	breq	.+4      	; 0x1fa0 <main+0x1210>
    1f9c:	0c 94 f3 1d 	jmp	0x3be6	; 0x3be6 <main+0x2e56>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1fa0:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1fa2:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1fa4:	5b 98       	cbi	0x0b, 3	; 11
    1fa6:	e9 ef       	ldi	r30, 0xF9	; 249
    1fa8:	e8 0f       	add	r30, r24
    1faa:	f0 e0       	ldi	r31, 0x00	; 0
    1fac:	ef 5c       	subi	r30, 0xCF	; 207
    1fae:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    1fb0:	20 81       	ld	r18, Z
    1fb2:	29 23       	and	r18, r25
    1fb4:	11 f0       	breq	.+4      	; 0x1fba <main+0x122a>
    1fb6:	0c 94 f0 1d 	jmp	0x3be0	; 0x3be0 <main+0x2e50>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1fba:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1fbc:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1fbe:	5b 98       	cbi	0x0b, 3	; 11
				//toggle the clock pin
				pinWrite(clock_pin, HIGH);
				pinWrite(clock_pin, LOW);
				pos--;
    1fc0:	88 50       	subi	r24, 0x08	; 8
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    1fc2:	5a 9a       	sbi	0x0b, 2	; 11
	//output byte
	for(byte=0; byte<7; byte++){
		pos = 24;
		pinWrite(end_pin,((*(p+pos)) & (1 << byte)));
		pos--;
		for(index=0; index<3; index++){
    1fc4:	8f 3f       	cpi	r24, 0xFF	; 255
    1fc6:	09 f0       	breq	.+2      	; 0x1fca <main+0x123a>
    1fc8:	93 cf       	rjmp	.-218    	; 0x1ef0 <main+0x1160>
    1fca:	a4 e0       	ldi	r26, 0x04	; 4
    1fcc:	b1 e0       	ldi	r27, 0x01	; 1
    1fce:	64 2e       	mov	r6, r20
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    1fd0:	ed 91       	ld	r30, X+
    1fd2:	ee 23       	and	r30, r30
    1fd4:	01 f1       	breq	.+64     	; 0x2016 <main+0x1286>
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    1fd6:	ec 3c       	cpi	r30, 0xCC	; 204
    1fd8:	d8 f7       	brcc	.-10     	; 0x1fd0 <main+0x1240>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    1fda:	37 e0       	ldi	r19, 0x07	; 7
    1fdc:	e3 9f       	mul	r30, r19
    1fde:	f0 01       	movw	r30, r0
    1fe0:	11 24       	eor	r1, r1
    1fe2:	af 01       	movw	r20, r30
    1fe4:	44 5b       	subi	r20, 0xB4	; 180
    1fe6:	5e 4f       	sbci	r21, 0xFE	; 254
    1fe8:	5a 01       	movw	r10, r20
    1fea:	fa 01       	movw	r30, r20
    1fec:	22 81       	ldd	r18, Z+2	; 0x02
    1fee:	33 81       	ldd	r19, Z+3	; 0x03
    1ff0:	f9 01       	movw	r30, r18
    1ff2:	90 81       	ld	r25, Z
    1ff4:	41 e0       	ldi	r20, 0x01	; 1
    1ff6:	50 e0       	ldi	r21, 0x00	; 0
    1ff8:	f5 01       	movw	r30, r10
    1ffa:	06 80       	ldd	r0, Z+6	; 0x06
    1ffc:	02 c0       	rjmp	.+4      	; 0x2002 <main+0x1272>
    1ffe:	44 0f       	add	r20, r20
    2000:	55 1f       	adc	r21, r21
    2002:	0a 94       	dec	r0
    2004:	e2 f7       	brpl	.-8      	; 0x1ffe <main+0x126e>
    2006:	84 2f       	mov	r24, r20
    2008:	80 95       	com	r24
    200a:	89 23       	and	r24, r25
    200c:	f9 01       	movw	r30, r18
    200e:	80 83       	st	Z, r24
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    2010:	ed 91       	ld	r30, X+
    2012:	e1 11       	cpse	r30, r1
    2014:	e0 cf       	rjmp	.-64     	; 0x1fd6 <main+0x1246>
    2016:	46 2d       	mov	r20, r6
/* Multiplexing method                                                  */
/************************************************************************/
static inline void MultiPlex(uint8_t *pin)
{
	pinsMultiWrite(plex_pins, LOW);
	pinWrite(plex_pins[*pin], HIGH);
    2018:	d6 01       	movw	r26, r12
    201a:	ed 91       	ld	r30, X+
    201c:	6d 01       	movw	r12, r26
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    201e:	ec 3c       	cpi	r30, 0xCC	; 204
    2020:	10 f4       	brcc	.+4      	; 0x2026 <main+0x1296>
    2022:	0c 94 0b 1e 	jmp	0x3c16	; 0x3c16 <main+0x2e86>
	delay(delayms);
    2026:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    202a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
/*  delay                                                               */
/************************************************************************/
int delayms = 1;
static inline void delay(int dl)
{
	while(dl >= 0)
    202e:	97 fd       	sbrc	r25, 7
    2030:	08 c0       	rjmp	.+16     	; 0x2042 <main+0x12b2>
    2032:	ef e9       	ldi	r30, 0x9F	; 159
    2034:	ff e0       	ldi	r31, 0x0F	; 15
    2036:	31 97       	sbiw	r30, 0x01	; 1
    2038:	f1 f7       	brne	.-4      	; 0x2036 <main+0x12a6>
    203a:	00 c0       	rjmp	.+0      	; 0x203c <main+0x12ac>
    203c:	00 00       	nop
	{
		_delay_ms(1);
		dl--;
    203e:	01 97       	sbiw	r24, 0x01	; 1
    2040:	c0 f7       	brcc	.-16     	; 0x2032 <main+0x12a2>
	//output byte
	for(byte=0; byte<7; byte++){
		pos = 24;
		pinWrite(end_pin,((*(p+pos)) & (1 << byte)));
		pos--;
		for(index=0; index<3; index++){
    2042:	a4 e0       	ldi	r26, 0x04	; 4
    2044:	b1 e0       	ldi	r27, 0x01	; 1
    2046:	64 2e       	mov	r6, r20
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    2048:	ed 91       	ld	r30, X+
    204a:	ee 23       	and	r30, r30
    204c:	01 f1       	breq	.+64     	; 0x208e <main+0x12fe>
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    204e:	ec 3c       	cpi	r30, 0xCC	; 204
    2050:	d8 f7       	brcc	.-10     	; 0x2048 <main+0x12b8>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2052:	27 e0       	ldi	r18, 0x07	; 7
    2054:	e2 9f       	mul	r30, r18
    2056:	f0 01       	movw	r30, r0
    2058:	11 24       	eor	r1, r1
    205a:	af 01       	movw	r20, r30
    205c:	44 5b       	subi	r20, 0xB4	; 180
    205e:	5e 4f       	sbci	r21, 0xFE	; 254
    2060:	5a 01       	movw	r10, r20
    2062:	fa 01       	movw	r30, r20
    2064:	22 81       	ldd	r18, Z+2	; 0x02
    2066:	33 81       	ldd	r19, Z+3	; 0x03
    2068:	f9 01       	movw	r30, r18
    206a:	90 81       	ld	r25, Z
    206c:	41 e0       	ldi	r20, 0x01	; 1
    206e:	50 e0       	ldi	r21, 0x00	; 0
    2070:	f5 01       	movw	r30, r10
    2072:	06 80       	ldd	r0, Z+6	; 0x06
    2074:	02 c0       	rjmp	.+4      	; 0x207a <main+0x12ea>
    2076:	44 0f       	add	r20, r20
    2078:	55 1f       	adc	r21, r21
    207a:	0a 94       	dec	r0
    207c:	e2 f7       	brpl	.-8      	; 0x2076 <main+0x12e6>
    207e:	84 2f       	mov	r24, r20
    2080:	80 95       	com	r24
    2082:	89 23       	and	r24, r25
    2084:	f9 01       	movw	r30, r18
    2086:	80 83       	st	Z, r24
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    2088:	ed 91       	ld	r30, X+
    208a:	e1 11       	cpse	r30, r1
    208c:	e0 cf       	rjmp	.-64     	; 0x204e <main+0x12be>
    208e:	46 2d       	mov	r20, r6
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2090:	5d 98       	cbi	0x0b, 5	; 11
    2092:	84 e0       	ldi	r24, 0x04	; 4
    2094:	90 e0       	ldi	r25, 0x00	; 0
    2096:	5a 98       	cbi	0x0b, 2	; 11
    2098:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    209a:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    209c:	5b 98       	cbi	0x0b, 3	; 11
    209e:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    20a0:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    20a2:	5b 98       	cbi	0x0b, 3	; 11
    20a4:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    20a6:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    20a8:	5b 98       	cbi	0x0b, 3	; 11
    20aa:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    20ac:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    20ae:	5b 98       	cbi	0x0b, 3	; 11
    20b0:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    20b2:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    20b4:	5b 98       	cbi	0x0b, 3	; 11
    20b6:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    20b8:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    20ba:	5b 98       	cbi	0x0b, 3	; 11
    20bc:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    20be:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    20c0:	5b 98       	cbi	0x0b, 3	; 11
    20c2:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    20c4:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    20c6:	5b 98       	cbi	0x0b, 3	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    20c8:	5a 9a       	sbi	0x0b, 2	; 11
    20ca:	01 97       	sbiw	r24, 0x01	; 1
/************************************************************************/
static inline void Clear(){
	int x, y = 0;
	pinsMultiWrite(plex_pins, LOW);
	pinWrite(end_pin, LOW);
	for(x = 0; x < 4; x++) {
    20cc:	21 f7       	brne	.-56     	; 0x2096 <main+0x1306>
    20ce:	6f 5f       	subi	r22, 0xFF	; 255
    20d0:	7f 4f       	sbci	r23, 0xFF	; 255
static inline void DisplayBuffer(const uint8_t *p)
{
	uint8_t byte, index, bit = 0;
	uint8_t pos = 24;
	//output byte
	for(byte=0; byte<7; byte++){
    20d2:	67 30       	cpi	r22, 0x07	; 7
    20d4:	71 05       	cpc	r23, r1
    20d6:	09 f0       	breq	.+2      	; 0x20da <main+0x134a>
    20d8:	fb ce       	rjmp	.-522    	; 0x1ed0 <main+0x1140>
			pinWrite(latch_pin, HIGH);
		}
		MultiPlex(&byte);
		Clear();
	}
	delayms = 1;
    20da:	90 92 01 01 	sts	0x0101, r9	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    20de:	80 92 00 01 	sts	0x0100, r8	; 0x800100 <__DATA_REGION_ORIGIN__>
    20e2:	41 50       	subi	r20, 0x01	; 1
	}
}*/
static inline void HoldDisplayBuffer(const uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
    20e4:	09 f0       	breq	.+2      	; 0x20e8 <main+0x1358>
    20e6:	ee ce       	rjmp	.-548    	; 0x1ec4 <main+0x1134>
    20e8:	d8 01       	movw	r26, r16
    20ea:	e7 2d       	mov	r30, r7
    20ec:	1d 92       	st	X+, r1
    20ee:	ea 95       	dec	r30
    20f0:	e9 f7       	brne	.-6      	; 0x20ec <main+0x135c>
    20f2:	ae e2       	ldi	r26, 0x2E	; 46
    20f4:	b1 e0       	ldi	r27, 0x01	; 1
    20f6:	20 e0       	ldi	r18, 0x00	; 0
    20f8:	83 e4       	ldi	r24, 0x43	; 67
/* returns the index of the first byte of the requested character       */
/************************************************************************/
uint8_t CharStart(const char *p)
{
	/*if(*p == ' ') return 0;
	else*/ return (uint8_t) (( *p - ' '));
    20fa:	80 52       	subi	r24, 0x20	; 32
	unsigned int index = 0;
	uint8_t len = 0;
	uint8_t x = 0;
	ClearStringBuffer();
	while(*ch){
		index = CharStart(ch++) * 5;
    20fc:	f5 e0       	ldi	r31, 0x05	; 5
    20fe:	8f 9f       	mul	r24, r31
    2100:	c0 01       	movw	r24, r0
    2102:	11 24       	eor	r1, r1
		for(len = 0; len < 5; len++){
			stringbuffer[x] = (uint8_t)(pgm_read_byte((font_5x7 + index)));
    2104:	fc 01       	movw	r30, r24
    2106:	e8 59       	subi	r30, 0x98	; 152
    2108:	ff 4f       	sbci	r31, 0xFF	; 255
    210a:	34 91       	lpm	r19, Z
    210c:	e2 2f       	mov	r30, r18
    210e:	f0 e0       	ldi	r31, 0x00	; 0
    2110:	ef 5c       	subi	r30, 0xCF	; 207
    2112:	fd 4f       	sbci	r31, 0xFD	; 253
    2114:	30 83       	st	Z, r19
    2116:	fc 01       	movw	r30, r24
    2118:	e7 59       	subi	r30, 0x97	; 151
    211a:	ff 4f       	sbci	r31, 0xFF	; 255
    211c:	34 91       	lpm	r19, Z
    211e:	e1 e0       	ldi	r30, 0x01	; 1
    2120:	e2 0f       	add	r30, r18
    2122:	f0 e0       	ldi	r31, 0x00	; 0
    2124:	ef 5c       	subi	r30, 0xCF	; 207
    2126:	fd 4f       	sbci	r31, 0xFD	; 253
    2128:	30 83       	st	Z, r19
    212a:	fc 01       	movw	r30, r24
    212c:	e6 59       	subi	r30, 0x96	; 150
    212e:	ff 4f       	sbci	r31, 0xFF	; 255
    2130:	34 91       	lpm	r19, Z
    2132:	e2 e0       	ldi	r30, 0x02	; 2
    2134:	e2 0f       	add	r30, r18
    2136:	f0 e0       	ldi	r31, 0x00	; 0
    2138:	ef 5c       	subi	r30, 0xCF	; 207
    213a:	fd 4f       	sbci	r31, 0xFD	; 253
    213c:	30 83       	st	Z, r19
    213e:	fc 01       	movw	r30, r24
    2140:	e5 59       	subi	r30, 0x95	; 149
    2142:	ff 4f       	sbci	r31, 0xFF	; 255
    2144:	34 91       	lpm	r19, Z
    2146:	e3 e0       	ldi	r30, 0x03	; 3
    2148:	e2 0f       	add	r30, r18
    214a:	f0 e0       	ldi	r31, 0x00	; 0
    214c:	ef 5c       	subi	r30, 0xCF	; 207
    214e:	fd 4f       	sbci	r31, 0xFD	; 253
    2150:	30 83       	st	Z, r19
    2152:	fc 01       	movw	r30, r24
    2154:	e4 59       	subi	r30, 0x94	; 148
    2156:	ff 4f       	sbci	r31, 0xFF	; 255
    2158:	84 91       	lpm	r24, Z
    215a:	e4 e0       	ldi	r30, 0x04	; 4
    215c:	e2 0f       	add	r30, r18
    215e:	f0 e0       	ldi	r31, 0x00	; 0
    2160:	ef 5c       	subi	r30, 0xCF	; 207
    2162:	fd 4f       	sbci	r31, 0xFD	; 253
    2164:	80 83       	st	Z, r24
			index++; x++;
		}
		stringbuffer[x] = 0;
    2166:	e5 e0       	ldi	r30, 0x05	; 5
    2168:	e2 0f       	add	r30, r18
    216a:	f0 e0       	ldi	r31, 0x00	; 0
    216c:	ef 5c       	subi	r30, 0xCF	; 207
    216e:	fd 4f       	sbci	r31, 0xFD	; 253
    2170:	10 82       	st	Z, r1
		x++;
    2172:	2a 5f       	subi	r18, 0xFA	; 250
{
	unsigned int index = 0;
	uint8_t len = 0;
	uint8_t x = 0;
	ClearStringBuffer();
	while(*ch){
    2174:	8d 91       	ld	r24, X+
    2176:	81 11       	cpse	r24, r1
    2178:	c0 cf       	rjmp	.-128    	; 0x20fa <main+0x136a>
    217a:	a2 e3       	ldi	r26, 0x32	; 50
    217c:	da 2e       	mov	r13, r26
    217e:	34 e0       	ldi	r19, 0x04	; 4
    2180:	a3 2e       	mov	r10, r19
    2182:	31 e0       	ldi	r19, 0x01	; 1
    2184:	b3 2e       	mov	r11, r19
    2186:	80 e0       	ldi	r24, 0x00	; 0
    2188:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t byte, index, bit = 0;
	uint8_t pos = 24;
	//output byte
	for(byte=0; byte<7; byte++){
		pos = 24;
		pinWrite(end_pin,((*(p+pos)) & (1 << byte)));
    218a:	21 e0       	ldi	r18, 0x01	; 1
    218c:	30 e0       	ldi	r19, 0x00	; 0
    218e:	08 2e       	mov	r0, r24
    2190:	01 c0       	rjmp	.+2      	; 0x2194 <main+0x1404>
    2192:	22 0f       	add	r18, r18
    2194:	0a 94       	dec	r0
    2196:	ea f7       	brpl	.-6      	; 0x2192 <main+0x1402>
    2198:	32 2f       	mov	r19, r18
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    219a:	40 91 49 02 	lds	r20, 0x0249	; 0x800249 <stringbuffer+0x18>
    219e:	24 23       	and	r18, r20
    21a0:	11 f0       	breq	.+4      	; 0x21a6 <main+0x1416>
    21a2:	0c 94 38 1e 	jmp	0x3c70	; 0x3c70 <main+0x2ee0>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    21a6:	5d 98       	cbi	0x0b, 5	; 11
	}
}*/
static inline void HoldDisplayBuffer(const uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
    21a8:	27 e1       	ldi	r18, 0x17	; 23
    21aa:	5a 98       	cbi	0x0b, 2	; 11
		pinWrite(end_pin,((*(p+pos)) & (1 << byte)));
		pos--;
		for(index=0; index<3; index++){
			pinWrite(latch_pin, LOW);
			for(bit = 0; bit < 8 ; bit++){
				pinWrite(data_pin,((*(p+pos)) & (1 << byte)));
    21ac:	e2 2f       	mov	r30, r18
    21ae:	f0 e0       	ldi	r31, 0x00	; 0
    21b0:	ef 5c       	subi	r30, 0xCF	; 207
    21b2:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    21b4:	40 81       	ld	r20, Z
    21b6:	43 23       	and	r20, r19
    21b8:	11 f0       	breq	.+4      	; 0x21be <main+0x142e>
    21ba:	0c 94 35 1e 	jmp	0x3c6a	; 0x3c6a <main+0x2eda>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    21be:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    21c0:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    21c2:	5b 98       	cbi	0x0b, 3	; 11
    21c4:	ef ef       	ldi	r30, 0xFF	; 255
    21c6:	e2 0f       	add	r30, r18
    21c8:	f0 e0       	ldi	r31, 0x00	; 0
    21ca:	ef 5c       	subi	r30, 0xCF	; 207
    21cc:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    21ce:	40 81       	ld	r20, Z
    21d0:	43 23       	and	r20, r19
    21d2:	11 f0       	breq	.+4      	; 0x21d8 <main+0x1448>
    21d4:	0c 94 32 1e 	jmp	0x3c64	; 0x3c64 <main+0x2ed4>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    21d8:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    21da:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    21dc:	5b 98       	cbi	0x0b, 3	; 11
    21de:	ee ef       	ldi	r30, 0xFE	; 254
    21e0:	e2 0f       	add	r30, r18
    21e2:	f0 e0       	ldi	r31, 0x00	; 0
    21e4:	ef 5c       	subi	r30, 0xCF	; 207
    21e6:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    21e8:	40 81       	ld	r20, Z
    21ea:	43 23       	and	r20, r19
    21ec:	11 f0       	breq	.+4      	; 0x21f2 <main+0x1462>
    21ee:	0c 94 2f 1e 	jmp	0x3c5e	; 0x3c5e <main+0x2ece>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    21f2:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    21f4:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    21f6:	5b 98       	cbi	0x0b, 3	; 11
    21f8:	ed ef       	ldi	r30, 0xFD	; 253
    21fa:	e2 0f       	add	r30, r18
    21fc:	f0 e0       	ldi	r31, 0x00	; 0
    21fe:	ef 5c       	subi	r30, 0xCF	; 207
    2200:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    2202:	40 81       	ld	r20, Z
    2204:	43 23       	and	r20, r19
    2206:	11 f0       	breq	.+4      	; 0x220c <main+0x147c>
    2208:	0c 94 2c 1e 	jmp	0x3c58	; 0x3c58 <main+0x2ec8>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    220c:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    220e:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2210:	5b 98       	cbi	0x0b, 3	; 11
    2212:	ec ef       	ldi	r30, 0xFC	; 252
    2214:	e2 0f       	add	r30, r18
    2216:	f0 e0       	ldi	r31, 0x00	; 0
    2218:	ef 5c       	subi	r30, 0xCF	; 207
    221a:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    221c:	40 81       	ld	r20, Z
    221e:	43 23       	and	r20, r19
    2220:	11 f0       	breq	.+4      	; 0x2226 <main+0x1496>
    2222:	0c 94 29 1e 	jmp	0x3c52	; 0x3c52 <main+0x2ec2>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2226:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2228:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    222a:	5b 98       	cbi	0x0b, 3	; 11
    222c:	eb ef       	ldi	r30, 0xFB	; 251
    222e:	e2 0f       	add	r30, r18
    2230:	f0 e0       	ldi	r31, 0x00	; 0
    2232:	ef 5c       	subi	r30, 0xCF	; 207
    2234:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    2236:	40 81       	ld	r20, Z
    2238:	43 23       	and	r20, r19
    223a:	11 f0       	breq	.+4      	; 0x2240 <main+0x14b0>
    223c:	0c 94 26 1e 	jmp	0x3c4c	; 0x3c4c <main+0x2ebc>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2240:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2242:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2244:	5b 98       	cbi	0x0b, 3	; 11
    2246:	ea ef       	ldi	r30, 0xFA	; 250
    2248:	e2 0f       	add	r30, r18
    224a:	f0 e0       	ldi	r31, 0x00	; 0
    224c:	ef 5c       	subi	r30, 0xCF	; 207
    224e:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    2250:	40 81       	ld	r20, Z
    2252:	43 23       	and	r20, r19
    2254:	11 f0       	breq	.+4      	; 0x225a <main+0x14ca>
    2256:	0c 94 23 1e 	jmp	0x3c46	; 0x3c46 <main+0x2eb6>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    225a:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    225c:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    225e:	5b 98       	cbi	0x0b, 3	; 11
    2260:	e9 ef       	ldi	r30, 0xF9	; 249
    2262:	e2 0f       	add	r30, r18
    2264:	f0 e0       	ldi	r31, 0x00	; 0
    2266:	ef 5c       	subi	r30, 0xCF	; 207
    2268:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    226a:	40 81       	ld	r20, Z
    226c:	43 23       	and	r20, r19
    226e:	11 f0       	breq	.+4      	; 0x2274 <main+0x14e4>
    2270:	0c 94 20 1e 	jmp	0x3c40	; 0x3c40 <main+0x2eb0>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2274:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2276:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2278:	5b 98       	cbi	0x0b, 3	; 11
				//toggle the clock pin
				pinWrite(clock_pin, HIGH);
				pinWrite(clock_pin, LOW);
				pos--;
    227a:	28 50       	subi	r18, 0x08	; 8
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    227c:	5a 9a       	sbi	0x0b, 2	; 11
	//output byte
	for(byte=0; byte<7; byte++){
		pos = 24;
		pinWrite(end_pin,((*(p+pos)) & (1 << byte)));
		pos--;
		for(index=0; index<3; index++){
    227e:	2f 3f       	cpi	r18, 0xFF	; 255
    2280:	09 f0       	breq	.+2      	; 0x2284 <main+0x14f4>
    2282:	93 cf       	rjmp	.-218    	; 0x21aa <main+0x141a>
    2284:	a4 e0       	ldi	r26, 0x04	; 4
    2286:	b1 e0       	ldi	r27, 0x01	; 1
    2288:	6d 2c       	mov	r6, r13
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    228a:	ed 91       	ld	r30, X+
    228c:	ee 23       	and	r30, r30
    228e:	01 f1       	breq	.+64     	; 0x22d0 <main+0x1540>
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    2290:	ec 3c       	cpi	r30, 0xCC	; 204
    2292:	d8 f7       	brcc	.-10     	; 0x228a <main+0x14fa>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2294:	27 e0       	ldi	r18, 0x07	; 7
    2296:	e2 9f       	mul	r30, r18
    2298:	f0 01       	movw	r30, r0
    229a:	11 24       	eor	r1, r1
    229c:	bf 01       	movw	r22, r30
    229e:	64 5b       	subi	r22, 0xB4	; 180
    22a0:	7e 4f       	sbci	r23, 0xFE	; 254
    22a2:	fb 01       	movw	r30, r22
    22a4:	42 81       	ldd	r20, Z+2	; 0x02
    22a6:	53 81       	ldd	r21, Z+3	; 0x03
    22a8:	fa 01       	movw	r30, r20
    22aa:	30 81       	ld	r19, Z
    22ac:	cc 24       	eor	r12, r12
    22ae:	c3 94       	inc	r12
    22b0:	d1 2c       	mov	r13, r1
    22b2:	fb 01       	movw	r30, r22
    22b4:	06 80       	ldd	r0, Z+6	; 0x06
    22b6:	02 c0       	rjmp	.+4      	; 0x22bc <main+0x152c>
    22b8:	cc 0c       	add	r12, r12
    22ba:	dd 1c       	adc	r13, r13
    22bc:	0a 94       	dec	r0
    22be:	e2 f7       	brpl	.-8      	; 0x22b8 <main+0x1528>
    22c0:	2c 2d       	mov	r18, r12
    22c2:	20 95       	com	r18
    22c4:	23 23       	and	r18, r19
    22c6:	fa 01       	movw	r30, r20
    22c8:	20 83       	st	Z, r18
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    22ca:	ed 91       	ld	r30, X+
    22cc:	e1 11       	cpse	r30, r1
    22ce:	e0 cf       	rjmp	.-64     	; 0x2290 <main+0x1500>
    22d0:	d6 2c       	mov	r13, r6
/* Multiplexing method                                                  */
/************************************************************************/
static inline void MultiPlex(uint8_t *pin)
{
	pinsMultiWrite(plex_pins, LOW);
	pinWrite(plex_pins[*pin], HIGH);
    22d2:	d5 01       	movw	r26, r10
    22d4:	ed 91       	ld	r30, X+
    22d6:	5d 01       	movw	r10, r26
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    22d8:	ec 3c       	cpi	r30, 0xCC	; 204
    22da:	10 f4       	brcc	.+4      	; 0x22e0 <main+0x1550>
    22dc:	0c 94 3b 1e 	jmp	0x3c76	; 0x3c76 <main+0x2ee6>
	delay(delayms);
    22e0:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    22e4:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
/*  delay                                                               */
/************************************************************************/
int delayms = 1;
static inline void delay(int dl)
{
	while(dl >= 0)
    22e8:	37 fd       	sbrc	r19, 7
    22ea:	09 c0       	rjmp	.+18     	; 0x22fe <main+0x156e>
    22ec:	ef e9       	ldi	r30, 0x9F	; 159
    22ee:	ff e0       	ldi	r31, 0x0F	; 15
    22f0:	31 97       	sbiw	r30, 0x01	; 1
    22f2:	f1 f7       	brne	.-4      	; 0x22f0 <main+0x1560>
    22f4:	00 c0       	rjmp	.+0      	; 0x22f6 <main+0x1566>
    22f6:	00 00       	nop
	{
		_delay_ms(1);
		dl--;
    22f8:	21 50       	subi	r18, 0x01	; 1
    22fa:	31 09       	sbc	r19, r1
    22fc:	b8 f7       	brcc	.-18     	; 0x22ec <main+0x155c>
	//output byte
	for(byte=0; byte<7; byte++){
		pos = 24;
		pinWrite(end_pin,((*(p+pos)) & (1 << byte)));
		pos--;
		for(index=0; index<3; index++){
    22fe:	a4 e0       	ldi	r26, 0x04	; 4
    2300:	b1 e0       	ldi	r27, 0x01	; 1
    2302:	6d 2c       	mov	r6, r13
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    2304:	ed 91       	ld	r30, X+
    2306:	ee 23       	and	r30, r30
    2308:	01 f1       	breq	.+64     	; 0x234a <main+0x15ba>
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    230a:	ec 3c       	cpi	r30, 0xCC	; 204
    230c:	d8 f7       	brcc	.-10     	; 0x2304 <main+0x1574>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    230e:	27 e0       	ldi	r18, 0x07	; 7
    2310:	e2 9f       	mul	r30, r18
    2312:	f0 01       	movw	r30, r0
    2314:	11 24       	eor	r1, r1
    2316:	bf 01       	movw	r22, r30
    2318:	64 5b       	subi	r22, 0xB4	; 180
    231a:	7e 4f       	sbci	r23, 0xFE	; 254
    231c:	fb 01       	movw	r30, r22
    231e:	42 81       	ldd	r20, Z+2	; 0x02
    2320:	53 81       	ldd	r21, Z+3	; 0x03
    2322:	fa 01       	movw	r30, r20
    2324:	30 81       	ld	r19, Z
    2326:	cc 24       	eor	r12, r12
    2328:	c3 94       	inc	r12
    232a:	d1 2c       	mov	r13, r1
    232c:	fb 01       	movw	r30, r22
    232e:	06 80       	ldd	r0, Z+6	; 0x06
    2330:	02 c0       	rjmp	.+4      	; 0x2336 <main+0x15a6>
    2332:	cc 0c       	add	r12, r12
    2334:	dd 1c       	adc	r13, r13
    2336:	0a 94       	dec	r0
    2338:	e2 f7       	brpl	.-8      	; 0x2332 <main+0x15a2>
    233a:	2c 2d       	mov	r18, r12
    233c:	20 95       	com	r18
    233e:	23 23       	and	r18, r19
    2340:	fa 01       	movw	r30, r20
    2342:	20 83       	st	Z, r18
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    2344:	ed 91       	ld	r30, X+
    2346:	e1 11       	cpse	r30, r1
    2348:	e0 cf       	rjmp	.-64     	; 0x230a <main+0x157a>
    234a:	d6 2c       	mov	r13, r6
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    234c:	5d 98       	cbi	0x0b, 5	; 11
    234e:	24 e0       	ldi	r18, 0x04	; 4
    2350:	30 e0       	ldi	r19, 0x00	; 0
    2352:	5a 98       	cbi	0x0b, 2	; 11
    2354:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2356:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2358:	5b 98       	cbi	0x0b, 3	; 11
    235a:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    235c:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    235e:	5b 98       	cbi	0x0b, 3	; 11
    2360:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2362:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2364:	5b 98       	cbi	0x0b, 3	; 11
    2366:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2368:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    236a:	5b 98       	cbi	0x0b, 3	; 11
    236c:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    236e:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2370:	5b 98       	cbi	0x0b, 3	; 11
    2372:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2374:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2376:	5b 98       	cbi	0x0b, 3	; 11
    2378:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    237a:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    237c:	5b 98       	cbi	0x0b, 3	; 11
    237e:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2380:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2382:	5b 98       	cbi	0x0b, 3	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2384:	5a 9a       	sbi	0x0b, 2	; 11
    2386:	21 50       	subi	r18, 0x01	; 1
    2388:	31 09       	sbc	r19, r1
/************************************************************************/
static inline void Clear(){
	int x, y = 0;
	pinsMultiWrite(plex_pins, LOW);
	pinWrite(end_pin, LOW);
	for(x = 0; x < 4; x++) {
    238a:	19 f7       	brne	.-58     	; 0x2352 <main+0x15c2>
    238c:	01 96       	adiw	r24, 0x01	; 1
static inline void DisplayBuffer(const uint8_t *p)
{
	uint8_t byte, index, bit = 0;
	uint8_t pos = 24;
	//output byte
	for(byte=0; byte<7; byte++){
    238e:	87 30       	cpi	r24, 0x07	; 7
    2390:	91 05       	cpc	r25, r1
    2392:	09 f0       	breq	.+2      	; 0x2396 <main+0x1606>
    2394:	fa ce       	rjmp	.-524    	; 0x218a <main+0x13fa>
			pinWrite(latch_pin, HIGH);
		}
		MultiPlex(&byte);
		Clear();
	}
	delayms = 1;
    2396:	90 92 01 01 	sts	0x0101, r9	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    239a:	80 92 00 01 	sts	0x0100, r8	; 0x800100 <__DATA_REGION_ORIGIN__>
    239e:	da 94       	dec	r13
	}
}*/
static inline void HoldDisplayBuffer(const uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
    23a0:	d1 10       	cpse	r13, r1
    23a2:	ed ce       	rjmp	.-550    	; 0x217e <main+0x13ee>
    23a4:	d8 01       	movw	r26, r16
    23a6:	e7 2d       	mov	r30, r7
    23a8:	1d 92       	st	X+, r1
    23aa:	ea 95       	dec	r30
    23ac:	e9 f7       	brne	.-6      	; 0x23a8 <main+0x1618>
    23ae:	20 e0       	ldi	r18, 0x00	; 0
    23b0:	83 e4       	ldi	r24, 0x43	; 67
/* returns the index of the first byte of the requested character       */
/************************************************************************/
uint8_t CharStart(const char *p)
{
	/*if(*p == ' ') return 0;
	else*/ return (uint8_t) (( *p - ' '));
    23b2:	80 52       	subi	r24, 0x20	; 32
	unsigned int index = 0;
	uint8_t len = 0;
	uint8_t x = 0;
	ClearStringBuffer();
	while(*ch){
		index = CharStart(ch++) * 5;
    23b4:	f5 e0       	ldi	r31, 0x05	; 5
    23b6:	8f 9f       	mul	r24, r31
    23b8:	c0 01       	movw	r24, r0
    23ba:	11 24       	eor	r1, r1
		for(len = 0; len < 5; len++){
			stringbuffer[x] = (uint8_t)(pgm_read_byte((font_5x7 + index)));
    23bc:	fc 01       	movw	r30, r24
    23be:	e8 59       	subi	r30, 0x98	; 152
    23c0:	ff 4f       	sbci	r31, 0xFF	; 255
    23c2:	34 91       	lpm	r19, Z
    23c4:	e2 2f       	mov	r30, r18
    23c6:	f0 e0       	ldi	r31, 0x00	; 0
    23c8:	ef 5c       	subi	r30, 0xCF	; 207
    23ca:	fd 4f       	sbci	r31, 0xFD	; 253
    23cc:	30 83       	st	Z, r19
    23ce:	fc 01       	movw	r30, r24
    23d0:	e7 59       	subi	r30, 0x97	; 151
    23d2:	ff 4f       	sbci	r31, 0xFF	; 255
    23d4:	34 91       	lpm	r19, Z
    23d6:	e1 e0       	ldi	r30, 0x01	; 1
    23d8:	e2 0f       	add	r30, r18
    23da:	f0 e0       	ldi	r31, 0x00	; 0
    23dc:	ef 5c       	subi	r30, 0xCF	; 207
    23de:	fd 4f       	sbci	r31, 0xFD	; 253
    23e0:	30 83       	st	Z, r19
    23e2:	fc 01       	movw	r30, r24
    23e4:	e6 59       	subi	r30, 0x96	; 150
    23e6:	ff 4f       	sbci	r31, 0xFF	; 255
    23e8:	34 91       	lpm	r19, Z
    23ea:	e2 e0       	ldi	r30, 0x02	; 2
    23ec:	e2 0f       	add	r30, r18
    23ee:	f0 e0       	ldi	r31, 0x00	; 0
    23f0:	ef 5c       	subi	r30, 0xCF	; 207
    23f2:	fd 4f       	sbci	r31, 0xFD	; 253
    23f4:	30 83       	st	Z, r19
    23f6:	fc 01       	movw	r30, r24
    23f8:	e5 59       	subi	r30, 0x95	; 149
    23fa:	ff 4f       	sbci	r31, 0xFF	; 255
    23fc:	34 91       	lpm	r19, Z
    23fe:	e3 e0       	ldi	r30, 0x03	; 3
    2400:	e2 0f       	add	r30, r18
    2402:	f0 e0       	ldi	r31, 0x00	; 0
    2404:	ef 5c       	subi	r30, 0xCF	; 207
    2406:	fd 4f       	sbci	r31, 0xFD	; 253
    2408:	30 83       	st	Z, r19
    240a:	fc 01       	movw	r30, r24
    240c:	e4 59       	subi	r30, 0x94	; 148
    240e:	ff 4f       	sbci	r31, 0xFF	; 255
    2410:	84 91       	lpm	r24, Z
    2412:	e4 e0       	ldi	r30, 0x04	; 4
    2414:	e2 0f       	add	r30, r18
    2416:	f0 e0       	ldi	r31, 0x00	; 0
    2418:	ef 5c       	subi	r30, 0xCF	; 207
    241a:	fd 4f       	sbci	r31, 0xFD	; 253
    241c:	80 83       	st	Z, r24
			index++; x++;
		}
		stringbuffer[x] = 0;
    241e:	e5 e0       	ldi	r30, 0x05	; 5
    2420:	e2 0f       	add	r30, r18
    2422:	f0 e0       	ldi	r31, 0x00	; 0
    2424:	ef 5c       	subi	r30, 0xCF	; 207
    2426:	fd 4f       	sbci	r31, 0xFD	; 253
    2428:	10 82       	st	Z, r1
		x++;
    242a:	2a 5f       	subi	r18, 0xFA	; 250
{
	unsigned int index = 0;
	uint8_t len = 0;
	uint8_t x = 0;
	ClearStringBuffer();
	while(*ch){
    242c:	d2 01       	movw	r26, r4
    242e:	8d 91       	ld	r24, X+
    2430:	2d 01       	movw	r4, r26
    2432:	81 11       	cpse	r24, r1
    2434:	be cf       	rjmp	.-132    	; 0x23b2 <main+0x1622>
    2436:	c1 2c       	mov	r12, r1
    2438:	d1 2c       	mov	r13, r1
    243a:	2c 2d       	mov	r18, r12
    243c:	a1 e3       	ldi	r26, 0x31	; 49
    243e:	b2 e0       	ldi	r27, 0x02	; 2
		for(index = 0; index < 25; index++)
		{
			if(!dir)
			*(bf + index) = (*((p+index)) >> (step));
			else
			*(bf + index) = (*((p+index)) << (step));
    2440:	cd 01       	movw	r24, r26
    2442:	81 53       	subi	r24, 0x31	; 49
    2444:	92 40       	sbci	r25, 0x02	; 2
    2446:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <bf>
    244a:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <bf+0x1>
    244e:	e8 0f       	add	r30, r24
    2450:	f9 1f       	adc	r31, r25
    2452:	8d 91       	ld	r24, X+
    2454:	02 2e       	mov	r0, r18
    2456:	01 c0       	rjmp	.+2      	; 0x245a <main+0x16ca>
    2458:	88 0f       	add	r24, r24
    245a:	0a 94       	dec	r0
    245c:	ea f7       	brpl	.-6      	; 0x2458 <main+0x16c8>
    245e:	80 83       	st	Z, r24
{
	//uint8_t *bf = buffer;
	uint8_t index, step = 0;
	for(step = 0; step < 8; step++)
	{
		for(index = 0; index < 25; index++)
    2460:	ea e4       	ldi	r30, 0x4A	; 74
    2462:	f2 e0       	ldi	r31, 0x02	; 2
    2464:	ea 17       	cp	r30, r26
    2466:	fb 07       	cpc	r31, r27
    2468:	59 f7       	brne	.-42     	; 0x2440 <main+0x16b0>
			if(!dir)
			*(bf + index) = (*((p+index)) >> (step));
			else
			*(bf + index) = (*((p+index)) << (step));
		}
		HoldDisplayBuffer(bf, time);
    246a:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <bf>
    246e:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <bf+0x1>
    2472:	2a e0       	ldi	r18, 0x0A	; 10
    2474:	a2 2e       	mov	r10, r18
    2476:	1a 83       	std	Y+2, r17	; 0x02
    2478:	09 83       	std	Y+1, r16	; 0x01
    247a:	1a 2d       	mov	r17, r10
	}
}*/
static inline void HoldDisplayBuffer(const uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
    247c:	94 e0       	ldi	r25, 0x04	; 4
    247e:	a9 2e       	mov	r10, r25
    2480:	91 e0       	ldi	r25, 0x01	; 1
    2482:	b9 2e       	mov	r11, r25
    2484:	20 e0       	ldi	r18, 0x00	; 0
    2486:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t byte, index, bit = 0;
	uint8_t pos = 24;
	//output byte
	for(byte=0; byte<7; byte++){
		pos = 24;
		pinWrite(end_pin,((*(p+pos)) & (1 << byte)));
    2488:	81 e0       	ldi	r24, 0x01	; 1
    248a:	90 e0       	ldi	r25, 0x00	; 0
    248c:	02 2e       	mov	r0, r18
    248e:	01 c0       	rjmp	.+2      	; 0x2492 <main+0x1702>
    2490:	88 0f       	add	r24, r24
    2492:	0a 94       	dec	r0
    2494:	ea f7       	brpl	.-6      	; 0x2490 <main+0x1700>
    2496:	98 2f       	mov	r25, r24
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    2498:	58 96       	adiw	r26, 0x18	; 24
    249a:	4c 91       	ld	r20, X
    249c:	58 97       	sbiw	r26, 0x18	; 24
    249e:	84 23       	and	r24, r20
    24a0:	11 f0       	breq	.+4      	; 0x24a6 <main+0x1716>
    24a2:	0c 94 68 1e 	jmp	0x3cd0	; 0x3cd0 <main+0x2f40>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    24a6:	5d 98       	cbi	0x0b, 5	; 11
	}
}*/
static inline void HoldDisplayBuffer(const uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
    24a8:	87 e1       	ldi	r24, 0x17	; 23
    24aa:	5a 98       	cbi	0x0b, 2	; 11
		pinWrite(end_pin,((*(p+pos)) & (1 << byte)));
		pos--;
		for(index=0; index<3; index++){
			pinWrite(latch_pin, LOW);
			for(bit = 0; bit < 8 ; bit++){
				pinWrite(data_pin,((*(p+pos)) & (1 << byte)));
    24ac:	fd 01       	movw	r30, r26
    24ae:	e8 0f       	add	r30, r24
    24b0:	f1 1d       	adc	r31, r1
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    24b2:	40 81       	ld	r20, Z
    24b4:	49 23       	and	r20, r25
    24b6:	11 f0       	breq	.+4      	; 0x24bc <main+0x172c>
    24b8:	0c 94 65 1e 	jmp	0x3cca	; 0x3cca <main+0x2f3a>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    24bc:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    24be:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    24c0:	5b 98       	cbi	0x0b, 3	; 11
    24c2:	4f ef       	ldi	r20, 0xFF	; 255
    24c4:	48 0f       	add	r20, r24
    24c6:	fd 01       	movw	r30, r26
    24c8:	e4 0f       	add	r30, r20
    24ca:	f1 1d       	adc	r31, r1
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    24cc:	40 81       	ld	r20, Z
    24ce:	49 23       	and	r20, r25
    24d0:	11 f0       	breq	.+4      	; 0x24d6 <main+0x1746>
    24d2:	0c 94 62 1e 	jmp	0x3cc4	; 0x3cc4 <main+0x2f34>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    24d6:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    24d8:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    24da:	5b 98       	cbi	0x0b, 3	; 11
    24dc:	4e ef       	ldi	r20, 0xFE	; 254
    24de:	48 0f       	add	r20, r24
    24e0:	fd 01       	movw	r30, r26
    24e2:	e4 0f       	add	r30, r20
    24e4:	f1 1d       	adc	r31, r1
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    24e6:	40 81       	ld	r20, Z
    24e8:	49 23       	and	r20, r25
    24ea:	11 f0       	breq	.+4      	; 0x24f0 <main+0x1760>
    24ec:	0c 94 5f 1e 	jmp	0x3cbe	; 0x3cbe <main+0x2f2e>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    24f0:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    24f2:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    24f4:	5b 98       	cbi	0x0b, 3	; 11
    24f6:	4d ef       	ldi	r20, 0xFD	; 253
    24f8:	48 0f       	add	r20, r24
    24fa:	fd 01       	movw	r30, r26
    24fc:	e4 0f       	add	r30, r20
    24fe:	f1 1d       	adc	r31, r1
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    2500:	40 81       	ld	r20, Z
    2502:	49 23       	and	r20, r25
    2504:	11 f0       	breq	.+4      	; 0x250a <main+0x177a>
    2506:	0c 94 5c 1e 	jmp	0x3cb8	; 0x3cb8 <main+0x2f28>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    250a:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    250c:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    250e:	5b 98       	cbi	0x0b, 3	; 11
    2510:	4c ef       	ldi	r20, 0xFC	; 252
    2512:	48 0f       	add	r20, r24
    2514:	fd 01       	movw	r30, r26
    2516:	e4 0f       	add	r30, r20
    2518:	f1 1d       	adc	r31, r1
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    251a:	40 81       	ld	r20, Z
    251c:	49 23       	and	r20, r25
    251e:	11 f0       	breq	.+4      	; 0x2524 <main+0x1794>
    2520:	0c 94 59 1e 	jmp	0x3cb2	; 0x3cb2 <main+0x2f22>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2524:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2526:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2528:	5b 98       	cbi	0x0b, 3	; 11
    252a:	4b ef       	ldi	r20, 0xFB	; 251
    252c:	48 0f       	add	r20, r24
    252e:	fd 01       	movw	r30, r26
    2530:	e4 0f       	add	r30, r20
    2532:	f1 1d       	adc	r31, r1
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    2534:	40 81       	ld	r20, Z
    2536:	49 23       	and	r20, r25
    2538:	11 f0       	breq	.+4      	; 0x253e <main+0x17ae>
    253a:	0c 94 56 1e 	jmp	0x3cac	; 0x3cac <main+0x2f1c>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    253e:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2540:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2542:	5b 98       	cbi	0x0b, 3	; 11
    2544:	4a ef       	ldi	r20, 0xFA	; 250
    2546:	48 0f       	add	r20, r24
    2548:	fd 01       	movw	r30, r26
    254a:	e4 0f       	add	r30, r20
    254c:	f1 1d       	adc	r31, r1
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    254e:	40 81       	ld	r20, Z
    2550:	49 23       	and	r20, r25
    2552:	11 f0       	breq	.+4      	; 0x2558 <main+0x17c8>
    2554:	0c 94 53 1e 	jmp	0x3ca6	; 0x3ca6 <main+0x2f16>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2558:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    255a:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    255c:	5b 98       	cbi	0x0b, 3	; 11
    255e:	49 ef       	ldi	r20, 0xF9	; 249
    2560:	48 0f       	add	r20, r24
    2562:	fd 01       	movw	r30, r26
    2564:	e4 0f       	add	r30, r20
    2566:	f1 1d       	adc	r31, r1
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    2568:	40 81       	ld	r20, Z
    256a:	49 23       	and	r20, r25
    256c:	11 f0       	breq	.+4      	; 0x2572 <main+0x17e2>
    256e:	0c 94 50 1e 	jmp	0x3ca0	; 0x3ca0 <main+0x2f10>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2572:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2574:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2576:	5b 98       	cbi	0x0b, 3	; 11
				//toggle the clock pin
				pinWrite(clock_pin, HIGH);
				pinWrite(clock_pin, LOW);
				pos--;
    2578:	88 50       	subi	r24, 0x08	; 8
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    257a:	5a 9a       	sbi	0x0b, 2	; 11
	//output byte
	for(byte=0; byte<7; byte++){
		pos = 24;
		pinWrite(end_pin,((*(p+pos)) & (1 << byte)));
		pos--;
		for(index=0; index<3; index++){
    257c:	8f 3f       	cpi	r24, 0xFF	; 255
    257e:	09 f0       	breq	.+2      	; 0x2582 <main+0x17f2>
    2580:	94 cf       	rjmp	.-216    	; 0x24aa <main+0x171a>
    2582:	84 e0       	ldi	r24, 0x04	; 4
    2584:	91 e0       	ldi	r25, 0x01	; 1
    2586:	2d 01       	movw	r4, r26
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    2588:	dc 01       	movw	r26, r24
    258a:	ed 91       	ld	r30, X+
    258c:	cd 01       	movw	r24, r26
    258e:	ee 23       	and	r30, r30
    2590:	f1 f0       	breq	.+60     	; 0x25ce <main+0x183e>
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    2592:	ec 3c       	cpi	r30, 0xCC	; 204
    2594:	c8 f7       	brcc	.-14     	; 0x2588 <main+0x17f8>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2596:	07 e0       	ldi	r16, 0x07	; 7
    2598:	e0 9f       	mul	r30, r16
    259a:	f0 01       	movw	r30, r0
    259c:	11 24       	eor	r1, r1
    259e:	e4 5b       	subi	r30, 0xB4	; 180
    25a0:	fe 4f       	sbci	r31, 0xFE	; 254
    25a2:	62 81       	ldd	r22, Z+2	; 0x02
    25a4:	73 81       	ldd	r23, Z+3	; 0x03
    25a6:	db 01       	movw	r26, r22
    25a8:	5c 91       	ld	r21, X
    25aa:	a1 e0       	ldi	r26, 0x01	; 1
    25ac:	b0 e0       	ldi	r27, 0x00	; 0
    25ae:	06 80       	ldd	r0, Z+6	; 0x06
    25b0:	02 c0       	rjmp	.+4      	; 0x25b6 <main+0x1826>
    25b2:	aa 0f       	add	r26, r26
    25b4:	bb 1f       	adc	r27, r27
    25b6:	0a 94       	dec	r0
    25b8:	e2 f7       	brpl	.-8      	; 0x25b2 <main+0x1822>
    25ba:	4a 2f       	mov	r20, r26
    25bc:	40 95       	com	r20
    25be:	45 23       	and	r20, r21
    25c0:	fb 01       	movw	r30, r22
    25c2:	40 83       	st	Z, r20
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    25c4:	dc 01       	movw	r26, r24
    25c6:	ed 91       	ld	r30, X+
    25c8:	cd 01       	movw	r24, r26
    25ca:	e1 11       	cpse	r30, r1
    25cc:	e2 cf       	rjmp	.-60     	; 0x2592 <main+0x1802>
    25ce:	d2 01       	movw	r26, r4
/* Multiplexing method                                                  */
/************************************************************************/
static inline void MultiPlex(uint8_t *pin)
{
	pinsMultiWrite(plex_pins, LOW);
	pinWrite(plex_pins[*pin], HIGH);
    25d0:	f5 01       	movw	r30, r10
    25d2:	91 91       	ld	r25, Z+
    25d4:	5f 01       	movw	r10, r30
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    25d6:	9c 3c       	cpi	r25, 0xCC	; 204
    25d8:	10 f4       	brcc	.+4      	; 0x25de <main+0x184e>
    25da:	0c 94 6b 1e 	jmp	0x3cd6	; 0x3cd6 <main+0x2f46>
	delay(delayms);
    25de:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    25e2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
/*  delay                                                               */
/************************************************************************/
int delayms = 1;
static inline void delay(int dl)
{
	while(dl >= 0)
    25e6:	97 fd       	sbrc	r25, 7
    25e8:	08 c0       	rjmp	.+16     	; 0x25fa <main+0x186a>
    25ea:	ef e9       	ldi	r30, 0x9F	; 159
    25ec:	ff e0       	ldi	r31, 0x0F	; 15
    25ee:	31 97       	sbiw	r30, 0x01	; 1
    25f0:	f1 f7       	brne	.-4      	; 0x25ee <main+0x185e>
    25f2:	00 c0       	rjmp	.+0      	; 0x25f4 <main+0x1864>
    25f4:	00 00       	nop
	{
		_delay_ms(1);
		dl--;
    25f6:	01 97       	sbiw	r24, 0x01	; 1
    25f8:	c0 f7       	brcc	.-16     	; 0x25ea <main+0x185a>
	//output byte
	for(byte=0; byte<7; byte++){
		pos = 24;
		pinWrite(end_pin,((*(p+pos)) & (1 << byte)));
		pos--;
		for(index=0; index<3; index++){
    25fa:	84 e0       	ldi	r24, 0x04	; 4
    25fc:	91 e0       	ldi	r25, 0x01	; 1
    25fe:	2d 01       	movw	r4, r26
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    2600:	dc 01       	movw	r26, r24
    2602:	ed 91       	ld	r30, X+
    2604:	cd 01       	movw	r24, r26
    2606:	ee 23       	and	r30, r30
    2608:	f1 f0       	breq	.+60     	; 0x2646 <main+0x18b6>
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    260a:	ec 3c       	cpi	r30, 0xCC	; 204
    260c:	c8 f7       	brcc	.-14     	; 0x2600 <main+0x1870>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    260e:	07 e0       	ldi	r16, 0x07	; 7
    2610:	e0 9f       	mul	r30, r16
    2612:	f0 01       	movw	r30, r0
    2614:	11 24       	eor	r1, r1
    2616:	e4 5b       	subi	r30, 0xB4	; 180
    2618:	fe 4f       	sbci	r31, 0xFE	; 254
    261a:	62 81       	ldd	r22, Z+2	; 0x02
    261c:	73 81       	ldd	r23, Z+3	; 0x03
    261e:	db 01       	movw	r26, r22
    2620:	5c 91       	ld	r21, X
    2622:	a1 e0       	ldi	r26, 0x01	; 1
    2624:	b0 e0       	ldi	r27, 0x00	; 0
    2626:	06 80       	ldd	r0, Z+6	; 0x06
    2628:	02 c0       	rjmp	.+4      	; 0x262e <main+0x189e>
    262a:	aa 0f       	add	r26, r26
    262c:	bb 1f       	adc	r27, r27
    262e:	0a 94       	dec	r0
    2630:	e2 f7       	brpl	.-8      	; 0x262a <main+0x189a>
    2632:	4a 2f       	mov	r20, r26
    2634:	40 95       	com	r20
    2636:	45 23       	and	r20, r21
    2638:	fb 01       	movw	r30, r22
    263a:	40 83       	st	Z, r20
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    263c:	dc 01       	movw	r26, r24
    263e:	ed 91       	ld	r30, X+
    2640:	cd 01       	movw	r24, r26
    2642:	e1 11       	cpse	r30, r1
    2644:	e2 cf       	rjmp	.-60     	; 0x260a <main+0x187a>
    2646:	d2 01       	movw	r26, r4
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2648:	5d 98       	cbi	0x0b, 5	; 11
    264a:	84 e0       	ldi	r24, 0x04	; 4
    264c:	90 e0       	ldi	r25, 0x00	; 0
    264e:	5a 98       	cbi	0x0b, 2	; 11
    2650:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2652:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2654:	5b 98       	cbi	0x0b, 3	; 11
    2656:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2658:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    265a:	5b 98       	cbi	0x0b, 3	; 11
    265c:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    265e:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2660:	5b 98       	cbi	0x0b, 3	; 11
    2662:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2664:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2666:	5b 98       	cbi	0x0b, 3	; 11
    2668:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    266a:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    266c:	5b 98       	cbi	0x0b, 3	; 11
    266e:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2670:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2672:	5b 98       	cbi	0x0b, 3	; 11
    2674:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2676:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2678:	5b 98       	cbi	0x0b, 3	; 11
    267a:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    267c:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    267e:	5b 98       	cbi	0x0b, 3	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2680:	5a 9a       	sbi	0x0b, 2	; 11
    2682:	01 97       	sbiw	r24, 0x01	; 1
/************************************************************************/
static inline void Clear(){
	int x, y = 0;
	pinsMultiWrite(plex_pins, LOW);
	pinWrite(end_pin, LOW);
	for(x = 0; x < 4; x++) {
    2684:	21 f7       	brne	.-56     	; 0x264e <main+0x18be>
    2686:	2f 5f       	subi	r18, 0xFF	; 255
    2688:	3f 4f       	sbci	r19, 0xFF	; 255
static inline void DisplayBuffer(const uint8_t *p)
{
	uint8_t byte, index, bit = 0;
	uint8_t pos = 24;
	//output byte
	for(byte=0; byte<7; byte++){
    268a:	27 30       	cpi	r18, 0x07	; 7
    268c:	31 05       	cpc	r19, r1
    268e:	09 f0       	breq	.+2      	; 0x2692 <main+0x1902>
    2690:	fb ce       	rjmp	.-522    	; 0x2488 <main+0x16f8>
			pinWrite(latch_pin, HIGH);
		}
		MultiPlex(&byte);
		Clear();
	}
	delayms = 1;
    2692:	f0 92 01 01 	sts	0x0101, r15	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    2696:	e0 92 00 01 	sts	0x0100, r14	; 0x800100 <__DATA_REGION_ORIGIN__>
    269a:	11 50       	subi	r17, 0x01	; 1
	}
}*/
static inline void HoldDisplayBuffer(const uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
    269c:	09 f0       	breq	.+2      	; 0x26a0 <main+0x1910>
    269e:	ee ce       	rjmp	.-548    	; 0x247c <main+0x16ec>
    26a0:	09 81       	ldd	r16, Y+1	; 0x01
    26a2:	1a 81       	ldd	r17, Y+2	; 0x02
    26a4:	bf ef       	ldi	r27, 0xFF	; 255
    26a6:	cb 1a       	sub	r12, r27
    26a8:	db 0a       	sbc	r13, r27
/************************************************************************/
void Fall(const uint8_t *p, uint8_t time, uint8_t dir )
{
	//uint8_t *bf = buffer;
	uint8_t index, step = 0;
	for(step = 0; step < 8; step++)
    26aa:	e8 e0       	ldi	r30, 0x08	; 8
    26ac:	ce 16       	cp	r12, r30
    26ae:	d1 04       	cpc	r13, r1
    26b0:	09 f0       	breq	.+2      	; 0x26b4 <main+0x1924>
    26b2:	c3 ce       	rjmp	.-634    	; 0x243a <main+0x16aa>
			else
			*(bf + index) = (*((p+index)) << (step));
		}
		HoldDisplayBuffer(bf, time);
	}
	HoldDisplayBuffer(bf,50);
    26b4:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <bf>
    26b8:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <bf+0x1>
    26bc:	82 e3       	ldi	r24, 0x32	; 50
    26be:	b8 2e       	mov	r11, r24
    26c0:	24 e0       	ldi	r18, 0x04	; 4
    26c2:	31 e0       	ldi	r19, 0x01	; 1
    26c4:	80 e0       	ldi	r24, 0x00	; 0
    26c6:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t byte, index, bit = 0;
	uint8_t pos = 24;
	//output byte
	for(byte=0; byte<7; byte++){
		pos = 24;
		pinWrite(end_pin,((*(p+pos)) & (1 << byte)));
    26c8:	41 e0       	ldi	r20, 0x01	; 1
    26ca:	50 e0       	ldi	r21, 0x00	; 0
    26cc:	08 2e       	mov	r0, r24
    26ce:	01 c0       	rjmp	.+2      	; 0x26d2 <main+0x1942>
    26d0:	44 0f       	add	r20, r20
    26d2:	0a 94       	dec	r0
    26d4:	ea f7       	brpl	.-6      	; 0x26d0 <main+0x1940>
    26d6:	54 2f       	mov	r21, r20
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    26d8:	58 96       	adiw	r26, 0x18	; 24
    26da:	6c 91       	ld	r22, X
    26dc:	58 97       	sbiw	r26, 0x18	; 24
    26de:	46 23       	and	r20, r22
    26e0:	11 f0       	breq	.+4      	; 0x26e6 <main+0x1956>
    26e2:	0c 94 9e 1e 	jmp	0x3d3c	; 0x3d3c <main+0x2fac>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    26e6:	5d 98       	cbi	0x0b, 5	; 11
    26e8:	47 e1       	ldi	r20, 0x17	; 23
    26ea:	5a 98       	cbi	0x0b, 2	; 11
		pos--;
		for(index=0; index<3; index++){
			pinWrite(latch_pin, LOW);
			for(bit = 0; bit < 8 ; bit++){
				pinWrite(data_pin,((*(p+pos)) & (1 << byte)));
    26ec:	fd 01       	movw	r30, r26
    26ee:	e4 0f       	add	r30, r20
    26f0:	f1 1d       	adc	r31, r1
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    26f2:	60 81       	ld	r22, Z
    26f4:	65 23       	and	r22, r21
    26f6:	11 f0       	breq	.+4      	; 0x26fc <main+0x196c>
    26f8:	0c 94 9b 1e 	jmp	0x3d36	; 0x3d36 <main+0x2fa6>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    26fc:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    26fe:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2700:	5b 98       	cbi	0x0b, 3	; 11
    2702:	6f ef       	ldi	r22, 0xFF	; 255
    2704:	64 0f       	add	r22, r20
    2706:	fd 01       	movw	r30, r26
    2708:	e6 0f       	add	r30, r22
    270a:	f1 1d       	adc	r31, r1
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    270c:	60 81       	ld	r22, Z
    270e:	65 23       	and	r22, r21
    2710:	11 f0       	breq	.+4      	; 0x2716 <main+0x1986>
    2712:	0c 94 98 1e 	jmp	0x3d30	; 0x3d30 <main+0x2fa0>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2716:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2718:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    271a:	5b 98       	cbi	0x0b, 3	; 11
    271c:	6e ef       	ldi	r22, 0xFE	; 254
    271e:	64 0f       	add	r22, r20
    2720:	fd 01       	movw	r30, r26
    2722:	e6 0f       	add	r30, r22
    2724:	f1 1d       	adc	r31, r1
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    2726:	60 81       	ld	r22, Z
    2728:	65 23       	and	r22, r21
    272a:	11 f0       	breq	.+4      	; 0x2730 <main+0x19a0>
    272c:	0c 94 95 1e 	jmp	0x3d2a	; 0x3d2a <main+0x2f9a>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2730:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2732:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2734:	5b 98       	cbi	0x0b, 3	; 11
    2736:	6d ef       	ldi	r22, 0xFD	; 253
    2738:	64 0f       	add	r22, r20
    273a:	fd 01       	movw	r30, r26
    273c:	e6 0f       	add	r30, r22
    273e:	f1 1d       	adc	r31, r1
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    2740:	60 81       	ld	r22, Z
    2742:	65 23       	and	r22, r21
    2744:	11 f0       	breq	.+4      	; 0x274a <main+0x19ba>
    2746:	0c 94 92 1e 	jmp	0x3d24	; 0x3d24 <main+0x2f94>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    274a:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    274c:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    274e:	5b 98       	cbi	0x0b, 3	; 11
    2750:	6c ef       	ldi	r22, 0xFC	; 252
    2752:	64 0f       	add	r22, r20
    2754:	fd 01       	movw	r30, r26
    2756:	e6 0f       	add	r30, r22
    2758:	f1 1d       	adc	r31, r1
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    275a:	60 81       	ld	r22, Z
    275c:	65 23       	and	r22, r21
    275e:	11 f0       	breq	.+4      	; 0x2764 <main+0x19d4>
    2760:	0c 94 8f 1e 	jmp	0x3d1e	; 0x3d1e <main+0x2f8e>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2764:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2766:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2768:	5b 98       	cbi	0x0b, 3	; 11
    276a:	6b ef       	ldi	r22, 0xFB	; 251
    276c:	64 0f       	add	r22, r20
    276e:	fd 01       	movw	r30, r26
    2770:	e6 0f       	add	r30, r22
    2772:	f1 1d       	adc	r31, r1
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    2774:	60 81       	ld	r22, Z
    2776:	65 23       	and	r22, r21
    2778:	11 f0       	breq	.+4      	; 0x277e <main+0x19ee>
    277a:	0c 94 8c 1e 	jmp	0x3d18	; 0x3d18 <main+0x2f88>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    277e:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2780:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2782:	5b 98       	cbi	0x0b, 3	; 11
    2784:	6a ef       	ldi	r22, 0xFA	; 250
    2786:	64 0f       	add	r22, r20
    2788:	fd 01       	movw	r30, r26
    278a:	e6 0f       	add	r30, r22
    278c:	f1 1d       	adc	r31, r1
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    278e:	60 81       	ld	r22, Z
    2790:	65 23       	and	r22, r21
    2792:	11 f0       	breq	.+4      	; 0x2798 <main+0x1a08>
    2794:	0c 94 89 1e 	jmp	0x3d12	; 0x3d12 <main+0x2f82>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2798:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    279a:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    279c:	5b 98       	cbi	0x0b, 3	; 11
    279e:	69 ef       	ldi	r22, 0xF9	; 249
    27a0:	64 0f       	add	r22, r20
    27a2:	fd 01       	movw	r30, r26
    27a4:	e6 0f       	add	r30, r22
    27a6:	f1 1d       	adc	r31, r1
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    27a8:	60 81       	ld	r22, Z
    27aa:	65 23       	and	r22, r21
    27ac:	11 f0       	breq	.+4      	; 0x27b2 <main+0x1a22>
    27ae:	0c 94 86 1e 	jmp	0x3d0c	; 0x3d0c <main+0x2f7c>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    27b2:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    27b4:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    27b6:	5b 98       	cbi	0x0b, 3	; 11
				//toggle the clock pin
				pinWrite(clock_pin, HIGH);
				pinWrite(clock_pin, LOW);
				pos--;
    27b8:	48 50       	subi	r20, 0x08	; 8
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    27ba:	5a 9a       	sbi	0x0b, 2	; 11
	//output byte
	for(byte=0; byte<7; byte++){
		pos = 24;
		pinWrite(end_pin,((*(p+pos)) & (1 << byte)));
		pos--;
		for(index=0; index<3; index++){
    27bc:	4f 3f       	cpi	r20, 0xFF	; 255
    27be:	09 f0       	breq	.+2      	; 0x27c2 <main+0x1a32>
    27c0:	94 cf       	rjmp	.-216    	; 0x26ea <main+0x195a>
    27c2:	44 e0       	ldi	r20, 0x04	; 4
    27c4:	51 e0       	ldi	r21, 0x01	; 1
    27c6:	2d 01       	movw	r4, r26
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    27c8:	da 01       	movw	r26, r20
    27ca:	ed 91       	ld	r30, X+
    27cc:	ad 01       	movw	r20, r26
    27ce:	ee 23       	and	r30, r30
    27d0:	f1 f0       	breq	.+60     	; 0x280e <main+0x1a7e>
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    27d2:	ec 3c       	cpi	r30, 0xCC	; 204
    27d4:	c8 f7       	brcc	.-14     	; 0x27c8 <main+0x1a38>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    27d6:	67 e0       	ldi	r22, 0x07	; 7
    27d8:	e6 9f       	mul	r30, r22
    27da:	f0 01       	movw	r30, r0
    27dc:	11 24       	eor	r1, r1
    27de:	e4 5b       	subi	r30, 0xB4	; 180
    27e0:	fe 4f       	sbci	r31, 0xFE	; 254
    27e2:	c2 80       	ldd	r12, Z+2	; 0x02
    27e4:	d3 80       	ldd	r13, Z+3	; 0x03
    27e6:	d6 01       	movw	r26, r12
    27e8:	7c 91       	ld	r23, X
    27ea:	a1 e0       	ldi	r26, 0x01	; 1
    27ec:	b0 e0       	ldi	r27, 0x00	; 0
    27ee:	06 80       	ldd	r0, Z+6	; 0x06
    27f0:	02 c0       	rjmp	.+4      	; 0x27f6 <main+0x1a66>
    27f2:	aa 0f       	add	r26, r26
    27f4:	bb 1f       	adc	r27, r27
    27f6:	0a 94       	dec	r0
    27f8:	e2 f7       	brpl	.-8      	; 0x27f2 <main+0x1a62>
    27fa:	6a 2f       	mov	r22, r26
    27fc:	60 95       	com	r22
    27fe:	67 23       	and	r22, r23
    2800:	f6 01       	movw	r30, r12
    2802:	60 83       	st	Z, r22
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    2804:	da 01       	movw	r26, r20
    2806:	ed 91       	ld	r30, X+
    2808:	ad 01       	movw	r20, r26
    280a:	e1 11       	cpse	r30, r1
    280c:	e2 cf       	rjmp	.-60     	; 0x27d2 <main+0x1a42>
    280e:	d2 01       	movw	r26, r4
/* Multiplexing method                                                  */
/************************************************************************/
static inline void MultiPlex(uint8_t *pin)
{
	pinsMultiWrite(plex_pins, LOW);
	pinWrite(plex_pins[*pin], HIGH);
    2810:	f9 01       	movw	r30, r18
    2812:	51 91       	ld	r21, Z+
    2814:	9f 01       	movw	r18, r30
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    2816:	5c 3c       	cpi	r21, 0xCC	; 204
    2818:	10 f4       	brcc	.+4      	; 0x281e <main+0x1a8e>
    281a:	0c 94 a1 1e 	jmp	0x3d42	; 0x3d42 <main+0x2fb2>
	delay(delayms);
    281e:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    2822:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
/*  delay                                                               */
/************************************************************************/
int delayms = 1;
static inline void delay(int dl)
{
	while(dl >= 0)
    2826:	57 fd       	sbrc	r21, 7
    2828:	09 c0       	rjmp	.+18     	; 0x283c <main+0x1aac>
    282a:	ef e9       	ldi	r30, 0x9F	; 159
    282c:	ff e0       	ldi	r31, 0x0F	; 15
    282e:	31 97       	sbiw	r30, 0x01	; 1
    2830:	f1 f7       	brne	.-4      	; 0x282e <main+0x1a9e>
    2832:	00 c0       	rjmp	.+0      	; 0x2834 <main+0x1aa4>
    2834:	00 00       	nop
	{
		_delay_ms(1);
		dl--;
    2836:	41 50       	subi	r20, 0x01	; 1
    2838:	51 09       	sbc	r21, r1
    283a:	b8 f7       	brcc	.-18     	; 0x282a <main+0x1a9a>
	//output byte
	for(byte=0; byte<7; byte++){
		pos = 24;
		pinWrite(end_pin,((*(p+pos)) & (1 << byte)));
		pos--;
		for(index=0; index<3; index++){
    283c:	44 e0       	ldi	r20, 0x04	; 4
    283e:	51 e0       	ldi	r21, 0x01	; 1
    2840:	2d 01       	movw	r4, r26
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    2842:	da 01       	movw	r26, r20
    2844:	ed 91       	ld	r30, X+
    2846:	ad 01       	movw	r20, r26
    2848:	ee 23       	and	r30, r30
    284a:	f1 f0       	breq	.+60     	; 0x2888 <main+0x1af8>
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    284c:	ec 3c       	cpi	r30, 0xCC	; 204
    284e:	c8 f7       	brcc	.-14     	; 0x2842 <main+0x1ab2>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2850:	67 e0       	ldi	r22, 0x07	; 7
    2852:	e6 9f       	mul	r30, r22
    2854:	f0 01       	movw	r30, r0
    2856:	11 24       	eor	r1, r1
    2858:	e4 5b       	subi	r30, 0xB4	; 180
    285a:	fe 4f       	sbci	r31, 0xFE	; 254
    285c:	c2 80       	ldd	r12, Z+2	; 0x02
    285e:	d3 80       	ldd	r13, Z+3	; 0x03
    2860:	d6 01       	movw	r26, r12
    2862:	7c 91       	ld	r23, X
    2864:	a1 e0       	ldi	r26, 0x01	; 1
    2866:	b0 e0       	ldi	r27, 0x00	; 0
    2868:	06 80       	ldd	r0, Z+6	; 0x06
    286a:	02 c0       	rjmp	.+4      	; 0x2870 <main+0x1ae0>
    286c:	aa 0f       	add	r26, r26
    286e:	bb 1f       	adc	r27, r27
    2870:	0a 94       	dec	r0
    2872:	e2 f7       	brpl	.-8      	; 0x286c <main+0x1adc>
    2874:	6a 2f       	mov	r22, r26
    2876:	60 95       	com	r22
    2878:	67 23       	and	r22, r23
    287a:	f6 01       	movw	r30, r12
    287c:	60 83       	st	Z, r22
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    287e:	da 01       	movw	r26, r20
    2880:	ed 91       	ld	r30, X+
    2882:	ad 01       	movw	r20, r26
    2884:	e1 11       	cpse	r30, r1
    2886:	e2 cf       	rjmp	.-60     	; 0x284c <main+0x1abc>
    2888:	d2 01       	movw	r26, r4
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    288a:	5d 98       	cbi	0x0b, 5	; 11
    288c:	44 e0       	ldi	r20, 0x04	; 4
    288e:	50 e0       	ldi	r21, 0x00	; 0
    2890:	5a 98       	cbi	0x0b, 2	; 11
    2892:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2894:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2896:	5b 98       	cbi	0x0b, 3	; 11
    2898:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    289a:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    289c:	5b 98       	cbi	0x0b, 3	; 11
    289e:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    28a0:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    28a2:	5b 98       	cbi	0x0b, 3	; 11
    28a4:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    28a6:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    28a8:	5b 98       	cbi	0x0b, 3	; 11
    28aa:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    28ac:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    28ae:	5b 98       	cbi	0x0b, 3	; 11
    28b0:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    28b2:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    28b4:	5b 98       	cbi	0x0b, 3	; 11
    28b6:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    28b8:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    28ba:	5b 98       	cbi	0x0b, 3	; 11
    28bc:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    28be:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    28c0:	5b 98       	cbi	0x0b, 3	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    28c2:	5a 9a       	sbi	0x0b, 2	; 11
    28c4:	41 50       	subi	r20, 0x01	; 1
    28c6:	51 09       	sbc	r21, r1
/************************************************************************/
static inline void Clear(){
	int x, y = 0;
	pinsMultiWrite(plex_pins, LOW);
	pinWrite(end_pin, LOW);
	for(x = 0; x < 4; x++) {
    28c8:	19 f7       	brne	.-58     	; 0x2890 <main+0x1b00>
    28ca:	01 96       	adiw	r24, 0x01	; 1
static inline void DisplayBuffer(const uint8_t *p)
{
	uint8_t byte, index, bit = 0;
	uint8_t pos = 24;
	//output byte
	for(byte=0; byte<7; byte++){
    28cc:	87 30       	cpi	r24, 0x07	; 7
    28ce:	91 05       	cpc	r25, r1
    28d0:	09 f0       	breq	.+2      	; 0x28d4 <main+0x1b44>
    28d2:	fa ce       	rjmp	.-524    	; 0x26c8 <main+0x1938>
			pinWrite(latch_pin, HIGH);
		}
		MultiPlex(&byte);
		Clear();
	}
	delayms = 1;
    28d4:	90 92 01 01 	sts	0x0101, r9	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    28d8:	80 92 00 01 	sts	0x0100, r8	; 0x800100 <__DATA_REGION_ORIGIN__>
    28dc:	ba 94       	dec	r11
	}
}*/
static inline void HoldDisplayBuffer(const uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
    28de:	b1 10       	cpse	r11, r1
    28e0:	ef ce       	rjmp	.-546    	; 0x26c0 <main+0x1930>
    28e2:	f8 01       	movw	r30, r16
    28e4:	47 2c       	mov	r4, r7
    28e6:	11 92       	st	Z+, r1
    28e8:	4a 94       	dec	r4
    28ea:	e9 f7       	brne	.-6      	; 0x28e6 <main+0x1b56>
    28ec:	b2 e1       	ldi	r27, 0x12	; 18
    28ee:	ab 2e       	mov	r10, r27
    28f0:	b1 e0       	ldi	r27, 0x01	; 1
    28f2:	bb 2e       	mov	r11, r27
    28f4:	d5 01       	movw	r26, r10
    28f6:	20 e0       	ldi	r18, 0x00	; 0
    28f8:	8a e4       	ldi	r24, 0x4A	; 74
/* returns the index of the first byte of the requested character       */
/************************************************************************/
uint8_t CharStart(const char *p)
{
	/*if(*p == ' ') return 0;
	else*/ return (uint8_t) (( *p - ' '));
    28fa:	80 52       	subi	r24, 0x20	; 32
	unsigned int index = 0;
	uint8_t len = 0;
	uint8_t x = 0;
	ClearStringBuffer();
	while(*ch){
		index = CharStart(ch++) * 5;
    28fc:	35 e0       	ldi	r19, 0x05	; 5
    28fe:	83 9f       	mul	r24, r19
    2900:	c0 01       	movw	r24, r0
    2902:	11 24       	eor	r1, r1
		for(len = 0; len < 5; len++){
			stringbuffer[x] = (uint8_t)(pgm_read_byte((font_5x7 + index)));
    2904:	fc 01       	movw	r30, r24
    2906:	e8 59       	subi	r30, 0x98	; 152
    2908:	ff 4f       	sbci	r31, 0xFF	; 255
    290a:	34 91       	lpm	r19, Z
    290c:	e2 2f       	mov	r30, r18
    290e:	f0 e0       	ldi	r31, 0x00	; 0
    2910:	ef 5c       	subi	r30, 0xCF	; 207
    2912:	fd 4f       	sbci	r31, 0xFD	; 253
    2914:	30 83       	st	Z, r19
    2916:	fc 01       	movw	r30, r24
    2918:	e7 59       	subi	r30, 0x97	; 151
    291a:	ff 4f       	sbci	r31, 0xFF	; 255
    291c:	34 91       	lpm	r19, Z
    291e:	e1 e0       	ldi	r30, 0x01	; 1
    2920:	e2 0f       	add	r30, r18
    2922:	f0 e0       	ldi	r31, 0x00	; 0
    2924:	ef 5c       	subi	r30, 0xCF	; 207
    2926:	fd 4f       	sbci	r31, 0xFD	; 253
    2928:	30 83       	st	Z, r19
    292a:	fc 01       	movw	r30, r24
    292c:	e6 59       	subi	r30, 0x96	; 150
    292e:	ff 4f       	sbci	r31, 0xFF	; 255
    2930:	34 91       	lpm	r19, Z
    2932:	e2 e0       	ldi	r30, 0x02	; 2
    2934:	e2 0f       	add	r30, r18
    2936:	f0 e0       	ldi	r31, 0x00	; 0
    2938:	ef 5c       	subi	r30, 0xCF	; 207
    293a:	fd 4f       	sbci	r31, 0xFD	; 253
    293c:	30 83       	st	Z, r19
    293e:	fc 01       	movw	r30, r24
    2940:	e5 59       	subi	r30, 0x95	; 149
    2942:	ff 4f       	sbci	r31, 0xFF	; 255
    2944:	34 91       	lpm	r19, Z
    2946:	e3 e0       	ldi	r30, 0x03	; 3
    2948:	e2 0f       	add	r30, r18
    294a:	f0 e0       	ldi	r31, 0x00	; 0
    294c:	ef 5c       	subi	r30, 0xCF	; 207
    294e:	fd 4f       	sbci	r31, 0xFD	; 253
    2950:	30 83       	st	Z, r19
    2952:	fc 01       	movw	r30, r24
    2954:	e4 59       	subi	r30, 0x94	; 148
    2956:	ff 4f       	sbci	r31, 0xFF	; 255
    2958:	84 91       	lpm	r24, Z
    295a:	e4 e0       	ldi	r30, 0x04	; 4
    295c:	e2 0f       	add	r30, r18
    295e:	f0 e0       	ldi	r31, 0x00	; 0
    2960:	ef 5c       	subi	r30, 0xCF	; 207
    2962:	fd 4f       	sbci	r31, 0xFD	; 253
    2964:	80 83       	st	Z, r24
			index++; x++;
		}
		stringbuffer[x] = 0;
    2966:	e5 e0       	ldi	r30, 0x05	; 5
    2968:	e2 0f       	add	r30, r18
    296a:	f0 e0       	ldi	r31, 0x00	; 0
    296c:	ef 5c       	subi	r30, 0xCF	; 207
    296e:	fd 4f       	sbci	r31, 0xFD	; 253
    2970:	10 82       	st	Z, r1
		x++;
    2972:	2a 5f       	subi	r18, 0xFA	; 250
{
	unsigned int index = 0;
	uint8_t len = 0;
	uint8_t x = 0;
	ClearStringBuffer();
	while(*ch){
    2974:	8d 91       	ld	r24, X+
    2976:	81 11       	cpse	r24, r1
    2978:	c0 cf       	rjmp	.-128    	; 0x28fa <main+0x1b6a>
    297a:	c1 2c       	mov	r12, r1
    297c:	1a 83       	std	Y+2, r17	; 0x02
    297e:	09 83       	std	Y+1, r16	; 0x01
    2980:	1c 2d       	mov	r17, r12
    2982:	a1 e3       	ldi	r26, 0x31	; 49
    2984:	b2 e0       	ldi	r27, 0x02	; 2
    2986:	80 e0       	ldi	r24, 0x00	; 0
    2988:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t index, begin, end = 0;
	//uint8_t *bf = buffer;
	//HoldDisplay(p, 10);
	for(index = 0; index < 25; index++)
	{
		for(begin = 0; begin <= index; begin++)(*(bf + begin) = (*((p+(begin))))); 
    298a:	2d 91       	ld	r18, X+
    298c:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <bf>
    2990:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <bf+0x1>
    2994:	e8 0f       	add	r30, r24
    2996:	f9 1f       	adc	r31, r25
    2998:	20 83       	st	Z, r18
    299a:	01 96       	adiw	r24, 0x01	; 1
    299c:	18 17       	cp	r17, r24
    299e:	a8 f7       	brcc	.-22     	; 0x298a <main+0x1bfa>
    29a0:	81 2f       	mov	r24, r17
		for(end = index; end < 25; end++) (*(bf + end) = 0x00);
    29a2:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <bf>
    29a6:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <bf+0x1>
    29aa:	e8 0f       	add	r30, r24
    29ac:	f1 1d       	adc	r31, r1
    29ae:	10 82       	st	Z, r1
    29b0:	8f 5f       	subi	r24, 0xFF	; 255
    29b2:	89 31       	cpi	r24, 0x19	; 25
    29b4:	b1 f7       	brne	.-20     	; 0x29a2 <main+0x1c12>
    29b6:	aa e0       	ldi	r26, 0x0A	; 10
    29b8:	6a 2e       	mov	r6, r26
	uint8_t index, begin, end = 0;
	//uint8_t *bf = buffer;
	//HoldDisplay(p, 10);
	for(index = 0; index < 25; index++)
	{
		for(begin = 0; begin <= index; begin++)(*(bf + begin) = (*((p+(begin))))); 
    29ba:	54 e0       	ldi	r21, 0x04	; 4
    29bc:	c5 2e       	mov	r12, r21
    29be:	51 e0       	ldi	r21, 0x01	; 1
    29c0:	d5 2e       	mov	r13, r21
    29c2:	80 e0       	ldi	r24, 0x00	; 0
    29c4:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t byte, index, bit = 0;
	uint8_t pos = 24;
	//output byte
	for(byte=0; byte<7; byte++){
		pos = 24;
		pinWrite(end_pin,((*(p+pos)) & (1 << byte)));
    29c6:	21 e0       	ldi	r18, 0x01	; 1
    29c8:	30 e0       	ldi	r19, 0x00	; 0
    29ca:	08 2e       	mov	r0, r24
    29cc:	01 c0       	rjmp	.+2      	; 0x29d0 <main+0x1c40>
    29ce:	22 0f       	add	r18, r18
    29d0:	0a 94       	dec	r0
    29d2:	ea f7       	brpl	.-6      	; 0x29ce <main+0x1c3e>
    29d4:	32 2f       	mov	r19, r18
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    29d6:	40 91 62 02 	lds	r20, 0x0262	; 0x800262 <buffer+0x18>
    29da:	24 23       	and	r18, r20
    29dc:	11 f0       	breq	.+4      	; 0x29e2 <main+0x1c52>
    29de:	0c 94 d4 1e 	jmp	0x3da8	; 0x3da8 <main+0x3018>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    29e2:	5d 98       	cbi	0x0b, 5	; 11
	uint8_t index, begin, end = 0;
	//uint8_t *bf = buffer;
	//HoldDisplay(p, 10);
	for(index = 0; index < 25; index++)
	{
		for(begin = 0; begin <= index; begin++)(*(bf + begin) = (*((p+(begin))))); 
    29e4:	27 e1       	ldi	r18, 0x17	; 23
    29e6:	5a 98       	cbi	0x0b, 2	; 11
		pinWrite(end_pin,((*(p+pos)) & (1 << byte)));
		pos--;
		for(index=0; index<3; index++){
			pinWrite(latch_pin, LOW);
			for(bit = 0; bit < 8 ; bit++){
				pinWrite(data_pin,((*(p+pos)) & (1 << byte)));
    29e8:	e2 2f       	mov	r30, r18
    29ea:	f0 e0       	ldi	r31, 0x00	; 0
    29ec:	e6 5b       	subi	r30, 0xB6	; 182
    29ee:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    29f0:	40 81       	ld	r20, Z
    29f2:	43 23       	and	r20, r19
    29f4:	11 f0       	breq	.+4      	; 0x29fa <main+0x1c6a>
    29f6:	0c 94 d1 1e 	jmp	0x3da2	; 0x3da2 <main+0x3012>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    29fa:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    29fc:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    29fe:	5b 98       	cbi	0x0b, 3	; 11
    2a00:	ef ef       	ldi	r30, 0xFF	; 255
    2a02:	e2 0f       	add	r30, r18
    2a04:	f0 e0       	ldi	r31, 0x00	; 0
    2a06:	e6 5b       	subi	r30, 0xB6	; 182
    2a08:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    2a0a:	40 81       	ld	r20, Z
    2a0c:	43 23       	and	r20, r19
    2a0e:	11 f0       	breq	.+4      	; 0x2a14 <main+0x1c84>
    2a10:	0c 94 ce 1e 	jmp	0x3d9c	; 0x3d9c <main+0x300c>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2a14:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2a16:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2a18:	5b 98       	cbi	0x0b, 3	; 11
    2a1a:	ee ef       	ldi	r30, 0xFE	; 254
    2a1c:	e2 0f       	add	r30, r18
    2a1e:	f0 e0       	ldi	r31, 0x00	; 0
    2a20:	e6 5b       	subi	r30, 0xB6	; 182
    2a22:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    2a24:	40 81       	ld	r20, Z
    2a26:	43 23       	and	r20, r19
    2a28:	11 f0       	breq	.+4      	; 0x2a2e <main+0x1c9e>
    2a2a:	0c 94 cb 1e 	jmp	0x3d96	; 0x3d96 <main+0x3006>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2a2e:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2a30:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2a32:	5b 98       	cbi	0x0b, 3	; 11
    2a34:	ed ef       	ldi	r30, 0xFD	; 253
    2a36:	e2 0f       	add	r30, r18
    2a38:	f0 e0       	ldi	r31, 0x00	; 0
    2a3a:	e6 5b       	subi	r30, 0xB6	; 182
    2a3c:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    2a3e:	40 81       	ld	r20, Z
    2a40:	43 23       	and	r20, r19
    2a42:	11 f0       	breq	.+4      	; 0x2a48 <main+0x1cb8>
    2a44:	0c 94 c8 1e 	jmp	0x3d90	; 0x3d90 <main+0x3000>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2a48:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2a4a:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2a4c:	5b 98       	cbi	0x0b, 3	; 11
    2a4e:	ec ef       	ldi	r30, 0xFC	; 252
    2a50:	e2 0f       	add	r30, r18
    2a52:	f0 e0       	ldi	r31, 0x00	; 0
    2a54:	e6 5b       	subi	r30, 0xB6	; 182
    2a56:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    2a58:	40 81       	ld	r20, Z
    2a5a:	43 23       	and	r20, r19
    2a5c:	11 f0       	breq	.+4      	; 0x2a62 <main+0x1cd2>
    2a5e:	0c 94 c5 1e 	jmp	0x3d8a	; 0x3d8a <main+0x2ffa>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2a62:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2a64:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2a66:	5b 98       	cbi	0x0b, 3	; 11
    2a68:	eb ef       	ldi	r30, 0xFB	; 251
    2a6a:	e2 0f       	add	r30, r18
    2a6c:	f0 e0       	ldi	r31, 0x00	; 0
    2a6e:	e6 5b       	subi	r30, 0xB6	; 182
    2a70:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    2a72:	40 81       	ld	r20, Z
    2a74:	43 23       	and	r20, r19
    2a76:	11 f0       	breq	.+4      	; 0x2a7c <main+0x1cec>
    2a78:	0c 94 c2 1e 	jmp	0x3d84	; 0x3d84 <main+0x2ff4>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2a7c:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2a7e:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2a80:	5b 98       	cbi	0x0b, 3	; 11
    2a82:	ea ef       	ldi	r30, 0xFA	; 250
    2a84:	e2 0f       	add	r30, r18
    2a86:	f0 e0       	ldi	r31, 0x00	; 0
    2a88:	e6 5b       	subi	r30, 0xB6	; 182
    2a8a:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    2a8c:	40 81       	ld	r20, Z
    2a8e:	43 23       	and	r20, r19
    2a90:	11 f0       	breq	.+4      	; 0x2a96 <main+0x1d06>
    2a92:	0c 94 bf 1e 	jmp	0x3d7e	; 0x3d7e <main+0x2fee>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2a96:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2a98:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2a9a:	5b 98       	cbi	0x0b, 3	; 11
    2a9c:	e9 ef       	ldi	r30, 0xF9	; 249
    2a9e:	e2 0f       	add	r30, r18
    2aa0:	f0 e0       	ldi	r31, 0x00	; 0
    2aa2:	e6 5b       	subi	r30, 0xB6	; 182
    2aa4:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    2aa6:	40 81       	ld	r20, Z
    2aa8:	43 23       	and	r20, r19
    2aaa:	11 f0       	breq	.+4      	; 0x2ab0 <main+0x1d20>
    2aac:	0c 94 bc 1e 	jmp	0x3d78	; 0x3d78 <main+0x2fe8>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2ab0:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2ab2:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2ab4:	5b 98       	cbi	0x0b, 3	; 11
				//toggle the clock pin
				pinWrite(clock_pin, HIGH);
				pinWrite(clock_pin, LOW);
				pos--;
    2ab6:	28 50       	subi	r18, 0x08	; 8
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2ab8:	5a 9a       	sbi	0x0b, 2	; 11
	//output byte
	for(byte=0; byte<7; byte++){
		pos = 24;
		pinWrite(end_pin,((*(p+pos)) & (1 << byte)));
		pos--;
		for(index=0; index<3; index++){
    2aba:	2f 3f       	cpi	r18, 0xFF	; 255
    2abc:	09 f0       	breq	.+2      	; 0x2ac0 <main+0x1d30>
    2abe:	93 cf       	rjmp	.-218    	; 0x29e6 <main+0x1c56>
    2ac0:	a4 e0       	ldi	r26, 0x04	; 4
    2ac2:	b1 e0       	ldi	r27, 0x01	; 1
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    2ac4:	ed 91       	ld	r30, X+
    2ac6:	ee 23       	and	r30, r30
    2ac8:	01 f1       	breq	.+64     	; 0x2b0a <main+0x1d7a>
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    2aca:	ec 3c       	cpi	r30, 0xCC	; 204
    2acc:	d8 f7       	brcc	.-10     	; 0x2ac4 <main+0x1d34>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2ace:	47 e0       	ldi	r20, 0x07	; 7
    2ad0:	e4 9f       	mul	r30, r20
    2ad2:	f0 01       	movw	r30, r0
    2ad4:	11 24       	eor	r1, r1
    2ad6:	bf 01       	movw	r22, r30
    2ad8:	64 5b       	subi	r22, 0xB4	; 180
    2ada:	7e 4f       	sbci	r23, 0xFE	; 254
    2adc:	fb 01       	movw	r30, r22
    2ade:	42 81       	ldd	r20, Z+2	; 0x02
    2ae0:	53 81       	ldd	r21, Z+3	; 0x03
    2ae2:	fa 01       	movw	r30, r20
    2ae4:	30 81       	ld	r19, Z
    2ae6:	44 24       	eor	r4, r4
    2ae8:	43 94       	inc	r4
    2aea:	51 2c       	mov	r5, r1
    2aec:	fb 01       	movw	r30, r22
    2aee:	06 80       	ldd	r0, Z+6	; 0x06
    2af0:	02 c0       	rjmp	.+4      	; 0x2af6 <main+0x1d66>
    2af2:	44 0c       	add	r4, r4
    2af4:	55 1c       	adc	r5, r5
    2af6:	0a 94       	dec	r0
    2af8:	e2 f7       	brpl	.-8      	; 0x2af2 <main+0x1d62>
    2afa:	24 2d       	mov	r18, r4
    2afc:	20 95       	com	r18
    2afe:	23 23       	and	r18, r19
    2b00:	fa 01       	movw	r30, r20
    2b02:	20 83       	st	Z, r18
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    2b04:	ed 91       	ld	r30, X+
    2b06:	e1 11       	cpse	r30, r1
    2b08:	e0 cf       	rjmp	.-64     	; 0x2aca <main+0x1d3a>
/* Multiplexing method                                                  */
/************************************************************************/
static inline void MultiPlex(uint8_t *pin)
{
	pinsMultiWrite(plex_pins, LOW);
	pinWrite(plex_pins[*pin], HIGH);
    2b0a:	d6 01       	movw	r26, r12
    2b0c:	ed 91       	ld	r30, X+
    2b0e:	6d 01       	movw	r12, r26
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    2b10:	ec 3c       	cpi	r30, 0xCC	; 204
    2b12:	10 f4       	brcc	.+4      	; 0x2b18 <main+0x1d88>
    2b14:	0c 94 d7 1e 	jmp	0x3dae	; 0x3dae <main+0x301e>
	delay(delayms);
    2b18:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    2b1c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
/*  delay                                                               */
/************************************************************************/
int delayms = 1;
static inline void delay(int dl)
{
	while(dl >= 0)
    2b20:	37 fd       	sbrc	r19, 7
    2b22:	09 c0       	rjmp	.+18     	; 0x2b36 <main+0x1da6>
    2b24:	ef e9       	ldi	r30, 0x9F	; 159
    2b26:	ff e0       	ldi	r31, 0x0F	; 15
    2b28:	31 97       	sbiw	r30, 0x01	; 1
    2b2a:	f1 f7       	brne	.-4      	; 0x2b28 <main+0x1d98>
    2b2c:	00 c0       	rjmp	.+0      	; 0x2b2e <main+0x1d9e>
    2b2e:	00 00       	nop
	{
		_delay_ms(1);
		dl--;
    2b30:	21 50       	subi	r18, 0x01	; 1
    2b32:	31 09       	sbc	r19, r1
    2b34:	b8 f7       	brcc	.-18     	; 0x2b24 <main+0x1d94>
	//output byte
	for(byte=0; byte<7; byte++){
		pos = 24;
		pinWrite(end_pin,((*(p+pos)) & (1 << byte)));
		pos--;
		for(index=0; index<3; index++){
    2b36:	a4 e0       	ldi	r26, 0x04	; 4
    2b38:	b1 e0       	ldi	r27, 0x01	; 1
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    2b3a:	ed 91       	ld	r30, X+
    2b3c:	ee 23       	and	r30, r30
    2b3e:	01 f1       	breq	.+64     	; 0x2b80 <main+0x1df0>
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    2b40:	ec 3c       	cpi	r30, 0xCC	; 204
    2b42:	d8 f7       	brcc	.-10     	; 0x2b3a <main+0x1daa>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2b44:	07 e0       	ldi	r16, 0x07	; 7
    2b46:	e0 9f       	mul	r30, r16
    2b48:	f0 01       	movw	r30, r0
    2b4a:	11 24       	eor	r1, r1
    2b4c:	bf 01       	movw	r22, r30
    2b4e:	64 5b       	subi	r22, 0xB4	; 180
    2b50:	7e 4f       	sbci	r23, 0xFE	; 254
    2b52:	fb 01       	movw	r30, r22
    2b54:	42 81       	ldd	r20, Z+2	; 0x02
    2b56:	53 81       	ldd	r21, Z+3	; 0x03
    2b58:	fa 01       	movw	r30, r20
    2b5a:	30 81       	ld	r19, Z
    2b5c:	44 24       	eor	r4, r4
    2b5e:	43 94       	inc	r4
    2b60:	51 2c       	mov	r5, r1
    2b62:	fb 01       	movw	r30, r22
    2b64:	06 80       	ldd	r0, Z+6	; 0x06
    2b66:	02 c0       	rjmp	.+4      	; 0x2b6c <main+0x1ddc>
    2b68:	44 0c       	add	r4, r4
    2b6a:	55 1c       	adc	r5, r5
    2b6c:	0a 94       	dec	r0
    2b6e:	e2 f7       	brpl	.-8      	; 0x2b68 <main+0x1dd8>
    2b70:	24 2d       	mov	r18, r4
    2b72:	20 95       	com	r18
    2b74:	23 23       	and	r18, r19
    2b76:	fa 01       	movw	r30, r20
    2b78:	20 83       	st	Z, r18
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    2b7a:	ed 91       	ld	r30, X+
    2b7c:	e1 11       	cpse	r30, r1
    2b7e:	e0 cf       	rjmp	.-64     	; 0x2b40 <main+0x1db0>
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2b80:	5d 98       	cbi	0x0b, 5	; 11
    2b82:	24 e0       	ldi	r18, 0x04	; 4
    2b84:	30 e0       	ldi	r19, 0x00	; 0
    2b86:	5a 98       	cbi	0x0b, 2	; 11
    2b88:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2b8a:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2b8c:	5b 98       	cbi	0x0b, 3	; 11
    2b8e:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2b90:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2b92:	5b 98       	cbi	0x0b, 3	; 11
    2b94:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2b96:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2b98:	5b 98       	cbi	0x0b, 3	; 11
    2b9a:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2b9c:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2b9e:	5b 98       	cbi	0x0b, 3	; 11
    2ba0:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2ba2:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2ba4:	5b 98       	cbi	0x0b, 3	; 11
    2ba6:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2ba8:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2baa:	5b 98       	cbi	0x0b, 3	; 11
    2bac:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2bae:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2bb0:	5b 98       	cbi	0x0b, 3	; 11
    2bb2:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2bb4:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2bb6:	5b 98       	cbi	0x0b, 3	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2bb8:	5a 9a       	sbi	0x0b, 2	; 11
    2bba:	21 50       	subi	r18, 0x01	; 1
    2bbc:	31 09       	sbc	r19, r1
/************************************************************************/
static inline void Clear(){
	int x, y = 0;
	pinsMultiWrite(plex_pins, LOW);
	pinWrite(end_pin, LOW);
	for(x = 0; x < 4; x++) {
    2bbe:	19 f7       	brne	.-58     	; 0x2b86 <main+0x1df6>
    2bc0:	01 96       	adiw	r24, 0x01	; 1
static inline void DisplayBuffer(const uint8_t *p)
{
	uint8_t byte, index, bit = 0;
	uint8_t pos = 24;
	//output byte
	for(byte=0; byte<7; byte++){
    2bc2:	87 30       	cpi	r24, 0x07	; 7
    2bc4:	91 05       	cpc	r25, r1
    2bc6:	09 f0       	breq	.+2      	; 0x2bca <main+0x1e3a>
    2bc8:	fe ce       	rjmp	.-516    	; 0x29c6 <main+0x1c36>
			pinWrite(latch_pin, HIGH);
		}
		MultiPlex(&byte);
		Clear();
	}
	delayms = 1;
    2bca:	f0 92 01 01 	sts	0x0101, r15	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    2bce:	e0 92 00 01 	sts	0x0100, r14	; 0x800100 <__DATA_REGION_ORIGIN__>
    2bd2:	6a 94       	dec	r6
	}
}*/
static inline void HoldDisplayBuffer(const uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
    2bd4:	61 10       	cpse	r6, r1
    2bd6:	f1 ce       	rjmp	.-542    	; 0x29ba <main+0x1c2a>
void TypeIn(const uint8_t *p, uint8_t time)
{
	uint8_t index, begin, end = 0;
	//uint8_t *bf = buffer;
	//HoldDisplay(p, 10);
	for(index = 0; index < 25; index++)
    2bd8:	1f 5f       	subi	r17, 0xFF	; 255
    2bda:	19 31       	cpi	r17, 0x19	; 25
    2bdc:	09 f0       	breq	.+2      	; 0x2be0 <main+0x1e50>
    2bde:	d1 ce       	rjmp	.-606    	; 0x2982 <main+0x1bf2>
    2be0:	c1 2e       	mov	r12, r17
    2be2:	09 81       	ldd	r16, Y+1	; 0x01
    2be4:	1a 81       	ldd	r17, Y+2	; 0x02
    2be6:	d8 01       	movw	r26, r16
    2be8:	1d 92       	st	X+, r1
    2bea:	ca 94       	dec	r12
    2bec:	e9 f7       	brne	.-6      	; 0x2be8 <main+0x1e58>
    2bee:	a2 e1       	ldi	r26, 0x12	; 18
    2bf0:	b1 e0       	ldi	r27, 0x01	; 1
    2bf2:	20 e0       	ldi	r18, 0x00	; 0
    2bf4:	8a e4       	ldi	r24, 0x4A	; 74
/* returns the index of the first byte of the requested character       */
/************************************************************************/
uint8_t CharStart(const char *p)
{
	/*if(*p == ' ') return 0;
	else*/ return (uint8_t) (( *p - ' '));
    2bf6:	80 52       	subi	r24, 0x20	; 32
	unsigned int index = 0;
	uint8_t len = 0;
	uint8_t x = 0;
	ClearStringBuffer();
	while(*ch){
		index = CharStart(ch++) * 5;
    2bf8:	e5 e0       	ldi	r30, 0x05	; 5
    2bfa:	8e 9f       	mul	r24, r30
    2bfc:	c0 01       	movw	r24, r0
    2bfe:	11 24       	eor	r1, r1
		for(len = 0; len < 5; len++){
			stringbuffer[x] = (uint8_t)(pgm_read_byte((font_5x7 + index)));
    2c00:	fc 01       	movw	r30, r24
    2c02:	e8 59       	subi	r30, 0x98	; 152
    2c04:	ff 4f       	sbci	r31, 0xFF	; 255
    2c06:	34 91       	lpm	r19, Z
    2c08:	e2 2f       	mov	r30, r18
    2c0a:	f0 e0       	ldi	r31, 0x00	; 0
    2c0c:	ef 5c       	subi	r30, 0xCF	; 207
    2c0e:	fd 4f       	sbci	r31, 0xFD	; 253
    2c10:	30 83       	st	Z, r19
    2c12:	fc 01       	movw	r30, r24
    2c14:	e7 59       	subi	r30, 0x97	; 151
    2c16:	ff 4f       	sbci	r31, 0xFF	; 255
    2c18:	34 91       	lpm	r19, Z
    2c1a:	e1 e0       	ldi	r30, 0x01	; 1
    2c1c:	e2 0f       	add	r30, r18
    2c1e:	f0 e0       	ldi	r31, 0x00	; 0
    2c20:	ef 5c       	subi	r30, 0xCF	; 207
    2c22:	fd 4f       	sbci	r31, 0xFD	; 253
    2c24:	30 83       	st	Z, r19
    2c26:	fc 01       	movw	r30, r24
    2c28:	e6 59       	subi	r30, 0x96	; 150
    2c2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c2c:	34 91       	lpm	r19, Z
    2c2e:	e2 e0       	ldi	r30, 0x02	; 2
    2c30:	e2 0f       	add	r30, r18
    2c32:	f0 e0       	ldi	r31, 0x00	; 0
    2c34:	ef 5c       	subi	r30, 0xCF	; 207
    2c36:	fd 4f       	sbci	r31, 0xFD	; 253
    2c38:	30 83       	st	Z, r19
    2c3a:	fc 01       	movw	r30, r24
    2c3c:	e5 59       	subi	r30, 0x95	; 149
    2c3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c40:	34 91       	lpm	r19, Z
    2c42:	e3 e0       	ldi	r30, 0x03	; 3
    2c44:	e2 0f       	add	r30, r18
    2c46:	f0 e0       	ldi	r31, 0x00	; 0
    2c48:	ef 5c       	subi	r30, 0xCF	; 207
    2c4a:	fd 4f       	sbci	r31, 0xFD	; 253
    2c4c:	30 83       	st	Z, r19
    2c4e:	fc 01       	movw	r30, r24
    2c50:	e4 59       	subi	r30, 0x94	; 148
    2c52:	ff 4f       	sbci	r31, 0xFF	; 255
    2c54:	84 91       	lpm	r24, Z
    2c56:	e4 e0       	ldi	r30, 0x04	; 4
    2c58:	e2 0f       	add	r30, r18
    2c5a:	f0 e0       	ldi	r31, 0x00	; 0
    2c5c:	ef 5c       	subi	r30, 0xCF	; 207
    2c5e:	fd 4f       	sbci	r31, 0xFD	; 253
    2c60:	80 83       	st	Z, r24
			index++; x++;
		}
		stringbuffer[x] = 0;
    2c62:	e5 e0       	ldi	r30, 0x05	; 5
    2c64:	e2 0f       	add	r30, r18
    2c66:	f0 e0       	ldi	r31, 0x00	; 0
    2c68:	ef 5c       	subi	r30, 0xCF	; 207
    2c6a:	fd 4f       	sbci	r31, 0xFD	; 253
    2c6c:	10 82       	st	Z, r1
		x++;
    2c6e:	2a 5f       	subi	r18, 0xFA	; 250
{
	unsigned int index = 0;
	uint8_t len = 0;
	uint8_t x = 0;
	ClearStringBuffer();
	while(*ch){
    2c70:	8d 91       	ld	r24, X+
    2c72:	81 11       	cpse	r24, r1
    2c74:	c0 cf       	rjmp	.-128    	; 0x2bf6 <main+0x1e66>
    2c76:	42 e3       	ldi	r20, 0x32	; 50
    2c78:	d4 2e       	mov	r13, r20
}*/
static inline void HoldDisplayBuffer(const uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
		DisplayBuffer(data);
    2c7a:	81 e3       	ldi	r24, 0x31	; 49
    2c7c:	92 e0       	ldi	r25, 0x02	; 2
    2c7e:	0e 94 41 01 	call	0x282	; 0x282 <DisplayBuffer>
    2c82:	da 94       	dec	r13
	}
}*/
static inline void HoldDisplayBuffer(const uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
    2c84:	d1 10       	cpse	r13, r1
    2c86:	f9 cf       	rjmp	.-14     	; 0x2c7a <main+0x1eea>
    2c88:	d8 01       	movw	r26, r16
    2c8a:	e7 2d       	mov	r30, r7
    2c8c:	1d 92       	st	X+, r1
    2c8e:	ea 95       	dec	r30
    2c90:	e9 f7       	brne	.-6      	; 0x2c8c <main+0x1efc>
    2c92:	20 e0       	ldi	r18, 0x00	; 0
    2c94:	8a e4       	ldi	r24, 0x4A	; 74
/* returns the index of the first byte of the requested character       */
/************************************************************************/
uint8_t CharStart(const char *p)
{
	/*if(*p == ' ') return 0;
	else*/ return (uint8_t) (( *p - ' '));
    2c96:	80 52       	subi	r24, 0x20	; 32
	unsigned int index = 0;
	uint8_t len = 0;
	uint8_t x = 0;
	ClearStringBuffer();
	while(*ch){
		index = CharStart(ch++) * 5;
    2c98:	f5 e0       	ldi	r31, 0x05	; 5
    2c9a:	8f 9f       	mul	r24, r31
    2c9c:	c0 01       	movw	r24, r0
    2c9e:	11 24       	eor	r1, r1
		for(len = 0; len < 5; len++){
			stringbuffer[x] = (uint8_t)(pgm_read_byte((font_5x7 + index)));
    2ca0:	fc 01       	movw	r30, r24
    2ca2:	e8 59       	subi	r30, 0x98	; 152
    2ca4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca6:	34 91       	lpm	r19, Z
    2ca8:	e2 2f       	mov	r30, r18
    2caa:	f0 e0       	ldi	r31, 0x00	; 0
    2cac:	ef 5c       	subi	r30, 0xCF	; 207
    2cae:	fd 4f       	sbci	r31, 0xFD	; 253
    2cb0:	30 83       	st	Z, r19
    2cb2:	fc 01       	movw	r30, r24
    2cb4:	e7 59       	subi	r30, 0x97	; 151
    2cb6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cb8:	34 91       	lpm	r19, Z
    2cba:	e1 e0       	ldi	r30, 0x01	; 1
    2cbc:	e2 0f       	add	r30, r18
    2cbe:	f0 e0       	ldi	r31, 0x00	; 0
    2cc0:	ef 5c       	subi	r30, 0xCF	; 207
    2cc2:	fd 4f       	sbci	r31, 0xFD	; 253
    2cc4:	30 83       	st	Z, r19
    2cc6:	fc 01       	movw	r30, r24
    2cc8:	e6 59       	subi	r30, 0x96	; 150
    2cca:	ff 4f       	sbci	r31, 0xFF	; 255
    2ccc:	34 91       	lpm	r19, Z
    2cce:	e2 e0       	ldi	r30, 0x02	; 2
    2cd0:	e2 0f       	add	r30, r18
    2cd2:	f0 e0       	ldi	r31, 0x00	; 0
    2cd4:	ef 5c       	subi	r30, 0xCF	; 207
    2cd6:	fd 4f       	sbci	r31, 0xFD	; 253
    2cd8:	30 83       	st	Z, r19
    2cda:	fc 01       	movw	r30, r24
    2cdc:	e5 59       	subi	r30, 0x95	; 149
    2cde:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce0:	34 91       	lpm	r19, Z
    2ce2:	e3 e0       	ldi	r30, 0x03	; 3
    2ce4:	e2 0f       	add	r30, r18
    2ce6:	f0 e0       	ldi	r31, 0x00	; 0
    2ce8:	ef 5c       	subi	r30, 0xCF	; 207
    2cea:	fd 4f       	sbci	r31, 0xFD	; 253
    2cec:	30 83       	st	Z, r19
    2cee:	fc 01       	movw	r30, r24
    2cf0:	e4 59       	subi	r30, 0x94	; 148
    2cf2:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf4:	84 91       	lpm	r24, Z
    2cf6:	e4 e0       	ldi	r30, 0x04	; 4
    2cf8:	e2 0f       	add	r30, r18
    2cfa:	f0 e0       	ldi	r31, 0x00	; 0
    2cfc:	ef 5c       	subi	r30, 0xCF	; 207
    2cfe:	fd 4f       	sbci	r31, 0xFD	; 253
    2d00:	80 83       	st	Z, r24
			index++; x++;
		}
		stringbuffer[x] = 0;
    2d02:	e5 e0       	ldi	r30, 0x05	; 5
    2d04:	e2 0f       	add	r30, r18
    2d06:	f0 e0       	ldi	r31, 0x00	; 0
    2d08:	ef 5c       	subi	r30, 0xCF	; 207
    2d0a:	fd 4f       	sbci	r31, 0xFD	; 253
    2d0c:	10 82       	st	Z, r1
		x++;
    2d0e:	2a 5f       	subi	r18, 0xFA	; 250
{
	unsigned int index = 0;
	uint8_t len = 0;
	uint8_t x = 0;
	ClearStringBuffer();
	while(*ch){
    2d10:	d5 01       	movw	r26, r10
    2d12:	8d 91       	ld	r24, X+
    2d14:	5d 01       	movw	r10, r26
    2d16:	81 11       	cpse	r24, r1
    2d18:	be cf       	rjmp	.-132    	; 0x2c96 <main+0x1f06>
    2d1a:	38 e1       	ldi	r19, 0x18	; 24
    2d1c:	d3 2e       	mov	r13, r19
    2d1e:	1c 83       	std	Y+4, r17	; 0x04
    2d20:	0b 83       	std	Y+3, r16	; 0x03
    2d22:	20 e0       	ldi	r18, 0x00	; 0
{
	uint8_t index, begin, end = 0;
	//uint8_t *bf = buffer;
	for(index = 24 ; index > 0; index--)
	{
		for(begin = 0; begin <= index; begin++) (*(bf + begin)) = (*((p+begin)));
    2d24:	82 2f       	mov	r24, r18
    2d26:	90 e0       	ldi	r25, 0x00	; 0
    2d28:	fc 01       	movw	r30, r24
    2d2a:	ef 5c       	subi	r30, 0xCF	; 207
    2d2c:	fd 4f       	sbci	r31, 0xFD	; 253
    2d2e:	30 81       	ld	r19, Z
    2d30:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <bf>
    2d34:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <bf+0x1>
    2d38:	fa 01       	movw	r30, r20
    2d3a:	e8 0f       	add	r30, r24
    2d3c:	f9 1f       	adc	r31, r25
    2d3e:	30 83       	st	Z, r19
    2d40:	2f 5f       	subi	r18, 0xFF	; 255
    2d42:	d2 16       	cp	r13, r18
    2d44:	78 f7       	brcc	.-34     	; 0x2d24 <main+0x1f94>
		for(end = (index-1); end < 25 ; end++) (*(bf + end)) = 0x00;
    2d46:	da 94       	dec	r13
    2d48:	8d 2d       	mov	r24, r13
    2d4a:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <bf>
    2d4e:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <bf+0x1>
    2d52:	e8 0f       	add	r30, r24
    2d54:	f1 1d       	adc	r31, r1
    2d56:	10 82       	st	Z, r1
    2d58:	8f 5f       	subi	r24, 0xFF	; 255
    2d5a:	89 31       	cpi	r24, 0x19	; 25
    2d5c:	b1 f7       	brne	.-20     	; 0x2d4a <main+0x1fba>
    2d5e:	1a e0       	ldi	r17, 0x0A	; 10
    2d60:	24 e0       	ldi	r18, 0x04	; 4
    2d62:	42 2e       	mov	r4, r18
    2d64:	21 e0       	ldi	r18, 0x01	; 1
    2d66:	52 2e       	mov	r5, r18
    2d68:	80 e0       	ldi	r24, 0x00	; 0
    2d6a:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t byte, index, bit = 0;
	uint8_t pos = 24;
	//output byte
	for(byte=0; byte<7; byte++){
		pos = 24;
		pinWrite(end_pin,((*(p+pos)) & (1 << byte)));
    2d6c:	21 e0       	ldi	r18, 0x01	; 1
    2d6e:	30 e0       	ldi	r19, 0x00	; 0
    2d70:	08 2e       	mov	r0, r24
    2d72:	01 c0       	rjmp	.+2      	; 0x2d76 <main+0x1fe6>
    2d74:	22 0f       	add	r18, r18
    2d76:	0a 94       	dec	r0
    2d78:	ea f7       	brpl	.-6      	; 0x2d74 <main+0x1fe4>
    2d7a:	32 2f       	mov	r19, r18
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    2d7c:	40 91 62 02 	lds	r20, 0x0262	; 0x800262 <buffer+0x18>
    2d80:	24 23       	and	r18, r20
    2d82:	11 f0       	breq	.+4      	; 0x2d88 <main+0x1ff8>
    2d84:	0c 94 04 1f 	jmp	0x3e08	; 0x3e08 <main+0x3078>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2d88:	5d 98       	cbi	0x0b, 5	; 11
	uint8_t index, begin, end = 0;
	//uint8_t *bf = buffer;
	for(index = 24 ; index > 0; index--)
	{
		for(begin = 0; begin <= index; begin++) (*(bf + begin)) = (*((p+begin)));
		for(end = (index-1); end < 25 ; end++) (*(bf + end)) = 0x00;
    2d8a:	27 e1       	ldi	r18, 0x17	; 23
    2d8c:	5a 98       	cbi	0x0b, 2	; 11
		pinWrite(end_pin,((*(p+pos)) & (1 << byte)));
		pos--;
		for(index=0; index<3; index++){
			pinWrite(latch_pin, LOW);
			for(bit = 0; bit < 8 ; bit++){
				pinWrite(data_pin,((*(p+pos)) & (1 << byte)));
    2d8e:	e2 2f       	mov	r30, r18
    2d90:	f0 e0       	ldi	r31, 0x00	; 0
    2d92:	e6 5b       	subi	r30, 0xB6	; 182
    2d94:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    2d96:	40 81       	ld	r20, Z
    2d98:	43 23       	and	r20, r19
    2d9a:	11 f0       	breq	.+4      	; 0x2da0 <main+0x2010>
    2d9c:	0c 94 01 1f 	jmp	0x3e02	; 0x3e02 <main+0x3072>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2da0:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2da2:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2da4:	5b 98       	cbi	0x0b, 3	; 11
    2da6:	ef ef       	ldi	r30, 0xFF	; 255
    2da8:	e2 0f       	add	r30, r18
    2daa:	f0 e0       	ldi	r31, 0x00	; 0
    2dac:	e6 5b       	subi	r30, 0xB6	; 182
    2dae:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    2db0:	40 81       	ld	r20, Z
    2db2:	43 23       	and	r20, r19
    2db4:	11 f0       	breq	.+4      	; 0x2dba <main+0x202a>
    2db6:	0c 94 fe 1e 	jmp	0x3dfc	; 0x3dfc <main+0x306c>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2dba:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2dbc:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2dbe:	5b 98       	cbi	0x0b, 3	; 11
    2dc0:	ee ef       	ldi	r30, 0xFE	; 254
    2dc2:	e2 0f       	add	r30, r18
    2dc4:	f0 e0       	ldi	r31, 0x00	; 0
    2dc6:	e6 5b       	subi	r30, 0xB6	; 182
    2dc8:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    2dca:	40 81       	ld	r20, Z
    2dcc:	43 23       	and	r20, r19
    2dce:	11 f0       	breq	.+4      	; 0x2dd4 <main+0x2044>
    2dd0:	0c 94 fb 1e 	jmp	0x3df6	; 0x3df6 <main+0x3066>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2dd4:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2dd6:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2dd8:	5b 98       	cbi	0x0b, 3	; 11
    2dda:	ed ef       	ldi	r30, 0xFD	; 253
    2ddc:	e2 0f       	add	r30, r18
    2dde:	f0 e0       	ldi	r31, 0x00	; 0
    2de0:	e6 5b       	subi	r30, 0xB6	; 182
    2de2:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    2de4:	40 81       	ld	r20, Z
    2de6:	43 23       	and	r20, r19
    2de8:	11 f0       	breq	.+4      	; 0x2dee <main+0x205e>
    2dea:	0c 94 f8 1e 	jmp	0x3df0	; 0x3df0 <main+0x3060>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2dee:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2df0:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2df2:	5b 98       	cbi	0x0b, 3	; 11
    2df4:	ec ef       	ldi	r30, 0xFC	; 252
    2df6:	e2 0f       	add	r30, r18
    2df8:	f0 e0       	ldi	r31, 0x00	; 0
    2dfa:	e6 5b       	subi	r30, 0xB6	; 182
    2dfc:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    2dfe:	40 81       	ld	r20, Z
    2e00:	43 23       	and	r20, r19
    2e02:	11 f0       	breq	.+4      	; 0x2e08 <main+0x2078>
    2e04:	0c 94 f5 1e 	jmp	0x3dea	; 0x3dea <main+0x305a>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2e08:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2e0a:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2e0c:	5b 98       	cbi	0x0b, 3	; 11
    2e0e:	eb ef       	ldi	r30, 0xFB	; 251
    2e10:	e2 0f       	add	r30, r18
    2e12:	f0 e0       	ldi	r31, 0x00	; 0
    2e14:	e6 5b       	subi	r30, 0xB6	; 182
    2e16:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    2e18:	40 81       	ld	r20, Z
    2e1a:	43 23       	and	r20, r19
    2e1c:	11 f0       	breq	.+4      	; 0x2e22 <main+0x2092>
    2e1e:	0c 94 f2 1e 	jmp	0x3de4	; 0x3de4 <main+0x3054>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2e22:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2e24:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2e26:	5b 98       	cbi	0x0b, 3	; 11
    2e28:	ea ef       	ldi	r30, 0xFA	; 250
    2e2a:	e2 0f       	add	r30, r18
    2e2c:	f0 e0       	ldi	r31, 0x00	; 0
    2e2e:	e6 5b       	subi	r30, 0xB6	; 182
    2e30:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    2e32:	40 81       	ld	r20, Z
    2e34:	43 23       	and	r20, r19
    2e36:	11 f0       	breq	.+4      	; 0x2e3c <main+0x20ac>
    2e38:	0c 94 ef 1e 	jmp	0x3dde	; 0x3dde <main+0x304e>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2e3c:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2e3e:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2e40:	5b 98       	cbi	0x0b, 3	; 11
    2e42:	e9 ef       	ldi	r30, 0xF9	; 249
    2e44:	e2 0f       	add	r30, r18
    2e46:	f0 e0       	ldi	r31, 0x00	; 0
    2e48:	e6 5b       	subi	r30, 0xB6	; 182
    2e4a:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    2e4c:	40 81       	ld	r20, Z
    2e4e:	43 23       	and	r20, r19
    2e50:	11 f0       	breq	.+4      	; 0x2e56 <main+0x20c6>
    2e52:	0c 94 ec 1e 	jmp	0x3dd8	; 0x3dd8 <main+0x3048>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2e56:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2e58:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2e5a:	5b 98       	cbi	0x0b, 3	; 11
				//toggle the clock pin
				pinWrite(clock_pin, HIGH);
				pinWrite(clock_pin, LOW);
				pos--;
    2e5c:	28 50       	subi	r18, 0x08	; 8
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2e5e:	5a 9a       	sbi	0x0b, 2	; 11
	//output byte
	for(byte=0; byte<7; byte++){
		pos = 24;
		pinWrite(end_pin,((*(p+pos)) & (1 << byte)));
		pos--;
		for(index=0; index<3; index++){
    2e60:	2f 3f       	cpi	r18, 0xFF	; 255
    2e62:	09 f0       	breq	.+2      	; 0x2e66 <main+0x20d6>
    2e64:	93 cf       	rjmp	.-218    	; 0x2d8c <main+0x1ffc>
    2e66:	a4 e0       	ldi	r26, 0x04	; 4
    2e68:	b1 e0       	ldi	r27, 0x01	; 1
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    2e6a:	ed 91       	ld	r30, X+
    2e6c:	ee 23       	and	r30, r30
    2e6e:	f1 f0       	breq	.+60     	; 0x2eac <main+0x211c>
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    2e70:	ec 3c       	cpi	r30, 0xCC	; 204
    2e72:	d8 f7       	brcc	.-10     	; 0x2e6a <main+0x20da>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2e74:	07 e0       	ldi	r16, 0x07	; 7
    2e76:	e0 9f       	mul	r30, r16
    2e78:	f0 01       	movw	r30, r0
    2e7a:	11 24       	eor	r1, r1
    2e7c:	9f 01       	movw	r18, r30
    2e7e:	24 5b       	subi	r18, 0xB4	; 180
    2e80:	3e 4f       	sbci	r19, 0xFE	; 254
    2e82:	f9 01       	movw	r30, r18
    2e84:	62 81       	ldd	r22, Z+2	; 0x02
    2e86:	73 81       	ldd	r23, Z+3	; 0x03
    2e88:	fb 01       	movw	r30, r22
    2e8a:	b0 80       	ld	r11, Z
    2e8c:	41 e0       	ldi	r20, 0x01	; 1
    2e8e:	50 e0       	ldi	r21, 0x00	; 0
    2e90:	f9 01       	movw	r30, r18
    2e92:	06 80       	ldd	r0, Z+6	; 0x06
    2e94:	02 c0       	rjmp	.+4      	; 0x2e9a <main+0x210a>
    2e96:	44 0f       	add	r20, r20
    2e98:	55 1f       	adc	r21, r21
    2e9a:	0a 94       	dec	r0
    2e9c:	e2 f7       	brpl	.-8      	; 0x2e96 <main+0x2106>
    2e9e:	40 95       	com	r20
    2ea0:	4b 21       	and	r20, r11
    2ea2:	fb 01       	movw	r30, r22
    2ea4:	40 83       	st	Z, r20
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    2ea6:	ed 91       	ld	r30, X+
    2ea8:	e1 11       	cpse	r30, r1
    2eaa:	e2 cf       	rjmp	.-60     	; 0x2e70 <main+0x20e0>
/* Multiplexing method                                                  */
/************************************************************************/
static inline void MultiPlex(uint8_t *pin)
{
	pinsMultiWrite(plex_pins, LOW);
	pinWrite(plex_pins[*pin], HIGH);
    2eac:	d2 01       	movw	r26, r4
    2eae:	ed 91       	ld	r30, X+
    2eb0:	2d 01       	movw	r4, r26
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    2eb2:	ec 3c       	cpi	r30, 0xCC	; 204
    2eb4:	10 f4       	brcc	.+4      	; 0x2eba <main+0x212a>
    2eb6:	0c 94 07 1f 	jmp	0x3e0e	; 0x3e0e <main+0x307e>
	delay(delayms);
    2eba:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    2ebe:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
/*  delay                                                               */
/************************************************************************/
int delayms = 1;
static inline void delay(int dl)
{
	while(dl >= 0)
    2ec2:	37 fd       	sbrc	r19, 7
    2ec4:	09 c0       	rjmp	.+18     	; 0x2ed8 <main+0x2148>
    2ec6:	ef e9       	ldi	r30, 0x9F	; 159
    2ec8:	ff e0       	ldi	r31, 0x0F	; 15
    2eca:	31 97       	sbiw	r30, 0x01	; 1
    2ecc:	f1 f7       	brne	.-4      	; 0x2eca <main+0x213a>
    2ece:	00 c0       	rjmp	.+0      	; 0x2ed0 <main+0x2140>
    2ed0:	00 00       	nop
	{
		_delay_ms(1);
		dl--;
    2ed2:	21 50       	subi	r18, 0x01	; 1
    2ed4:	31 09       	sbc	r19, r1
    2ed6:	b8 f7       	brcc	.-18     	; 0x2ec6 <main+0x2136>
	//output byte
	for(byte=0; byte<7; byte++){
		pos = 24;
		pinWrite(end_pin,((*(p+pos)) & (1 << byte)));
		pos--;
		for(index=0; index<3; index++){
    2ed8:	a4 e0       	ldi	r26, 0x04	; 4
    2eda:	b1 e0       	ldi	r27, 0x01	; 1
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    2edc:	ed 91       	ld	r30, X+
    2ede:	ee 23       	and	r30, r30
    2ee0:	f1 f0       	breq	.+60     	; 0x2f1e <main+0x218e>
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    2ee2:	ec 3c       	cpi	r30, 0xCC	; 204
    2ee4:	d8 f7       	brcc	.-10     	; 0x2edc <main+0x214c>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2ee6:	07 e0       	ldi	r16, 0x07	; 7
    2ee8:	e0 9f       	mul	r30, r16
    2eea:	f0 01       	movw	r30, r0
    2eec:	11 24       	eor	r1, r1
    2eee:	9f 01       	movw	r18, r30
    2ef0:	24 5b       	subi	r18, 0xB4	; 180
    2ef2:	3e 4f       	sbci	r19, 0xFE	; 254
    2ef4:	f9 01       	movw	r30, r18
    2ef6:	62 81       	ldd	r22, Z+2	; 0x02
    2ef8:	73 81       	ldd	r23, Z+3	; 0x03
    2efa:	fb 01       	movw	r30, r22
    2efc:	b0 80       	ld	r11, Z
    2efe:	41 e0       	ldi	r20, 0x01	; 1
    2f00:	50 e0       	ldi	r21, 0x00	; 0
    2f02:	f9 01       	movw	r30, r18
    2f04:	06 80       	ldd	r0, Z+6	; 0x06
    2f06:	02 c0       	rjmp	.+4      	; 0x2f0c <main+0x217c>
    2f08:	44 0f       	add	r20, r20
    2f0a:	55 1f       	adc	r21, r21
    2f0c:	0a 94       	dec	r0
    2f0e:	e2 f7       	brpl	.-8      	; 0x2f08 <main+0x2178>
    2f10:	40 95       	com	r20
    2f12:	4b 21       	and	r20, r11
    2f14:	fb 01       	movw	r30, r22
    2f16:	40 83       	st	Z, r20
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    2f18:	ed 91       	ld	r30, X+
    2f1a:	e1 11       	cpse	r30, r1
    2f1c:	e2 cf       	rjmp	.-60     	; 0x2ee2 <main+0x2152>
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2f1e:	5d 98       	cbi	0x0b, 5	; 11
    2f20:	24 e0       	ldi	r18, 0x04	; 4
    2f22:	30 e0       	ldi	r19, 0x00	; 0
    2f24:	5a 98       	cbi	0x0b, 2	; 11
    2f26:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2f28:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2f2a:	5b 98       	cbi	0x0b, 3	; 11
    2f2c:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2f2e:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2f30:	5b 98       	cbi	0x0b, 3	; 11
    2f32:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2f34:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2f36:	5b 98       	cbi	0x0b, 3	; 11
    2f38:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2f3a:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2f3c:	5b 98       	cbi	0x0b, 3	; 11
    2f3e:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2f40:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2f42:	5b 98       	cbi	0x0b, 3	; 11
    2f44:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2f46:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2f48:	5b 98       	cbi	0x0b, 3	; 11
    2f4a:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2f4c:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2f4e:	5b 98       	cbi	0x0b, 3	; 11
    2f50:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2f52:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2f54:	5b 98       	cbi	0x0b, 3	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2f56:	5a 9a       	sbi	0x0b, 2	; 11
    2f58:	21 50       	subi	r18, 0x01	; 1
    2f5a:	31 09       	sbc	r19, r1
/************************************************************************/
static inline void Clear(){
	int x, y = 0;
	pinsMultiWrite(plex_pins, LOW);
	pinWrite(end_pin, LOW);
	for(x = 0; x < 4; x++) {
    2f5c:	19 f7       	brne	.-58     	; 0x2f24 <main+0x2194>
    2f5e:	01 96       	adiw	r24, 0x01	; 1
static inline void DisplayBuffer(const uint8_t *p)
{
	uint8_t byte, index, bit = 0;
	uint8_t pos = 24;
	//output byte
	for(byte=0; byte<7; byte++){
    2f60:	87 30       	cpi	r24, 0x07	; 7
    2f62:	91 05       	cpc	r25, r1
    2f64:	09 f0       	breq	.+2      	; 0x2f68 <main+0x21d8>
    2f66:	02 cf       	rjmp	.-508    	; 0x2d6c <main+0x1fdc>
			pinWrite(latch_pin, HIGH);
		}
		MultiPlex(&byte);
		Clear();
	}
	delayms = 1;
    2f68:	f0 92 01 01 	sts	0x0101, r15	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    2f6c:	e0 92 00 01 	sts	0x0100, r14	; 0x800100 <__DATA_REGION_ORIGIN__>
    2f70:	11 50       	subi	r17, 0x01	; 1
	}
}*/
static inline void HoldDisplayBuffer(const uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
    2f72:	09 f0       	breq	.+2      	; 0x2f76 <main+0x21e6>
    2f74:	f5 ce       	rjmp	.-534    	; 0x2d60 <main+0x1fd0>
/************************************************************************/
void DeleteLeft(const uint8_t *p, uint8_t time)
{
	uint8_t index, begin, end = 0;
	//uint8_t *bf = buffer;
	for(index = 24 ; index > 0; index--)
    2f76:	d1 10       	cpse	r13, r1
    2f78:	d4 ce       	rjmp	.-600    	; 0x2d22 <main+0x1f92>
    2f7a:	0b 81       	ldd	r16, Y+3	; 0x03
    2f7c:	1c 81       	ldd	r17, Y+4	; 0x04
    2f7e:	9a e0       	ldi	r25, 0x0A	; 10
    2f80:	d9 2e       	mov	r13, r25
    2f82:	84 e0       	ldi	r24, 0x04	; 4
    2f84:	a8 2e       	mov	r10, r24
    2f86:	81 e0       	ldi	r24, 0x01	; 1
    2f88:	b8 2e       	mov	r11, r24
    2f8a:	80 e0       	ldi	r24, 0x00	; 0
    2f8c:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t byte, index, bit = 0;
	uint8_t pos = 24;
	//output byte
	for(byte=0; byte<7; byte++){
		pos = 24;
		pinWrite(end_pin,((*(p+pos)) & (1 << byte)));
    2f8e:	21 e0       	ldi	r18, 0x01	; 1
    2f90:	30 e0       	ldi	r19, 0x00	; 0
    2f92:	08 2e       	mov	r0, r24
    2f94:	01 c0       	rjmp	.+2      	; 0x2f98 <main+0x2208>
    2f96:	22 0f       	add	r18, r18
    2f98:	0a 94       	dec	r0
    2f9a:	ea f7       	brpl	.-6      	; 0x2f96 <main+0x2206>
    2f9c:	32 2f       	mov	r19, r18
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    2f9e:	40 91 62 02 	lds	r20, 0x0262	; 0x800262 <buffer+0x18>
    2fa2:	24 23       	and	r18, r20
    2fa4:	09 f0       	breq	.+2      	; 0x2fa8 <main+0x2218>
    2fa6:	58 c7       	rjmp	.+3760   	; 0x3e58 <main+0x30c8>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2fa8:	5d 98       	cbi	0x0b, 5	; 11
    2faa:	27 e1       	ldi	r18, 0x17	; 23
    2fac:	5a 98       	cbi	0x0b, 2	; 11
		pos--;
		for(index=0; index<3; index++){
			pinWrite(latch_pin, LOW);
			for(bit = 0; bit < 8 ; bit++){
				pinWrite(data_pin,((*(p+pos)) & (1 << byte)));
    2fae:	e2 2f       	mov	r30, r18
    2fb0:	f0 e0       	ldi	r31, 0x00	; 0
    2fb2:	e6 5b       	subi	r30, 0xB6	; 182
    2fb4:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    2fb6:	40 81       	ld	r20, Z
    2fb8:	43 23       	and	r20, r19
    2fba:	09 f0       	breq	.+2      	; 0x2fbe <main+0x222e>
    2fbc:	4b c7       	rjmp	.+3734   	; 0x3e54 <main+0x30c4>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2fbe:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2fc0:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2fc2:	5b 98       	cbi	0x0b, 3	; 11
    2fc4:	ef ef       	ldi	r30, 0xFF	; 255
    2fc6:	e2 0f       	add	r30, r18
    2fc8:	f0 e0       	ldi	r31, 0x00	; 0
    2fca:	e6 5b       	subi	r30, 0xB6	; 182
    2fcc:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    2fce:	40 81       	ld	r20, Z
    2fd0:	43 23       	and	r20, r19
    2fd2:	09 f0       	breq	.+2      	; 0x2fd6 <main+0x2246>
    2fd4:	3d c7       	rjmp	.+3706   	; 0x3e50 <main+0x30c0>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2fd6:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2fd8:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2fda:	5b 98       	cbi	0x0b, 3	; 11
    2fdc:	ee ef       	ldi	r30, 0xFE	; 254
    2fde:	e2 0f       	add	r30, r18
    2fe0:	f0 e0       	ldi	r31, 0x00	; 0
    2fe2:	e6 5b       	subi	r30, 0xB6	; 182
    2fe4:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    2fe6:	40 81       	ld	r20, Z
    2fe8:	43 23       	and	r20, r19
    2fea:	09 f0       	breq	.+2      	; 0x2fee <main+0x225e>
    2fec:	2f c7       	rjmp	.+3678   	; 0x3e4c <main+0x30bc>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2fee:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    2ff0:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    2ff2:	5b 98       	cbi	0x0b, 3	; 11
    2ff4:	ed ef       	ldi	r30, 0xFD	; 253
    2ff6:	e2 0f       	add	r30, r18
    2ff8:	f0 e0       	ldi	r31, 0x00	; 0
    2ffa:	e6 5b       	subi	r30, 0xB6	; 182
    2ffc:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    2ffe:	40 81       	ld	r20, Z
    3000:	43 23       	and	r20, r19
    3002:	09 f0       	breq	.+2      	; 0x3006 <main+0x2276>
    3004:	21 c7       	rjmp	.+3650   	; 0x3e48 <main+0x30b8>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    3006:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    3008:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    300a:	5b 98       	cbi	0x0b, 3	; 11
    300c:	ec ef       	ldi	r30, 0xFC	; 252
    300e:	e2 0f       	add	r30, r18
    3010:	f0 e0       	ldi	r31, 0x00	; 0
    3012:	e6 5b       	subi	r30, 0xB6	; 182
    3014:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    3016:	40 81       	ld	r20, Z
    3018:	43 23       	and	r20, r19
    301a:	09 f0       	breq	.+2      	; 0x301e <main+0x228e>
    301c:	13 c7       	rjmp	.+3622   	; 0x3e44 <main+0x30b4>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    301e:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    3020:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    3022:	5b 98       	cbi	0x0b, 3	; 11
    3024:	eb ef       	ldi	r30, 0xFB	; 251
    3026:	e2 0f       	add	r30, r18
    3028:	f0 e0       	ldi	r31, 0x00	; 0
    302a:	e6 5b       	subi	r30, 0xB6	; 182
    302c:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    302e:	40 81       	ld	r20, Z
    3030:	43 23       	and	r20, r19
    3032:	09 f0       	breq	.+2      	; 0x3036 <main+0x22a6>
    3034:	05 c7       	rjmp	.+3594   	; 0x3e40 <main+0x30b0>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    3036:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    3038:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    303a:	5b 98       	cbi	0x0b, 3	; 11
    303c:	ea ef       	ldi	r30, 0xFA	; 250
    303e:	e2 0f       	add	r30, r18
    3040:	f0 e0       	ldi	r31, 0x00	; 0
    3042:	e6 5b       	subi	r30, 0xB6	; 182
    3044:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    3046:	40 81       	ld	r20, Z
    3048:	43 23       	and	r20, r19
    304a:	09 f0       	breq	.+2      	; 0x304e <main+0x22be>
    304c:	f7 c6       	rjmp	.+3566   	; 0x3e3c <main+0x30ac>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    304e:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    3050:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    3052:	5b 98       	cbi	0x0b, 3	; 11
    3054:	e9 ef       	ldi	r30, 0xF9	; 249
    3056:	e2 0f       	add	r30, r18
    3058:	f0 e0       	ldi	r31, 0x00	; 0
    305a:	e6 5b       	subi	r30, 0xB6	; 182
    305c:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    305e:	40 81       	ld	r20, Z
    3060:	43 23       	and	r20, r19
    3062:	09 f0       	breq	.+2      	; 0x3066 <main+0x22d6>
    3064:	e9 c6       	rjmp	.+3538   	; 0x3e38 <main+0x30a8>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    3066:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    3068:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    306a:	5b 98       	cbi	0x0b, 3	; 11
				//toggle the clock pin
				pinWrite(clock_pin, HIGH);
				pinWrite(clock_pin, LOW);
				pos--;
    306c:	28 50       	subi	r18, 0x08	; 8
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    306e:	5a 9a       	sbi	0x0b, 2	; 11
	//output byte
	for(byte=0; byte<7; byte++){
		pos = 24;
		pinWrite(end_pin,((*(p+pos)) & (1 << byte)));
		pos--;
		for(index=0; index<3; index++){
    3070:	2f 3f       	cpi	r18, 0xFF	; 255
    3072:	09 f0       	breq	.+2      	; 0x3076 <main+0x22e6>
    3074:	9b cf       	rjmp	.-202    	; 0x2fac <main+0x221c>
    3076:	a4 e0       	ldi	r26, 0x04	; 4
    3078:	b1 e0       	ldi	r27, 0x01	; 1
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    307a:	ed 91       	ld	r30, X+
    307c:	ee 23       	and	r30, r30
    307e:	01 f1       	breq	.+64     	; 0x30c0 <main+0x2330>
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    3080:	ec 3c       	cpi	r30, 0xCC	; 204
    3082:	d8 f7       	brcc	.-10     	; 0x307a <main+0x22ea>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    3084:	27 e0       	ldi	r18, 0x07	; 7
    3086:	e2 9f       	mul	r30, r18
    3088:	f0 01       	movw	r30, r0
    308a:	11 24       	eor	r1, r1
    308c:	af 01       	movw	r20, r30
    308e:	44 5b       	subi	r20, 0xB4	; 180
    3090:	5e 4f       	sbci	r21, 0xFE	; 254
    3092:	2a 01       	movw	r4, r20
    3094:	fa 01       	movw	r30, r20
    3096:	42 81       	ldd	r20, Z+2	; 0x02
    3098:	53 81       	ldd	r21, Z+3	; 0x03
    309a:	fa 01       	movw	r30, r20
    309c:	70 81       	ld	r23, Z
    309e:	21 e0       	ldi	r18, 0x01	; 1
    30a0:	30 e0       	ldi	r19, 0x00	; 0
    30a2:	f2 01       	movw	r30, r4
    30a4:	06 80       	ldd	r0, Z+6	; 0x06
    30a6:	02 c0       	rjmp	.+4      	; 0x30ac <main+0x231c>
    30a8:	22 0f       	add	r18, r18
    30aa:	33 1f       	adc	r19, r19
    30ac:	0a 94       	dec	r0
    30ae:	e2 f7       	brpl	.-8      	; 0x30a8 <main+0x2318>
    30b0:	62 2f       	mov	r22, r18
    30b2:	60 95       	com	r22
    30b4:	67 23       	and	r22, r23
    30b6:	fa 01       	movw	r30, r20
    30b8:	60 83       	st	Z, r22
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    30ba:	ed 91       	ld	r30, X+
    30bc:	e1 11       	cpse	r30, r1
    30be:	e0 cf       	rjmp	.-64     	; 0x3080 <main+0x22f0>
/* Multiplexing method                                                  */
/************************************************************************/
static inline void MultiPlex(uint8_t *pin)
{
	pinsMultiWrite(plex_pins, LOW);
	pinWrite(plex_pins[*pin], HIGH);
    30c0:	d5 01       	movw	r26, r10
    30c2:	ed 91       	ld	r30, X+
    30c4:	5d 01       	movw	r10, r26
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    30c6:	ec 3c       	cpi	r30, 0xCC	; 204
    30c8:	08 f4       	brcc	.+2      	; 0x30cc <main+0x233c>
    30ca:	c8 c6       	rjmp	.+3472   	; 0x3e5c <main+0x30cc>
	delay(delayms);
    30cc:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    30d0:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
/*  delay                                                               */
/************************************************************************/
int delayms = 1;
static inline void delay(int dl)
{
	while(dl >= 0)
    30d4:	37 fd       	sbrc	r19, 7
    30d6:	09 c0       	rjmp	.+18     	; 0x30ea <main+0x235a>
    30d8:	ef e9       	ldi	r30, 0x9F	; 159
    30da:	ff e0       	ldi	r31, 0x0F	; 15
    30dc:	31 97       	sbiw	r30, 0x01	; 1
    30de:	f1 f7       	brne	.-4      	; 0x30dc <main+0x234c>
    30e0:	00 c0       	rjmp	.+0      	; 0x30e2 <main+0x2352>
    30e2:	00 00       	nop
	{
		_delay_ms(1);
		dl--;
    30e4:	21 50       	subi	r18, 0x01	; 1
    30e6:	31 09       	sbc	r19, r1
    30e8:	b8 f7       	brcc	.-18     	; 0x30d8 <main+0x2348>
	//output byte
	for(byte=0; byte<7; byte++){
		pos = 24;
		pinWrite(end_pin,((*(p+pos)) & (1 << byte)));
		pos--;
		for(index=0; index<3; index++){
    30ea:	a4 e0       	ldi	r26, 0x04	; 4
    30ec:	b1 e0       	ldi	r27, 0x01	; 1
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    30ee:	ed 91       	ld	r30, X+
    30f0:	ee 23       	and	r30, r30
    30f2:	01 f1       	breq	.+64     	; 0x3134 <main+0x23a4>
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    30f4:	ec 3c       	cpi	r30, 0xCC	; 204
    30f6:	d8 f7       	brcc	.-10     	; 0x30ee <main+0x235e>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    30f8:	27 e0       	ldi	r18, 0x07	; 7
    30fa:	e2 9f       	mul	r30, r18
    30fc:	f0 01       	movw	r30, r0
    30fe:	11 24       	eor	r1, r1
    3100:	af 01       	movw	r20, r30
    3102:	44 5b       	subi	r20, 0xB4	; 180
    3104:	5e 4f       	sbci	r21, 0xFE	; 254
    3106:	2a 01       	movw	r4, r20
    3108:	fa 01       	movw	r30, r20
    310a:	62 81       	ldd	r22, Z+2	; 0x02
    310c:	73 81       	ldd	r23, Z+3	; 0x03
    310e:	fb 01       	movw	r30, r22
    3110:	50 81       	ld	r21, Z
    3112:	21 e0       	ldi	r18, 0x01	; 1
    3114:	30 e0       	ldi	r19, 0x00	; 0
    3116:	f2 01       	movw	r30, r4
    3118:	06 80       	ldd	r0, Z+6	; 0x06
    311a:	02 c0       	rjmp	.+4      	; 0x3120 <main+0x2390>
    311c:	22 0f       	add	r18, r18
    311e:	33 1f       	adc	r19, r19
    3120:	0a 94       	dec	r0
    3122:	e2 f7       	brpl	.-8      	; 0x311c <main+0x238c>
    3124:	42 2f       	mov	r20, r18
    3126:	40 95       	com	r20
    3128:	45 23       	and	r20, r21
    312a:	fb 01       	movw	r30, r22
    312c:	40 83       	st	Z, r20
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    312e:	ed 91       	ld	r30, X+
    3130:	e1 11       	cpse	r30, r1
    3132:	e0 cf       	rjmp	.-64     	; 0x30f4 <main+0x2364>
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    3134:	5d 98       	cbi	0x0b, 5	; 11
    3136:	24 e0       	ldi	r18, 0x04	; 4
    3138:	30 e0       	ldi	r19, 0x00	; 0
    313a:	5a 98       	cbi	0x0b, 2	; 11
    313c:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    313e:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    3140:	5b 98       	cbi	0x0b, 3	; 11
    3142:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    3144:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    3146:	5b 98       	cbi	0x0b, 3	; 11
    3148:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    314a:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    314c:	5b 98       	cbi	0x0b, 3	; 11
    314e:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    3150:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    3152:	5b 98       	cbi	0x0b, 3	; 11
    3154:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    3156:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    3158:	5b 98       	cbi	0x0b, 3	; 11
    315a:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    315c:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    315e:	5b 98       	cbi	0x0b, 3	; 11
    3160:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    3162:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    3164:	5b 98       	cbi	0x0b, 3	; 11
    3166:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    3168:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    316a:	5b 98       	cbi	0x0b, 3	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    316c:	5a 9a       	sbi	0x0b, 2	; 11
    316e:	21 50       	subi	r18, 0x01	; 1
    3170:	31 09       	sbc	r19, r1
/************************************************************************/
static inline void Clear(){
	int x, y = 0;
	pinsMultiWrite(plex_pins, LOW);
	pinWrite(end_pin, LOW);
	for(x = 0; x < 4; x++) {
    3172:	19 f7       	brne	.-58     	; 0x313a <main+0x23aa>
    3174:	01 96       	adiw	r24, 0x01	; 1
static inline void DisplayBuffer(const uint8_t *p)
{
	uint8_t byte, index, bit = 0;
	uint8_t pos = 24;
	//output byte
	for(byte=0; byte<7; byte++){
    3176:	87 30       	cpi	r24, 0x07	; 7
    3178:	91 05       	cpc	r25, r1
    317a:	09 f0       	breq	.+2      	; 0x317e <main+0x23ee>
    317c:	08 cf       	rjmp	.-496    	; 0x2f8e <main+0x21fe>
			pinWrite(latch_pin, HIGH);
		}
		MultiPlex(&byte);
		Clear();
	}
	delayms = 1;
    317e:	90 92 01 01 	sts	0x0101, r9	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    3182:	80 92 00 01 	sts	0x0100, r8	; 0x800100 <__DATA_REGION_ORIGIN__>
    3186:	da 94       	dec	r13
	}
}*/
static inline void HoldDisplayBuffer(const uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
    3188:	d1 10       	cpse	r13, r1
    318a:	fb ce       	rjmp	.-522    	; 0x2f82 <main+0x21f2>
    318c:	d8 01       	movw	r26, r16
    318e:	e7 2d       	mov	r30, r7
    3190:	1d 92       	st	X+, r1
    3192:	ea 95       	dec	r30
    3194:	e9 f7       	brne	.-6      	; 0x3190 <main+0x2400>
    3196:	bc e0       	ldi	r27, 0x0C	; 12
    3198:	ab 2e       	mov	r10, r27
    319a:	b1 e0       	ldi	r27, 0x01	; 1
    319c:	bb 2e       	mov	r11, r27
    319e:	d5 01       	movw	r26, r10
    31a0:	20 e0       	ldi	r18, 0x00	; 0
    31a2:	83 e5       	ldi	r24, 0x53	; 83
/* returns the index of the first byte of the requested character       */
/************************************************************************/
uint8_t CharStart(const char *p)
{
	/*if(*p == ' ') return 0;
	else*/ return (uint8_t) (( *p - ' '));
    31a4:	80 52       	subi	r24, 0x20	; 32
	unsigned int index = 0;
	uint8_t len = 0;
	uint8_t x = 0;
	ClearStringBuffer();
	while(*ch){
		index = CharStart(ch++) * 5;
    31a6:	f5 e0       	ldi	r31, 0x05	; 5
    31a8:	8f 9f       	mul	r24, r31
    31aa:	c0 01       	movw	r24, r0
    31ac:	11 24       	eor	r1, r1
		for(len = 0; len < 5; len++){
			stringbuffer[x] = (uint8_t)(pgm_read_byte((font_5x7 + index)));
    31ae:	fc 01       	movw	r30, r24
    31b0:	e8 59       	subi	r30, 0x98	; 152
    31b2:	ff 4f       	sbci	r31, 0xFF	; 255
    31b4:	34 91       	lpm	r19, Z
    31b6:	e2 2f       	mov	r30, r18
    31b8:	f0 e0       	ldi	r31, 0x00	; 0
    31ba:	ef 5c       	subi	r30, 0xCF	; 207
    31bc:	fd 4f       	sbci	r31, 0xFD	; 253
    31be:	30 83       	st	Z, r19
    31c0:	fc 01       	movw	r30, r24
    31c2:	e7 59       	subi	r30, 0x97	; 151
    31c4:	ff 4f       	sbci	r31, 0xFF	; 255
    31c6:	34 91       	lpm	r19, Z
    31c8:	e1 e0       	ldi	r30, 0x01	; 1
    31ca:	e2 0f       	add	r30, r18
    31cc:	f0 e0       	ldi	r31, 0x00	; 0
    31ce:	ef 5c       	subi	r30, 0xCF	; 207
    31d0:	fd 4f       	sbci	r31, 0xFD	; 253
    31d2:	30 83       	st	Z, r19
    31d4:	fc 01       	movw	r30, r24
    31d6:	e6 59       	subi	r30, 0x96	; 150
    31d8:	ff 4f       	sbci	r31, 0xFF	; 255
    31da:	34 91       	lpm	r19, Z
    31dc:	e2 e0       	ldi	r30, 0x02	; 2
    31de:	e2 0f       	add	r30, r18
    31e0:	f0 e0       	ldi	r31, 0x00	; 0
    31e2:	ef 5c       	subi	r30, 0xCF	; 207
    31e4:	fd 4f       	sbci	r31, 0xFD	; 253
    31e6:	30 83       	st	Z, r19
    31e8:	fc 01       	movw	r30, r24
    31ea:	e5 59       	subi	r30, 0x95	; 149
    31ec:	ff 4f       	sbci	r31, 0xFF	; 255
    31ee:	34 91       	lpm	r19, Z
    31f0:	e3 e0       	ldi	r30, 0x03	; 3
    31f2:	e2 0f       	add	r30, r18
    31f4:	f0 e0       	ldi	r31, 0x00	; 0
    31f6:	ef 5c       	subi	r30, 0xCF	; 207
    31f8:	fd 4f       	sbci	r31, 0xFD	; 253
    31fa:	30 83       	st	Z, r19
    31fc:	fc 01       	movw	r30, r24
    31fe:	e4 59       	subi	r30, 0x94	; 148
    3200:	ff 4f       	sbci	r31, 0xFF	; 255
    3202:	84 91       	lpm	r24, Z
    3204:	e4 e0       	ldi	r30, 0x04	; 4
    3206:	e2 0f       	add	r30, r18
    3208:	f0 e0       	ldi	r31, 0x00	; 0
    320a:	ef 5c       	subi	r30, 0xCF	; 207
    320c:	fd 4f       	sbci	r31, 0xFD	; 253
    320e:	80 83       	st	Z, r24
			index++; x++;
		}
		stringbuffer[x] = 0;
    3210:	e5 e0       	ldi	r30, 0x05	; 5
    3212:	e2 0f       	add	r30, r18
    3214:	f0 e0       	ldi	r31, 0x00	; 0
    3216:	ef 5c       	subi	r30, 0xCF	; 207
    3218:	fd 4f       	sbci	r31, 0xFD	; 253
    321a:	10 82       	st	Z, r1
		x++;
    321c:	2a 5f       	subi	r18, 0xFA	; 250
{
	unsigned int index = 0;
	uint8_t len = 0;
	uint8_t x = 0;
	ClearStringBuffer();
	while(*ch){
    321e:	8d 91       	ld	r24, X+
    3220:	81 11       	cpse	r24, r1
    3222:	c0 cf       	rjmp	.-128    	; 0x31a4 <main+0x2414>
/*split while displaying                                                */
/************************************************************************/
void Rain(const uint8_t *p, uint8_t delay)
{
	uint8_t rt = 0;
	delayms = delay;
    3224:	f4 e6       	ldi	r31, 0x64	; 100
    3226:	4f 2e       	mov	r4, r31
    3228:	51 2c       	mov	r5, r1
    322a:	50 92 01 01 	sts	0x0101, r5	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    322e:	40 92 00 01 	sts	0x0100, r4	; 0x800100 <__DATA_REGION_ORIGIN__>
    3232:	a4 e6       	ldi	r26, 0x64	; 100
    3234:	da 2e       	mov	r13, r26
	}
}*/
static inline void HoldDisplayBuffer(const uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
    3236:	24 e0       	ldi	r18, 0x04	; 4
    3238:	31 e0       	ldi	r19, 0x01	; 1
    323a:	3a 83       	std	Y+2, r19	; 0x02
    323c:	29 83       	std	Y+1, r18	; 0x01
    323e:	80 e0       	ldi	r24, 0x00	; 0
    3240:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t byte, index, bit = 0;
	uint8_t pos = 24;
	//output byte
	for(byte=0; byte<7; byte++){
		pos = 24;
		pinWrite(end_pin,((*(p+pos)) & (1 << byte)));
    3242:	21 e0       	ldi	r18, 0x01	; 1
    3244:	30 e0       	ldi	r19, 0x00	; 0
    3246:	08 2e       	mov	r0, r24
    3248:	01 c0       	rjmp	.+2      	; 0x324c <main+0x24bc>
    324a:	22 0f       	add	r18, r18
    324c:	0a 94       	dec	r0
    324e:	ea f7       	brpl	.-6      	; 0x324a <main+0x24ba>
    3250:	32 2f       	mov	r19, r18
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    3252:	40 91 49 02 	lds	r20, 0x0249	; 0x800249 <stringbuffer+0x18>
    3256:	24 23       	and	r18, r20
    3258:	09 f0       	breq	.+2      	; 0x325c <main+0x24cc>
    325a:	24 c6       	rjmp	.+3144   	; 0x3ea4 <main+0x3114>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    325c:	5d 98       	cbi	0x0b, 5	; 11
	}
}*/
static inline void HoldDisplayBuffer(const uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
    325e:	27 e1       	ldi	r18, 0x17	; 23
    3260:	5a 98       	cbi	0x0b, 2	; 11
		pinWrite(end_pin,((*(p+pos)) & (1 << byte)));
		pos--;
		for(index=0; index<3; index++){
			pinWrite(latch_pin, LOW);
			for(bit = 0; bit < 8 ; bit++){
				pinWrite(data_pin,((*(p+pos)) & (1 << byte)));
    3262:	e2 2f       	mov	r30, r18
    3264:	f0 e0       	ldi	r31, 0x00	; 0
    3266:	ef 5c       	subi	r30, 0xCF	; 207
    3268:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    326a:	40 81       	ld	r20, Z
    326c:	43 23       	and	r20, r19
    326e:	09 f0       	breq	.+2      	; 0x3272 <main+0x24e2>
    3270:	17 c6       	rjmp	.+3118   	; 0x3ea0 <main+0x3110>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    3272:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    3274:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    3276:	5b 98       	cbi	0x0b, 3	; 11
    3278:	ef ef       	ldi	r30, 0xFF	; 255
    327a:	e2 0f       	add	r30, r18
    327c:	f0 e0       	ldi	r31, 0x00	; 0
    327e:	ef 5c       	subi	r30, 0xCF	; 207
    3280:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    3282:	40 81       	ld	r20, Z
    3284:	43 23       	and	r20, r19
    3286:	09 f0       	breq	.+2      	; 0x328a <main+0x24fa>
    3288:	09 c6       	rjmp	.+3090   	; 0x3e9c <main+0x310c>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    328a:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    328c:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    328e:	5b 98       	cbi	0x0b, 3	; 11
    3290:	ee ef       	ldi	r30, 0xFE	; 254
    3292:	e2 0f       	add	r30, r18
    3294:	f0 e0       	ldi	r31, 0x00	; 0
    3296:	ef 5c       	subi	r30, 0xCF	; 207
    3298:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    329a:	40 81       	ld	r20, Z
    329c:	43 23       	and	r20, r19
    329e:	09 f0       	breq	.+2      	; 0x32a2 <main+0x2512>
    32a0:	fb c5       	rjmp	.+3062   	; 0x3e98 <main+0x3108>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    32a2:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    32a4:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    32a6:	5b 98       	cbi	0x0b, 3	; 11
    32a8:	ed ef       	ldi	r30, 0xFD	; 253
    32aa:	e2 0f       	add	r30, r18
    32ac:	f0 e0       	ldi	r31, 0x00	; 0
    32ae:	ef 5c       	subi	r30, 0xCF	; 207
    32b0:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    32b2:	40 81       	ld	r20, Z
    32b4:	43 23       	and	r20, r19
    32b6:	09 f0       	breq	.+2      	; 0x32ba <main+0x252a>
    32b8:	ed c5       	rjmp	.+3034   	; 0x3e94 <main+0x3104>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    32ba:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    32bc:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    32be:	5b 98       	cbi	0x0b, 3	; 11
    32c0:	ec ef       	ldi	r30, 0xFC	; 252
    32c2:	e2 0f       	add	r30, r18
    32c4:	f0 e0       	ldi	r31, 0x00	; 0
    32c6:	ef 5c       	subi	r30, 0xCF	; 207
    32c8:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    32ca:	40 81       	ld	r20, Z
    32cc:	43 23       	and	r20, r19
    32ce:	09 f0       	breq	.+2      	; 0x32d2 <main+0x2542>
    32d0:	df c5       	rjmp	.+3006   	; 0x3e90 <main+0x3100>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    32d2:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    32d4:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    32d6:	5b 98       	cbi	0x0b, 3	; 11
    32d8:	eb ef       	ldi	r30, 0xFB	; 251
    32da:	e2 0f       	add	r30, r18
    32dc:	f0 e0       	ldi	r31, 0x00	; 0
    32de:	ef 5c       	subi	r30, 0xCF	; 207
    32e0:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    32e2:	40 81       	ld	r20, Z
    32e4:	43 23       	and	r20, r19
    32e6:	09 f0       	breq	.+2      	; 0x32ea <main+0x255a>
    32e8:	d1 c5       	rjmp	.+2978   	; 0x3e8c <main+0x30fc>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    32ea:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    32ec:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    32ee:	5b 98       	cbi	0x0b, 3	; 11
    32f0:	ea ef       	ldi	r30, 0xFA	; 250
    32f2:	e2 0f       	add	r30, r18
    32f4:	f0 e0       	ldi	r31, 0x00	; 0
    32f6:	ef 5c       	subi	r30, 0xCF	; 207
    32f8:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    32fa:	40 81       	ld	r20, Z
    32fc:	43 23       	and	r20, r19
    32fe:	09 f0       	breq	.+2      	; 0x3302 <main+0x2572>
    3300:	c3 c5       	rjmp	.+2950   	; 0x3e88 <main+0x30f8>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    3302:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    3304:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    3306:	5b 98       	cbi	0x0b, 3	; 11
    3308:	e9 ef       	ldi	r30, 0xF9	; 249
    330a:	e2 0f       	add	r30, r18
    330c:	f0 e0       	ldi	r31, 0x00	; 0
    330e:	ef 5c       	subi	r30, 0xCF	; 207
    3310:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    3312:	40 81       	ld	r20, Z
    3314:	43 23       	and	r20, r19
    3316:	09 f0       	breq	.+2      	; 0x331a <main+0x258a>
    3318:	b5 c5       	rjmp	.+2922   	; 0x3e84 <main+0x30f4>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    331a:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    331c:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    331e:	5b 98       	cbi	0x0b, 3	; 11
				//toggle the clock pin
				pinWrite(clock_pin, HIGH);
				pinWrite(clock_pin, LOW);
				pos--;
    3320:	28 50       	subi	r18, 0x08	; 8
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    3322:	5a 9a       	sbi	0x0b, 2	; 11
	//output byte
	for(byte=0; byte<7; byte++){
		pos = 24;
		pinWrite(end_pin,((*(p+pos)) & (1 << byte)));
		pos--;
		for(index=0; index<3; index++){
    3324:	2f 3f       	cpi	r18, 0xFF	; 255
    3326:	09 f0       	breq	.+2      	; 0x332a <main+0x259a>
    3328:	9b cf       	rjmp	.-202    	; 0x3260 <main+0x24d0>
    332a:	a4 e0       	ldi	r26, 0x04	; 4
    332c:	b1 e0       	ldi	r27, 0x01	; 1
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    332e:	ed 91       	ld	r30, X+
    3330:	ee 23       	and	r30, r30
    3332:	01 f1       	breq	.+64     	; 0x3374 <main+0x25e4>
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    3334:	ec 3c       	cpi	r30, 0xCC	; 204
    3336:	d8 f7       	brcc	.-10     	; 0x332e <main+0x259e>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    3338:	27 e0       	ldi	r18, 0x07	; 7
    333a:	e2 9f       	mul	r30, r18
    333c:	f0 01       	movw	r30, r0
    333e:	11 24       	eor	r1, r1
    3340:	bf 01       	movw	r22, r30
    3342:	64 5b       	subi	r22, 0xB4	; 180
    3344:	7e 4f       	sbci	r23, 0xFE	; 254
    3346:	fb 01       	movw	r30, r22
    3348:	42 81       	ldd	r20, Z+2	; 0x02
    334a:	53 81       	ldd	r21, Z+3	; 0x03
    334c:	fa 01       	movw	r30, r20
    334e:	30 81       	ld	r19, Z
    3350:	44 24       	eor	r4, r4
    3352:	43 94       	inc	r4
    3354:	51 2c       	mov	r5, r1
    3356:	fb 01       	movw	r30, r22
    3358:	06 80       	ldd	r0, Z+6	; 0x06
    335a:	02 c0       	rjmp	.+4      	; 0x3360 <main+0x25d0>
    335c:	44 0c       	add	r4, r4
    335e:	55 1c       	adc	r5, r5
    3360:	0a 94       	dec	r0
    3362:	e2 f7       	brpl	.-8      	; 0x335c <main+0x25cc>
    3364:	24 2d       	mov	r18, r4
    3366:	20 95       	com	r18
    3368:	23 23       	and	r18, r19
    336a:	fa 01       	movw	r30, r20
    336c:	20 83       	st	Z, r18
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    336e:	ed 91       	ld	r30, X+
    3370:	e1 11       	cpse	r30, r1
    3372:	e0 cf       	rjmp	.-64     	; 0x3334 <main+0x25a4>
/* Multiplexing method                                                  */
/************************************************************************/
static inline void MultiPlex(uint8_t *pin)
{
	pinsMultiWrite(plex_pins, LOW);
	pinWrite(plex_pins[*pin], HIGH);
    3374:	a9 81       	ldd	r26, Y+1	; 0x01
    3376:	ba 81       	ldd	r27, Y+2	; 0x02
    3378:	ed 91       	ld	r30, X+
    337a:	ba 83       	std	Y+2, r27	; 0x02
    337c:	a9 83       	std	Y+1, r26	; 0x01
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    337e:	ec 3c       	cpi	r30, 0xCC	; 204
    3380:	08 f4       	brcc	.+2      	; 0x3384 <main+0x25f4>
    3382:	92 c5       	rjmp	.+2852   	; 0x3ea8 <main+0x3118>
	delay(delayms);
    3384:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    3388:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
/*  delay                                                               */
/************************************************************************/
int delayms = 1;
static inline void delay(int dl)
{
	while(dl >= 0)
    338c:	37 fd       	sbrc	r19, 7
    338e:	09 c0       	rjmp	.+18     	; 0x33a2 <main+0x2612>
    3390:	ef e9       	ldi	r30, 0x9F	; 159
    3392:	ff e0       	ldi	r31, 0x0F	; 15
    3394:	31 97       	sbiw	r30, 0x01	; 1
    3396:	f1 f7       	brne	.-4      	; 0x3394 <main+0x2604>
    3398:	00 c0       	rjmp	.+0      	; 0x339a <main+0x260a>
    339a:	00 00       	nop
	{
		_delay_ms(1);
		dl--;
    339c:	21 50       	subi	r18, 0x01	; 1
    339e:	31 09       	sbc	r19, r1
    33a0:	b8 f7       	brcc	.-18     	; 0x3390 <main+0x2600>
	//output byte
	for(byte=0; byte<7; byte++){
		pos = 24;
		pinWrite(end_pin,((*(p+pos)) & (1 << byte)));
		pos--;
		for(index=0; index<3; index++){
    33a2:	a4 e0       	ldi	r26, 0x04	; 4
    33a4:	b1 e0       	ldi	r27, 0x01	; 1
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    33a6:	ed 91       	ld	r30, X+
    33a8:	ee 23       	and	r30, r30
    33aa:	01 f1       	breq	.+64     	; 0x33ec <main+0x265c>
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    33ac:	ec 3c       	cpi	r30, 0xCC	; 204
    33ae:	d8 f7       	brcc	.-10     	; 0x33a6 <main+0x2616>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    33b0:	27 e0       	ldi	r18, 0x07	; 7
    33b2:	e2 9f       	mul	r30, r18
    33b4:	f0 01       	movw	r30, r0
    33b6:	11 24       	eor	r1, r1
    33b8:	bf 01       	movw	r22, r30
    33ba:	64 5b       	subi	r22, 0xB4	; 180
    33bc:	7e 4f       	sbci	r23, 0xFE	; 254
    33be:	fb 01       	movw	r30, r22
    33c0:	42 81       	ldd	r20, Z+2	; 0x02
    33c2:	53 81       	ldd	r21, Z+3	; 0x03
    33c4:	fa 01       	movw	r30, r20
    33c6:	30 81       	ld	r19, Z
    33c8:	44 24       	eor	r4, r4
    33ca:	43 94       	inc	r4
    33cc:	51 2c       	mov	r5, r1
    33ce:	fb 01       	movw	r30, r22
    33d0:	06 80       	ldd	r0, Z+6	; 0x06
    33d2:	02 c0       	rjmp	.+4      	; 0x33d8 <main+0x2648>
    33d4:	44 0c       	add	r4, r4
    33d6:	55 1c       	adc	r5, r5
    33d8:	0a 94       	dec	r0
    33da:	e2 f7       	brpl	.-8      	; 0x33d4 <main+0x2644>
    33dc:	24 2d       	mov	r18, r4
    33de:	20 95       	com	r18
    33e0:	23 23       	and	r18, r19
    33e2:	fa 01       	movw	r30, r20
    33e4:	20 83       	st	Z, r18
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    33e6:	ed 91       	ld	r30, X+
    33e8:	e1 11       	cpse	r30, r1
    33ea:	e0 cf       	rjmp	.-64     	; 0x33ac <main+0x261c>
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    33ec:	5d 98       	cbi	0x0b, 5	; 11
    33ee:	24 e0       	ldi	r18, 0x04	; 4
    33f0:	30 e0       	ldi	r19, 0x00	; 0
    33f2:	5a 98       	cbi	0x0b, 2	; 11
    33f4:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    33f6:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    33f8:	5b 98       	cbi	0x0b, 3	; 11
    33fa:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    33fc:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    33fe:	5b 98       	cbi	0x0b, 3	; 11
    3400:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    3402:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    3404:	5b 98       	cbi	0x0b, 3	; 11
    3406:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    3408:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    340a:	5b 98       	cbi	0x0b, 3	; 11
    340c:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    340e:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    3410:	5b 98       	cbi	0x0b, 3	; 11
    3412:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    3414:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    3416:	5b 98       	cbi	0x0b, 3	; 11
    3418:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    341a:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    341c:	5b 98       	cbi	0x0b, 3	; 11
    341e:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    3420:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    3422:	5b 98       	cbi	0x0b, 3	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    3424:	5a 9a       	sbi	0x0b, 2	; 11
    3426:	21 50       	subi	r18, 0x01	; 1
    3428:	31 09       	sbc	r19, r1
/************************************************************************/
static inline void Clear(){
	int x, y = 0;
	pinsMultiWrite(plex_pins, LOW);
	pinWrite(end_pin, LOW);
	for(x = 0; x < 4; x++) {
    342a:	19 f7       	brne	.-58     	; 0x33f2 <main+0x2662>
    342c:	01 96       	adiw	r24, 0x01	; 1
static inline void DisplayBuffer(const uint8_t *p)
{
	uint8_t byte, index, bit = 0;
	uint8_t pos = 24;
	//output byte
	for(byte=0; byte<7; byte++){
    342e:	87 30       	cpi	r24, 0x07	; 7
    3430:	91 05       	cpc	r25, r1
    3432:	09 f0       	breq	.+2      	; 0x3436 <main+0x26a6>
    3434:	06 cf       	rjmp	.-500    	; 0x3242 <main+0x24b2>
			pinWrite(latch_pin, HIGH);
		}
		MultiPlex(&byte);
		Clear();
	}
	delayms = 1;
    3436:	90 92 01 01 	sts	0x0101, r9	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    343a:	80 92 00 01 	sts	0x0100, r8	; 0x800100 <__DATA_REGION_ORIGIN__>
    343e:	da 94       	dec	r13
/************************************************************************/
void Rain(const uint8_t *p, uint8_t delay)
{
	uint8_t rt = 0;
	delayms = delay;
	for(rt=0; rt<100; rt++){
    3440:	d1 10       	cpse	r13, r1
    3442:	f9 ce       	rjmp	.-526    	; 0x3236 <main+0x24a6>
    3444:	d8 01       	movw	r26, r16
    3446:	e7 2d       	mov	r30, r7
    3448:	1d 92       	st	X+, r1
    344a:	ea 95       	dec	r30
    344c:	e9 f7       	brne	.-6      	; 0x3448 <main+0x26b8>
    344e:	ac e0       	ldi	r26, 0x0C	; 12
    3450:	b1 e0       	ldi	r27, 0x01	; 1
    3452:	20 e0       	ldi	r18, 0x00	; 0
    3454:	83 e5       	ldi	r24, 0x53	; 83
/* returns the index of the first byte of the requested character       */
/************************************************************************/
uint8_t CharStart(const char *p)
{
	/*if(*p == ' ') return 0;
	else*/ return (uint8_t) (( *p - ' '));
    3456:	80 52       	subi	r24, 0x20	; 32
	unsigned int index = 0;
	uint8_t len = 0;
	uint8_t x = 0;
	ClearStringBuffer();
	while(*ch){
		index = CharStart(ch++) * 5;
    3458:	f5 e0       	ldi	r31, 0x05	; 5
    345a:	8f 9f       	mul	r24, r31
    345c:	c0 01       	movw	r24, r0
    345e:	11 24       	eor	r1, r1
		for(len = 0; len < 5; len++){
			stringbuffer[x] = (uint8_t)(pgm_read_byte((font_5x7 + index)));
    3460:	fc 01       	movw	r30, r24
    3462:	e8 59       	subi	r30, 0x98	; 152
    3464:	ff 4f       	sbci	r31, 0xFF	; 255
    3466:	34 91       	lpm	r19, Z
    3468:	e2 2f       	mov	r30, r18
    346a:	f0 e0       	ldi	r31, 0x00	; 0
    346c:	ef 5c       	subi	r30, 0xCF	; 207
    346e:	fd 4f       	sbci	r31, 0xFD	; 253
    3470:	30 83       	st	Z, r19
    3472:	fc 01       	movw	r30, r24
    3474:	e7 59       	subi	r30, 0x97	; 151
    3476:	ff 4f       	sbci	r31, 0xFF	; 255
    3478:	34 91       	lpm	r19, Z
    347a:	e1 e0       	ldi	r30, 0x01	; 1
    347c:	e2 0f       	add	r30, r18
    347e:	f0 e0       	ldi	r31, 0x00	; 0
    3480:	ef 5c       	subi	r30, 0xCF	; 207
    3482:	fd 4f       	sbci	r31, 0xFD	; 253
    3484:	30 83       	st	Z, r19
    3486:	fc 01       	movw	r30, r24
    3488:	e6 59       	subi	r30, 0x96	; 150
    348a:	ff 4f       	sbci	r31, 0xFF	; 255
    348c:	34 91       	lpm	r19, Z
    348e:	e2 e0       	ldi	r30, 0x02	; 2
    3490:	e2 0f       	add	r30, r18
    3492:	f0 e0       	ldi	r31, 0x00	; 0
    3494:	ef 5c       	subi	r30, 0xCF	; 207
    3496:	fd 4f       	sbci	r31, 0xFD	; 253
    3498:	30 83       	st	Z, r19
    349a:	fc 01       	movw	r30, r24
    349c:	e5 59       	subi	r30, 0x95	; 149
    349e:	ff 4f       	sbci	r31, 0xFF	; 255
    34a0:	34 91       	lpm	r19, Z
    34a2:	e3 e0       	ldi	r30, 0x03	; 3
    34a4:	e2 0f       	add	r30, r18
    34a6:	f0 e0       	ldi	r31, 0x00	; 0
    34a8:	ef 5c       	subi	r30, 0xCF	; 207
    34aa:	fd 4f       	sbci	r31, 0xFD	; 253
    34ac:	30 83       	st	Z, r19
    34ae:	fc 01       	movw	r30, r24
    34b0:	e4 59       	subi	r30, 0x94	; 148
    34b2:	ff 4f       	sbci	r31, 0xFF	; 255
    34b4:	84 91       	lpm	r24, Z
    34b6:	e4 e0       	ldi	r30, 0x04	; 4
    34b8:	e2 0f       	add	r30, r18
    34ba:	f0 e0       	ldi	r31, 0x00	; 0
    34bc:	ef 5c       	subi	r30, 0xCF	; 207
    34be:	fd 4f       	sbci	r31, 0xFD	; 253
    34c0:	80 83       	st	Z, r24
			index++; x++;
		}
		stringbuffer[x] = 0;
    34c2:	e5 e0       	ldi	r30, 0x05	; 5
    34c4:	e2 0f       	add	r30, r18
    34c6:	f0 e0       	ldi	r31, 0x00	; 0
    34c8:	ef 5c       	subi	r30, 0xCF	; 207
    34ca:	fd 4f       	sbci	r31, 0xFD	; 253
    34cc:	10 82       	st	Z, r1
		x++;
    34ce:	2a 5f       	subi	r18, 0xFA	; 250
{
	unsigned int index = 0;
	uint8_t len = 0;
	uint8_t x = 0;
	ClearStringBuffer();
	while(*ch){
    34d0:	8d 91       	ld	r24, X+
    34d2:	81 11       	cpse	r24, r1
    34d4:	c0 cf       	rjmp	.-128    	; 0x3456 <main+0x26c6>
    34d6:	f2 e3       	ldi	r31, 0x32	; 50
    34d8:	df 2e       	mov	r13, r31
    34da:	24 e0       	ldi	r18, 0x04	; 4
    34dc:	31 e0       	ldi	r19, 0x01	; 1
    34de:	3a 83       	std	Y+2, r19	; 0x02
    34e0:	29 83       	std	Y+1, r18	; 0x01
    34e2:	80 e0       	ldi	r24, 0x00	; 0
    34e4:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t byte, index, bit = 0;
	uint8_t pos = 24;
	//output byte
	for(byte=0; byte<7; byte++){
		pos = 24;
		pinWrite(end_pin,((*(p+pos)) & (1 << byte)));
    34e6:	21 e0       	ldi	r18, 0x01	; 1
    34e8:	30 e0       	ldi	r19, 0x00	; 0
    34ea:	08 2e       	mov	r0, r24
    34ec:	01 c0       	rjmp	.+2      	; 0x34f0 <main+0x2760>
    34ee:	22 0f       	add	r18, r18
    34f0:	0a 94       	dec	r0
    34f2:	ea f7       	brpl	.-6      	; 0x34ee <main+0x275e>
    34f4:	32 2f       	mov	r19, r18
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    34f6:	40 91 49 02 	lds	r20, 0x0249	; 0x800249 <stringbuffer+0x18>
    34fa:	24 23       	and	r18, r20
    34fc:	09 f0       	breq	.+2      	; 0x3500 <main+0x2770>
    34fe:	f8 c4       	rjmp	.+2544   	; 0x3ef0 <main+0x3160>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    3500:	5d 98       	cbi	0x0b, 5	; 11
/************************************************************************/
void Rain(const uint8_t *p, uint8_t delay)
{
	uint8_t rt = 0;
	delayms = delay;
	for(rt=0; rt<100; rt++){
    3502:	27 e1       	ldi	r18, 0x17	; 23
    3504:	5a 98       	cbi	0x0b, 2	; 11
		pinWrite(end_pin,((*(p+pos)) & (1 << byte)));
		pos--;
		for(index=0; index<3; index++){
			pinWrite(latch_pin, LOW);
			for(bit = 0; bit < 8 ; bit++){
				pinWrite(data_pin,((*(p+pos)) & (1 << byte)));
    3506:	e2 2f       	mov	r30, r18
    3508:	f0 e0       	ldi	r31, 0x00	; 0
    350a:	ef 5c       	subi	r30, 0xCF	; 207
    350c:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    350e:	40 81       	ld	r20, Z
    3510:	43 23       	and	r20, r19
    3512:	09 f0       	breq	.+2      	; 0x3516 <main+0x2786>
    3514:	eb c4       	rjmp	.+2518   	; 0x3eec <main+0x315c>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    3516:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    3518:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    351a:	5b 98       	cbi	0x0b, 3	; 11
    351c:	ef ef       	ldi	r30, 0xFF	; 255
    351e:	e2 0f       	add	r30, r18
    3520:	f0 e0       	ldi	r31, 0x00	; 0
    3522:	ef 5c       	subi	r30, 0xCF	; 207
    3524:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    3526:	40 81       	ld	r20, Z
    3528:	43 23       	and	r20, r19
    352a:	09 f0       	breq	.+2      	; 0x352e <main+0x279e>
    352c:	dd c4       	rjmp	.+2490   	; 0x3ee8 <main+0x3158>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    352e:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    3530:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    3532:	5b 98       	cbi	0x0b, 3	; 11
    3534:	ee ef       	ldi	r30, 0xFE	; 254
    3536:	e2 0f       	add	r30, r18
    3538:	f0 e0       	ldi	r31, 0x00	; 0
    353a:	ef 5c       	subi	r30, 0xCF	; 207
    353c:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    353e:	40 81       	ld	r20, Z
    3540:	43 23       	and	r20, r19
    3542:	09 f0       	breq	.+2      	; 0x3546 <main+0x27b6>
    3544:	cf c4       	rjmp	.+2462   	; 0x3ee4 <main+0x3154>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    3546:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    3548:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    354a:	5b 98       	cbi	0x0b, 3	; 11
    354c:	ed ef       	ldi	r30, 0xFD	; 253
    354e:	e2 0f       	add	r30, r18
    3550:	f0 e0       	ldi	r31, 0x00	; 0
    3552:	ef 5c       	subi	r30, 0xCF	; 207
    3554:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    3556:	40 81       	ld	r20, Z
    3558:	43 23       	and	r20, r19
    355a:	09 f0       	breq	.+2      	; 0x355e <main+0x27ce>
    355c:	c1 c4       	rjmp	.+2434   	; 0x3ee0 <main+0x3150>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    355e:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    3560:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    3562:	5b 98       	cbi	0x0b, 3	; 11
    3564:	ec ef       	ldi	r30, 0xFC	; 252
    3566:	e2 0f       	add	r30, r18
    3568:	f0 e0       	ldi	r31, 0x00	; 0
    356a:	ef 5c       	subi	r30, 0xCF	; 207
    356c:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    356e:	40 81       	ld	r20, Z
    3570:	43 23       	and	r20, r19
    3572:	09 f0       	breq	.+2      	; 0x3576 <main+0x27e6>
    3574:	b3 c4       	rjmp	.+2406   	; 0x3edc <main+0x314c>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    3576:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    3578:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    357a:	5b 98       	cbi	0x0b, 3	; 11
    357c:	eb ef       	ldi	r30, 0xFB	; 251
    357e:	e2 0f       	add	r30, r18
    3580:	f0 e0       	ldi	r31, 0x00	; 0
    3582:	ef 5c       	subi	r30, 0xCF	; 207
    3584:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    3586:	40 81       	ld	r20, Z
    3588:	43 23       	and	r20, r19
    358a:	09 f0       	breq	.+2      	; 0x358e <main+0x27fe>
    358c:	a5 c4       	rjmp	.+2378   	; 0x3ed8 <main+0x3148>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    358e:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    3590:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    3592:	5b 98       	cbi	0x0b, 3	; 11
    3594:	ea ef       	ldi	r30, 0xFA	; 250
    3596:	e2 0f       	add	r30, r18
    3598:	f0 e0       	ldi	r31, 0x00	; 0
    359a:	ef 5c       	subi	r30, 0xCF	; 207
    359c:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    359e:	40 81       	ld	r20, Z
    35a0:	43 23       	and	r20, r19
    35a2:	09 f0       	breq	.+2      	; 0x35a6 <main+0x2816>
    35a4:	97 c4       	rjmp	.+2350   	; 0x3ed4 <main+0x3144>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    35a6:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    35a8:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    35aa:	5b 98       	cbi	0x0b, 3	; 11
    35ac:	e9 ef       	ldi	r30, 0xF9	; 249
    35ae:	e2 0f       	add	r30, r18
    35b0:	f0 e0       	ldi	r31, 0x00	; 0
    35b2:	ef 5c       	subi	r30, 0xCF	; 207
    35b4:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    35b6:	40 81       	ld	r20, Z
    35b8:	43 23       	and	r20, r19
    35ba:	09 f0       	breq	.+2      	; 0x35be <main+0x282e>
    35bc:	89 c4       	rjmp	.+2322   	; 0x3ed0 <main+0x3140>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    35be:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    35c0:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    35c2:	5b 98       	cbi	0x0b, 3	; 11
				//toggle the clock pin
				pinWrite(clock_pin, HIGH);
				pinWrite(clock_pin, LOW);
				pos--;
    35c4:	28 50       	subi	r18, 0x08	; 8
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    35c6:	5a 9a       	sbi	0x0b, 2	; 11
	//output byte
	for(byte=0; byte<7; byte++){
		pos = 24;
		pinWrite(end_pin,((*(p+pos)) & (1 << byte)));
		pos--;
		for(index=0; index<3; index++){
    35c8:	2f 3f       	cpi	r18, 0xFF	; 255
    35ca:	09 f0       	breq	.+2      	; 0x35ce <main+0x283e>
    35cc:	9b cf       	rjmp	.-202    	; 0x3504 <main+0x2774>
    35ce:	a4 e0       	ldi	r26, 0x04	; 4
    35d0:	b1 e0       	ldi	r27, 0x01	; 1
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    35d2:	ed 91       	ld	r30, X+
    35d4:	ee 23       	and	r30, r30
    35d6:	01 f1       	breq	.+64     	; 0x3618 <main+0x2888>
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    35d8:	ec 3c       	cpi	r30, 0xCC	; 204
    35da:	d8 f7       	brcc	.-10     	; 0x35d2 <main+0x2842>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    35dc:	27 e0       	ldi	r18, 0x07	; 7
    35de:	e2 9f       	mul	r30, r18
    35e0:	f0 01       	movw	r30, r0
    35e2:	11 24       	eor	r1, r1
    35e4:	bf 01       	movw	r22, r30
    35e6:	64 5b       	subi	r22, 0xB4	; 180
    35e8:	7e 4f       	sbci	r23, 0xFE	; 254
    35ea:	fb 01       	movw	r30, r22
    35ec:	42 81       	ldd	r20, Z+2	; 0x02
    35ee:	53 81       	ldd	r21, Z+3	; 0x03
    35f0:	fa 01       	movw	r30, r20
    35f2:	30 81       	ld	r19, Z
    35f4:	44 24       	eor	r4, r4
    35f6:	43 94       	inc	r4
    35f8:	51 2c       	mov	r5, r1
    35fa:	fb 01       	movw	r30, r22
    35fc:	06 80       	ldd	r0, Z+6	; 0x06
    35fe:	02 c0       	rjmp	.+4      	; 0x3604 <main+0x2874>
    3600:	44 0c       	add	r4, r4
    3602:	55 1c       	adc	r5, r5
    3604:	0a 94       	dec	r0
    3606:	e2 f7       	brpl	.-8      	; 0x3600 <main+0x2870>
    3608:	24 2d       	mov	r18, r4
    360a:	20 95       	com	r18
    360c:	23 23       	and	r18, r19
    360e:	fa 01       	movw	r30, r20
    3610:	20 83       	st	Z, r18
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    3612:	ed 91       	ld	r30, X+
    3614:	e1 11       	cpse	r30, r1
    3616:	e0 cf       	rjmp	.-64     	; 0x35d8 <main+0x2848>
/* Multiplexing method                                                  */
/************************************************************************/
static inline void MultiPlex(uint8_t *pin)
{
	pinsMultiWrite(plex_pins, LOW);
	pinWrite(plex_pins[*pin], HIGH);
    3618:	a9 81       	ldd	r26, Y+1	; 0x01
    361a:	ba 81       	ldd	r27, Y+2	; 0x02
    361c:	ed 91       	ld	r30, X+
    361e:	ba 83       	std	Y+2, r27	; 0x02
    3620:	a9 83       	std	Y+1, r26	; 0x01
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    3622:	ec 3c       	cpi	r30, 0xCC	; 204
    3624:	08 f4       	brcc	.+2      	; 0x3628 <main+0x2898>
    3626:	66 c4       	rjmp	.+2252   	; 0x3ef4 <main+0x3164>
	delay(delayms);
    3628:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    362c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
/*  delay                                                               */
/************************************************************************/
int delayms = 1;
static inline void delay(int dl)
{
	while(dl >= 0)
    3630:	37 fd       	sbrc	r19, 7
    3632:	09 c0       	rjmp	.+18     	; 0x3646 <main+0x28b6>
    3634:	ef e9       	ldi	r30, 0x9F	; 159
    3636:	ff e0       	ldi	r31, 0x0F	; 15
    3638:	31 97       	sbiw	r30, 0x01	; 1
    363a:	f1 f7       	brne	.-4      	; 0x3638 <main+0x28a8>
    363c:	00 c0       	rjmp	.+0      	; 0x363e <main+0x28ae>
    363e:	00 00       	nop
	{
		_delay_ms(1);
		dl--;
    3640:	21 50       	subi	r18, 0x01	; 1
    3642:	31 09       	sbc	r19, r1
    3644:	b8 f7       	brcc	.-18     	; 0x3634 <main+0x28a4>
	//output byte
	for(byte=0; byte<7; byte++){
		pos = 24;
		pinWrite(end_pin,((*(p+pos)) & (1 << byte)));
		pos--;
		for(index=0; index<3; index++){
    3646:	a4 e0       	ldi	r26, 0x04	; 4
    3648:	b1 e0       	ldi	r27, 0x01	; 1
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    364a:	ed 91       	ld	r30, X+
    364c:	ee 23       	and	r30, r30
    364e:	01 f1       	breq	.+64     	; 0x3690 <main+0x2900>
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    3650:	ec 3c       	cpi	r30, 0xCC	; 204
    3652:	d8 f7       	brcc	.-10     	; 0x364a <main+0x28ba>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    3654:	27 e0       	ldi	r18, 0x07	; 7
    3656:	e2 9f       	mul	r30, r18
    3658:	f0 01       	movw	r30, r0
    365a:	11 24       	eor	r1, r1
    365c:	bf 01       	movw	r22, r30
    365e:	64 5b       	subi	r22, 0xB4	; 180
    3660:	7e 4f       	sbci	r23, 0xFE	; 254
    3662:	fb 01       	movw	r30, r22
    3664:	42 81       	ldd	r20, Z+2	; 0x02
    3666:	53 81       	ldd	r21, Z+3	; 0x03
    3668:	fa 01       	movw	r30, r20
    366a:	30 81       	ld	r19, Z
    366c:	44 24       	eor	r4, r4
    366e:	43 94       	inc	r4
    3670:	51 2c       	mov	r5, r1
    3672:	fb 01       	movw	r30, r22
    3674:	06 80       	ldd	r0, Z+6	; 0x06
    3676:	02 c0       	rjmp	.+4      	; 0x367c <main+0x28ec>
    3678:	44 0c       	add	r4, r4
    367a:	55 1c       	adc	r5, r5
    367c:	0a 94       	dec	r0
    367e:	e2 f7       	brpl	.-8      	; 0x3678 <main+0x28e8>
    3680:	24 2d       	mov	r18, r4
    3682:	20 95       	com	r18
    3684:	23 23       	and	r18, r19
    3686:	fa 01       	movw	r30, r20
    3688:	20 83       	st	Z, r18
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    368a:	ed 91       	ld	r30, X+
    368c:	e1 11       	cpse	r30, r1
    368e:	e0 cf       	rjmp	.-64     	; 0x3650 <main+0x28c0>
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    3690:	5d 98       	cbi	0x0b, 5	; 11
    3692:	24 e0       	ldi	r18, 0x04	; 4
    3694:	30 e0       	ldi	r19, 0x00	; 0
    3696:	5a 98       	cbi	0x0b, 2	; 11
    3698:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    369a:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    369c:	5b 98       	cbi	0x0b, 3	; 11
    369e:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    36a0:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    36a2:	5b 98       	cbi	0x0b, 3	; 11
    36a4:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    36a6:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    36a8:	5b 98       	cbi	0x0b, 3	; 11
    36aa:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    36ac:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    36ae:	5b 98       	cbi	0x0b, 3	; 11
    36b0:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    36b2:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    36b4:	5b 98       	cbi	0x0b, 3	; 11
    36b6:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    36b8:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    36ba:	5b 98       	cbi	0x0b, 3	; 11
    36bc:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    36be:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    36c0:	5b 98       	cbi	0x0b, 3	; 11
    36c2:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    36c4:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    36c6:	5b 98       	cbi	0x0b, 3	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    36c8:	5a 9a       	sbi	0x0b, 2	; 11
    36ca:	21 50       	subi	r18, 0x01	; 1
    36cc:	31 09       	sbc	r19, r1
/************************************************************************/
static inline void Clear(){
	int x, y = 0;
	pinsMultiWrite(plex_pins, LOW);
	pinWrite(end_pin, LOW);
	for(x = 0; x < 4; x++) {
    36ce:	19 f7       	brne	.-58     	; 0x3696 <main+0x2906>
    36d0:	01 96       	adiw	r24, 0x01	; 1
static inline void DisplayBuffer(const uint8_t *p)
{
	uint8_t byte, index, bit = 0;
	uint8_t pos = 24;
	//output byte
	for(byte=0; byte<7; byte++){
    36d2:	87 30       	cpi	r24, 0x07	; 7
    36d4:	91 05       	cpc	r25, r1
    36d6:	09 f0       	breq	.+2      	; 0x36da <main+0x294a>
    36d8:	06 cf       	rjmp	.-500    	; 0x34e6 <main+0x2756>
			pinWrite(latch_pin, HIGH);
		}
		MultiPlex(&byte);
		Clear();
	}
	delayms = 1;
    36da:	90 92 01 01 	sts	0x0101, r9	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    36de:	80 92 00 01 	sts	0x0100, r8	; 0x800100 <__DATA_REGION_ORIGIN__>
    36e2:	da 94       	dec	r13
	}
}*/
static inline void HoldDisplayBuffer(const uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
    36e4:	d1 10       	cpse	r13, r1
    36e6:	f9 ce       	rjmp	.-526    	; 0x34da <main+0x274a>
    36e8:	d8 01       	movw	r26, r16
    36ea:	e7 2d       	mov	r30, r7
    36ec:	1d 92       	st	X+, r1
    36ee:	ea 95       	dec	r30
    36f0:	e9 f7       	brne	.-6      	; 0x36ec <main+0x295c>
    36f2:	20 e0       	ldi	r18, 0x00	; 0
    36f4:	83 e5       	ldi	r24, 0x53	; 83
/* returns the index of the first byte of the requested character       */
/************************************************************************/
uint8_t CharStart(const char *p)
{
	/*if(*p == ' ') return 0;
	else*/ return (uint8_t) (( *p - ' '));
    36f6:	80 52       	subi	r24, 0x20	; 32
	unsigned int index = 0;
	uint8_t len = 0;
	uint8_t x = 0;
	ClearStringBuffer();
	while(*ch){
		index = CharStart(ch++) * 5;
    36f8:	f5 e0       	ldi	r31, 0x05	; 5
    36fa:	8f 9f       	mul	r24, r31
    36fc:	c0 01       	movw	r24, r0
    36fe:	11 24       	eor	r1, r1
		for(len = 0; len < 5; len++){
			stringbuffer[x] = (uint8_t)(pgm_read_byte((font_5x7 + index)));
    3700:	fc 01       	movw	r30, r24
    3702:	e8 59       	subi	r30, 0x98	; 152
    3704:	ff 4f       	sbci	r31, 0xFF	; 255
    3706:	34 91       	lpm	r19, Z
    3708:	e2 2f       	mov	r30, r18
    370a:	f0 e0       	ldi	r31, 0x00	; 0
    370c:	ef 5c       	subi	r30, 0xCF	; 207
    370e:	fd 4f       	sbci	r31, 0xFD	; 253
    3710:	30 83       	st	Z, r19
    3712:	fc 01       	movw	r30, r24
    3714:	e7 59       	subi	r30, 0x97	; 151
    3716:	ff 4f       	sbci	r31, 0xFF	; 255
    3718:	34 91       	lpm	r19, Z
    371a:	e1 e0       	ldi	r30, 0x01	; 1
    371c:	e2 0f       	add	r30, r18
    371e:	f0 e0       	ldi	r31, 0x00	; 0
    3720:	ef 5c       	subi	r30, 0xCF	; 207
    3722:	fd 4f       	sbci	r31, 0xFD	; 253
    3724:	30 83       	st	Z, r19
    3726:	fc 01       	movw	r30, r24
    3728:	e6 59       	subi	r30, 0x96	; 150
    372a:	ff 4f       	sbci	r31, 0xFF	; 255
    372c:	34 91       	lpm	r19, Z
    372e:	e2 e0       	ldi	r30, 0x02	; 2
    3730:	e2 0f       	add	r30, r18
    3732:	f0 e0       	ldi	r31, 0x00	; 0
    3734:	ef 5c       	subi	r30, 0xCF	; 207
    3736:	fd 4f       	sbci	r31, 0xFD	; 253
    3738:	30 83       	st	Z, r19
    373a:	fc 01       	movw	r30, r24
    373c:	e5 59       	subi	r30, 0x95	; 149
    373e:	ff 4f       	sbci	r31, 0xFF	; 255
    3740:	34 91       	lpm	r19, Z
    3742:	e3 e0       	ldi	r30, 0x03	; 3
    3744:	e2 0f       	add	r30, r18
    3746:	f0 e0       	ldi	r31, 0x00	; 0
    3748:	ef 5c       	subi	r30, 0xCF	; 207
    374a:	fd 4f       	sbci	r31, 0xFD	; 253
    374c:	30 83       	st	Z, r19
    374e:	fc 01       	movw	r30, r24
    3750:	e4 59       	subi	r30, 0x94	; 148
    3752:	ff 4f       	sbci	r31, 0xFF	; 255
    3754:	84 91       	lpm	r24, Z
    3756:	e4 e0       	ldi	r30, 0x04	; 4
    3758:	e2 0f       	add	r30, r18
    375a:	f0 e0       	ldi	r31, 0x00	; 0
    375c:	ef 5c       	subi	r30, 0xCF	; 207
    375e:	fd 4f       	sbci	r31, 0xFD	; 253
    3760:	80 83       	st	Z, r24
			index++; x++;
		}
		stringbuffer[x] = 0;
    3762:	e5 e0       	ldi	r30, 0x05	; 5
    3764:	e2 0f       	add	r30, r18
    3766:	f0 e0       	ldi	r31, 0x00	; 0
    3768:	ef 5c       	subi	r30, 0xCF	; 207
    376a:	fd 4f       	sbci	r31, 0xFD	; 253
    376c:	10 82       	st	Z, r1
		x++;
    376e:	2a 5f       	subi	r18, 0xFA	; 250
{
	unsigned int index = 0;
	uint8_t len = 0;
	uint8_t x = 0;
	ClearStringBuffer();
	while(*ch){
    3770:	d5 01       	movw	r26, r10
    3772:	8d 91       	ld	r24, X+
    3774:	5d 01       	movw	r10, r26
    3776:	81 11       	cpse	r24, r1
    3778:	be cf       	rjmp	.-132    	; 0x36f6 <main+0x2966>
    377a:	d1 2c       	mov	r13, r1
    377c:	1c 83       	std	Y+4, r17	; 0x04
    377e:	0b 83       	std	Y+3, r16	; 0x03
    3780:	1d 2d       	mov	r17, r13
    3782:	80 e0       	ldi	r24, 0x00	; 0
    3784:	90 e0       	ldi	r25, 0x00	; 0
{
	uint8_t index, begin, end = 0;
	//uint8_t *bf = buffer;
	for(index = 0; index < 25; index++)
	{
		for(begin = 0; begin <= index; begin++) (*(bf + begin) = 0x00);
    3786:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <bf>
    378a:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <bf+0x1>
    378e:	e8 0f       	add	r30, r24
    3790:	f9 1f       	adc	r31, r25
    3792:	10 82       	st	Z, r1
    3794:	01 96       	adiw	r24, 0x01	; 1
    3796:	18 17       	cp	r17, r24
    3798:	b0 f7       	brcc	.-20     	; 0x3786 <main+0x29f6>
    379a:	21 2f       	mov	r18, r17
		for(end = index; end < 25; end++) (*(bf + end) = (*((p+(end)))));
    379c:	82 2f       	mov	r24, r18
    379e:	90 e0       	ldi	r25, 0x00	; 0
    37a0:	fc 01       	movw	r30, r24
    37a2:	ef 5c       	subi	r30, 0xCF	; 207
    37a4:	fd 4f       	sbci	r31, 0xFD	; 253
    37a6:	30 81       	ld	r19, Z
    37a8:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <bf>
    37ac:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <bf+0x1>
    37b0:	fa 01       	movw	r30, r20
    37b2:	e8 0f       	add	r30, r24
    37b4:	f9 1f       	adc	r31, r25
    37b6:	30 83       	st	Z, r19
    37b8:	2f 5f       	subi	r18, 0xFF	; 255
    37ba:	29 31       	cpi	r18, 0x19	; 25
    37bc:	79 f7       	brne	.-34     	; 0x379c <main+0x2a0c>
    37be:	9a e0       	ldi	r25, 0x0A	; 10
    37c0:	c9 2e       	mov	r12, r25
{
	uint8_t index, begin, end = 0;
	//uint8_t *bf = buffer;
	for(index = 0; index < 25; index++)
	{
		for(begin = 0; begin <= index; begin++) (*(bf + begin) = 0x00);
    37c2:	84 e0       	ldi	r24, 0x04	; 4
    37c4:	48 2e       	mov	r4, r24
    37c6:	81 e0       	ldi	r24, 0x01	; 1
    37c8:	58 2e       	mov	r5, r24
    37ca:	80 e0       	ldi	r24, 0x00	; 0
    37cc:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t byte, index, bit = 0;
	uint8_t pos = 24;
	//output byte
	for(byte=0; byte<7; byte++){
		pos = 24;
		pinWrite(end_pin,((*(p+pos)) & (1 << byte)));
    37ce:	21 e0       	ldi	r18, 0x01	; 1
    37d0:	30 e0       	ldi	r19, 0x00	; 0
    37d2:	08 2e       	mov	r0, r24
    37d4:	01 c0       	rjmp	.+2      	; 0x37d8 <main+0x2a48>
    37d6:	22 0f       	add	r18, r18
    37d8:	0a 94       	dec	r0
    37da:	ea f7       	brpl	.-6      	; 0x37d6 <main+0x2a46>
    37dc:	32 2f       	mov	r19, r18
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    37de:	40 91 62 02 	lds	r20, 0x0262	; 0x800262 <buffer+0x18>
    37e2:	24 23       	and	r18, r20
    37e4:	09 f0       	breq	.+2      	; 0x37e8 <main+0x2a58>
    37e6:	aa c3       	rjmp	.+1876   	; 0x3f3c <main+0x31ac>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    37e8:	5d 98       	cbi	0x0b, 5	; 11
{
	uint8_t index, begin, end = 0;
	//uint8_t *bf = buffer;
	for(index = 0; index < 25; index++)
	{
		for(begin = 0; begin <= index; begin++) (*(bf + begin) = 0x00);
    37ea:	27 e1       	ldi	r18, 0x17	; 23
    37ec:	5a 98       	cbi	0x0b, 2	; 11
		pinWrite(end_pin,((*(p+pos)) & (1 << byte)));
		pos--;
		for(index=0; index<3; index++){
			pinWrite(latch_pin, LOW);
			for(bit = 0; bit < 8 ; bit++){
				pinWrite(data_pin,((*(p+pos)) & (1 << byte)));
    37ee:	e2 2f       	mov	r30, r18
    37f0:	f0 e0       	ldi	r31, 0x00	; 0
    37f2:	e6 5b       	subi	r30, 0xB6	; 182
    37f4:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    37f6:	40 81       	ld	r20, Z
    37f8:	43 23       	and	r20, r19
    37fa:	09 f0       	breq	.+2      	; 0x37fe <main+0x2a6e>
    37fc:	9d c3       	rjmp	.+1850   	; 0x3f38 <main+0x31a8>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    37fe:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    3800:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    3802:	5b 98       	cbi	0x0b, 3	; 11
    3804:	ef ef       	ldi	r30, 0xFF	; 255
    3806:	e2 0f       	add	r30, r18
    3808:	f0 e0       	ldi	r31, 0x00	; 0
    380a:	e6 5b       	subi	r30, 0xB6	; 182
    380c:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    380e:	40 81       	ld	r20, Z
    3810:	43 23       	and	r20, r19
    3812:	09 f0       	breq	.+2      	; 0x3816 <main+0x2a86>
    3814:	8f c3       	rjmp	.+1822   	; 0x3f34 <main+0x31a4>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    3816:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    3818:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    381a:	5b 98       	cbi	0x0b, 3	; 11
    381c:	ee ef       	ldi	r30, 0xFE	; 254
    381e:	e2 0f       	add	r30, r18
    3820:	f0 e0       	ldi	r31, 0x00	; 0
    3822:	e6 5b       	subi	r30, 0xB6	; 182
    3824:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    3826:	40 81       	ld	r20, Z
    3828:	43 23       	and	r20, r19
    382a:	09 f0       	breq	.+2      	; 0x382e <main+0x2a9e>
    382c:	81 c3       	rjmp	.+1794   	; 0x3f30 <main+0x31a0>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    382e:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    3830:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    3832:	5b 98       	cbi	0x0b, 3	; 11
    3834:	ed ef       	ldi	r30, 0xFD	; 253
    3836:	e2 0f       	add	r30, r18
    3838:	f0 e0       	ldi	r31, 0x00	; 0
    383a:	e6 5b       	subi	r30, 0xB6	; 182
    383c:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    383e:	40 81       	ld	r20, Z
    3840:	43 23       	and	r20, r19
    3842:	09 f0       	breq	.+2      	; 0x3846 <main+0x2ab6>
    3844:	73 c3       	rjmp	.+1766   	; 0x3f2c <main+0x319c>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    3846:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    3848:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    384a:	5b 98       	cbi	0x0b, 3	; 11
    384c:	ec ef       	ldi	r30, 0xFC	; 252
    384e:	e2 0f       	add	r30, r18
    3850:	f0 e0       	ldi	r31, 0x00	; 0
    3852:	e6 5b       	subi	r30, 0xB6	; 182
    3854:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    3856:	40 81       	ld	r20, Z
    3858:	43 23       	and	r20, r19
    385a:	09 f0       	breq	.+2      	; 0x385e <main+0x2ace>
    385c:	65 c3       	rjmp	.+1738   	; 0x3f28 <main+0x3198>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    385e:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    3860:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    3862:	5b 98       	cbi	0x0b, 3	; 11
    3864:	eb ef       	ldi	r30, 0xFB	; 251
    3866:	e2 0f       	add	r30, r18
    3868:	f0 e0       	ldi	r31, 0x00	; 0
    386a:	e6 5b       	subi	r30, 0xB6	; 182
    386c:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    386e:	40 81       	ld	r20, Z
    3870:	43 23       	and	r20, r19
    3872:	09 f0       	breq	.+2      	; 0x3876 <main+0x2ae6>
    3874:	57 c3       	rjmp	.+1710   	; 0x3f24 <main+0x3194>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    3876:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    3878:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    387a:	5b 98       	cbi	0x0b, 3	; 11
    387c:	ea ef       	ldi	r30, 0xFA	; 250
    387e:	e2 0f       	add	r30, r18
    3880:	f0 e0       	ldi	r31, 0x00	; 0
    3882:	e6 5b       	subi	r30, 0xB6	; 182
    3884:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    3886:	40 81       	ld	r20, Z
    3888:	43 23       	and	r20, r19
    388a:	09 f0       	breq	.+2      	; 0x388e <main+0x2afe>
    388c:	49 c3       	rjmp	.+1682   	; 0x3f20 <main+0x3190>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    388e:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    3890:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    3892:	5b 98       	cbi	0x0b, 3	; 11
    3894:	e9 ef       	ldi	r30, 0xF9	; 249
    3896:	e2 0f       	add	r30, r18
    3898:	f0 e0       	ldi	r31, 0x00	; 0
    389a:	e6 5b       	subi	r30, 0xB6	; 182
    389c:	fd 4f       	sbci	r31, 0xFD	; 253
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
    389e:	40 81       	ld	r20, Z
    38a0:	43 23       	and	r20, r19
    38a2:	09 f0       	breq	.+2      	; 0x38a6 <main+0x2b16>
    38a4:	3b c3       	rjmp	.+1654   	; 0x3f1c <main+0x318c>
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    38a6:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    38a8:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    38aa:	5b 98       	cbi	0x0b, 3	; 11
				//toggle the clock pin
				pinWrite(clock_pin, HIGH);
				pinWrite(clock_pin, LOW);
				pos--;
    38ac:	28 50       	subi	r18, 0x08	; 8
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    38ae:	5a 9a       	sbi	0x0b, 2	; 11
	//output byte
	for(byte=0; byte<7; byte++){
		pos = 24;
		pinWrite(end_pin,((*(p+pos)) & (1 << byte)));
		pos--;
		for(index=0; index<3; index++){
    38b0:	2f 3f       	cpi	r18, 0xFF	; 255
    38b2:	09 f0       	breq	.+2      	; 0x38b6 <main+0x2b26>
    38b4:	9b cf       	rjmp	.-202    	; 0x37ec <main+0x2a5c>
    38b6:	a4 e0       	ldi	r26, 0x04	; 4
    38b8:	b1 e0       	ldi	r27, 0x01	; 1
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    38ba:	ed 91       	ld	r30, X+
    38bc:	ee 23       	and	r30, r30
    38be:	f1 f0       	breq	.+60     	; 0x38fc <main+0x2b6c>
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    38c0:	ec 3c       	cpi	r30, 0xCC	; 204
    38c2:	d8 f7       	brcc	.-10     	; 0x38ba <main+0x2b2a>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    38c4:	07 e0       	ldi	r16, 0x07	; 7
    38c6:	e0 9f       	mul	r30, r16
    38c8:	f0 01       	movw	r30, r0
    38ca:	11 24       	eor	r1, r1
    38cc:	9f 01       	movw	r18, r30
    38ce:	24 5b       	subi	r18, 0xB4	; 180
    38d0:	3e 4f       	sbci	r19, 0xFE	; 254
    38d2:	f9 01       	movw	r30, r18
    38d4:	62 81       	ldd	r22, Z+2	; 0x02
    38d6:	73 81       	ldd	r23, Z+3	; 0x03
    38d8:	fb 01       	movw	r30, r22
    38da:	b0 80       	ld	r11, Z
    38dc:	41 e0       	ldi	r20, 0x01	; 1
    38de:	50 e0       	ldi	r21, 0x00	; 0
    38e0:	f9 01       	movw	r30, r18
    38e2:	06 80       	ldd	r0, Z+6	; 0x06
    38e4:	02 c0       	rjmp	.+4      	; 0x38ea <main+0x2b5a>
    38e6:	44 0f       	add	r20, r20
    38e8:	55 1f       	adc	r21, r21
    38ea:	0a 94       	dec	r0
    38ec:	e2 f7       	brpl	.-8      	; 0x38e6 <main+0x2b56>
    38ee:	40 95       	com	r20
    38f0:	4b 21       	and	r20, r11
    38f2:	fb 01       	movw	r30, r22
    38f4:	40 83       	st	Z, r20
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    38f6:	ed 91       	ld	r30, X+
    38f8:	e1 11       	cpse	r30, r1
    38fa:	e2 cf       	rjmp	.-60     	; 0x38c0 <main+0x2b30>
/* Multiplexing method                                                  */
/************************************************************************/
static inline void MultiPlex(uint8_t *pin)
{
	pinsMultiWrite(plex_pins, LOW);
	pinWrite(plex_pins[*pin], HIGH);
    38fc:	d2 01       	movw	r26, r4
    38fe:	ed 91       	ld	r30, X+
    3900:	2d 01       	movw	r4, r26
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    3902:	ec 3c       	cpi	r30, 0xCC	; 204
    3904:	08 f4       	brcc	.+2      	; 0x3908 <main+0x2b78>
    3906:	1c c3       	rjmp	.+1592   	; 0x3f40 <main+0x31b0>
	delay(delayms);
    3908:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    390c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
/*  delay                                                               */
/************************************************************************/
int delayms = 1;
static inline void delay(int dl)
{
	while(dl >= 0)
    3910:	37 fd       	sbrc	r19, 7
    3912:	09 c0       	rjmp	.+18     	; 0x3926 <main+0x2b96>
    3914:	ef e9       	ldi	r30, 0x9F	; 159
    3916:	ff e0       	ldi	r31, 0x0F	; 15
    3918:	31 97       	sbiw	r30, 0x01	; 1
    391a:	f1 f7       	brne	.-4      	; 0x3918 <main+0x2b88>
    391c:	00 c0       	rjmp	.+0      	; 0x391e <main+0x2b8e>
    391e:	00 00       	nop
	{
		_delay_ms(1);
		dl--;
    3920:	21 50       	subi	r18, 0x01	; 1
    3922:	31 09       	sbc	r19, r1
    3924:	b8 f7       	brcc	.-18     	; 0x3914 <main+0x2b84>
	//output byte
	for(byte=0; byte<7; byte++){
		pos = 24;
		pinWrite(end_pin,((*(p+pos)) & (1 << byte)));
		pos--;
		for(index=0; index<3; index++){
    3926:	a4 e0       	ldi	r26, 0x04	; 4
    3928:	b1 e0       	ldi	r27, 0x01	; 1
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    392a:	ed 91       	ld	r30, X+
    392c:	ee 23       	and	r30, r30
    392e:	f1 f0       	breq	.+60     	; 0x396c <main+0x2bdc>
* Value - set/ reset value , 0/1, HIGH/LOW.
* e.g pinWrite(6, 1); 
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
    3930:	ec 3c       	cpi	r30, 0xCC	; 204
    3932:	d8 f7       	brcc	.-10     	; 0x392a <main+0x2b9a>
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    3934:	07 e0       	ldi	r16, 0x07	; 7
    3936:	e0 9f       	mul	r30, r16
    3938:	f0 01       	movw	r30, r0
    393a:	11 24       	eor	r1, r1
    393c:	9f 01       	movw	r18, r30
    393e:	24 5b       	subi	r18, 0xB4	; 180
    3940:	3e 4f       	sbci	r19, 0xFE	; 254
    3942:	f9 01       	movw	r30, r18
    3944:	62 81       	ldd	r22, Z+2	; 0x02
    3946:	73 81       	ldd	r23, Z+3	; 0x03
    3948:	fb 01       	movw	r30, r22
    394a:	b0 80       	ld	r11, Z
    394c:	41 e0       	ldi	r20, 0x01	; 1
    394e:	50 e0       	ldi	r21, 0x00	; 0
    3950:	f9 01       	movw	r30, r18
    3952:	06 80       	ldd	r0, Z+6	; 0x06
    3954:	02 c0       	rjmp	.+4      	; 0x395a <main+0x2bca>
    3956:	44 0f       	add	r20, r20
    3958:	55 1f       	adc	r21, r21
    395a:	0a 94       	dec	r0
    395c:	e2 f7       	brpl	.-8      	; 0x3956 <main+0x2bc6>
    395e:	40 95       	com	r20
    3960:	4b 21       	and	r20, r11
    3962:	fb 01       	movw	r30, r22
    3964:	40 83       	st	Z, r20
* uint8_t ar[3] = {4, 5, 6};
* e.g pinMultiWrite(ar, 1); 
      sets pins 4, 5 and 6 High.                                                                      
************************************************************************/
static inline void pinsMultiWrite(const uint8_t *p, uint8_t mode){
	while(*p){
    3966:	ed 91       	ld	r30, X+
    3968:	e1 11       	cpse	r30, r1
    396a:	e2 cf       	rjmp	.-60     	; 0x3930 <main+0x2ba0>
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    396c:	5d 98       	cbi	0x0b, 5	; 11
    396e:	24 e0       	ldi	r18, 0x04	; 4
    3970:	30 e0       	ldi	r19, 0x00	; 0
    3972:	5a 98       	cbi	0x0b, 2	; 11
    3974:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    3976:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    3978:	5b 98       	cbi	0x0b, 3	; 11
    397a:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    397c:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    397e:	5b 98       	cbi	0x0b, 3	; 11
    3980:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    3982:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    3984:	5b 98       	cbi	0x0b, 3	; 11
    3986:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    3988:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    398a:	5b 98       	cbi	0x0b, 3	; 11
    398c:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    398e:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    3990:	5b 98       	cbi	0x0b, 3	; 11
    3992:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    3994:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    3996:	5b 98       	cbi	0x0b, 3	; 11
    3998:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    399a:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    399c:	5b 98       	cbi	0x0b, 3	; 11
    399e:	59 98       	cbi	0x0b, 1	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    39a0:	5b 9a       	sbi	0x0b, 3	; 11
		} else {
			*pins_def[pin].PORTx &= ~ _BV(pins_def[pin].bit);
    39a2:	5b 98       	cbi	0x0b, 3	; 11
      sets the bit of PORTB5 - B5 .                                                                 
************************************************************************/
static inline void pinWrite(uint8_t pin, uint8_t value) {
	if (pin < pins) {
		if (value) {
			*pins_def[pin].PORTx |= _BV(pins_def[pin].bit);
    39a4:	5a 9a       	sbi	0x0b, 2	; 11
    39a6:	21 50       	subi	r18, 0x01	; 1
    39a8:	31 09       	sbc	r19, r1
/************************************************************************/
static inline void Clear(){
	int x, y = 0;
	pinsMultiWrite(plex_pins, LOW);
	pinWrite(end_pin, LOW);
	for(x = 0; x < 4; x++) {
    39aa:	19 f7       	brne	.-58     	; 0x3972 <main+0x2be2>
    39ac:	01 96       	adiw	r24, 0x01	; 1
static inline void DisplayBuffer(const uint8_t *p)
{
	uint8_t byte, index, bit = 0;
	uint8_t pos = 24;
	//output byte
	for(byte=0; byte<7; byte++){
    39ae:	87 30       	cpi	r24, 0x07	; 7
    39b0:	91 05       	cpc	r25, r1
    39b2:	09 f0       	breq	.+2      	; 0x39b6 <main+0x2c26>
    39b4:	0c cf       	rjmp	.-488    	; 0x37ce <main+0x2a3e>
			pinWrite(latch_pin, HIGH);
		}
		MultiPlex(&byte);
		Clear();
	}
	delayms = 1;
    39b6:	f0 92 01 01 	sts	0x0101, r15	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    39ba:	e0 92 00 01 	sts	0x0100, r14	; 0x800100 <__DATA_REGION_ORIGIN__>
    39be:	ca 94       	dec	r12
	}
}*/
static inline void HoldDisplayBuffer(const uint8_t *data, uint8_t period)
{
	uint8_t x = 0;
	for(x=0; x< period; x++){
    39c0:	c1 10       	cpse	r12, r1
    39c2:	ff ce       	rjmp	.-514    	; 0x37c2 <main+0x2a32>
/************************************************************************/
void DeleteRight(const uint8_t *p, uint8_t time)
{
	uint8_t index, begin, end = 0;
	//uint8_t *bf = buffer;
	for(index = 0; index < 25; index++)
    39c4:	1f 5f       	subi	r17, 0xFF	; 255
    39c6:	19 31       	cpi	r17, 0x19	; 25
    39c8:	09 f0       	breq	.+2      	; 0x39cc <main+0x2c3c>
    39ca:	db ce       	rjmp	.-586    	; 0x3782 <main+0x29f2>
    39cc:	0b 81       	ldd	r16, Y+3	; 0x03
    39ce:	1c 81       	ldd	r17, Y+4	; 0x04
	//hold display
	HoldDisplayBuffer(StringBytes("SHARE"), 50);
	//delete left
	DeleteRight(StringBytes("SHARE"),  10);
	//scroll long left
	ScrollLongLeft("MAKERHACKS by MUCHIRIJOHN", 10);
    39d0:	82 e3       	ldi	r24, 0x32	; 50
    39d2:	91 e0       	ldi	r25, 0x01	; 1
    39d4:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <ScrollLongLeft.constprop.3>
    39d8:	0c 94 dd 06 	jmp	0xdba	; 0xdba <main+0x2a>
    39dc:	59 9a       	sbi	0x0b, 1	; 11
    39de:	0c 94 b5 08 	jmp	0x116a	; 0x116a <main+0x3da>
    39e2:	59 9a       	sbi	0x0b, 1	; 11
    39e4:	0c 94 a8 08 	jmp	0x1150	; 0x1150 <main+0x3c0>
    39e8:	59 9a       	sbi	0x0b, 1	; 11
    39ea:	0c 94 9b 08 	jmp	0x1136	; 0x1136 <main+0x3a6>
    39ee:	59 9a       	sbi	0x0b, 1	; 11
    39f0:	0c 94 8e 08 	jmp	0x111c	; 0x111c <main+0x38c>
    39f4:	59 9a       	sbi	0x0b, 1	; 11
    39f6:	0c 94 81 08 	jmp	0x1102	; 0x1102 <main+0x372>
    39fa:	59 9a       	sbi	0x0b, 1	; 11
    39fc:	0c 94 74 08 	jmp	0x10e8	; 0x10e8 <main+0x358>
    3a00:	59 9a       	sbi	0x0b, 1	; 11
    3a02:	0c 94 67 08 	jmp	0x10ce	; 0x10ce <main+0x33e>
    3a06:	59 9a       	sbi	0x0b, 1	; 11
    3a08:	0c 94 5a 08 	jmp	0x10b4	; 0x10b4 <main+0x324>
    3a0c:	5d 9a       	sbi	0x0b, 5	; 11
    3a0e:	0c 94 4e 08 	jmp	0x109c	; 0x109c <main+0x30c>
    3a12:	b7 e0       	ldi	r27, 0x07	; 7
    3a14:	eb 9f       	mul	r30, r27
    3a16:	f0 01       	movw	r30, r0
    3a18:	11 24       	eor	r1, r1
    3a1a:	e4 5b       	subi	r30, 0xB4	; 180
    3a1c:	fe 4f       	sbci	r31, 0xFE	; 254
    3a1e:	a2 81       	ldd	r26, Z+2	; 0x02
    3a20:	b3 81       	ldd	r27, Z+3	; 0x03
    3a22:	6c 91       	ld	r22, X
    3a24:	81 e0       	ldi	r24, 0x01	; 1
    3a26:	90 e0       	ldi	r25, 0x00	; 0
    3a28:	06 80       	ldd	r0, Z+6	; 0x06
    3a2a:	02 c0       	rjmp	.+4      	; 0x3a30 <main+0x2ca0>
    3a2c:	88 0f       	add	r24, r24
    3a2e:	99 1f       	adc	r25, r25
    3a30:	0a 94       	dec	r0
    3a32:	e2 f7       	brpl	.-8      	; 0x3a2c <main+0x2c9c>
    3a34:	86 2b       	or	r24, r22
    3a36:	8c 93       	st	X, r24
    3a38:	0c 94 e8 08 	jmp	0x11d0	; 0x11d0 <main+0x440>
    3a3c:	59 9a       	sbi	0x0b, 1	; 11
    3a3e:	0c 94 3e 0a 	jmp	0x147c	; 0x147c <main+0x6ec>
    3a42:	59 9a       	sbi	0x0b, 1	; 11
    3a44:	0c 94 31 0a 	jmp	0x1462	; 0x1462 <main+0x6d2>
    3a48:	59 9a       	sbi	0x0b, 1	; 11
    3a4a:	0c 94 24 0a 	jmp	0x1448	; 0x1448 <main+0x6b8>
    3a4e:	59 9a       	sbi	0x0b, 1	; 11
    3a50:	0c 94 17 0a 	jmp	0x142e	; 0x142e <main+0x69e>
    3a54:	59 9a       	sbi	0x0b, 1	; 11
    3a56:	0c 94 0a 0a 	jmp	0x1414	; 0x1414 <main+0x684>
    3a5a:	59 9a       	sbi	0x0b, 1	; 11
    3a5c:	0c 94 fd 09 	jmp	0x13fa	; 0x13fa <main+0x66a>
    3a60:	59 9a       	sbi	0x0b, 1	; 11
    3a62:	0c 94 f0 09 	jmp	0x13e0	; 0x13e0 <main+0x650>
    3a66:	59 9a       	sbi	0x0b, 1	; 11
    3a68:	0c 94 e3 09 	jmp	0x13c6	; 0x13c6 <main+0x636>
    3a6c:	5d 9a       	sbi	0x0b, 5	; 11
    3a6e:	0c 94 d8 09 	jmp	0x13b0	; 0x13b0 <main+0x620>
    3a72:	67 e0       	ldi	r22, 0x07	; 7
    3a74:	96 9f       	mul	r25, r22
    3a76:	f0 01       	movw	r30, r0
    3a78:	11 24       	eor	r1, r1
    3a7a:	cf 01       	movw	r24, r30
    3a7c:	84 5b       	subi	r24, 0xB4	; 180
    3a7e:	9e 4f       	sbci	r25, 0xFE	; 254
    3a80:	2c 01       	movw	r4, r24
    3a82:	fc 01       	movw	r30, r24
    3a84:	82 81       	ldd	r24, Z+2	; 0x02
    3a86:	93 81       	ldd	r25, Z+3	; 0x03
    3a88:	fc 01       	movw	r30, r24
    3a8a:	b0 80       	ld	r11, Z
    3a8c:	61 e0       	ldi	r22, 0x01	; 1
    3a8e:	70 e0       	ldi	r23, 0x00	; 0
    3a90:	f2 01       	movw	r30, r4
    3a92:	06 80       	ldd	r0, Z+6	; 0x06
    3a94:	02 c0       	rjmp	.+4      	; 0x3a9a <main+0x2d0a>
    3a96:	66 0f       	add	r22, r22
    3a98:	77 1f       	adc	r23, r23
    3a9a:	0a 94       	dec	r0
    3a9c:	e2 f7       	brpl	.-8      	; 0x3a96 <main+0x2d06>
    3a9e:	6b 29       	or	r22, r11
    3aa0:	fc 01       	movw	r30, r24
    3aa2:	60 83       	st	Z, r22
    3aa4:	0c 94 75 0a 	jmp	0x14ea	; 0x14ea <main+0x75a>
    3aa8:	59 9a       	sbi	0x0b, 1	; 11
    3aaa:	0c 94 ac 0b 	jmp	0x1758	; 0x1758 <main+0x9c8>
    3aae:	59 9a       	sbi	0x0b, 1	; 11
    3ab0:	0c 94 9f 0b 	jmp	0x173e	; 0x173e <main+0x9ae>
    3ab4:	59 9a       	sbi	0x0b, 1	; 11
    3ab6:	0c 94 92 0b 	jmp	0x1724	; 0x1724 <main+0x994>
    3aba:	59 9a       	sbi	0x0b, 1	; 11
    3abc:	0c 94 85 0b 	jmp	0x170a	; 0x170a <main+0x97a>
    3ac0:	59 9a       	sbi	0x0b, 1	; 11
    3ac2:	0c 94 78 0b 	jmp	0x16f0	; 0x16f0 <main+0x960>
    3ac6:	59 9a       	sbi	0x0b, 1	; 11
    3ac8:	0c 94 6b 0b 	jmp	0x16d6	; 0x16d6 <main+0x946>
    3acc:	59 9a       	sbi	0x0b, 1	; 11
    3ace:	0c 94 5e 0b 	jmp	0x16bc	; 0x16bc <main+0x92c>
    3ad2:	59 9a       	sbi	0x0b, 1	; 11
    3ad4:	0c 94 51 0b 	jmp	0x16a2	; 0x16a2 <main+0x912>
    3ad8:	5d 9a       	sbi	0x0b, 5	; 11
    3ada:	0c 94 45 0b 	jmp	0x168a	; 0x168a <main+0x8fa>
    3ade:	b7 e0       	ldi	r27, 0x07	; 7
    3ae0:	eb 9f       	mul	r30, r27
    3ae2:	f0 01       	movw	r30, r0
    3ae4:	11 24       	eor	r1, r1
    3ae6:	e4 5b       	subi	r30, 0xB4	; 180
    3ae8:	fe 4f       	sbci	r31, 0xFE	; 254
    3aea:	a2 81       	ldd	r26, Z+2	; 0x02
    3aec:	b3 81       	ldd	r27, Z+3	; 0x03
    3aee:	4c 91       	ld	r20, X
    3af0:	21 e0       	ldi	r18, 0x01	; 1
    3af2:	30 e0       	ldi	r19, 0x00	; 0
    3af4:	06 80       	ldd	r0, Z+6	; 0x06
    3af6:	02 c0       	rjmp	.+4      	; 0x3afc <main+0x2d6c>
    3af8:	22 0f       	add	r18, r18
    3afa:	33 1f       	adc	r19, r19
    3afc:	0a 94       	dec	r0
    3afe:	e2 f7       	brpl	.-8      	; 0x3af8 <main+0x2d68>
    3b00:	24 2b       	or	r18, r20
    3b02:	2c 93       	st	X, r18
    3b04:	0c 94 e1 0b 	jmp	0x17c2	; 0x17c2 <main+0xa32>
    3b08:	59 9a       	sbi	0x0b, 1	; 11
    3b0a:	0c 94 2f 0d 	jmp	0x1a5e	; 0x1a5e <main+0xcce>
    3b0e:	59 9a       	sbi	0x0b, 1	; 11
    3b10:	0c 94 22 0d 	jmp	0x1a44	; 0x1a44 <main+0xcb4>
    3b14:	59 9a       	sbi	0x0b, 1	; 11
    3b16:	0c 94 15 0d 	jmp	0x1a2a	; 0x1a2a <main+0xc9a>
    3b1a:	59 9a       	sbi	0x0b, 1	; 11
    3b1c:	0c 94 08 0d 	jmp	0x1a10	; 0x1a10 <main+0xc80>
    3b20:	59 9a       	sbi	0x0b, 1	; 11
    3b22:	0c 94 fb 0c 	jmp	0x19f6	; 0x19f6 <main+0xc66>
    3b26:	59 9a       	sbi	0x0b, 1	; 11
    3b28:	0c 94 ee 0c 	jmp	0x19dc	; 0x19dc <main+0xc4c>
    3b2c:	59 9a       	sbi	0x0b, 1	; 11
    3b2e:	0c 94 e1 0c 	jmp	0x19c2	; 0x19c2 <main+0xc32>
    3b32:	59 9a       	sbi	0x0b, 1	; 11
    3b34:	0c 94 d4 0c 	jmp	0x19a8	; 0x19a8 <main+0xc18>
    3b38:	5d 9a       	sbi	0x0b, 5	; 11
    3b3a:	0c 94 c9 0c 	jmp	0x1992	; 0x1992 <main+0xc02>
    3b3e:	07 e0       	ldi	r16, 0x07	; 7
    3b40:	90 9f       	mul	r25, r16
    3b42:	f0 01       	movw	r30, r0
    3b44:	11 24       	eor	r1, r1
    3b46:	af 01       	movw	r20, r30
    3b48:	44 5b       	subi	r20, 0xB4	; 180
    3b4a:	5e 4f       	sbci	r21, 0xFE	; 254
    3b4c:	2a 01       	movw	r4, r20
    3b4e:	fa 01       	movw	r30, r20
    3b50:	42 81       	ldd	r20, Z+2	; 0x02
    3b52:	53 81       	ldd	r21, Z+3	; 0x03
    3b54:	fa 01       	movw	r30, r20
    3b56:	60 81       	ld	r22, Z
    3b58:	81 e0       	ldi	r24, 0x01	; 1
    3b5a:	90 e0       	ldi	r25, 0x00	; 0
    3b5c:	f2 01       	movw	r30, r4
    3b5e:	06 80       	ldd	r0, Z+6	; 0x06
    3b60:	02 c0       	rjmp	.+4      	; 0x3b66 <main+0x2dd6>
    3b62:	88 0f       	add	r24, r24
    3b64:	99 1f       	adc	r25, r25
    3b66:	0a 94       	dec	r0
    3b68:	e2 f7       	brpl	.-8      	; 0x3b62 <main+0x2dd2>
    3b6a:	86 2b       	or	r24, r22
    3b6c:	fa 01       	movw	r30, r20
    3b6e:	80 83       	st	Z, r24
    3b70:	0c 94 64 0d 	jmp	0x1ac8	; 0x1ac8 <main+0xd38>
    3b74:	59 9a       	sbi	0x0b, 1	; 11
    3b76:	0c 94 4f 0e 	jmp	0x1c9e	; 0x1c9e <main+0xf0e>
    3b7a:	59 9a       	sbi	0x0b, 1	; 11
    3b7c:	0c 94 42 0e 	jmp	0x1c84	; 0x1c84 <main+0xef4>
    3b80:	59 9a       	sbi	0x0b, 1	; 11
    3b82:	0c 94 35 0e 	jmp	0x1c6a	; 0x1c6a <main+0xeda>
    3b86:	59 9a       	sbi	0x0b, 1	; 11
    3b88:	0c 94 28 0e 	jmp	0x1c50	; 0x1c50 <main+0xec0>
    3b8c:	59 9a       	sbi	0x0b, 1	; 11
    3b8e:	0c 94 1b 0e 	jmp	0x1c36	; 0x1c36 <main+0xea6>
    3b92:	59 9a       	sbi	0x0b, 1	; 11
    3b94:	0c 94 0e 0e 	jmp	0x1c1c	; 0x1c1c <main+0xe8c>
    3b98:	59 9a       	sbi	0x0b, 1	; 11
    3b9a:	0c 94 01 0e 	jmp	0x1c02	; 0x1c02 <main+0xe72>
    3b9e:	59 9a       	sbi	0x0b, 1	; 11
    3ba0:	0c 94 f4 0d 	jmp	0x1be8	; 0x1be8 <main+0xe58>
    3ba4:	5d 9a       	sbi	0x0b, 5	; 11
    3ba6:	0c 94 e9 0d 	jmp	0x1bd2	; 0x1bd2 <main+0xe42>
    3baa:	27 e0       	ldi	r18, 0x07	; 7
    3bac:	32 9f       	mul	r19, r18
    3bae:	f0 01       	movw	r30, r0
    3bb0:	11 24       	eor	r1, r1
    3bb2:	af 01       	movw	r20, r30
    3bb4:	44 5b       	subi	r20, 0xB4	; 180
    3bb6:	5e 4f       	sbci	r21, 0xFE	; 254
    3bb8:	2a 01       	movw	r4, r20
    3bba:	fa 01       	movw	r30, r20
    3bbc:	42 81       	ldd	r20, Z+2	; 0x02
    3bbe:	53 81       	ldd	r21, Z+3	; 0x03
    3bc0:	fa 01       	movw	r30, r20
    3bc2:	60 81       	ld	r22, Z
    3bc4:	21 e0       	ldi	r18, 0x01	; 1
    3bc6:	30 e0       	ldi	r19, 0x00	; 0
    3bc8:	f2 01       	movw	r30, r4
    3bca:	06 80       	ldd	r0, Z+6	; 0x06
    3bcc:	02 c0       	rjmp	.+4      	; 0x3bd2 <main+0x2e42>
    3bce:	22 0f       	add	r18, r18
    3bd0:	33 1f       	adc	r19, r19
    3bd2:	0a 94       	dec	r0
    3bd4:	e2 f7       	brpl	.-8      	; 0x3bce <main+0x2e3e>
    3bd6:	26 2b       	or	r18, r22
    3bd8:	fa 01       	movw	r30, r20
    3bda:	20 83       	st	Z, r18
    3bdc:	0c 94 84 0e 	jmp	0x1d08	; 0x1d08 <main+0xf78>
    3be0:	59 9a       	sbi	0x0b, 1	; 11
    3be2:	0c 94 de 0f 	jmp	0x1fbc	; 0x1fbc <main+0x122c>
    3be6:	59 9a       	sbi	0x0b, 1	; 11
    3be8:	0c 94 d1 0f 	jmp	0x1fa2	; 0x1fa2 <main+0x1212>
    3bec:	59 9a       	sbi	0x0b, 1	; 11
    3bee:	0c 94 c4 0f 	jmp	0x1f88	; 0x1f88 <main+0x11f8>
    3bf2:	59 9a       	sbi	0x0b, 1	; 11
    3bf4:	0c 94 b7 0f 	jmp	0x1f6e	; 0x1f6e <main+0x11de>
    3bf8:	59 9a       	sbi	0x0b, 1	; 11
    3bfa:	0c 94 aa 0f 	jmp	0x1f54	; 0x1f54 <main+0x11c4>
    3bfe:	59 9a       	sbi	0x0b, 1	; 11
    3c00:	0c 94 9d 0f 	jmp	0x1f3a	; 0x1f3a <main+0x11aa>
    3c04:	59 9a       	sbi	0x0b, 1	; 11
    3c06:	0c 94 90 0f 	jmp	0x1f20	; 0x1f20 <main+0x1190>
    3c0a:	59 9a       	sbi	0x0b, 1	; 11
    3c0c:	0c 94 83 0f 	jmp	0x1f06	; 0x1f06 <main+0x1176>
    3c10:	5d 9a       	sbi	0x0b, 5	; 11
    3c12:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <main+0x115e>
    3c16:	b7 e0       	ldi	r27, 0x07	; 7
    3c18:	eb 9f       	mul	r30, r27
    3c1a:	f0 01       	movw	r30, r0
    3c1c:	11 24       	eor	r1, r1
    3c1e:	e4 5b       	subi	r30, 0xB4	; 180
    3c20:	fe 4f       	sbci	r31, 0xFE	; 254
    3c22:	a2 81       	ldd	r26, Z+2	; 0x02
    3c24:	b3 81       	ldd	r27, Z+3	; 0x03
    3c26:	2c 91       	ld	r18, X
    3c28:	81 e0       	ldi	r24, 0x01	; 1
    3c2a:	90 e0       	ldi	r25, 0x00	; 0
    3c2c:	06 80       	ldd	r0, Z+6	; 0x06
    3c2e:	02 c0       	rjmp	.+4      	; 0x3c34 <main+0x2ea4>
    3c30:	88 0f       	add	r24, r24
    3c32:	99 1f       	adc	r25, r25
    3c34:	0a 94       	dec	r0
    3c36:	e2 f7       	brpl	.-8      	; 0x3c30 <main+0x2ea0>
    3c38:	82 2b       	or	r24, r18
    3c3a:	8c 93       	st	X, r24
    3c3c:	0c 94 13 10 	jmp	0x2026	; 0x2026 <main+0x1296>
    3c40:	59 9a       	sbi	0x0b, 1	; 11
    3c42:	0c 94 3b 11 	jmp	0x2276	; 0x2276 <main+0x14e6>
    3c46:	59 9a       	sbi	0x0b, 1	; 11
    3c48:	0c 94 2e 11 	jmp	0x225c	; 0x225c <main+0x14cc>
    3c4c:	59 9a       	sbi	0x0b, 1	; 11
    3c4e:	0c 94 21 11 	jmp	0x2242	; 0x2242 <main+0x14b2>
    3c52:	59 9a       	sbi	0x0b, 1	; 11
    3c54:	0c 94 14 11 	jmp	0x2228	; 0x2228 <main+0x1498>
    3c58:	59 9a       	sbi	0x0b, 1	; 11
    3c5a:	0c 94 07 11 	jmp	0x220e	; 0x220e <main+0x147e>
    3c5e:	59 9a       	sbi	0x0b, 1	; 11
    3c60:	0c 94 fa 10 	jmp	0x21f4	; 0x21f4 <main+0x1464>
    3c64:	59 9a       	sbi	0x0b, 1	; 11
    3c66:	0c 94 ed 10 	jmp	0x21da	; 0x21da <main+0x144a>
    3c6a:	59 9a       	sbi	0x0b, 1	; 11
    3c6c:	0c 94 e0 10 	jmp	0x21c0	; 0x21c0 <main+0x1430>
    3c70:	5d 9a       	sbi	0x0b, 5	; 11
    3c72:	0c 94 d4 10 	jmp	0x21a8	; 0x21a8 <main+0x1418>
    3c76:	b7 e0       	ldi	r27, 0x07	; 7
    3c78:	eb 9f       	mul	r30, r27
    3c7a:	f0 01       	movw	r30, r0
    3c7c:	11 24       	eor	r1, r1
    3c7e:	e4 5b       	subi	r30, 0xB4	; 180
    3c80:	fe 4f       	sbci	r31, 0xFE	; 254
    3c82:	a2 81       	ldd	r26, Z+2	; 0x02
    3c84:	b3 81       	ldd	r27, Z+3	; 0x03
    3c86:	4c 91       	ld	r20, X
    3c88:	21 e0       	ldi	r18, 0x01	; 1
    3c8a:	30 e0       	ldi	r19, 0x00	; 0
    3c8c:	06 80       	ldd	r0, Z+6	; 0x06
    3c8e:	02 c0       	rjmp	.+4      	; 0x3c94 <main+0x2f04>
    3c90:	22 0f       	add	r18, r18
    3c92:	33 1f       	adc	r19, r19
    3c94:	0a 94       	dec	r0
    3c96:	e2 f7       	brpl	.-8      	; 0x3c90 <main+0x2f00>
    3c98:	24 2b       	or	r18, r20
    3c9a:	2c 93       	st	X, r18
    3c9c:	0c 94 70 11 	jmp	0x22e0	; 0x22e0 <main+0x1550>
    3ca0:	59 9a       	sbi	0x0b, 1	; 11
    3ca2:	0c 94 ba 12 	jmp	0x2574	; 0x2574 <main+0x17e4>
    3ca6:	59 9a       	sbi	0x0b, 1	; 11
    3ca8:	0c 94 ad 12 	jmp	0x255a	; 0x255a <main+0x17ca>
    3cac:	59 9a       	sbi	0x0b, 1	; 11
    3cae:	0c 94 a0 12 	jmp	0x2540	; 0x2540 <main+0x17b0>
    3cb2:	59 9a       	sbi	0x0b, 1	; 11
    3cb4:	0c 94 93 12 	jmp	0x2526	; 0x2526 <main+0x1796>
    3cb8:	59 9a       	sbi	0x0b, 1	; 11
    3cba:	0c 94 86 12 	jmp	0x250c	; 0x250c <main+0x177c>
    3cbe:	59 9a       	sbi	0x0b, 1	; 11
    3cc0:	0c 94 79 12 	jmp	0x24f2	; 0x24f2 <main+0x1762>
    3cc4:	59 9a       	sbi	0x0b, 1	; 11
    3cc6:	0c 94 6c 12 	jmp	0x24d8	; 0x24d8 <main+0x1748>
    3cca:	59 9a       	sbi	0x0b, 1	; 11
    3ccc:	0c 94 5f 12 	jmp	0x24be	; 0x24be <main+0x172e>
    3cd0:	5d 9a       	sbi	0x0b, 5	; 11
    3cd2:	0c 94 54 12 	jmp	0x24a8	; 0x24a8 <main+0x1718>
    3cd6:	07 e0       	ldi	r16, 0x07	; 7
    3cd8:	90 9f       	mul	r25, r16
    3cda:	f0 01       	movw	r30, r0
    3cdc:	11 24       	eor	r1, r1
    3cde:	af 01       	movw	r20, r30
    3ce0:	44 5b       	subi	r20, 0xB4	; 180
    3ce2:	5e 4f       	sbci	r21, 0xFE	; 254
    3ce4:	2a 01       	movw	r4, r20
    3ce6:	fa 01       	movw	r30, r20
    3ce8:	42 81       	ldd	r20, Z+2	; 0x02
    3cea:	53 81       	ldd	r21, Z+3	; 0x03
    3cec:	fa 01       	movw	r30, r20
    3cee:	60 81       	ld	r22, Z
    3cf0:	81 e0       	ldi	r24, 0x01	; 1
    3cf2:	90 e0       	ldi	r25, 0x00	; 0
    3cf4:	f2 01       	movw	r30, r4
    3cf6:	06 80       	ldd	r0, Z+6	; 0x06
    3cf8:	02 c0       	rjmp	.+4      	; 0x3cfe <main+0x2f6e>
    3cfa:	88 0f       	add	r24, r24
    3cfc:	99 1f       	adc	r25, r25
    3cfe:	0a 94       	dec	r0
    3d00:	e2 f7       	brpl	.-8      	; 0x3cfa <main+0x2f6a>
    3d02:	86 2b       	or	r24, r22
    3d04:	fa 01       	movw	r30, r20
    3d06:	80 83       	st	Z, r24
    3d08:	0c 94 ef 12 	jmp	0x25de	; 0x25de <main+0x184e>
    3d0c:	59 9a       	sbi	0x0b, 1	; 11
    3d0e:	0c 94 da 13 	jmp	0x27b4	; 0x27b4 <main+0x1a24>
    3d12:	59 9a       	sbi	0x0b, 1	; 11
    3d14:	0c 94 cd 13 	jmp	0x279a	; 0x279a <main+0x1a0a>
    3d18:	59 9a       	sbi	0x0b, 1	; 11
    3d1a:	0c 94 c0 13 	jmp	0x2780	; 0x2780 <main+0x19f0>
    3d1e:	59 9a       	sbi	0x0b, 1	; 11
    3d20:	0c 94 b3 13 	jmp	0x2766	; 0x2766 <main+0x19d6>
    3d24:	59 9a       	sbi	0x0b, 1	; 11
    3d26:	0c 94 a6 13 	jmp	0x274c	; 0x274c <main+0x19bc>
    3d2a:	59 9a       	sbi	0x0b, 1	; 11
    3d2c:	0c 94 99 13 	jmp	0x2732	; 0x2732 <main+0x19a2>
    3d30:	59 9a       	sbi	0x0b, 1	; 11
    3d32:	0c 94 8c 13 	jmp	0x2718	; 0x2718 <main+0x1988>
    3d36:	59 9a       	sbi	0x0b, 1	; 11
    3d38:	0c 94 7f 13 	jmp	0x26fe	; 0x26fe <main+0x196e>
    3d3c:	5d 9a       	sbi	0x0b, 5	; 11
    3d3e:	0c 94 74 13 	jmp	0x26e8	; 0x26e8 <main+0x1958>
    3d42:	47 e0       	ldi	r20, 0x07	; 7
    3d44:	54 9f       	mul	r21, r20
    3d46:	f0 01       	movw	r30, r0
    3d48:	11 24       	eor	r1, r1
    3d4a:	bf 01       	movw	r22, r30
    3d4c:	64 5b       	subi	r22, 0xB4	; 180
    3d4e:	7e 4f       	sbci	r23, 0xFE	; 254
    3d50:	2b 01       	movw	r4, r22
    3d52:	fb 01       	movw	r30, r22
    3d54:	62 81       	ldd	r22, Z+2	; 0x02
    3d56:	73 81       	ldd	r23, Z+3	; 0x03
    3d58:	fb 01       	movw	r30, r22
    3d5a:	d0 80       	ld	r13, Z
    3d5c:	41 e0       	ldi	r20, 0x01	; 1
    3d5e:	50 e0       	ldi	r21, 0x00	; 0
    3d60:	f2 01       	movw	r30, r4
    3d62:	06 80       	ldd	r0, Z+6	; 0x06
    3d64:	02 c0       	rjmp	.+4      	; 0x3d6a <main+0x2fda>
    3d66:	44 0f       	add	r20, r20
    3d68:	55 1f       	adc	r21, r21
    3d6a:	0a 94       	dec	r0
    3d6c:	e2 f7       	brpl	.-8      	; 0x3d66 <main+0x2fd6>
    3d6e:	4d 29       	or	r20, r13
    3d70:	fb 01       	movw	r30, r22
    3d72:	40 83       	st	Z, r20
    3d74:	0c 94 0f 14 	jmp	0x281e	; 0x281e <main+0x1a8e>
    3d78:	59 9a       	sbi	0x0b, 1	; 11
    3d7a:	0c 94 59 15 	jmp	0x2ab2	; 0x2ab2 <main+0x1d22>
    3d7e:	59 9a       	sbi	0x0b, 1	; 11
    3d80:	0c 94 4c 15 	jmp	0x2a98	; 0x2a98 <main+0x1d08>
    3d84:	59 9a       	sbi	0x0b, 1	; 11
    3d86:	0c 94 3f 15 	jmp	0x2a7e	; 0x2a7e <main+0x1cee>
    3d8a:	59 9a       	sbi	0x0b, 1	; 11
    3d8c:	0c 94 32 15 	jmp	0x2a64	; 0x2a64 <main+0x1cd4>
    3d90:	59 9a       	sbi	0x0b, 1	; 11
    3d92:	0c 94 25 15 	jmp	0x2a4a	; 0x2a4a <main+0x1cba>
    3d96:	59 9a       	sbi	0x0b, 1	; 11
    3d98:	0c 94 18 15 	jmp	0x2a30	; 0x2a30 <main+0x1ca0>
    3d9c:	59 9a       	sbi	0x0b, 1	; 11
    3d9e:	0c 94 0b 15 	jmp	0x2a16	; 0x2a16 <main+0x1c86>
    3da2:	59 9a       	sbi	0x0b, 1	; 11
    3da4:	0c 94 fe 14 	jmp	0x29fc	; 0x29fc <main+0x1c6c>
    3da8:	5d 9a       	sbi	0x0b, 5	; 11
    3daa:	0c 94 f2 14 	jmp	0x29e4	; 0x29e4 <main+0x1c54>
    3dae:	b7 e0       	ldi	r27, 0x07	; 7
    3db0:	eb 9f       	mul	r30, r27
    3db2:	f0 01       	movw	r30, r0
    3db4:	11 24       	eor	r1, r1
    3db6:	e4 5b       	subi	r30, 0xB4	; 180
    3db8:	fe 4f       	sbci	r31, 0xFE	; 254
    3dba:	a2 81       	ldd	r26, Z+2	; 0x02
    3dbc:	b3 81       	ldd	r27, Z+3	; 0x03
    3dbe:	4c 91       	ld	r20, X
    3dc0:	21 e0       	ldi	r18, 0x01	; 1
    3dc2:	30 e0       	ldi	r19, 0x00	; 0
    3dc4:	06 80       	ldd	r0, Z+6	; 0x06
    3dc6:	02 c0       	rjmp	.+4      	; 0x3dcc <main+0x303c>
    3dc8:	22 0f       	add	r18, r18
    3dca:	33 1f       	adc	r19, r19
    3dcc:	0a 94       	dec	r0
    3dce:	e2 f7       	brpl	.-8      	; 0x3dc8 <main+0x3038>
    3dd0:	24 2b       	or	r18, r20
    3dd2:	2c 93       	st	X, r18
    3dd4:	0c 94 8c 15 	jmp	0x2b18	; 0x2b18 <main+0x1d88>
    3dd8:	59 9a       	sbi	0x0b, 1	; 11
    3dda:	0c 94 2c 17 	jmp	0x2e58	; 0x2e58 <main+0x20c8>
    3dde:	59 9a       	sbi	0x0b, 1	; 11
    3de0:	0c 94 1f 17 	jmp	0x2e3e	; 0x2e3e <main+0x20ae>
    3de4:	59 9a       	sbi	0x0b, 1	; 11
    3de6:	0c 94 12 17 	jmp	0x2e24	; 0x2e24 <main+0x2094>
    3dea:	59 9a       	sbi	0x0b, 1	; 11
    3dec:	0c 94 05 17 	jmp	0x2e0a	; 0x2e0a <main+0x207a>
    3df0:	59 9a       	sbi	0x0b, 1	; 11
    3df2:	0c 94 f8 16 	jmp	0x2df0	; 0x2df0 <main+0x2060>
    3df6:	59 9a       	sbi	0x0b, 1	; 11
    3df8:	0c 94 eb 16 	jmp	0x2dd6	; 0x2dd6 <main+0x2046>
    3dfc:	59 9a       	sbi	0x0b, 1	; 11
    3dfe:	0c 94 de 16 	jmp	0x2dbc	; 0x2dbc <main+0x202c>
    3e02:	59 9a       	sbi	0x0b, 1	; 11
    3e04:	0c 94 d1 16 	jmp	0x2da2	; 0x2da2 <main+0x2012>
    3e08:	5d 9a       	sbi	0x0b, 5	; 11
    3e0a:	0c 94 c5 16 	jmp	0x2d8a	; 0x2d8a <main+0x1ffa>
    3e0e:	b7 e0       	ldi	r27, 0x07	; 7
    3e10:	eb 9f       	mul	r30, r27
    3e12:	f0 01       	movw	r30, r0
    3e14:	11 24       	eor	r1, r1
    3e16:	e4 5b       	subi	r30, 0xB4	; 180
    3e18:	fe 4f       	sbci	r31, 0xFE	; 254
    3e1a:	a2 81       	ldd	r26, Z+2	; 0x02
    3e1c:	b3 81       	ldd	r27, Z+3	; 0x03
    3e1e:	6c 91       	ld	r22, X
    3e20:	41 e0       	ldi	r20, 0x01	; 1
    3e22:	50 e0       	ldi	r21, 0x00	; 0
    3e24:	06 80       	ldd	r0, Z+6	; 0x06
    3e26:	02 c0       	rjmp	.+4      	; 0x3e2c <main+0x309c>
    3e28:	44 0f       	add	r20, r20
    3e2a:	55 1f       	adc	r21, r21
    3e2c:	0a 94       	dec	r0
    3e2e:	e2 f7       	brpl	.-8      	; 0x3e28 <main+0x3098>
    3e30:	46 2b       	or	r20, r22
    3e32:	4c 93       	st	X, r20
    3e34:	0c 94 5d 17 	jmp	0x2eba	; 0x2eba <main+0x212a>
    3e38:	59 9a       	sbi	0x0b, 1	; 11
    3e3a:	16 c9       	rjmp	.-3540   	; 0x3068 <main+0x22d8>
    3e3c:	59 9a       	sbi	0x0b, 1	; 11
    3e3e:	08 c9       	rjmp	.-3568   	; 0x3050 <main+0x22c0>
    3e40:	59 9a       	sbi	0x0b, 1	; 11
    3e42:	fa c8       	rjmp	.-3596   	; 0x3038 <main+0x22a8>
    3e44:	59 9a       	sbi	0x0b, 1	; 11
    3e46:	ec c8       	rjmp	.-3624   	; 0x3020 <main+0x2290>
    3e48:	59 9a       	sbi	0x0b, 1	; 11
    3e4a:	de c8       	rjmp	.-3652   	; 0x3008 <main+0x2278>
    3e4c:	59 9a       	sbi	0x0b, 1	; 11
    3e4e:	d0 c8       	rjmp	.-3680   	; 0x2ff0 <main+0x2260>
    3e50:	59 9a       	sbi	0x0b, 1	; 11
    3e52:	c2 c8       	rjmp	.-3708   	; 0x2fd8 <main+0x2248>
    3e54:	59 9a       	sbi	0x0b, 1	; 11
    3e56:	b4 c8       	rjmp	.-3736   	; 0x2fc0 <main+0x2230>
    3e58:	5d 9a       	sbi	0x0b, 5	; 11
    3e5a:	a7 c8       	rjmp	.-3762   	; 0x2faa <main+0x221a>
    3e5c:	b7 e0       	ldi	r27, 0x07	; 7
    3e5e:	eb 9f       	mul	r30, r27
    3e60:	f0 01       	movw	r30, r0
    3e62:	11 24       	eor	r1, r1
    3e64:	e4 5b       	subi	r30, 0xB4	; 180
    3e66:	fe 4f       	sbci	r31, 0xFE	; 254
    3e68:	a2 81       	ldd	r26, Z+2	; 0x02
    3e6a:	b3 81       	ldd	r27, Z+3	; 0x03
    3e6c:	6c 91       	ld	r22, X
    3e6e:	21 e0       	ldi	r18, 0x01	; 1
    3e70:	30 e0       	ldi	r19, 0x00	; 0
    3e72:	06 80       	ldd	r0, Z+6	; 0x06
    3e74:	02 c0       	rjmp	.+4      	; 0x3e7a <main+0x30ea>
    3e76:	22 0f       	add	r18, r18
    3e78:	33 1f       	adc	r19, r19
    3e7a:	0a 94       	dec	r0
    3e7c:	e2 f7       	brpl	.-8      	; 0x3e76 <main+0x30e6>
    3e7e:	26 2b       	or	r18, r22
    3e80:	2c 93       	st	X, r18
    3e82:	24 c9       	rjmp	.-3512   	; 0x30cc <main+0x233c>
    3e84:	59 9a       	sbi	0x0b, 1	; 11
    3e86:	4a ca       	rjmp	.-2924   	; 0x331c <main+0x258c>
    3e88:	59 9a       	sbi	0x0b, 1	; 11
    3e8a:	3c ca       	rjmp	.-2952   	; 0x3304 <main+0x2574>
    3e8c:	59 9a       	sbi	0x0b, 1	; 11
    3e8e:	2e ca       	rjmp	.-2980   	; 0x32ec <main+0x255c>
    3e90:	59 9a       	sbi	0x0b, 1	; 11
    3e92:	20 ca       	rjmp	.-3008   	; 0x32d4 <main+0x2544>
    3e94:	59 9a       	sbi	0x0b, 1	; 11
    3e96:	12 ca       	rjmp	.-3036   	; 0x32bc <main+0x252c>
    3e98:	59 9a       	sbi	0x0b, 1	; 11
    3e9a:	04 ca       	rjmp	.-3064   	; 0x32a4 <main+0x2514>
    3e9c:	59 9a       	sbi	0x0b, 1	; 11
    3e9e:	f6 c9       	rjmp	.-3092   	; 0x328c <main+0x24fc>
    3ea0:	59 9a       	sbi	0x0b, 1	; 11
    3ea2:	e8 c9       	rjmp	.-3120   	; 0x3274 <main+0x24e4>
    3ea4:	5d 9a       	sbi	0x0b, 5	; 11
    3ea6:	db c9       	rjmp	.-3146   	; 0x325e <main+0x24ce>
    3ea8:	b7 e0       	ldi	r27, 0x07	; 7
    3eaa:	eb 9f       	mul	r30, r27
    3eac:	f0 01       	movw	r30, r0
    3eae:	11 24       	eor	r1, r1
    3eb0:	e4 5b       	subi	r30, 0xB4	; 180
    3eb2:	fe 4f       	sbci	r31, 0xFE	; 254
    3eb4:	a2 81       	ldd	r26, Z+2	; 0x02
    3eb6:	b3 81       	ldd	r27, Z+3	; 0x03
    3eb8:	6c 91       	ld	r22, X
    3eba:	21 e0       	ldi	r18, 0x01	; 1
    3ebc:	30 e0       	ldi	r19, 0x00	; 0
    3ebe:	06 80       	ldd	r0, Z+6	; 0x06
    3ec0:	02 c0       	rjmp	.+4      	; 0x3ec6 <main+0x3136>
    3ec2:	22 0f       	add	r18, r18
    3ec4:	33 1f       	adc	r19, r19
    3ec6:	0a 94       	dec	r0
    3ec8:	e2 f7       	brpl	.-8      	; 0x3ec2 <main+0x3132>
    3eca:	26 2b       	or	r18, r22
    3ecc:	2c 93       	st	X, r18
    3ece:	5a ca       	rjmp	.-2892   	; 0x3384 <main+0x25f4>
    3ed0:	59 9a       	sbi	0x0b, 1	; 11
    3ed2:	76 cb       	rjmp	.-2324   	; 0x35c0 <main+0x2830>
    3ed4:	59 9a       	sbi	0x0b, 1	; 11
    3ed6:	68 cb       	rjmp	.-2352   	; 0x35a8 <main+0x2818>
    3ed8:	59 9a       	sbi	0x0b, 1	; 11
    3eda:	5a cb       	rjmp	.-2380   	; 0x3590 <main+0x2800>
    3edc:	59 9a       	sbi	0x0b, 1	; 11
    3ede:	4c cb       	rjmp	.-2408   	; 0x3578 <main+0x27e8>
    3ee0:	59 9a       	sbi	0x0b, 1	; 11
    3ee2:	3e cb       	rjmp	.-2436   	; 0x3560 <main+0x27d0>
    3ee4:	59 9a       	sbi	0x0b, 1	; 11
    3ee6:	30 cb       	rjmp	.-2464   	; 0x3548 <main+0x27b8>
    3ee8:	59 9a       	sbi	0x0b, 1	; 11
    3eea:	22 cb       	rjmp	.-2492   	; 0x3530 <main+0x27a0>
    3eec:	59 9a       	sbi	0x0b, 1	; 11
    3eee:	14 cb       	rjmp	.-2520   	; 0x3518 <main+0x2788>
    3ef0:	5d 9a       	sbi	0x0b, 5	; 11
    3ef2:	07 cb       	rjmp	.-2546   	; 0x3502 <main+0x2772>
    3ef4:	b7 e0       	ldi	r27, 0x07	; 7
    3ef6:	eb 9f       	mul	r30, r27
    3ef8:	f0 01       	movw	r30, r0
    3efa:	11 24       	eor	r1, r1
    3efc:	e4 5b       	subi	r30, 0xB4	; 180
    3efe:	fe 4f       	sbci	r31, 0xFE	; 254
    3f00:	a2 81       	ldd	r26, Z+2	; 0x02
    3f02:	b3 81       	ldd	r27, Z+3	; 0x03
    3f04:	6c 91       	ld	r22, X
    3f06:	21 e0       	ldi	r18, 0x01	; 1
    3f08:	30 e0       	ldi	r19, 0x00	; 0
    3f0a:	06 80       	ldd	r0, Z+6	; 0x06
    3f0c:	02 c0       	rjmp	.+4      	; 0x3f12 <main+0x3182>
    3f0e:	22 0f       	add	r18, r18
    3f10:	33 1f       	adc	r19, r19
    3f12:	0a 94       	dec	r0
    3f14:	e2 f7       	brpl	.-8      	; 0x3f0e <main+0x317e>
    3f16:	26 2b       	or	r18, r22
    3f18:	2c 93       	st	X, r18
    3f1a:	86 cb       	rjmp	.-2292   	; 0x3628 <main+0x2898>
    3f1c:	59 9a       	sbi	0x0b, 1	; 11
    3f1e:	c4 cc       	rjmp	.-1656   	; 0x38a8 <main+0x2b18>
    3f20:	59 9a       	sbi	0x0b, 1	; 11
    3f22:	b6 cc       	rjmp	.-1684   	; 0x3890 <main+0x2b00>
    3f24:	59 9a       	sbi	0x0b, 1	; 11
    3f26:	a8 cc       	rjmp	.-1712   	; 0x3878 <main+0x2ae8>
    3f28:	59 9a       	sbi	0x0b, 1	; 11
    3f2a:	9a cc       	rjmp	.-1740   	; 0x3860 <main+0x2ad0>
    3f2c:	59 9a       	sbi	0x0b, 1	; 11
    3f2e:	8c cc       	rjmp	.-1768   	; 0x3848 <main+0x2ab8>
    3f30:	59 9a       	sbi	0x0b, 1	; 11
    3f32:	7e cc       	rjmp	.-1796   	; 0x3830 <main+0x2aa0>
    3f34:	59 9a       	sbi	0x0b, 1	; 11
    3f36:	70 cc       	rjmp	.-1824   	; 0x3818 <main+0x2a88>
    3f38:	59 9a       	sbi	0x0b, 1	; 11
    3f3a:	62 cc       	rjmp	.-1852   	; 0x3800 <main+0x2a70>
    3f3c:	5d 9a       	sbi	0x0b, 5	; 11
    3f3e:	55 cc       	rjmp	.-1878   	; 0x37ea <main+0x2a5a>
    3f40:	b7 e0       	ldi	r27, 0x07	; 7
    3f42:	eb 9f       	mul	r30, r27
    3f44:	f0 01       	movw	r30, r0
    3f46:	11 24       	eor	r1, r1
    3f48:	e4 5b       	subi	r30, 0xB4	; 180
    3f4a:	fe 4f       	sbci	r31, 0xFE	; 254
    3f4c:	a2 81       	ldd	r26, Z+2	; 0x02
    3f4e:	b3 81       	ldd	r27, Z+3	; 0x03
    3f50:	6c 91       	ld	r22, X
    3f52:	41 e0       	ldi	r20, 0x01	; 1
    3f54:	50 e0       	ldi	r21, 0x00	; 0
    3f56:	06 80       	ldd	r0, Z+6	; 0x06
    3f58:	02 c0       	rjmp	.+4      	; 0x3f5e <main+0x31ce>
    3f5a:	44 0f       	add	r20, r20
    3f5c:	55 1f       	adc	r21, r21
    3f5e:	0a 94       	dec	r0
    3f60:	e2 f7       	brpl	.-8      	; 0x3f5a <main+0x31ca>
    3f62:	46 2b       	or	r20, r22
    3f64:	4c 93       	st	X, r20
    3f66:	d0 cc       	rjmp	.-1632   	; 0x3908 <main+0x2b78>

00003f68 <_exit>:
    3f68:	f8 94       	cli

00003f6a <__stop_program>:
    3f6a:	ff cf       	rjmp	.-2      	; 0x3f6a <__stop_program>
